<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MinIO简介以及Linux安装MinIO</title>
    <url>/linux-minio/</url>
    <content><![CDATA[<h2 id="1-什么是对象存储"><a class="markdownIt-Anchor" href="#1-什么是对象存储"></a> 1. 什么是对象存储</h2>
<p>对象存储服务OSS（Object Storage Service）是一种海量、安全、低成本、高可用的云存储服务，<strong>适合存放任意类型的文件</strong>。容量和处理能力弹性扩展，多种存储类型提供选择，全面优化存储成本。</p>
<p>最大的优势：可以存储大量的非结构话数据，例如：图片、视频、日志文件、备份数据和容器/虚拟机镜像等。</p>
<h2 id="2-minio"><a class="markdownIt-Anchor" href="#2-minio"></a> 2. MinIO</h2>
<p>MinIO 是个基于Golang编写的开源对象存储套件，基于Apache License V2.0开源协议，虽然轻量，却拥有不错的性能，兼容亚马逊S3云存储服务接口。可以很简单的和其他应用结合使用，例如：NodeJS、Redis、mysql等</p>
<p>中文文档： <a href="http://docs.minio.org.cn/docs/master/minio-monitoring-guide">http://docs.minio.org.cn/docs/master/minio-monitoring-guide</a></p>
<h3 id="21-minio应用场景"><a class="markdownIt-Anchor" href="#21-minio应用场景"></a> 2.1 MinIO应用场景</h3>
<p>可以作为私有云的对象存储服务来使用，也可以作为云对象存储的网关层，无缝对接Amazon S3 或者 MicroSoft Azure 。<br>
<img src="/linux-minio/1.png" alt="应用场景"></p>
<h3 id="22-minio特点"><a class="markdownIt-Anchor" href="#22-minio特点"></a> 2.2 MinIO特点</h3>
<ul>
<li>
<p>高性能</p>
<p>作为一款高性能存储，在标准硬件条件下，其读写速率分别可以达到55Gb/s和 35Gb/s。并且MinIO支持一个对象文件是任意大小（几KB到最大5T不等）</p>
</li>
<li>
<p>可扩展</p>
<p>不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并且支持跨越多个数据中心</p>
</li>
<li>
<p>云原生</p>
<p>容器化、基于K8S的编排、多租户支持</p>
</li>
<li>
<p>Amazon S3兼容</p>
<p>使用Amazon S3 V2/V4 API。可以使用Minio SDK，Minio Client，AWS SDK 和 AWS CLI 访问Minio服务器。</p>
</li>
<li>
<p>可对接多种后端存储</p>
<p>除了Minio自己的文件系统，还支持 DAS、 JBODs、NAS、Google云存储和 Azure Blob存储。</p>
</li>
<li>
<p>SDK支持</p>
<p>GO SDK： <a href="https://github.com/minio/minio-go">https://github.com/minio/minio-go</a></p>
<p>JavaSDK： <a href="https://github.com/minio/minio-java">https://github.com/minio/minio-java</a></p>
<p>PythonSDK： <a href="https://github.com/minio/minio-py">https://github.com/minio/minio-py</a></p>
</li>
<li>
<p>Lambda计算</p>
<p>Minio服务器通过其兼容AWS SNS / SQS的事件通知服务触发Lambda功能。支持的目标是消息队列，如Kafka，NATS，AMQP，MQTT，Webhooks以及Elasticsearch，Redis，Postgres和MySQL等数据库</p>
</li>
<li>
<p>图形化界面</p>
<p>有操作页面</p>
</li>
<li>
<p>功能简单</p>
<p>不容易出错，快速启动</p>
</li>
<li>
<p>支持纠删码</p>
<p>MinIO使用纠删码、Checksum来防止硬件错误和静默数据污染。在最高冗余度配置下，即使丢失1/2的磁盘也能恢复数据</p>
</li>
</ul>
<h3 id="23-存储机制"><a class="markdownIt-Anchor" href="#23-存储机制"></a> 2.3 存储机制</h3>
<p>MinIO 使用纠删码erasure code、校验和checksum。 即使丢一半数据（N/2）的鹰派，仍然可以恢复数据。</p>
<ul>
<li>
<p>校验和checksum</p>
<p>保护数据免受硬件故障和无声数据损坏</p>
</li>
<li>
<p>纠删码erasure code</p>
<p>纠删码是一种恢复丢失和损坏数据的数据算法，目前纠删码技术在分布式存储系统中的应用主要有三类：阵列纠删码（Array Code : RAID5、RAID6等）、RS（Reed-Solomon）里德-所罗门类纠删码和LDPC（LowDensity Parity Check Code）<br>
低密度奇偶校验纠删码。</p>
<p>Erasure code 是一种编码技术，他可以将N份原始数据，增加m份数据，并通过n+m 份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。<br>
MinIO 采用Reed-Solomon code将对象拆分成N/2数据和N/2奇偶校验快，这就意味着如果是12块盘，一个对象会分成6个数据块、6个奇偶校验块；可以丢失任意6块盘（不管是存放的数据块还是奇偶校验块），仍可以通过剩下的盘进行数据恢复</p>
</li>
</ul>
<h2 id="3-安装和使用minio"><a class="markdownIt-Anchor" href="#3-安装和使用minio"></a> 3. 安装和使用MinIO</h2>
<h3 id="31-linux安装minio"><a class="markdownIt-Anchor" href="#31-linux安装minio"></a> 3.1 Linux安装MinIO</h3>
<ol>
<li>
<p>下载（<a href="https://min.io/download#/linux%EF%BC%89">https://min.io/download#/linux）</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>运行</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> chmod +x minio</span><br><span class="line"> ./minio server /usr/software/minio/data      #将/usr/software/minio/data 替换为您希望 MinIO 存储数据的驱动器或目录的路径。</span><br><span class="line"><span class="meta">#</span><span class="bash">或者指定账号密码启动</span></span><br><span class="line">MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"> #</span><span class="bash">后台启动</span></span><br><span class="line">nohup ./minio server /usr/software/minio/data  &gt;  /usr/software/minio/minio.log 2&gt;&amp;1 &amp;#</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">或者指定账号密码启动</span></span><br><span class="line">MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin nohup ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data&gt;  /usr/software/minio/minio.log 2&gt;&amp;1 &amp;#</span><br></pre></td></tr></table></figure>
<p><img src="/linux-minio/8.png" alt></p>
</li>
<li>
<p>设置启动脚本（建议）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch minio.sh</span><br><span class="line">   </span><br><span class="line">vi minio.sh</span><br></pre></td></tr></table></figure>
<p>在sh文件中添加以下内容</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">指定登录用户名</span></span><br><span class="line">export MINIO_ACCESS_KEY=username</span><br><span class="line"><span class="meta">#</span><span class="bash">指定登录密码</span></span><br><span class="line">export MINIO_SECRET_KEY=password</span><br><span class="line"><span class="meta">#</span><span class="bash">指定端口以及存储文件夹，并启动服务 9000访问端口， 9001 控制台界面访问端口, 这里0.0.0.0可以设置为具体的服务器IP</span></span><br><span class="line">nohup ./minio server --address &#x27;0.0.0.0:9000&#x27; --console-address &#x27;0.0.0.0:9001&#x27; ./miniodata &gt; ./miniodata/minio.log 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure>
<p>给当前用户加上执行权限</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u+x  *.sh</span><br><span class="line">  </span><br><span class="line"><span class="meta"> #</span><span class="bash">启动</span></span><br><span class="line">sh minio.sh</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="32-安装客户端可选"><a class="markdownIt-Anchor" href="#32-安装客户端可选"></a> 3.2 安装客户端(可选)</h3>
<ol>
<li>
<p>安装</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dl.min.io/client/mc/release/linux-amd64/mc</span><br><span class="line">chmod +x mc</span><br><span class="line">./mc --help</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用命令给客户端添加一个服务端</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mc alias set minio http://172.21.0.7:9000 minioadmin minioadmin</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>创建bucket，并查询所有bucket</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ww xiaoyuge]# ./mc ls minio</span><br><span class="line">[root@ww xiaoyuge]# ./mc mb minio/mybucket</span><br><span class="line">Bucket created successfully `minio/mybucket`</span><br><span class="line">[root@ww xiaoyuge]# ./mc ls minio</span><br><span class="line">[2020-09-02 03:02:36 CST]      0B mybucket/</span><br><span class="line">[root@ww xiaoyuge]# </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>页面查询bucket</p>
<p><img src="/linux-minio/6.png" alt></p>
</li>
<li>
<p>创建用户</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mc admin user add minio root rootroot</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>给用户赋予权限</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mc admin policy set minio readwrite user=root</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="33-使用minio"><a class="markdownIt-Anchor" href="#33-使用minio"></a> 3.3 使用MinIO</h3>
<ol>
<li>
<p>启动</p>
<p>在浏览器输入： <a href="http://localhost:9000">http://localhost:9000</a><br>
<img src="/linux-minio/2.png" alt><br>
在输入控制打印的默认的AccessKey和SecretKey：</p>
<p><strong>AccessKey:</strong> minioadmin</p>
<p><strong>SecretKey（默认）:</strong> minioadmin</p>
<p>使用AccessKey 和 SecretKey 登录后台。</p>
</li>
<li>
<p>进入系统后，我们先要点击右上角的“+”按钮，创建一个文件桶（输入名称后，回车即可），在上传文件到这个文件桶中。Create bucket（创建文件桶），然后输入bucket名称为 <strong>test</strong>, 创建成功后再Upload file（上传文件）。<br>
<img src="/linux-minio/3.png" alt><img src="/linux-minio/3_1.png" alt><img src="/linux-minio/3_2.png" alt><img src="/linux-minio/4.png" alt></p>
<p>现在我们去服务器，我们启动时指定的目录去看看，可以看到一个新建的test文件目录（文件桶相当于文件目录），这里没有使用纠删码的模式，所以直接就是源文件了。当我们线上运行的项目已经有源文件了，在使用minio的时候，可以直接指定该目录为minio的文件目录就行了。<br>
<img src="/linux-minio/5.png" alt><img src="/linux-minio/7.png" alt></p>
</li>
<li>
<p>分享文件，也可以设置文件分享有效日期<br>
<img src="/linux-minio/11.png" alt><img src="/linux-minio/12.png" alt="img_1.png"><br>
访问连接会出现如下界面：<br>
<img src="/linux-minio/13.png" alt="img_1.png"></p>
</li>
</ol>
<h3 id="34-mioio常见启动问题"><a class="markdownIt-Anchor" href="#34-mioio常见启动问题"></a> 3.4 mioIO常见启动问题</h3>
<ol>
<li>启动报错“WARNING: Console endpoint is listening on a dynamic port…”<br>
<img src="/linux-minio/9.png" alt="img_1.png"><br>
错误提示很明显，需要to choose a static port。<br>
写了一个shell启动MinIO，在shell中使用–console-address ‘部署minio的ip:希望通过什么端口打开minio console页面’ <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> export MINIO_ACCESS_KEY=username</span><br><span class="line"><span class="meta">#</span><span class="bash">指定登录密码</span></span><br><span class="line"> export MINIO_SECRET_KEY=password</span><br><span class="line"> nohup ./minio server --address &#x27;0.0.0.0:9000&#x27; --console-address &#x27;0.0.0.0:9001&#x27; ./miniodata &gt; ./miniodata/minio.log 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="4-springboot-集成minio"><a class="markdownIt-Anchor" href="#4-springboot-集成minio"></a> 4. SpringBoot 集成minIO</h2>
<p>项目源代码地址：<a href="https://gitee.com/xiaoyuge520/minio-demo%EF%BC%8C">https://gitee.com/xiaoyuge520/minio-demo，</a> 下面是应用主要功能截图展示：<br>
<img src="/linux-minio/14.png" alt="img14.png"><br>
在minIO的控制台界面选择对应的bucket可以查看到刚提交的内容<br>
<img src="/linux-minio/15.png" alt="img14.png"></p>
<p>同理，删除也是一样！！！<br>
<img src="/linux-minio/16.png" alt="img14.png"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统下查找文件命令总结</title>
    <url>/linux-search-file/</url>
    <content><![CDATA[<h3 id="1-which查命令绝对路径"><a class="markdownIt-Anchor" href="#1-which查命令绝对路径"></a> 1. which查命令绝对路径</h3>
<p><strong>which</strong> 从环境变量PATH中定位/返回与指定名字相匹配的可执行文件所在的路径<br>
<img src="/linux-search-file/1.png" alt="which命令"></p>
<p><strong>原理</strong>：执行<strong>which</strong>命令时，which会在当前环境变量PATH中依次寻找能够匹配所找命令名字的可执行文件名，不加 - a选项，返回第一个匹配的可执行文件路径，<br>
否则依次返回满足条件的所有可执行文件的路径名</p>
<p><strong>适用场合：</strong> 一般用于查找命令/可执行文件所在的路径。有时候可能在多个路径下存在相同的命令，该命令可用于查找当前所执行的命令到底是哪一个位置处的命令。</p>
<h3 id="2-whereis查找特定文件"><a class="markdownIt-Anchor" href="#2-whereis查找特定文件"></a> 2. whereis查找特定文件</h3>
<p><strong>whereis</strong> 命令用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径， 该命令只能用于程序名的搜索</p>
<ol>
<li>- b   #定位可执行文件</li>
<li>- m   #定位帮助文件</li>
<li>- s   定位源代码文件</li>
<li>- u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件</li>
<li>- B   指定搜索可执行文件的路径。</li>
<li>- M   指定搜索帮助文件的路径。</li>
<li>- S   指定搜索源代码文件的路径<br>
<img src="/linux-search-file/2.png" alt="whereis命令"></li>
</ol>
<p><strong>原理：</strong> whereis命令首先会去掉filename中的前缀空格和以.开头的任何字符，然后再在数据库（var/lib/slocate/slocate.db）中查找与上述处理后的filename相匹配的二进制文件、源文件和帮助手册文件,使用之前可以使用<strong>updatedb</strong>命令手动更新数据库。</p>
<p><strong>适用场合：</strong> 二进制文件、源文件和帮助手册文件路径的查找。<br>
和<strong>find</strong> 相比，Whereis 查找的速度非常快，这是因为Linux系统会将系统内的所有文件都记录在一个数据库文件中，当使用<strong>whereis (或者locate)</strong><br>
会从数据库查找数据，而不是像find命令那样，通过遍历硬盘来查找文件，效率更高！</p>
<h3 id="3-locate缓存查找文件"><a class="markdownIt-Anchor" href="#3-locate缓存查找文件"></a> 3. locate缓存查找文件</h3>
<p><strong>locate</strong> 搜素一个数据库（/var/lib/mlocate/mlocate.db）,这个数据库中国呢包含本地所有文件信息，Linux系统自动创建这个数据库，并且每天更新依次，所以使用locate命令查不到最新变动过的文件，为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库，updatedb命令会根据/etc/updatedb.conf来更新文件。</p>
<p><strong>原理：</strong> 默认情况下(当filename中不包含通配符*)，locate会给出所有与 * filename*相匹配的文件的路径。<br>
<strong>适用场合：</strong> 没有文件类型性质的模糊查找（你只记得某个文件的部分名称）。<br>
<img src="/linux-search-file/3.png" alt="locate命令"><br>
<img src="/linux-search-file/4.png" alt="locate命令"><br>
<img src="/linux-search-file/5.png" alt="locate命令"><br>
<img src="/linux-search-file/6.png" alt="locate命令"></p>
<h3 id="4-find-遍历文件查找"><a class="markdownIt-Anchor" href="#4-find-遍历文件查找"></a> 4. find 遍历文件查找</h3>
<p>语法：</p>
<ul>
<li>
<p>-name                    #按文件名查找(find /etc/ -name “???” 查找/etc目录下，开头是6个任意字符的文件， *.log以log结尾的文件；&quot;[1-3].txt&quot;指定范围以txt结尾的文件（包括 1.txt,2.txt,3.txt）)</p>
</li>
<li>
<p>-size                    #按大小查找（find /etc/ -size +1M 查询大于1M的文件(find /etc/ -size -10K)，注意：如果没有+ -， 则是精确到1M,加上+ - 表示范围； find /etc/ -size +1k -a -size -10k 查找1-10K的文件）</p>
</li>
<li>
<p>-user                    #按属主查找（find /opt/ -user xiaoyuge 查找/opt属于xiaoyuge用户的文件；注意，系统要存在该用户，否则会报错）</p>
</li>
<li>
<p>-perm                    #按权限查找（find /opt/ -perm 0644 查找/opt目录权限是644文件）</p>
</li>
<li>
<p>-type                    #按类型查找（find /usr/bin/ -type f 查找/usr/bin下类型是二进制文件）</p>
</li>
<li>
<p>-time                    #按天查找</p>
<ul>
<li>
<p>atime n                    #将n*24小时内访问过的文件列出(access)</p>
</li>
<li>
<p>ctime n                    #将n*24小时内状态发生改变的文件列出（change） find /etc/ -ctime +7 在7天之前,属性被修改过的文件</p>
</li>
<li>
<p>mtime n                    #将n*24小时内被修改过的文件列出(modify)</p>
</li>
<li>
<p>newer file                 #把比file还要心的文件列出</p>
</li>
<li>
<p>amin n                     #将n 分钟内访问过的文件列出(access)   find /etc/ -mmin -120 在120分钟内，内容被修改的文件</p>
</li>
<li>
<p>cmin n                     #将n 分钟内状态发生改变的文件列出（change）</p>
</li>
<li>
<p>mmin n                     #将n 分钟内被修改过的文件列出(modify)</p>
</li>
</ul>
</li>
<li>
<p>-inum                    #按i节点查找 有一些文件的硬链接数量很多，有相同的i节点，查找其中一个文件的i节点号，一次性删除。</p>
</li>
<li>
<p>-exec                    #查找后执行命令</p>
</li>
</ul>
<p><strong>原理：</strong> 遍历当前工作目录及其子目录，find命令是在硬盘上遍历查找，非常耗硬盘资源，查找效率相比whereis和locate较低。<br>
<strong>适用场合：</strong> 能用which、whereis和locate的时候尽量不要用find.</p>
<h3 id="5-4种命令对比"><a class="markdownIt-Anchor" href="#5-4种命令对比"></a> 5. 4种命令对比</h3>
<p><img src="/linux-search-file/7.png" alt="对比"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式消息中间件设计</title>
    <url>/message-oriented-middleware/</url>
    <content><![CDATA[<h2 id="1-消息中间件概述"><a class="markdownIt-Anchor" href="#1-消息中间件概述"></a> 1. 消息中间件概述</h2>
<ol>
<li>
<p>什么是分布式消息中间件</p>
<p>利用高效可靠的消息传递机制进行平台无关的数据交流；<br>
并基于数据通信来进行分布式系统的集成；<br>
通过提供消息和消息排队模型，它可以在分布式环境下扩展进城间的通信。</p>
</li>
<li>
<p>消息中间件的应用场景</p>
<p>跨系统数据传递、高并发流量削峰、数据异步处理…</p>
</li>
<li>
<p>常用的消息中间件</p>
<p>ActiveMQ(太老)、RabbitMQ、Kafka、 RocketMQ</p>
</li>
<li>
<p>本质</p>
<p>一种具备接受请求、保存数据、发送数据等功能的网络应用。和一般的网络应用程序的区别是它主要负责数据的接收和传递，所以性能一般高于普通程序</p>
</li>
<li>
<p>5大核心组成</p>
<ul>
<li>协议</li>
<li>持久性机制</li>
<li>消息分布机制</li>
<li>高可用设计</li>
<li>高可靠设计</li>
</ul>
</li>
</ol>
<h3 id="11-协议"><a class="markdownIt-Anchor" href="#11-协议"></a> 1.1 协议</h3>
<p>协议是计算机之间通信时共同遵守的一组约定，确保计算机之间能够相互交流；是对数据格式和计算机之间交换数据时必须遵守的规则的正式描述</p>
<p>三大要素：</p>
<ul>
<li>语法：即数据和控制信息的结构或格式</li>
<li>语义：即需要发出何种控制信息，完成何种动作以及作出何种响应</li>
<li>时序：即时间实现顺序的详细说明</li>
</ul>
<p>消息中间件常用协议：openWire、AMQP、MQTT（物流网，快，不能持久化）、Kafka、OpenMessage等；<br>
不能用http协议的原因是：http每次请求必须要有响应，性能不高；</p>
<h4 id="11-amqp协议"><a class="markdownIt-Anchor" href="#11-amqp协议"></a> 1.1 AMQP协议</h4>
<p>AMQP（Advanced Message Queuing Protocol）是高级消息队列协议；04年JPMorgan Chase(摩根大通集团)联合其他公司共同设计</p>
<ul>
<li>特性：事物支持、持久化支持，出生金融行业，在可靠性消息处理上具备天然的优势</li>
<li>优秀产品 RabbitMQ、 Apache ACTIVEMQ</li>
</ul>
<h4 id="12-mqtt协议"><a class="markdownIt-Anchor" href="#12-mqtt协议"></a> 1.2 MQTT协议</h4>
<p>MQTT（Message Queuing Telemetry Transport）消息队列遥测传输<br>
是IBM开发的一个即时通讯协议，物联网系统架构中的重要组成部分；</p>
<ul>
<li>特性：轻量、结构简单、传输快、没有事务支持、没有持久化相关设计</li>
<li>应用场景：适用于计算能力有限、低宽带、网络不稳定的场景</li>
<li>优秀产品：RabbitMQ、 Apache ACTIVEMQ</li>
</ul>
<h4 id="13-open-message协议"><a class="markdownIt-Anchor" href="#13-open-message协议"></a> 1.3 Open Message协议</h4>
<p>OpenMessaging 是近几年有阿里发起，与雅虎、滴滴出行、Streamlio等公司共同参数传里的分布式消息中间件、流处理领域的开发应用标准。<br>
是国内首个在全球范围内发起的分布式消息领域国际标准</p>
<ul>
<li>特性：结构简单、解析快、有事务设计、有持久化设计</li>
<li>优秀产品：Apache RocketMQ</li>
</ul>
<h4 id="14-kafka协议"><a class="markdownIt-Anchor" href="#14-kafka协议"></a> 1.4 Kafka协议</h4>
<p>Kafka协议是基于TCP的二进制协议。消息内部是通过长度来分割，由一些基本数据类型组成</p>
<ul>
<li>特性：结构简单、解析快、无事务设计、有持久化设计</li>
<li>优秀产品：Apache Kafka</li>
</ul>
<h4 id="155-openwire协议"><a class="markdownIt-Anchor" href="#155-openwire协议"></a> 1.55 OpenWire协议</h4>
<p>开放链接，ActiveMQ自定义的一种协议，ActiveMQ默认链接方式，它提供一种高效率的二进制格式来使消息高速传输</p>
<ul>
<li>特性：结构简单、解析快、无事务设计、有持久化设计</li>
<li>优秀产品：Apache ActiveMQ</li>
</ul>
<h3 id="12-持久化"><a class="markdownIt-Anchor" href="#12-持久化"></a> 1.2 持久化</h3>
<p>简单来说就是将数据存入磁盘，而不是存在内存中岁服务重启而消失，使数据能够永久保存叫做持久化</p>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">ActiveMQ</th>
<th style="text-align:center">RabbitMQ</th>
<th style="text-align:center">Kafka</th>
<th style="text-align:center">RocketMQ</th>
</tr>
</thead>
<tbody>
<tr>
<td>文件系统</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td>数据库</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
<td style="text-align:center">-</td>
</tr>
</tbody>
</table>
<h3 id="13-消息分发"><a class="markdownIt-Anchor" href="#13-消息分发"></a> 1.3 消息分发</h3>
<table>
<thead>
<tr>
<th></th>
<th style="text-align:center">ActiveMQ</th>
<th style="text-align:center">RabbitMQ</th>
<th style="text-align:center">Kafka</th>
<th style="text-align:center">RocketMQ</th>
</tr>
</thead>
<tbody>
<tr>
<td>发布订阅</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td>轮询分发</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td>公平分发</td>
<td style="text-align:center">-</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">-</td>
</tr>
<tr>
<td>重发</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">-</td>
<td style="text-align:center">支持</td>
</tr>
<tr>
<td>消息拉取</td>
<td style="text-align:center">-</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
<td style="text-align:center">支持</td>
</tr>
</tbody>
</table>
<h3 id="14-高可用"><a class="markdownIt-Anchor" href="#14-高可用"></a> 1.4 高可用</h3>
<p>高可用性是指产品在规定的条件和规定的时刻或时间区间内处于可执行规定功能状态的能力；<br>
当业务量大时，一台消息中间件服务器可能无法满足需求，所以需要消息中间件能够集群部署，来达到高可用的目的。</p>
<h4 id="141-master-slave主从共享数据的部署方式"><a class="markdownIt-Anchor" href="#141-master-slave主从共享数据的部署方式"></a> 1.4.1 Master-Slave主从共享数据的部署方式</h4>
<p>当Master收到客户端的消息后，放到共享的文件系统/数据库； 客户端访问的是Master节点，Slave节点只做备份；<br>
<img src="/message-oriented-middleware/2.png" alt="Master-Slave主从共享数据的部署方式"></p>
<h4 id="142-master-slave主从同步部署方式"><a class="markdownIt-Anchor" href="#142-master-slave主从同步部署方式"></a> 1.4.2 Master-Slave主从同步部署方式</h4>
<p>当Master收到客户端的消息后，发给其他broker同步。<br>
<img src="/message-oriented-middleware/3.png" alt="Master-Slave主从同步部署方式"></p>
<h4 id="143-broker-cluster多主集群同步部署方式"><a class="markdownIt-Anchor" href="#143-broker-cluster多主集群同步部署方式"></a> 1.4.3 Broker-Cluster多主集群同步部署方式</h4>
<p>一部分消息放在broker1 ,一部分放在broker2<br>
<img src="/message-oriented-middleware/4.png" alt="Broker-Cluster多主集群同步部署方式"></p>
<h4 id="144-broker-cluster多主集群转发部署方式"><a class="markdownIt-Anchor" href="#144-broker-cluster多主集群转发部署方式"></a> 1.4.4 Broker-Cluster多主集群转发部署方式</h4>
<p>转发数据或转发请求<br>
<img src="/message-oriented-middleware/5.png" alt="Broker-Cluster多主集群转发部署方式"></p>
<h4 id="145-master-slave与broker-cluster结合"><a class="markdownIt-Anchor" href="#145-master-slave与broker-cluster结合"></a> 1.4.5 Master-slave与Broker-Cluster结合</h4>
<p><img src="/message-oriented-middleware/6.png" alt="Master-slave与Broker-Cluster结合"></p>
<h3 id="15-高可靠"><a class="markdownIt-Anchor" href="#15-高可靠"></a> 1.5 高可靠</h3>
<p>高可靠性是指系统可以无故障地持续运行。比如一个系统从来不崩溃、报错，或者崩溃、报错的几率较低，那就是高可靠。<br>
保证消息中间件的高可靠行，可以从一下几方面考虑</p>
<ul>
<li>消息传输可靠： 通过协议来保证系统件数据解析的正确性</li>
<li>消息存储可靠： 通过持久化来保证消息存储可靠性</li>
</ul>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>消息中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Springboot导出数据库表结构文档</title>
    <url>/export-database-file/</url>
    <content><![CDATA[<p>在项目中经常会需要查询数据库所有的表以及表字段，然后可能还需要导出到Excel中，然后自己写了一个工具类，目前支持sqlserver、mysql、oracle、Postgre；如果有问题请留言！！！</p>
<h3 id="1-引入依赖包"><a class="markdownIt-Anchor" href="#1-引入依赖包"></a> 1. 引入依赖包</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 请尽量用最新版本 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoyuge5201<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-编写java代码"><a class="markdownIt-Anchor" href="#2-编写java代码"></a> 2. 编写Java代码</h3>
<ol>
<li>通过MyDataSourceProperties类所有本项目的数据库连接信息，导出当前连接库的数据库结构</li>
</ol>
<ul>
<li>
<p>数据库配置 yml</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/dbname?serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xiaoyuge</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">dbname</span>    <span class="comment">##需要配置数据库名称</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>导出方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.xiaoyuge5201.config.MyDataSourceProperties;</span><br><span class="line"><span class="keyword">import</span> com.github.xiaoyuge5201.util.ExportDatabaseDocument;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.servlet4preview.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/export&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyDataSourceProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注意：需要在yaml /yml 配置文件中配置spring.datasource.database 属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        ExportDatabaseDocument.export(response, request, properties); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="2">
<li>自定义导出某个数据库的表结构信息 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//手动传参</span></span><br><span class="line">    ExportDatabaseDocument.export(response, request, DatabaseDriverEnum.MYSQL.getDriver(), <span class="string">&quot;127.0.0.1:3306&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;xiaoyuge&quot;</span>, <span class="string">&quot;dbname&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="3-导出文档"><a class="markdownIt-Anchor" href="#3-导出文档"></a> 3. 导出文档</h3>
<p>执行请求：localhost:8080/export/index 即可；导出的内容如下：<br>
<img src="/export-database-file/1.png" alt="导出的数据库文档"></p>
<p>包括数据库表名、描述以及各个字段的类型、长度、默认值、描述等。。。；</p>
<p>另外sheet的名称为表名(表中文名)+ 4位随机值，受限于excel的sheet；</p>
<h3 id="4-数据库操作类-datasourceclient"><a class="markdownIt-Anchor" href="#4-数据库操作类-datasourceclient"></a> 4. 数据库操作类 DataSourceClient</h3>
<ol>
<li>DataSourceClient类中根据MyDataSourceProperties操作数据库 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有的表结构信息</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 表结构列表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findAllTables</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QuerySqlUtil.findAllTables(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查詢數據庫表的字段信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> table 数据表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 表字段列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ColumnEntity&gt; <span class="title">queryTableFieldsEntity</span><span class="params">(String table)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QuerySqlUtil.queryTableFieldsToColumnEntity(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查詢數據庫表的字段信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> table 数据表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 表字段列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">queryTableFields</span><span class="params">(String table)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QuerySqlUtil.queryTableFields(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询对应库下所有字段 信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ColumnEntity&gt; <span class="title">listColumnsByDatasourceParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QuerySqlUtil.listColumnsByDatasourceParams(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询数据表数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> table  数据表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageNo 页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> limit  页容量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> columns 字段列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 异常信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JSONArray <span class="title">queryPageData</span><span class="params">(String table, List&lt;String&gt; columns, Integer pageNo, Integer limit)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QuerySqlUtil.queryPageData(properties.getDriverClassName(), properties.getDatabase(), table, properties.getUrl(), properties.getUsername(), properties.getPassword(), columns, pageNo, limit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出数据库设计文档</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response 返回对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request  请求对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportDatabaseDocument</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    ExportDatabaseDocument.export(response, request, properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="5-数据库驱动枚举类-databasedriverenum"><a class="markdownIt-Anchor" href="#5-数据库驱动枚举类-databasedriverenum"></a> 5. 数据库驱动枚举类 DatabaseDriverEnum</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数驱动的常量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yugb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">DatabaseDriverEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mysql数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MYSQL(<span class="number">1</span>, <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>, <span class="string">&quot;mysql数据库&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sql Server数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SQL_SERVER(<span class="number">2</span>, <span class="string">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>, <span class="string">&quot;Sql Server数据库&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * oracle数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ORACLE(<span class="number">3</span>, <span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>, <span class="string">&quot;oracle数据库&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * postgre sql数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    POSTGRE_SQL(<span class="number">4</span>, <span class="string">&quot;org.postgresql.Driver&quot;</span>, <span class="string">&quot;postgre sql数据库&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 达梦数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DM(<span class="number">5</span>, <span class="string">&quot;dm.jdbc.driver.DmDriver&quot;</span>, <span class="string">&quot;达梦数据库&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库驱动类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库驱动连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String driver;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DatabaseDriverEnum(Integer type, String driver, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据数据库类型获取数据库驱动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 数据库类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 驱动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(Integer type)</span> </span>&#123;</span><br><span class="line">        DatabaseDriverEnum[] enums = values();</span><br><span class="line">        <span class="keyword">for</span> (DatabaseDriverEnum driverEnum : enums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (driverEnum.type.equals(type)) &#123;</span><br><span class="line">                <span class="keyword">return</span> driverEnum.getDriver();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java8的lambda表达式语法</title>
    <url>/lambda/</url>
    <content><![CDATA[<p>记录一下用到的一些java8的lambda表达式语法</p>
<h3 id="1-list集合根据某个字段分组后求多个字段的和"><a class="markdownIt-Anchor" href="#1-list集合根据某个字段分组后求多个字段的和"></a> 1 list集合根据某个字段分组后求多个字段的和</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> List&lt;SafeSystemVO&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"><span class="comment">//....省略添加元素的代码</span></span><br><span class="line"><span class="comment">//分组字段 driver_id</span></span><br><span class="line">list.stream().collect(Collectors.groupingBy(SafeSystemVO::getDriver_id)).values().stream().map(d -&gt; &#123;</span><br><span class="line">    SafeSystemVO vo = d.get(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//求和1</span></span><br><span class="line">    vo.setAg_total(d.stream().map(s -&gt; BigDecimal.valueOf(s.getAg_total())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    </span><br><span class="line">    <span class="comment">// 求和2</span></span><br><span class="line">    vo.setScore(d.stream().map(s -&gt; BigDecimal.valueOf(s.getScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  </span><br><span class="line">    vo.setLkj_score(d.stream().map(s -&gt; BigDecimal.valueOf(s.getLkj_score())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  </span><br><span class="line">    vo.setTotalScore(d.stream().map(s -&gt; BigDecimal.valueOf(s.getTotalScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    </span><br><span class="line">    <span class="keyword">return</span> vo;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<h3 id="2-list-根据某个字段分组后求单个字段的平均值并按照分组字段排序"><a class="markdownIt-Anchor" href="#2-list-根据某个字段分组后求单个字段的平均值并按照分组字段排序"></a> 2. list 根据某个字段分组后求单个字段的平均值，并按照分组字段排序</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;SafeSystemVO&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"><span class="comment">//....省略添加元素的代码</span></span><br><span class="line">Map&lt;String, Double&gt; monthAvg = list1.stream().collect(Collectors.groupingBy(SafeSystemVO::getMonth, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));</span><br><span class="line"><span class="comment">//  根据Map 对象的key排序</span></span><br><span class="line"><span class="comment">// 我的分组字段是日期，就用了下面的</span></span><br><span class="line">monthAvg.entrySet().stream().sorted((o1, o2) -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Date d1 = DateUtils.convertStringToDate(o1.getKey(), DateUtils.FM2);</span><br><span class="line">        Date d2 = DateUtils.convertStringToDate(o2.getKey(), DateUtils.FM2);</span><br><span class="line">        <span class="keyword">assert</span> d1 != <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> d1.compareTo(d2);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldVal, newVal) -&gt; oldVal, LinkedHashMap::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据Map 对象的value排序</span></span><br><span class="line"><span class="comment">//monthResult = workShopAvg.entrySet().stream().sorted((p1, p2) -&gt; p2.getValue().compareTo(p1.getValue())).collect(Collectors.toList());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一：</span></span><br><span class="line"><span class="comment">//list1.sort((o1, o2) -&gt; o1.getAge().compareTo(o2.getTotalScore())); //正序</span></span><br><span class="line"><span class="comment">//list1.sort((o1, o2) -&gt; o2.getAge().compareTo(o1.getTotalScore())); //倒序</span></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="comment">//list1.sort(Comparator.comparing(Person::getTotalScore)); // 正序</span></span><br><span class="line"><span class="comment">//list1.sort(Comparator.comparing(Person::getTotalScore).reversed()); // 倒序</span></span><br></pre></td></tr></table></figure>
<h3 id="3-list-根据字段分组求和后取-前后10名"><a class="markdownIt-Anchor" href="#3-list-根据字段分组求和后取-前后10名"></a> 3. list 根据字段分组求和后取 前/后10名</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list对象接上面的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据driver_id分组，求平均值</span></span><br><span class="line">Map&lt;String, Double&gt; driverScores = list3.stream()</span><br><span class="line">        .collect(Collectors.groupingBy(SafeSystemVO::getDriver_id, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序后获取后10 名， 前10名的话修改sorted逻辑为：sorted((p1, p2) -&gt; p2.getValue().compareTo(p1.getValue()))</span></span><br><span class="line">List&lt;Map.Entry&lt;String, Double&gt;&gt; driverScoresTop10 = driverScores.entrySet().stream().sorted((p1, p2) -&gt; p1.getValue().compareTo(p2.getValue())).limit(<span class="number">10</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
<h3 id="4-其他"><a class="markdownIt-Anchor" href="#4-其他"></a> 4. 其他</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Id, name , age</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;麻子&quot;</span>, <span class="number">31</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>, <span class="number">26</span>);</span><br><span class="line">        Person p4 = <span class="keyword">new</span> Person(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>, <span class="number">26</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        personList.add(p1);</span><br><span class="line">        personList.add(p2);</span><br><span class="line">        personList.add(p3);</span><br><span class="line">        personList.add(p4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//java8遍历</span></span><br><span class="line">        personList.forEach(p -&gt; System.out.println(p.getAge()));</span><br><span class="line">        <span class="comment">//按照person的 age进行排序</span></span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">        personList.sort((o1, o2) -&gt; o1.getAge().compareTo(o2.getAge())); <span class="comment">//正序</span></span><br><span class="line">        personList.sort((o1, o2) -&gt; o2.getAge().compareTo(o1.getAge())); <span class="comment">//倒序</span></span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        personList.sort(Comparator.comparing(Person::getAge)); <span class="comment">// 正序</span></span><br><span class="line">        personList.sort(Comparator.comparing(Person::getAge).reversed()); <span class="comment">// 倒序</span></span><br><span class="line">        <span class="comment">//多个字段排序</span></span><br><span class="line">        personList.sort(Comparator.comparing(User::getId).thenComparing(Person::getAge));</span><br><span class="line">        <span class="comment">//注：若选择排序字段为null值，正序可personList.sort(Comparator.comparing(Person::getAge,Comparator.nullsFirst(Comparator.naturalOrder())))</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取年龄最大的Person</span></span><br><span class="line">        Person maxAgePerson = personList.stream().max(Comparator.comparing(Person::getAge)).get();</span><br><span class="line">        System.out.println(maxAgePerson.getAge());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取年龄最小的Person</span></span><br><span class="line">        Person minAgePerson = personList.stream().min(Comparator.comparing(Person::getAge)).get();</span><br><span class="line">        System.out.println(minAgePerson.getAge());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过滤出年龄是20的person，想过滤出什么条件的均可以</span></span><br><span class="line">        List&lt;Person&gt; personList1 = personList.stream().filter(person -&gt; person.getAge() == <span class="number">20</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过滤-- 统计出年龄等于20的个数</span></span><br><span class="line">        <span class="keyword">long</span> count = personList.stream().filter(person -&gt; person.getAge() == <span class="number">20</span>).count();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过滤出年龄大约20的人</span></span><br><span class="line">        List&lt;Person&gt; personList2 = personList.stream().filter(t -&gt; t.getAge().equals(<span class="number">20</span>)).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//得到年龄的平均值</span></span><br><span class="line">        <span class="keyword">double</span> asDouble = personList.stream().mapToInt(person -&gt; person.getAge()).average().getAsDouble();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到年龄的求和--基本类型</span></span><br><span class="line">        <span class="keyword">int</span> sum = personList.stream().mapToInt(person -&gt; person.getAge()).sum();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//得到年龄的求和--包装类型,其中，若bigDecimal对象为null，可filter()过滤掉空指针.</span></span><br><span class="line">        BigDecimal totalAge = personList.stream().map(User::getAge).reduce(BigDecimal.ZERO, BigDecimal::add);</span><br><span class="line"></span><br><span class="line">        （其中，若bigDecimal对象为<span class="keyword">null</span>，可filter()过滤掉空指针.）</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//去重</span></span><br><span class="line">        List&lt;Person&gt; personList3 = personList.stream().distinct().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//list转map.</span></span><br><span class="line">        <span class="comment">//（其中，若集合对象key有重，可根据(k1,k2)-&gt;k1设置&lt;保留k1，舍弃k2&gt;.）</span></span><br><span class="line">        Map&lt;Long, Person&gt; personMap = personList.stream().collect(Collectors.toMap(User::getId, t -&gt; t,(k1,k2)-&gt;k1));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>认识UML之类图</title>
    <url>/uml/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="2199b1a48b792c39156665cad6d473b8fda1f976254747cc66c0bd26e7e34db0"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好，这里需要密码。</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>架构师笔记</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式 - 七大软件设计原则</title>
    <url>/design-principle/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2469a3272bebae8655a7d05b406be1c43dd6f908e544a9bea1e409364180fd6c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>架构师笔记</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装gitlab</title>
    <url>/gitlab/</url>
    <content><![CDATA[<h3 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1. 前言</h3>
<p>以前在自己服务器使用的是Gitblit,官网地址：<a href="http://gitblit.github.io/gitblit">http://gitblit.github.io/gitblit</a>,  这个只需要在服务器上启动一个tomcat,然后将下载的Gitblit的war包放置在tomcat容器里面运行即可访问。</p>
<p>但是由于gitblit没有CI/CD的功能，于是自己就在网上找了一些博客搭建gitblit，在这里记录一下搭建的过程。</p>
<h3 id="2-安装步骤"><a class="markdownIt-Anchor" href="#2-安装步骤"></a> 2. 安装步骤</h3>
<ol>
<li>
<p>配置yum源</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/gitlab-ce.repo</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>增加一下配置</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[gitlab-ce]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Gitlab CE Repository</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure>
<p><img src="/gitlab/1.png" alt></p>
</li>
<li>
<p>更新本地yum缓存</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装GitLab社区版</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gitlab-ce                    #自动安装最新版本</span><br><span class="line">   </span><br><span class="line">sudo yum install gitlab-ce-x.x.x         #安装指定版本</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>更改默认端口配置(默认为80端口)</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>
<p>修改如下配置：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">external_url &#x27;http://ip:8888&#x27;              #填写自己的主机ip</span><br><span class="line">puma[&#x27;port&#x27;] = 8888                       #如果gitlab是13版本之前请求修改  union[&#x27;port&#x27;]=8888</span><br><span class="line">nginx[&#x27;listen_port&#x27;] = 8888</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置gitlab-http.conf</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /var/opt/gitlab/nginx/conf/gitlab-http.conf</span><br></pre></td></tr></table></figure>
<p>修改如下：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen *:8888;                   #和上面保持一致</span><br><span class="line">    server_name ip                   #填写自己的ip</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>放开端口</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">开放8888端口</span></span><br><span class="line">sudo firewall-cmd --add-port=8888/tcp --permanent</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重新加载防火墙</span></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改配置后重新加载配置文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>重新gitlab</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<p><img src="/gitlab/2.png" alt="启动gitlab"></p>
</li>
<li>
<p>修改管理员登录密码</p>
<ul>
<li>进入gitlab-rails控制台  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-rails console</span><br></pre></td></tr></table></figure>
</li>
<li>查找root账号(默认只有一个root用户)  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u=User.where(id:1).first</span><br></pre></td></tr></table></figure>
</li>
<li>修改密码<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u.password=&#x27;xiaoyuge123&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li>再次确认密码<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u.password_confirmation=&#x27;xiaoyuge123&#x27;</span><br></pre></td></tr></table></figure>
</li>
<li>保存  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u.save!</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>浏览器访问：<a href="http://ip:8888">http://ip:8888</a><br>
<img src="/gitlab/3.png" alt="gitlab登录界面"><br>
至此，Gitlab搭建完毕！</p>
</li>
</ol>
<h3 id="3-gitlab常用命令"><a class="markdownIt-Anchor" href="#3-gitlab常用命令"></a> 3. GitLab常用命令</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl start    # 启动所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl stop        # 停止所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl restart        # 重启所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl status        # 查看服务状态；</span><br><span class="line">sudo gitlab-ctl reconfigure        # 启动服务；</span><br><span class="line">sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；</span><br><span class="line">gitlab-rake gitlab:check SANITIZE=true --trace    # 检查gitlab；</span><br><span class="line">sudo gitlab-ctl tail        # 查看日志；</span><br><span class="line">gitlab-ctl show-config           #查看gitlab配置信息</span><br></pre></td></tr></table></figure>
<h3 id="4-邮件配置"><a class="markdownIt-Anchor" href="#4-邮件配置"></a> 4. 邮件配置</h3>
<ol>
<li>
<p>修改配置</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>
<p>新增以下内容</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_enable&#x27;]</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_address&#x27;]</span> = <span class="string">&quot;mail.midea.com&quot;</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_port&#x27;]</span> = <span class="string">994</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_user_name&#x27;]</span> = <span class="string">&quot;发信邮箱&quot;</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_password&#x27;]</span> = <span class="string">&quot;发信邮箱密码&quot;</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_domain&#x27;]</span> = <span class="string">&quot;xxx.com&quot;</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_authentication&#x27;]</span> = <span class="string">&quot;login&quot;</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;]</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_tls&#x27;]</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">user[&#x27;git_user_email&#x27;]</span> = <span class="string">&quot;发信邮箱&quot;</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;gitlab_email_from&#x27;]</span> = <span class="string">&#x27;发信邮箱&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>测试邮件配置是否生效</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重新加载配置文件</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span><span class="bash">查看console</span></span><br><span class="line">sudo gitlab-rails console</span><br></pre></td></tr></table></figure>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Ruby: ruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-linux]</span><br><span class="line">GitLab: 13.7.1 (c97c8073a0e) FOSS</span><br><span class="line">GitLab Shell: 13.14.0</span><br><span class="line">PostgreSQL: 12.4</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Loading production environment (Rails 6.0.3.3)</span><br><span class="line">irb(main):001:0&gt; Notify.test_email(&#x27;xxxx@midea.com&#x27;,&#x27;test&#x27;,&#x27;test&#x27;).deliver_now</span><br><span class="line"><span class="meta">Notify#</span><span class="bash">test_email: processed outbound mail <span class="keyword">in</span> 1.4ms</span></span><br><span class="line">Delivered mail 5ff2cb5082e2b_e45eb53d484754@devops.mail (673.8ms)</span><br><span class="line">Date: Mon, 04 Jan 2021 08:01:20 +0000</span><br><span class="line">From: GitLab &lt;xxx@midea.com&gt;</span><br><span class="line">Reply-To: GitLab &lt;noreply@ip&gt;</span><br><span class="line">To: xxxx@midea.com</span><br><span class="line">Message-ID: &lt;5ff2cb5082e2b_e45eb53d484754@devops.mail&gt;</span><br><span class="line">Subject: test</span><br><span class="line">Mime-Version: 1.0</span><br><span class="line">Content-Type: text/html;</span><br><span class="line">charset=UTF-8</span><br><span class="line">Content-Transfer-Encoding: 7bit</span><br><span class="line">Auto-Submitted: auto-generated</span><br><span class="line">X-Auto-Response-Suppress: All</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;p&gt;test&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">=&gt; #&lt;Mail::Message:199260, Multipart: false, Headers: &lt;Date: Mon, 04 Jan 2021 08:01:20 +0000&gt;, &lt;From: GitLab &lt;xxx@midea.com&gt;&gt;, &lt;Reply-To: GitLab &lt;noreply@ip&gt;&gt;, &lt;To: xxxx@midea.com&gt;, &lt;Message-ID: &lt;5ff2cb5082e2b_e45eb53d484754@devops.mail&gt;&gt;, &lt;Subject: test&gt;, &lt;Mime-Version: 1.0&gt;, &lt;Content-Type: text/html; charset=UTF-8&gt;, &lt;Content-Transfer-Encoding: 7bit&gt;, &lt;Auto-Submitted: auto-generated&gt;, &lt;X-Auto-Response-Suppress: All&gt;&gt;</span><br><span class="line">出现以上信息说明配置成功。</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="5-性能调优"><a class="markdownIt-Anchor" href="#5-性能调优"></a> 5. 性能调优</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>
<p>新增以下内容并保存退出：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">unicorn[&#x27;worker_processes&#x27;]</span> = <span class="string">2                         #官方建议值为CPU核数+1（服务器只部署gitLab的情况下），可提高服务器响应速度，此参数最小值为2，设为1服务器可能卡死</span></span><br><span class="line"><span class="meta">unicorn[&#x27;work_timeout&#x27;]</span> = <span class="string">60                            #设置超时时间</span></span><br><span class="line"><span class="meta">unicorn[&#x27;worker_memory_limit_min&#x27;]</span> = <span class="string">&quot;200 * 1 &lt;&lt; 20&quot;    #减少最小内存</span></span><br><span class="line"><span class="meta">unicorn[&#x27;worker_memory_limit_max&#x27;]</span> = <span class="string">&quot;300 * 1 &lt;&lt; 20&quot;    #减少最大内存</span></span><br><span class="line"><span class="meta">postgresql[&#x27;shared_buffers&#x27;]</span> = <span class="string">&quot;128MB&quot;                  #减少数据库缓存</span></span><br><span class="line"><span class="meta">postgresql[&#x27;max_worker_processes&#x27;]</span> = <span class="string">6                  #减少数据库并发数</span></span><br><span class="line"><span class="meta">sidekiq[&#x27;concurrency&#x27;]</span> = <span class="string">15                             #减少sidekiq并发数</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">每次修改了配置，都需要重新加载</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<h3 id="6-gitlab使用"><a class="markdownIt-Anchor" href="#6-gitlab使用"></a> 6. GitLab使用</h3>
<h4 id="61-创建project"><a class="markdownIt-Anchor" href="#61-创建project"></a> 6.1 创建Project</h4>
<ol>
<li>
<p>安装Git工具</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>生成密钥文件：使用ssh-keygen生成密钥文件 .ssh/id_rsa.pub</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>
<p><img src="/gitlab/4.png" alt="生成密钥"><br>
<img src="/gitlab/5.png" alt="密钥"></p>
</li>
<li>
<p>在Gitlab上创建一个project<br>
<img src="/gitlab/6.png" alt="新建project"><br>
<img src="/gitlab/7.png" alt="新建project"></p>
</li>
<li>
<p>添加ssh key导入步骤2中生成的密钥文件内容<br>
<img src="/gitlab/8.png" alt="导入密钥文件"><br>
<img src="/gitlab/9.png" alt="导入密钥文件"><br>
ssh key添加完成：<br>
<img src="/gitlab/10.png" alt="导入密钥文件"></p>
</li>
</ol>
<h4 id="62-配置git"><a class="markdownIt-Anchor" href="#62-配置git"></a> 6.2 配置git</h4>
<ol>
<li>
<p>配置Git仓库人员</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xiaoyuge&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>local（默认，高级优先）：只影响本地仓库</li>
<li>global(中优先级)：只影响所有当前用户的git仓库</li>
<li>system（低优先级）：影响到全系统的git仓库</li>
</ul>
</li>
<li>
<p>配置Git仓库人员email</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;xiaoyuge0318@qq.com&quot;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>克隆项目</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@fase11h12dsa24fdv3Q:root/test.git</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="63-git常用命令"><a class="markdownIt-Anchor" href="#63-git常用命令"></a> 6.3 git常用命令</h4>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看某个命令文档</span></span><br><span class="line">git help &lt;command&gt;</span><br><span class="line">git &lt;command&gt; -h</span><br><span class="line">git &lt;command&gt; --help</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">初始化仓库</span></span><br><span class="line">git init </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加文件内容到暂存区（同时文件被跟踪）</span></span><br><span class="line">git add</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加所有文件</span></span><br><span class="line">git add .</span><br><span class="line">true</span><br><span class="line">git rm --cached    				        #仅从暂存区删除</span><br><span class="line">git rm 							#从暂存区与工作目录同时删除</span><br><span class="line">git rm $(git ls-files --deleted)		        #删除所有被跟踪，但是在工作目录被删除的文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git -commit -m &#x27;first commit&#x27; 			        #从暂存区提交 -m：注释</span><br><span class="line">git commit -a -m &#x27;full commit&#x27;			        #从工作区提交</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git log    						#查看提交历史记录</span><br><span class="line"></span><br><span class="line">git log --online</span><br><span class="line">git log --color --graph</span><br><span class="line"></span><br><span class="line">git diff 						#工作区与暂存区的差异</span><br><span class="line">git diff  --cached [&lt;reference&gt;]                        #暂存区与某次提交的差异，默认为HEAD</span><br><span class="line">git diff  [&lt;reference&gt;]  				#工作区与某次提交的差异，默认为HEAD</span><br><span class="line"></span><br><span class="line">git checkout -- &lt;file&gt;  			        #将文件内容从暂存区复制到工作目录</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">撤销暂存区内容</span></span><br><span class="line">git reset HEAD &lt;file&gt;  				        #将文件内容从上次提交复制到缓存区</span><br><span class="line">git checkout HEAD -- &lt;file&gt; 			        #将内容从上次提交复制到工作目录</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">对状态的跟踪:git中有两个状态：内容状态和文件状态，</span></span><br><span class="line"><span class="meta">#</span><span class="bash">内容状态标示内容文件的改变，有三个区域：工作目录，暂存区和提交区</span></span><br><span class="line"><span class="meta">#</span><span class="bash">文件状态有两个状态：已跟踪和未跟踪</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure>
<p><img src="/gitlab/11.png" alt="git status"></p>
<p>分支操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch &lt;branchName&gt; 				#创建一个分支</span><br><span class="line">git branch -d &lt;branchName&gt; 			        #删除一个分支</span><br><span class="line">git branch -v 			                        #显示所有分支信息</span><br><span class="line"></span><br><span class="line">git checkout &lt;branchName&gt; 			       #通过移动HEAD检出版本，可用于切换分支</span><br><span class="line">git checkout -b &lt;branchName&gt; 			       #创件一个分支并切换</span><br><span class="line">git checkout &lt;reference&gt; 			       #将其移动到一个引用</span><br><span class="line">git checkout - 			                       #恢复到上一个分支</span><br><span class="line"></span><br><span class="line">git reset   			                       #将当前分支回退到历史某个版本</span><br><span class="line">git reset --mixed &lt;commit&gt; 			       #(默认)</span><br><span class="line">git reset --soft&lt;commit&gt; </span><br><span class="line">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="7-常见问题"><a class="markdownIt-Anchor" href="#7-常见问题"></a> 7. 常见问题</h3>
<ol>
<li>
<p>gitlab本身采用gitlab.example.com:80端口，如安装前服务器有启用80，安装完访问会报错。需更改gitlab的默认端口。<br>
修改vim /etc/gitlab/gitlab.rb：external_url '<a href="http://localhost:8888">http://localhost:8888</a></p>
<p>如果就想用80端口，那没问题。如果更改了端口，后边可以自行调整nginx配置文件进行nginx反向代理设置。</p>
</li>
<li>
<p>日志位置：/var/log/gitlab 可以进去查看访问日志以及报错日志等，供访问查看以及异常排查。</p>
</li>
<li>
<p>gitlab内存消耗过大，频繁出现502：  <a href="http://www.360doc.com/content/22/0130/08/65839659_1015422932.shtml">http://www.360doc.com/content/22/0130/08/65839659_1015422932.shtml</a></p>
<p>gitlab-ctl tail #查看所有日志</p>
<p>gitlab-ctl tail nginx/gitlab_access.log #查看nginx访问日</p>
</li>
</ol>
<p>参考博客：<a href="https://blog.csdn.net/yzd524850313/article/details/113118193">https://blog.csdn.net/yzd524850313/article/details/113118193</a><br>
参考博客：<a href="https://zhuanlan.zhihu.com/p/338882906">https://zhuanlan.zhihu.com/p/338882906</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache archiva Maven私有仓库搭建</title>
    <url>/Apache-archiva/</url>
    <content><![CDATA[<h3 id="1-搭建"><a class="markdownIt-Anchor" href="#1-搭建"></a> 1. 搭建</h3>
<ol>
<li>
<p>环境准备</p>
<ul>
<li>
<p>JDK 1.8</p>
</li>
<li>
<p>Apache Archiva 2.2.8</p>
</li>
<li>
<p>Apache-maven 3.6.3 （ <a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a> ）</p>
</li>
</ul>
<p><img src="/Apache-archiva/image-20220628112607703.png" alt="image-20220628112607703"></p>
</li>
<li>
<p>Apache Archiva安装文件下载</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">archiva官网地址：https:<span class="regexp">//</span>archiva.apache.org/index.cgi<span class="comment">#a</span></span><br><span class="line">下载地址：https:<span class="regexp">//</span>archiva.apache.org<span class="regexp">/download.cgi  （这个太慢了，几K/</span>s，坑）</span><br><span class="line"></span><br><span class="line">镜像仓库：https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/apache/</span>archiva</span><br><span class="line"></span><br><span class="line">建议从镜像仓库拉取！！！</span><br></pre></td></tr></table></figure>
<p><img src="/Apache-archiva/image-20220628111905504.png" alt="image-20220628111905504"></p>
</li>
<li>
<p>将下载的tar.gz包上传到服务器相应位置</p>
</li>
<li>
<p>解压tar.gz包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf ./apache-archiva-2.2.8-bin.tar.gz </span><br><span class="line">chmod 775 ./apache-archiva-2.2.8</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改端口（8080默认），如不需要，请跳过</p>
<p><img src="/Apache-archiva/image-20220628113033117.png" alt="image-20220628113033117"></p>
</li>
<li>
<p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /User/xiaoyuge/maven/apache-archiva-2.2.8/bin</span><br><span class="line">./archiva start 			#执行启动命令，建议第一次启动使用：./archiva console 可以打印启动信息</span><br><span class="line">./archiva stop				#停止命令</span><br></pre></td></tr></table></figure>
<p><img src="/Apache-archiva/image-20220628114117703.png" alt="image-20220628114117703"></p>
<p>各版本操作系统下详细安装及服务注册参照：<a href="http://archiva.apache.org/docs/2.2.8/adminguide/standalone.html">http://archiva.apache.org/docs/2.2.8/adminguide/standalone.html</a></p>
</li>
<li>
<p>将 <code>archiva</code>在Centos中安装成服务(root执行)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -sf /Users/xiaoyuge/maven/apache-archiva-2.2.8/bin/archiva /etc/init.d/archiva</span><br></pre></td></tr></table></figure>
<p>这样就可以通过<code>service</code>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service archiva start</span><br><span class="line">service archiva stop</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动成功后，访问<code>maven</code>服务器地址: <a href="http://ip:8080">http://ip:8080</a></p>
<p><img src="/Apache-archiva/image-20220628114324543.png" alt="image-20220628114324543"></p>
</li>
<li>
<p>点击右上角的<code>Create Admin User</code>创建管理员账号</p>
</li>
</ol>
<h2 id="2-上传私有jar包"><a class="markdownIt-Anchor" href="#2-上传私有jar包"></a> 2. 上传私有jar包</h2>
<ol>
<li>
<p>访问：<a href="http://localhost:8080/#upload%EF%BC%8C%E4%B8%8A%E4%BC%A0%E7%A7%81%E6%9C%89jar%E5%8C%85%E5%88%B0%E4%BB%93%E5%BA%93">http://localhost:8080/#upload，上传私有jar包到仓库</a></p>
<ul>
<li><code>Repository Id</code> 选择 <code>Archiva Managed Internal Repository</code>则是把依赖作为正式版. 查看地址：<a href="http://host">http://host</a>:port/repository/internal</li>
<li><code>Repository Id</code> 选择<code>Archiva Managed Snapshot</code>则是把依赖作为快照版.	查看地址：<a href="http://host">http://host</a>:port/repository/snapshots</li>
</ul>
<p>按照以下步骤依次操作：</p>
<p><img src="/Apache-archiva/image-20220628133605624.png" alt="image-20220628133605624"></p>
<p>保存后，提示以下信息表示上传成功！</p>
<p><img src="/Apache-archiva/image-20220628133705165.png" alt="image-20220628133705165"></p>
<p>在左侧菜单栏<code>Browse</code>中查看上传的jar ，如下所示：</p>
<p><img src="/Apache-archiva/image-20220628134114089.png" alt="image-20220628134114089"></p>
</li>
<li>
<p>也可以通过命令的方式上传（<a href="#setting">需要配置maven 的setting.xml</a>）</p>
<p>在<code>/Users/xiaoyuge/Desktop</code>有一个junit-4.13.2.jar，使用<code>mvn deploy</code>命令上传如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file -Dfile=/Users/xiaoyuge/Desktop/junit-4.13.2.jar -DrepositoryId=archiva-releases -DgroupId=junit -DartifactId=junit -Dversion=4.13.2 -Durl=http://localhost:8080/repository/internal</span><br></pre></td></tr></table></figure>
<p>命令解释：</p>
<ul>
<li>-Dfile ：要上传到私服的jar包， jar包全路径</li>
<li>-DrepositoryId： 仓库ID，要与maven 的setting.xml配置文件中的server一致，否则401；</li>
<li>-DgroupId： groupId主包名</li>
<li>-DartifactId： 项目名</li>
<li>-Dversion：版本号</li>
<li>-Durl：远程仓库地址</li>
</ul>
<p>上传结果如下如所示：</p>
<p><img src="/Apache-archiva/image-20220628141000055.png" alt="image-20220628141000055"></p>
<p>同时在私服仓库中可以查看到刚上传的<code>jar</code></p>
<p><img src="/Apache-archiva/image-20220628141111292.png" alt="image-20220628141111292"></p>
</li>
</ol>
<h2 id="3-项目使用"><a class="markdownIt-Anchor" href="#3-项目使用"></a> 3. 项目使用</h2>
<p><span id="setting">配置maven中的setting.xml文件，配置如下：</span></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>\Common\my_repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="comment">&lt;!--要和mvn命令中的  -DrepositoryId 一致--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">password</span>&gt;</span>xiaoyuge0318<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="comment">&lt;!--要和mvn命令中的  -DrepositoryId 一致--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">password</span>&gt;</span>xiaoyuge0318<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 私服地址 start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span> <span class="comment">&lt;!-- 正式版 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>internal<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/repository/internal<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span> <span class="comment">&lt;!-- 快照版 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/repository/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">true <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 正式版 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>internal<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>Archiva Managed Internal Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/repository/internal<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">              <span class="comment">&lt;!-- 快照版 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>Archiva Managed Snapshots Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/repository/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 私服地址END --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>apache</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka常用命令</title>
    <url>/kafka-command/</url>
    <content><![CDATA[<h3 id="1-脚本概览"><a class="markdownIt-Anchor" href="#1-脚本概览"></a> 1. 脚本概览</h3>
<p>bin目录下的脚本作用</p>
<table>
<thead>
<tr>
<th style="text-align:left">脚本</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><a href="http://connect-distributed.sh">connect-distributed.sh</a></td>
<td style="text-align:left">用于启动多节点的Distributed模式的Kafka Connect组件</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://connect-standalone.sh">connect-standalone.sh</a></td>
<td style="text-align:left">用于启动单节点的Standalone模式的Kafka Connect组件</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-acls.sh">kafka-acls.sh</a></td>
<td style="text-align:left">用于设置Kafka权限，比如设置哪些用户可以访问Kafka的哪些TOPIC的权限</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-broker-api-versions.sh">kafka-broker-api-versions.sh</a></td>
<td style="text-align:left">主要用于验证不同Kafka版本之间服务器和客户端的适配性</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-configs.sh">kafka-configs.sh</a></td>
<td style="text-align:left">配置管理脚本</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-console-consumer.sh">kafka-console-consumer.sh</a></td>
<td style="text-align:left">kafka消费者控制台</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-console-producer.sh">kafka-console-producer.sh</a></td>
<td style="text-align:left">kafka生产者控制台</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-consumer-groups.sh">kafka-consumer-groups.sh</a></td>
<td style="text-align:left">kafka消费者组相关信息</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-consumer-perf-test.sh">kafka-consumer-perf-test.sh</a></td>
<td style="text-align:left">kafka消费者性能测试脚本</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-delegation-tokens.sh">kafka-delegation-tokens.sh</a></td>
<td style="text-align:left">用于管理Delegation Token。基于Delegation Token的认证是一种轻量级的认证机制，是对SASL认证机制的补充。</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-delete-records.sh">kafka-delete-records.sh</a></td>
<td style="text-align:left">用于删除Kafka的分区消息</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-dump-log.sh">kafka-dump-log.sh</a></td>
<td style="text-align:left">用于查看Kafka消息文件的内容</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-log-dirs.sh">kafka-log-dirs.sh</a></td>
<td style="text-align:left">用于查询各个Broker上的各个日志路径的磁盘占用情况</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-mirror-maker.sh">kafka-mirror-maker.sh</a></td>
<td style="text-align:left">用于在Kafka集群间实现数据镜像</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-preferred-replica-election.sh">kafka-preferred-replica-election.sh</a></td>
<td style="text-align:left">用于执行Preferred Leader选举，可以为指定的主题执行更换Leader的操作</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-producer-perf-test.sh">kafka-producer-perf-test.sh</a></td>
<td style="text-align:left">kafka生产者性能测试脚本</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-reassign-partitions.sh">kafka-reassign-partitions.sh</a></td>
<td style="text-align:left">用于执行分区副本迁移以及副本文件路径迁移。</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-replica-verification.sh">kafka-replica-verification.sh</a></td>
<td style="text-align:left">复制进度验证脚本</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-run-class.sh">kafka-run-class.sh</a></td>
<td style="text-align:left">用于执行任何带main方法的Kafka类</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-server-start.sh">kafka-server-start.sh</a></td>
<td style="text-align:left">启动kafka服务</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-server-stop.sh">kafka-server-stop.sh</a></td>
<td style="text-align:left">停止kafka服务</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-streams-application-reset.sh">kafka-streams-application-reset.sh</a></td>
<td style="text-align:left">用于给Kafka Streams应用程序重设位移，以便重新消费数据</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-topics.sh">kafka-topics.sh</a></td>
<td style="text-align:left">topic管理脚本</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-verifiable-consumer.sh">kafka-verifiable-consumer.sh</a></td>
<td style="text-align:left">可检验的kafka消费者</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://kafka-verifiable-producer.sh">kafka-verifiable-producer.sh</a></td>
<td style="text-align:left">可检验的kafka生产者</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://trogdor.sh">trogdor.sh</a></td>
<td style="text-align:left">Kafka的测试框架，用于执行各种基准测试和负载测试</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://zookeeper-server-start.sh">zookeeper-server-start.sh</a></td>
<td style="text-align:left">启动zk服务</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://zookeeper-server-stop.sh">zookeeper-server-stop.sh</a></td>
<td style="text-align:left">停止zk服务</td>
</tr>
<tr>
<td style="text-align:left"><a href="http://zookeeper-shell.sh">zookeeper-shell.sh</a></td>
<td style="text-align:left">zk客户端</td>
</tr>
</tbody>
</table>
<h3 id="2-broker服务"><a class="markdownIt-Anchor" href="#2-broker服务"></a> 2. Broker服务</h3>
<p>1、启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-server-start.sh ../config/server.properties</span><br></pre></td></tr></table></figure>
<p>2、后台启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-server-start.sh -daemon ../config/server.properties</span><br></pre></td></tr></table></figure>
<p>3、停止服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-server-stop.sh ../config/server.properties</span><br></pre></td></tr></table></figure>
<h3 id="3-元数据"><a class="markdownIt-Anchor" href="#3-元数据"></a> 3. 元数据</h3>
<p>1、创建topic</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic my-test-topic</span><br></pre></td></tr></table></figure>
<p>2、查看所有topic</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-topics.sh --bootstrap-server localhost:9092 --list</span><br></pre></td></tr></table></figure>
<p>从Kafka 2.2版本开始，Kafka社区推荐用–bootstrap-server参数替换–zookeeper参数用于指定Kafka Broker。集群的多个IP端口用逗号,隔开</p>
<p>3、查看topic详细信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic topic_name</span><br></pre></td></tr></table></figure>
<p>4、给topic增加分区（只能增加不能减少）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-topics.sh --bootstrap-server localhost:9092 --alter --topic my-test-topic --partitions 10</span><br></pre></td></tr></table></figure>
<p>5、删除topic（标记删除）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic my-test-topic</span><br></pre></td></tr></table></figure>
<p>6、永久删除需要修改配置文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">delete.topic.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>
<p>7、强制删除TOPIC的方法：</p>
<ul>
<li>
<p>手动删除ZooKeeper节点/admin/delete_topics下以待删除TOPIC为名的znode。</p>
</li>
<li>
<p>手动删除TOPIC在磁盘上的分区目录。</p>
</li>
<li>
<p>在ZooKeeper中执行rmr /controller，触发Controller重选举，刷新Controller缓存。可能会造成大面积的分区Leader重选举。可以不执行，只是Controller缓存中没有清空待删除TOPIC，不影响使用。</p>
</li>
</ul>
<p>8、修改partition副本数：</p>
<pre><code>先配置一个reassign.json文件，内容：
例如my-test-topic有3个分区，原来只有一个副本，增加到2个副本
</code></pre>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;version&quot;</span>:<span class="number">1</span>, <span class="attr">&quot;partitions&quot;</span>:[</span><br><span class="line">&#123;<span class="attr">&quot;topic&quot;</span>:<span class="string">&quot;my-test-topic&quot;</span>,<span class="attr">&quot;partition&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;replicas&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>]&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;topic&quot;</span>:<span class="string">&quot;my-test-topic&quot;</span>,<span class="attr">&quot;partition&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;replicas&quot;</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;topic&quot;</span>:<span class="string">&quot;my-test-topic&quot;</span>,<span class="attr">&quot;partition&quot;</span>:<span class="number">2</span>,<span class="attr">&quot;replicas&quot;</span>:[<span class="number">2</span>,<span class="number">0</span>]&#125;</span><br><span class="line">]&#125;</span><br></pre></td></tr></table></figure>
<p>执行kafka-reassign-partitions脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-reassign-partitions.sh --zookeeper localhost:2181 --reassignment-json-file reassign.json --execute</span><br></pre></td></tr></table></figure>
<h3 id="4-生产者"><a class="markdownIt-Anchor" href="#4-生产者"></a> 4. 生产者</h3>
<p>1、发送消息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-console-producer.sh --broker-list localhost:9092 --topic my-test-topic</span><br></pre></td></tr></table></figure>
<h3 id="5-消费者"><a class="markdownIt-Anchor" href="#5-消费者"></a> 5. 消费者</h3>
<p>1、消费消息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic my-test-topic</span><br></pre></td></tr></table></figure>
<p>2、查看消费者组提交的位移数据:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic __consumer_offsets --formatter &quot;kafka.coordinator.group.GroupMetadataManager\$OffsetsMessageFormatter&quot; --from-beginning</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>jstack命令</title>
    <url>/jstack/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b6892bd486cc44b9bc7dfcaecfed5ae64aa791ba7ad021de9b0ef45d35c50652">91b4a72afde41933824d9b47e790ab276fb896cf66d88c172d81884618061a3a14d23f48e34794c2d5b9ca2bf97b3726902bf2336847b101af8c7e8261e6d67c8e59d628adedb667973c60ec37bbc2cdffb7f8d04b3d1d825bd3062cf82a274973ed1c7371f43108214c93039f7e4e274a4d1bd8439d65757dddfb63e6e47dae1eb5efda77db30a6ee62afb664570b18ee9e13306ed0a869affc86ecd40359b4e43d4a167144f5f84422ada232fa83dfb0bb3baf9d7827480c5564e4bdd6a0a6d891786bba2b3ae02b3be67194b4d12bb200929093710ef95ddff0c4c667c31faa7a28a726229f38a47b581219e641bef4778689f73337138719f9cb5ef3d57540090d92ff58edbe88654368eae5e9374d0b127e1613f1135c53d01218872af043c24a97573e478fdcfe3b6ed62468f333566bbafc43b29e0b9e8a7270aa0ee58f5ffb149c506bd20107336be72ece09866e971181e7c8e56cb609cb90ea996e2435ebc86dc511361deea1d2a6f93068aab54876e73a0ea016893fa299d5acfa250f3d8d4678dc50b8a378624296d1ae412d0c9d9f3f94963d6aa019691cee807d39da07495a3fddc51823db3a3f3231de789a10e8abd5041dfa10c6bccb62d74cf08a1026d708eb191fa7a872cb748ee8992f8a632ef4c6ae62c5e558fe736bda5a3102cb402f3e0d92b22f160ce937012a08fa530045d4c63855c419f65140c51803ccbbf84e43e99c88cc00342d0557535cea96f96849f4d6090ffad94be900038621ae4b75f5454859cfce4bb54dbb87bfbc30cf5b5b8a611f81f8104636f201ec5e246d362a4ab1ea9f10cab04b8473cb358a40ce6d12f9a3ca218c3339c523a7139a645f1719b7e793779899d8e1550ef6b48bdc857241a3d67c3300c2448f01cfce4f95971dff92dafb5e255ec61861103f718fb359adc52e6cce69258ea19c05c098c3112683ebc2b4e4fa518957d7f70eec5b8847ce7ba9a366fabc857a0355b6aec656b869a586c464ae33d495921d8061895c33bedfebd8951e169ed13484938d65cf50b86c55ef30115c59ece740b53ea93a08a8ac3af003251e7a30cd03f5794d09137b7fa2603cee591e56c96f42ce27ee777b47d3a5578df44892a1d64d2454fcd1b989e65d96484069205de39abadb7b69883e21c601e4e70a95a269a9d60735b9908c2bd3fe2c502f8aa5368ce84614e9b67e68a242a760d867ef15051e6c19fb2b3d5486da91f4b64293eb63f0268a7513a64778974d1d5385ddddb3fa3fd4619f1ceabbba16eb48662f4d62df3e04a23d68bbad838ae50b85f48d5a5ffb9789928a98d6a6d7812af67896507c095d62715b3652191bad60e06f2b8bb67985fbc253e70ae3f414077988262e64dbc57215c43b1baef7972fd48e3d3de094bd391960c12e5ec1866e69f4c0d142d08cc433fb52e9247cf6005020a7165bd3d48dc4cfeaf77263bfe606ac97219a60e43f4d83000a11c618e806149779332d12ca7f580b9143556c95c0154f2f083cde62fc811030941dd3069948b6bc118e2c45840f71ce99f71db6919433b63740f250cf540a050303e69cb5a00a11fb2d19e0309964c56c8b12f4184c5feadd39e01a0a19f4cc46056b6b6d4dff774de6bc10e991366ef02d0725b9a622023143567ead0e853cfb22d49c4d8d04716889ab0eb45ebddd2a8188dac09c75f899388eb9d9cccc655c8842d3c6b7a1f4ecc4565ec7db3529534affc3296775a1cd59f7bb8bcda92e0ee3ce5ed2fce7e3d3cca7b1aa949c6c5a087e2b36f6b040f284c7c0701376b21b8a0601b3b012ee02147756489a4496ae34762a8eef5b6df084b7bdd909923bc31165dfe9422bf7a8400e0235db291355caa8989e3c0d2043f4b27bb18ad98249dd57872fc8c8f7844a97a2b0e148cb91e045a86b24b6ea9dd6563cea3fa99b928c85afa306bb7e7cbd96a4cf91787d2274755a8ce0bbede5c19b7a9be154f09f3b5453b23a9f00a64c7a51124da6c8121d87959ad347beb4fb9112051b85a54f9024a4f0037fa2a967ea9b168b9a1c4ca4c5c4b08a81c0824b650b43466370de4146f8f06faef537b71fbf578443b026ff70b5fed2ded6a8235a1c24154c74bdf73dc42b184b0765cc580a4c71fad43daa00c28f89090e34503383cb5945757cd1de4a45d5df5a7e659064348bf2519df11e539d77f11dc3aa312017cb8329e2ca6c8c8e9653f895f23940881ef0c449a1989e43c6825bdcd7618e09ce835df9de44e37cdf05bb9ff89412d50eb21e7aadc7fbd7d72226894a4dcfc5a051932f3e99c638d7054f076b4f3845fbc70ed7ce035779fabab9f225b9d5accb12e4cfa42eabefdda8208ed22f63bb8e95b7a931d0448c3ee210d861c16da1dc2c5762ecbe150e258acedf0563ce48e731629f6d4073f076293492b9fa64085df4d124a051eab22049b31f0447e5ccf308bbf505cef48dcf185974b44a52ac249ff29642bc2228bf0fd9b3e66030fe8d3cb4111684ae48cbe2074dd43105b32e490373f135f7c676fd448ac6c19b25ac47d2cc6a2b22b1d441354af61b49793a99798f9f982d842b908207c1294faefa39bee084a39a8e4bb35e16a92a74c2fdc704d7cd6a502c3715d613606e4c3e214f8a18983387f9e44ccb0d261d5bb09aabef8d37f40b949cc83eb34dd354b246f3c7b77537623c36a5ba0cb8dade334ad0e57fdda825eaf61191d4d4ed74ffbe3e925acc74db46fb66aae1f346684a1e018fb0789249c8af94d6aa431ba984748a1b5870e020d566a75db08bde6cdbe415723eac1f12896a4f42fbbd8dfec007021e36adbdad784b5ff78f2c26d51c53dcb2ce123e164490a6155572fe552bd3290d5a88b2290241ec41790172ce2d1a62cedea220ea4232da57240d6113452a723047ffceb89dfeccb90c3926d3809071896be19b26216756b5a9ceb495bc984b19f2b6319b0749c99be6f1d963134ad9947731916b385d927fda18c42a60630ac4f1cb93f30362b795eb3bcbf8187147d237152bf3b15b2ba6e616607b1459337b5cb6ddcb83ac6aaf3b3ac14f6c29d99f6e390eaca7830fcf6b65ad2b4103b025b15e1a628cc2cfb094fc0fa7d79cbc2f3005c5c87cfa105e19e7843cc396874f500f8bb40df8d027c7327efc58e83fcb23c394efe183ba34011cc60e9c8ace73aeb9cb53bcfd69d839f5eea3df9af68c37eacdd686eb101aee0b2000257fae59d3f68884773bae26f91327ab3d50405b84676ac8eb77d42d298e5b94c40aa7d393e22965a422f01e5bed4b4e10562536f9d8ef4b33502ce5fe63ec85a4b9cc57c8211c91fb6c428587313ac541b5a899819636a4db0f860426d2eca1df8991f6eb2f8a0373f121367c60e9125a5938d361276777f4ec0c0ba590801faf32b06355012096a1a5f4cebf3929bfafbc5d3a96b58ca3eaeeaa97fd94102de9c7e972d2c415c6d510ce6db8a6b61c8c10234985cb2d915d9e14b8d9c8af011935b3f1d5dba48ee848fca7ad43da73d51b41bf848460a7cd483950ce7198605bfb89d4189782acc117ba94ebab3a068d760fde6a333a5de4ccf06d82834fef4662ae01fca2c0012e0c8ab853bcba6c188388acc7a1fd4c18eaf409df6f457c5bed5e543c34d4637186b4ce37755da149850d4ec2693c2d0c4163dc03b1aa77d7f38078716dded1ae00c4b4ff56fd4ce8d04e30a822b3ea06cc639bc5d48d784b8c54ef970461f07eab3fc44d1f84e2d48da6d2c6f15a4f3d2b8d340bb802fefbef50e05f190272b5af4a968c1f771ff3751dd8058b9f975fbccfc3dc5acfc4fbc62c6489cd5ce1bd56270d069148db48e5788f3ce96b9829eea0d86a4aa0f2e0c3663fa6fd3ceebf6a38700e1857fcf6d048cf2faa2bf9e398008e143baa51c4b7af6ebaa8548e19835ecb8fdc3f0c794136b72c8c7b97aaa139c9bfee4c65b313a0f1265ab29bf6b4e7df859e58870191e5075305ad662b871839239d52e29f2997c3cfb01c1fd8d9c793fd1ec33a60227e5a11ff2ad13765535f63ab7dd9351e1deb3c116ccb6f1ff5339e5301981ac4443a3308aab97cf3fda6d389cdd23a8745b61264f0ff00bd90164a094f5f306c9e06a4c04b743c68a9f7f045bb9c96a1521bd4de22d6ad01db55522dd3efa81845072309fb01f596a739149b965c39e8b6c4552812932ae20bd966b9bba24ad91863e7e77bce203ec4f9bd3e603bf2456c70f001a0de72e9b62e1377fe42f8b359ff37d0c7b03b53b04c4102168990f01b7442fb3b16199fbbe1ba699a60c78aa90d9d5eeb03b54d59b75b63fc13777a64046f43f08094c1ed09315ae9561723ec35ea3a134002c4984fbe30f2019df2139cff90f64799aec8f5611d0c486b6230002aebd52ec7abab027530b9e98e43324e90a846b48db66d48e0558a6fd945d7f0f9896068e3c35cc0e872e39c33958eed85c524802fe4be689ff686d2211df1cf50bb820130930ce2f348984489599bb1d739ea0bd4d4e9b60a16072dd63f0729afc5cf88a9c50b3310b37db9c5e4eafb5b738f8c38b214602c9eb7a2c0b7bc04c0a35474773ca70a49996e0269c408d2c7e38d300e8a1dfa669f2f331b805aada608c8945ce1160afa505b541dde1e4695dbcdffcb5bc9cda96cff865866e8625de925476b5642fa79d1d3e607e44807eb0de1242d9cee1d05dc8638725f1580918e4c8904e3fbee091dabbdafc958464cf2db0120211f289a7195855d842fa07d4d401ffe329856a13545a7d4d1dcc363c57e120fd7e25a440cef764df1178992deb7eb46ea60174fecb75d884596ccd5288808c19ea7c9062c7039c5ffe6e641b382644a0646083a59f9b4aeffd95cd8a315feda3b16b7f264d9121758643f614c8c4c8f51de8e2b56789102fd08592fed5aa71081729def4d85ba384ec87ae6e9f496d5f1654a30e8cd22d40ad759e00f7dfc44d3d3c1e22216cb26a7add4a9afffbf86cf070eb531602e50b7deaba695167dfeae53963d8c683330cdafb6d3964a26e708e78627f9d194abcd457c9b1ebe26afd006bec323cd929a448bbf1d3fc5ace11ac3e7bcf87f3f980235e41b9f65189240445d18af288b10445b965fc517f6502d33f6ec7a426960de6d62281040fd8a4fd6407533d78eb2250a442d220598d1f3cb0b95e7c4c7b7d6ddbfc6bf0148d3fc6bbe061ec8eca5badfdea6a39eb35eb6bf0bbadfadd731589ded40cf4c54f2cb3f469b7d18efc61f87928c5d01b2bdf501a83c325373ae6fb3c771eb924cebf7ca3925cc9aad1e271ba948097b6825b8228872d8a310d60cc72acb8fb20ae99b5c1ad441d4fa0d0bab6014c47962d53c17a8749b927c771712d8008e39a6e76c35070706ae40681d76528e024d295510b197398435818cca366637f212d4127eb5b5edc0f9c1c36e91c44d08e429564517c0d7c3b15b4a3fd3b980a8d42b6802ddf50ca4c9e8536edb6c2fc7e7ea6b3db020ce3d080108bfaff2d2e0214644b69363dd2ab5cbd0079edeb8313f51cb226605ae999e3de479ae96c344c72c6acdc58f846d3ad2d3b5a1de3e8f22dd515f5a268ad3153ed561342e402594f3e311ac553d20f18af34efb8738cdb2f6999ad1f84f591917c0d1b32064f8f9244699c87f4f68761ca20b92cfb5fa673d8bd1731977f4c5e2d59b26a9902f28edcb62d6acce29ce8fc50e14bce50fab4bd285d5eef218cc0a575377141c4f498992efbf37fefd97040a3dfa2fc42789ce8486fc8587b387577926c75ffd851ee34e621ef2b1b489ed57dd14419059b0207795e3768985915220114c62cf30df437aef6aa95178ba4460daadc7c5dd6600b32372dc749a5ce4f6aec6cdf3623ad62b9c00f0bcdfcaaee7f30b16332cc8fa82016c69f1caacda4c6e664d4d162f5d9c24d748521ec549549609342b092843d9fb693cd1c1bc2ba4fc04e1dedb9dd8c6f28fc391c926f11e97ce7506c7042504fbf87a6bf24621b85f75657fc3a39ff6e1e4a501f3b23e1a0f43977876c6a8906cf59e8c678132aab9edb82797164a92d3f4a8e43573858accd165b3486a5e0ea32422e19d1ab8f9c6e18fb7f61103dd25a3c9b0d115c38f769bf207f3c33a9578666367ed41f7f14de9c24d96b0a7171bd22105aa4b6138d1bedafa1f5bb71f2b23ba8b08db8cb182191ae41d15100effce7ec4cf0cd57697e9923132b9d9d0026f8f3015e1dced61c9e09faf49b4c92b8033a499defbfb851cb9c1d7bca7513abed467ecdc2bcf1d898b61bc44df50ceba6afa5f3a07e0dbd74e9cab94f15034bb02652203165b6ba57c225b3236892d7a5a7c8dae48fa384802969290f4da9c4edcb62645fec60f29ef55c2a9d2460d459dcb0d1fe798586fbb68f950061260421630d5ca954c0d49128f287b0da4c753668a0e254d80a48d72d2e23348774eeb51d5c76fd310758eab861118592fe7f0fd18a0225849f4a45fc9fcdf60fe54e20d9f3c475eedfec7dd73f165cbbcaab47f9cbb3f5f75e706289096d904edfd7543b879d3b35d9efdb1ab78bea3e51322f5b6112343146af3dfcd457d44212e4277d332ecd52085a360784edc65f6149ad46684aa97c06724966d3cc9138bd7054f23ab3717c1d080260407e0ad2eb7d69baaec60d1b677091e678f0eb159ed6808624fc179d178f69f74a83983f05e2200669a880b775af5e8ea589a086ac3034a571595604ca6095ad37eb3ba08e85720e9951e1e4d85934b59277d781d48434eed1c559fa920adf51a387a3395cd677a3c05ebdab851bd5661facf84d4773f646195d0af14c8ee1fb0585a6fe858a35e8de939574da330f89f6e4f1d28f7ee744774b7bf1dbae7acbb85b1e5fc938182c2670b92695dea6da417575ecffdcd6086a5b9e076bbe6b709e339eb11033f3c135b7790b9bb05f4c38af79f8cb4cffd00f3fd2d23653256f789ec528d3f039972054f2cfdd99b6b00cb24d0c611bf37ab41a7482514ff7082f2f75b2eca799de67d58c162bec6b907c672c6acd27f95c15eb03d40dfb06dd082b3e688801b8ba501f4f509387e6e5ce430e7c24afdde7802f378a682f51745df84ea1a06ecf3eb4b5cb25355dd517491932fe0d824c663f4b0436f8cb279db5182b5b4b9f05feeac4a2004f7759ce1affdaaec8dc55b93eea4c8be6529936dd054db73e937229adf69df11bce7d19a53db0a5e5577050956ec452b58c567fd9ebd91496a656bfc5e12deb838cda0676180737ab7bca5f8dc817c9ecf693e01af088c45a7b39467772001ab601aea6260d7b594ffa2133b810ce5779d636327b08b3b7af8ae1f4bcdec16e18e9fc410b10f76d24db09105116c565e790f462164b429054afc9adb7853b2716bd6e8043816e32c3c996bd7fad900860654ad04b8822b1a3b687b995304a5c8461f4e6c43f3e9814b163d646e89ee328f29f6c880ea8df3020a01eff063d062724b8af87c7d3d41cad5edfd590543509f0e76310d2f712b4003e0cf8daf2b587f67268c6152482dbbd21d6480f02dac3e4aa57b89eece8a7d151a491c181e341fda4cf4a3de663a93916ee906a0859481a9e02509d14bb5b952ca3dfb034e360af610c554a9fde472a458e2e990a0626911a8d8be6d2ce4026da4f8ab6695d7dad4ca13837c0a5faf0ed02d52ba358d21e544b464ca91ccfdca03ab6941588d8afd57839aa95f24d88f74a96a0a2e9fcaeba2509454c25bfe460597048a865ee202bc4286004a322536b38b0846af8420661f2eaadcea39a5b2515be5ec01d7c4aec0d1ea411f45981b76854f74099f8a8ed7c0b3557297a67f8f7c51d70d8aad9446071b2fe106c57150a2254224d82e1147fac9acc636f194c6ff3d55f7432c932cadd9203b38e4e863dc3b3294552e61f35ed15b8ee40637baf16bfa94bd38fd44eac22a2ae012e5cccc3e5578a406207132f6c3e899e384c7d4460426c17272dbaf70ec6fa5e60157b1a44d50d1d2482e2fbb2bbc54e0938c8769b4bfedf04cf819f7fb0b57e6f20e0b0911d3e08cf3c36e337aef5f1fb9d34a7116218054faec539d907e84b960c33223455b52a84f8986cf9e811a54c0ad2812cdc9cec632b8edcb48c3da2142df58cc389f2fa5cd710ee0e17674522a151e53d5a0fd39a0aa7ed8a9d408725e54fdadef1df225faa7edaa97512600cc22b2fe8006668f51d7ca98bb09c0023e90bf71c7560b69322f3a3e0ad1e6aae45d9796e999f4c5e6be5c077ce3672b1824891e26596cbaf34f8c292fcb9ecd4f05b1679e75ad5716918e6e961196905089089c43978b2d14444dcebc612bb131f0aa797f9cfab74a52bd1791510fe9bacf0644e63d71946dfca58dc8fc4c2f0fbc17875da8888c2e07e1df10692b420b0acd927416c4cf6d91be3438992070515c05e8952bfbc6908dd40ad736678d2296711b272e8771759c34f8112bd8eaf22451c2a36ec78ca23bc9eb8445d218a8527b0e20949f6db0264a91a7881aa996a44152a110ff7bc86583c6e652cd6293cb357579aaeac000c7ba8dbf40fe55d1d7e7dffb71c940f370e64a068f956742466b7f1271132ed8c094856581ec054a75040f8317544fb9a69690a6ef43bf73b3f02d11a457fe18c8978c31f246796a84d9ebd5d11ad128b39e29706cd2619e84c9e6d0190f5e848604d1f263fb518b6edc9cd39d2dd235997e88bf1c8d2dfde0d9a84ccbaec2bf30299a960e99fe3d2e5909087ba65bbf3bc05211c3b717e1598e6e65dfe2595642097b134967e8f174fbd3229659078be4353126afe06ee93adcb8e1e4acdc05df8b9e47d28c7da69b1319363158641cdb5b0b0d857049b69cf7443821000b8a9a9481220a21d825cc777bd4aa8279b7a727d04425f6a5c491815b3c9c466292c48002a95651201f2707dde1d4c585580be5413a7b89bb4b8fd91b3fdb151d09a63ac3deca423e4e04ad7e38a753193ac039cc8b9922545f879ee880a0b4a2b0a2e3dee8a36c41ff795f0cdde65fae57594906afc78bd5709b49f7e60d001d46e0746ee93f53ef56b41587767abc93638773f03f2cab0889be0ba2ffc5255e639a638f5a8995117c0aaed55b12a197b0c9bc30f851e749b702d81b3623e61ec2d681c78e0442685d46a73403780119b497f8851ec79baa8c62bd1dacb2e5cbc968d809d4a8cc6e8cc16b177b839fff3d111b54011e1a7149f304716d9e5b00c134c3235b3a2694a39bc4aee5e7be6803e873855a654c01f5e3f1902a10fa3d0f61a4538efab847e9b68ec5d4654201f5b818763ab95b11a71bfb0527e642b7a62e3affe821e63437bf050e53f887e71a4bf576dd9620dcfd28d66ab496469c811dc1c93a0daec58dc574d6e60cbb3460292985e333658ec8a912c46296c78bd7e5378ddf60bf831b424a0045446b1fab9972f13e539628f058daa91501d48dff731a93d06ff8cb5b3a5bbdcf834cf60b963726b530c532f7a03895686836e37ee0fb402aa9655aab7c132c1c81d3cf0ad42d5ad1401a077e01f50c36d2197df6e6e4fee41c973126c763d050fc0a4c352c9a26d8048490933d138b3a4ca3adcafa93ceff4122bceacb9d50961105f68b4bef3ed90b96904f56d72329afe8b98907a65d9b869a9053074c2a219c34afdde997151dc3dc5df12a5f9a3087d09c74cc3c55894fb55444f523937afd75f95015204eaf9e23639d150120155c1ae172d76f352833a08c868332c21f16939db454c53f886c9a846888c1514185c17fef31ce0518bbd6e6067d0ce2d265ee934ea30306c414a2513dc1bf1be88a13a2d6317dc3d0d8af537cc906778cd7f4feb82f495c64218b0888c591beb71408baf901fabced15bf82ebc0aa8ef38498720a665fadf4021d02563365da531dd2cfb97474e3e504ef928aea37271e430f33fee012ee7b9f071e0299e157eb6cf631a51f2636b76ec94108596da8f055bea7313d0f1dfab2bc3005f06b2520bb611e25bb85163efd50d07f741fa5b55dd324e6b242501832817e57d0b9a0304f82be82f62b356120e6ea5af2119c03c081a4034c1bde5f1cdca70e2ba45b1e9441a5d91463175024ec9b1185d783839fc956db9cdc4f811adae277805735abc3cf5c84527efc134e69f0635285b0c3477497c4e5d1c9c5a799264fa9280a24894dd94077fff8768ecd766ee11b20e6a5a3b19828aaefa6131c7995dde643544eff80adab0f4a32b3f60377ab0c005c1ee2dc89a3868b7ef6bea3af674260d04a518c8472cf534ed16fcc501a6bab0801b289aaad19526596329a66d199abe4c5ac6e09c43a6563e47ec524132310e49752dafff30614412782a80f4ef9c9639373a1e033aa8fa22316dd79dab09c09ed915382f696a4aac730d1da21f0f8a707e59d1013b2db8c0385e781d7a0514ff0c5188a07feacb8db55fc175327f2f31f620020d9d81778d5cb6b8c2a64a2364ef28c4fc447f61b27946b02bce16a4c990177ebe8a4b07b7e76c6245c9e3b1baec8ce35831492362a4e848763264edf505cae0510b3677d727bfafb5a7275bdeb005fe2e702307a4e42c8b16d98634c5f8eb9b865daf93d9d15c09c66789cc7538ded9767afa2cba2223f3f3e7cb2851b335aa5a033bfb8449897c005e696702e367eadd1e4d51b4fcfa4899bd0fff9dbf84fbc1b25018b538cf8b28ab187d7bfb576a6e0e15fba55ea6ac464e44eb87aa56b8c9f2c9daa116ab0766afe2e9305777e480e8d09bd43c2c0f78160643f85829496e8cd7e38caf9dcd53b54944c544ddbe4d7f70f3b9eec504b0e407464af83ac5b80db16ffe444dc05a323ab2c2d786b3274fc77b1f279e874c1c8978c93f1f458b09df06c2331bc5ce0b7c71595835fd0899002ec38243235d32e334a42464fa513d09e8fa601cb0eb2cab0eae2c6c38d93d59cc25e88e316fe8c5c3ea223b45b2ed2da31b25eaff30dd91ebb6ea49b085984822a29cc22cc8564dd01943f98dcfcaeb0365c8c277d7ad7d8dabe6b18beeb99304c2366c72ec4a14ddb70b20cdd1cf3f2a2c8ee8e7a63d517718c96c4fb3d09beac9437a8b63c4b2e363dd3a947a98751a74eaaed8b1f7d54110fbec675d6a785c2e42606cd7d52fa4ea9ee2f11f6b149e2dd58d0c28b8277b81a894fe5b77229d2c3a31939ac0939c4217fede0952c3f25d1f7d8284fda7357778676237c0ff5b82b03e3982eeaca3d95a9a4199f1e78315da809acb5198330d446130fa2ec9d6d8c58ef036094d364e5f4e43dbe3ef38253327e35bbc3582574f94621c0e13950313bb96198f5a55c7f457a79b1f7780ee0e83e9f0b39b6c3348650fe9fbeb677fe41804b507fbf3def5eb1ff7ec141ca0105c268af8509ecfb67291a59049c3fc4af80af91d77a19fc1f8ff0c21369d046468b453061df501e303eb39bb433ae1dadbf0755c14f831b7cdf37a689321cfa73b1fe337a216c0825f54f682dc80e473d323542796f5cdcdfde3af8d12d52192a4d8d78bfec8b92c83a52b0e76e3ebedc79e12d47f71b3f78a239317093338ae5fafcdc45dd028d246c71bbd64cc1cf108da5cfb602487ca2a68cb1713610666e265cb8825b6046276c2efaa036c31fa8aca0e57ab6175bc9fa43b01b046e5d6a40d1dfbb020a975a0be1a900cc46d9e7483abfc46984157f67cca58b432eaf9e32022bc0ad6195b7df202d7e8f95120ddbc4feebb6fc840fb6ef780f24ce19f51e84c1d8413e6ac794b8447dc7ae73e14277550ae6eb78f1357deab19077bee7e4facb684743866b7f0b6ae6f00bbd16d71813c2cbc4245736a0fcf00076f3cf6628c9f1e37964754c8eb41bd6c430d08f2c00963f0f9b1b5309b9da765bd474e00f8feb1d164aed69959c343fa607ad030e00796ae7cccfbb90c27f78f7313190093260fff7974c1d881a9971b69471e99adec4c003345fd2f282eeaa5e8c8db557dd4a90b8d555878259f151b1d87d489b10fd94bfd848728b81cc6c9bd06adcf31fe0380101c71e07f3651982ae3c83b3c5b29e57d40ec155823fb187be784c6cb48b4c0b70b45b16d93d032e22566b84bc5418692cc2cec05d31c23cf17a135d080ced318bdaad104b68c27c59e14541e9bb6d72af861fc8cd6fec29e06e887641ced54c229296d3b7836936f43e77015756cfcd5954833bf0ae860c44245c51c1c56ac99f51f809acf8ec940172745ec39cc29e57ab35371d8f14f2d7b4adb55c54581e34fbe961e35338d7ada107393c512006648e19af9589ffe6b642b0edfcd6743cc98d0d95be527edb37b976e99b33f875e77778d91799e18600694ad48148aff408f0ba5c859c60ecaa022acbe6376512d5f8990049c93510ded787640541d29e5d703e7c07cb6d36b365faec6b37750636cf23b9f248ffa34a29f3bb1db1c0d07b4db8aed9c2c3386a70908564e70ec27b7e43eddbdedcf1c2226736d62f77d02fa8cd34fd4b1f5833bee17d0dfe6f365e022e62f6687d7a45f6640ea0f1d0a02abdca21e2d3dafeed51588056cf602bfe5edf5c0978e7d5e668aeeddd20617c0383806148f0dbc91fd371effaafc94e3739c6b18be3003153431ce7d3bbf0d74643d264874796c6fb5a1329e47962bd981745840f576153a4eee67475830858be76039786c25408e5db42318767163b6eb1f65de4c36fe61a308c5651b42741aba4e6d82a800b037a9b5c07dc286e3f28ccb0ece8a07a09c4db12f16b6c43fd39802bfd71c6da173a1fe705d2e2eec86938e21ba334b913ae8d97dc0c84f67128905d752c9ff2d8e80a3058af0788b0a8b7ce824c43999f05c5a1a731fa29074708cc0ba4820b05b8126209f24bf58e54190d77eb03c09926d61013c85442a16ef89a36bbc6ddbd425143188408bf114477840e4791f4494ef0d4d91316be2c2c89e118be6e8af9f42bc3507b68f6ef9dce2c1b466bb5960ae217f2b5ca7612bee0f17b6e641cbdcdd075a9d1c1ad8c04db5447ae190f9b1e2c462bb112d237afd14ca82201d510216886e2391058a9c05c2a22110dc9cfafa33e27ba5ed8b54cbfce4342c142cc8f26e67dcdde6e6ad13eb9396852a61957521166bc2ac2f7f902723b0ab18820c2aaf1ffd9faeec846cda90ea168e09af0143b0c9269ae0737df4a0c94a839dc627db2f1299573fe3d7a12194155b5f19e37ac0c90d596d607c0301f32444f614210edff22337f5f4007aa54a7274d38e593d314387d8da5eaf1cb9f393bdd1616f0fbd7fdafd1a187a476a85f1603c37ded70991342277c4aa1d4416d7dd230a3a2f4a4c614b1066d8bd86a5af43e7d0f1495ecaa7825e6bd9bb719e4345d49942632c250e06c76468ad223022f022ed69851b056c8e0a530c01c212f41d222755054419afe1a81c69b978590e0255937804c4d3ae20a6482ba451ee0f3661462fa14574b47b383be2713b6a2ab13ff411c5e955784da5359a7db7e837b79ba4a2ace1ab1589ff21fa55beab55d8bb2309c0a4800c1eed405d727f91374e4a3061a7fbc44091a7012106076e7759829e43841c7bad1cece312d476d59b09b9215a4211dba5b86d6c709532ce74d136c97b25095fa25dd4c3e1d758aab85f32f4083e17ea2344798b864c5e6078d94567879505f6cc96f5eaf30ca7a8b180e49e2d95d7fa659433cc9a0c64c73bccc26142ce9972007283b2e5335b426df3362d2c5ff0afcb012a95d810d242565dcdce777a2b47cc9734134162e324e8e70b5382d89b93ab9253e53fd2ee497d26b993586752af07e6ee159e473f34c38a7e1b074fc8d66ae45eb7101bcf90003abf3cc02ca0c24e9a241a0faf06fa1f38b7e24cdc34da9caffeecd7ae35974dfcff92b12d865e01d5cca4dff7a540b3ea9a15b4ca473c4c60e016781ffa4241318c1326fd1fce1b3d6f795da4188ad53595dcf52e857a82866453d430406fb3d8823e8d19748005059b1a22053776baf10957969ce2769a45c2cb264b186fa33cbf8b90321e2b7109101c226ed5b376a4a9939bce38f872c19f820f86b0dab675924509ad09f019d1765f5f88e9be05fd5e8b8e41dc15927117e9baa3005a4737a0391d730c3716b79dbc412a4e5b5b0db81af9d8f6a980643e74f5a745a39e6588c784881b8be658ccf2bb043fae74991fe4b4d586fbca87334e2d46461f58bfd50b67704bbae020b8e277165bc9ca2e09bbf6905d6e9a755f8979bde63ca51724e7d7a5048820e1fc4add037084c360e9b6112e845245c86f1da949009813eeba9ead8cb5d989d3917408b1250e25baa2e20b9dce8fcea7cd581a2bac61b4058774a3eafde3490ce1c640410dc9acf8afae4796d8c619ecb78a1545f4434a4242dd00c6bc798fd555440c680f03353030d82a764c7e1d107b55e72a5a0fced7253836804b2cce944cfe6c2bac0d2a434f56d650e717355471290f29e7424cbd4903fea60c70a660ab5d9aaa767966da18c71811394846f8df4de79a5e1185fdf061f89ff864dc4a34b4847110cb5fe5422379119a0254c342510bdc6aa57453615dafff4c4e78e0baf377b0b716fc4f44a7ef6ffa61a841fbd5d9b6b4076685f29ca5b6aea7575496f0df4e7e455a76ad2e07881bd7de38c46b5cfdb439632a8a7972d89df36ada0da29afc3aed5a31fed9aef73f9e302ae1b7cb4699345a57bb6e8c661cb6d75d9fa8d657a264db7ba12bf451e036fda2c0646a12f6d8f2e37156b5c1c08f834469f7c2abf85d2de0e02e585b1616ac0320d22817c1b45642f728c3541bc4cbb4db7bc0a7f56c442ed92fc70d80686bfca9f865a4e4142c6ad3caa837d4bfef43d40f420155f92e7f632f47c77652aa8f332997921c40861de2100863c4a0816240e9a8f7e4a2fa14ad7fae0b3661e5f10cfcb1b239b1dd6adfc448efed79c62c324add031366d5dd045d4151ca142b3dacc531ccb01c7181873964b7c0ad857b9abb5df08b2c2a4ec05da62b57ca070600eb9d68b07b78aff626bc3fdbf28e6f349cfca0fb1147a0c8166a027f1bee4d7da60cebc59b43532dbb3d6973f65741f4ffffa625e5eb9e82663d29bd2de60d35f0e8a9e8ec446317e6715da1d7ecc0e7ef85e16cad2be84d71c881c9e68d905f1e654e128b18009fc01dbfdbb0f4d2314cb62372f8f40b216971efd0cb90d4e0e8981a6e13fba33e5e94dc3b2c7b50a7f93c29921fcd011c435c11ed1d1b973f59b5fe049d6a4028620b0e91351e0a51feed91a83c70e5d652c46f26acaa6b50cfe528cf75d01d02bcb4e1fdcabb8957072d3a1a7f8b12dcdd51867eb7ef46061e38b4d50fea84e4e51f9835ac64d9fb2446585130c8139f1b5df833352db4eef141bbaab956f582fc1a2da4a707ee8f75e998abbb1f4e566d08cf8932debb8a045663c4b392e408289138aa91a51afb9dacfe4ac00cb45b36fc2eea7be6926cbc13dfec1fcfc7423286371d9781fe112e2f763b03462f4c7f6fffe5088171fe29ac52e3ea01c8a4ffafcf0a3e1958887c3f37d71bf91b128d53d7ee39624a6493692ab40dfd7a77be59abb483080d358025a874646104b2544f4833d3e4cbfbd947c8f723c046f000d1bb8e4381dc671d7608311503738f5c825fb2230c69429910cee3ec21a45f694b222cfd4ef93d7a87b925f3dc82eb9fbc1ece08d757a774d60439dbe3128c0c4200716cfe99fb757dd2bfe34b880f6a7ff5cf64232c38b9e4386ac609f2e7e701dbf87e0f901a43fc254831278af02f1582b022f138755b2c34686f13b8254b0868a6edd4abf3435036efe7aedafdbfa7bb32a97db9653eee8f09a17d09f93c5055f972fafaf590843308421bbd5d1f6818f2ba9eae9992e7efe5b892a588847f2719c4b38e70f781fdbbf0e0646f323249570cd1a3b5cdf5314ed2cba5dc2302bf446fda18fd303a35fc4d33dd4efb1bc79ae532c6b7120f321d6bd9751298b9a9aa7502e4146a4073d5eef59a6d3b99c0b08f95a60506079bed3b2c0a5e531538605e724fa6cb08c256d23e6d79e8e2127bffd0870ba242e592aafa924aaaa3904f1c82fdc0cb1f65e591cc6a9cfc47712e282dca19d1f11a0506bd7808f05d0527c2e66cc1ea2a95b6d0f5efab93221e0b601ffc8116a9055fbf65333de3b1db85a690008e49625f1c60980669160a567df939605400bc23a84de52a530845a93d7427413598a879f95c20182dbfe6695f265f4a56aa6e10285acd06d2af48c103d76e99acea314e6f13c799fb29e03428c2c427bf30e0cd73c98f929605498971456342edbd89bd55e370db45d4c06c59dd16a91a7c933935225fe502cb8492ed702f00f4ccc5864863de42034e8407c69c084fbe4a9f12b5c03d052fa42eca93ab0a390add52c8541a36e245efdb530dddf2de4f2988658771703cd71a46f4f6d497fde6f8eedc11e3eac1f7746b8968c50285f47ab0a147e86a50c9bf2713cd791c116020f6b9270b7bcab03077ba0b2927cdeafd72710c204a3a923bea0c72006aa6d74149fbac743673a3f65cd5aff2e494e8cfd44eb3eafe2ec79e04359ae634638a57dcdef9a24ce544c9ccaa63094ace79438be6a6bcd73563db9da21257ae7247df7a33309d952d85988f3be530a1de0e74b8ce8111cc4ada2493c17c7181b3bddace16ee1ccae59c55f8f61d972ccbf40474e265c0e668a529dab25b65f35dcc25c78d3f25303bec793490ed57ad7d0954c3cebd03b5fa71f708cb4df9b82faa8524f0a2ca2d6b33bffbba48a5f3f3f7f91839b9f51238b1bb6ce09d32bdcd782005b59ba74af8478d9b875847bfc5a42c353122f7abb9c18ce171920c03548a688b28eedfb475ecb4940b822402d227f05d4b3c403d18f3de0c63668f488cba915dd8defec75396c35e0cd1fb8e59308323b39bd5017a9501ecd87e0d3f8c789dd1b58cbdf6c074bbd793da853e57a03f8deeca2a46c11f820c76c95eac021cf0273793ef71d8c357416763e9bd9d8dcdf16bc0a2d1a7a1ad22eb45e52ca6a7f0309459d846f86b63056a84f2c338e94d5e542aa7b8ab6f6660874178a336d5600691b34daeefa4609ae3f602c4d0708287f2c85d77fb4d607b54c7066116944ade1878a77956ed245be8aa2d5a371ba83faf2b43574a2fb129e4bb6311643518dfd293b89fe08631299019d91ef30c54c65d067ae7bea97492a3b58151e1fc2b1111e0bd1ca5c84ba64c58674713716d16a153fe3e8440f9ffbc056981027e955e40a2792aa2d60a3c44cbd73700912e3fba67fa91ac8a58f676113eaa5b126210f5f281e16d61f9f744f9066edc8bf6f9b3d8a9fe314627877fc16c6f2769d1f763a26892dd5b9f6b18cca6fc2815634c8f603aab995327635a43e0e2ceec395a79dafed2cc2f2fc2998d2b11d9d71955f3c22111e2674b69a0996f5ebf1a034d837c101d63b03d3ae5fd71a6c9da3156a634cd431d9f7f8cba1a951e7f38e0b56920b16155890ff01ea6ed3235ed0837c1008902d2a22949dadd1239435ef5a9dfa6e526e73fd5f6367385012d13a6f04425ff6dfbf03469ca6b18b17cd570eb2ef7c9dc2985abd084b9c97330625978be25057e337c10935d60862656ad7ce1ccbe69ad5a638be8062fda3b806e01efe67048b6e063d2c8423db0c06df885c5621e5a06bfe22b4924f0590cc8e66e4d037d077e826fe65972add22fd0e2021ebba05b11da2d353c9ac3fa1ea9f55a1888cb6077349ef59355cd5676c0e0892cc20f41b1597aff0c62d8f3cd72e29f2d2b7e3c188e8744eaa4e1f8a8c09d56d64d3f979a668e8da6bc1620982ac07bb6da8c40a2d04916380cbdab78749994ba1500869d39e541f77df028c244f9711229585ee7bc082b0b40330b3e9198fb3e7afe737c03a99f4397c0607896c89a46c0d80c1dca2bfa5105519a76563f342c6b969f1ecac2e4b29305ca53f27309909b6cdcbdd919ea3c6bb10decd412010ab9499f73f80679820ddcfc513b1d6ebc1c461242ffc88d210c0f20e57301c3697e5331c5301476ab48697ed8fb3f8ac15c6f6c337aedfda16f605d7abf23c83451d03e61ed0c594bd148ab9a22fdebc1614fdcd5acd9b4b8455cbd175767db184fa28c6228acd023e81f8bbb099a381f6425c7bb39d6a6a252ce1d9a4655713701254af7e92e372f999cedb64f3bb6d1cf445a679d62cf0b25750617b5a1a15f6474bc88a4414cbf16a57ff3cdee49ad928ecacb789e7bce3054960d395a7066f83d12612ed6340d7bec83d3d91198f08d4416621faf0c1fa579759cd143244a4b77ae7f9c0788bf231e4e536ca70205083556afebb166de39b3d4ce6abdfa16ba3615446b0af1eaf574f844c421f0ff14f82c1b55c9740d547a59e95e6e3ea0410b886ceb4d25c7f7c763b03bdc7339673916e1a0a38ae3f1dd9e927a00c10de1963c2899caaaea675293578c76b67ccc04cd8e82755ee8b759f0e3fc5725593389b988a1d2e1dfb1cfde3648f6b3fb0197407eb26c3def14fce59b0f0ce8ea68063f20d804b6fa58dae19c3b30a0fe772a9a73abfe72c898a34d8680171b1747fcf8b373479bd98bc97c44fbf4e9f326df27a55d17ef762a4bfb6007f2f2d7a6ffef737c2c6af8816dce7d83b199694735e1ebb9d5f2f5ee3af4b426717fff5f04aec925c406cc5bcf805a0058bda1be60d173e01f5616aec63c3556bf9612be5664f3a3607949133fd15cb18c37035c8e06a0b1ccb18f8f1cc8b60b0e63ee881b294f623011552af60bb1860dfb30dad1a1682777bacf315272af071333731c4a5df9b9627c9190071fe171db355ebc3f2f0b537b19c81f19275c47e5d0f5a0168d68573051ef699d38b2dcd22f8bd744183b4377dc8ee44e12f572de89b6650d4aab1258b4688ae0bdddc2bebde497cb076d4e42fbcc200f1737aa46ebc146b61cd93f1ca9adbb22222b9eecbfd9bb3de42a7d123f5a9995de78d32864803f1b57388774e379463bf701b210e470153049ecf93159289629202cc816d706dcc23de0884af447bfdcbf4c31e9cfdd3c566b036fef0d54e43bd57bb9595aa7f0813e42a931fccef69e3970df08f48df623281c013aadcb3e19d91ba7016d6deecae39074701ad62786321d5cf9e21ac17c03dbce44aae505c5009aa72748d579ff29a1a387983960de5412e82a989c7b5f063c79538ac5220bdc6e74e1f3ab3f1642840b5078d2068188b3a90ac76bb9139ab3f24e60445aeefea2e205e2e5c93c619bd5e191c4db24c25ded1bb04c86503b82a0becdbdcce537412ebcabd7e8fdff3dea302d6190a7649c00d87bce30a73cdf4cf18d7a9c68327786c8ce57a721e56b944cf5c67f420595d12c51e288bc40dabfe014c1754dc692ed2aec08899d075fd52422e2da7648391eff1ea9b7ad1468afbbc092ffc93336909450baedef5f27b509166fbe878e46c751f5850cb01b2b0b1a19b422b770d446868e4807356dff4404187a72c485dd57b05f6cbdd6a91f0fbbc8f07c707540961b96bc2cebedb27fc9ea388b1d1a0f86288d6b20721f1598669c310e5bb388228b675a5833311d7758078da4eb7a190a5145f364fa098f360279387d3246ac29799c226b677a2f5160c068142dc9c581c6b0a0ec59ff76128123d8d1bbbd0af70bc8a5461ad5fe0384c898cade8fb0d18f5efdc1b5f6e07ee9c16838abe13aa7707a064102791729d7dcc56ea8873031503f4c9c8a7bf242bb22657edeb2fb9e01d19f1f475446ec4924bd6bc93960c0bdc6a259817e783e0cf1e1c2851636746bce954d239927ce87b17186d9ef072ac2e811bd04800d674b91b8f6bfaed0dcb161425f8df16949ebaebd3db1f4a3142c3eea4c580c471542e35a49ef80bd0c074b163ccb29cf4cbed9de61bdbc3f322e323fb319aaded24bbf36c7503bc03343d8caa30e45464461a7f450c1af9c108e4424791681f0d8757b8b50a526461bd3673461ea58d93e3a3ff5d2f59c03650f3f7335cb0a658aebb123c6e796c46db30738262e0a518d32330905e873ec5ad89d445ed7ddb268af2606d462d723b98d4044bd6f6eef35d735708cb33f47955db65a53c6cd2619afdcb2364af31547183c05365c9497823f787970a3e17ce298ee7f8a01ec73a4717d15f9cd936b63e73e59731cc70e9994129ab73435c4d6dd0516b36a75dab382107f675b34bd0c6327c6c03ad0f9997c29256f578f3beb5eca7830f9b5ba5d8454c5299fda7287864a4dcbd859d33996ecb107c28060e4f9535581a2267018de4aba7f3b23a8d728f1170cba588b7805d01a132c2d4745a125e576a31e2a2967928bf5423cecfaa861d80643773564c028e5c4fb54e42c871e09679036137a9b25753cbd18b76872fc4923cfcc89fb58e78bfd377804c24d09c29f9e6cb5097a63c992f64e5f7e5a4faa2ae85d4a58de5e51af4bce2a719d0bd707d54508ca7df47d6e8b71650a4170542fba2ad82bd646dbb89c0da17cd355d39ef19830f533a7a8885c403b5ce4916e380207cd60ea789b08404c9e6e04abaa2423324243b169d1178dc90d883d995929927903236666c649530c68d0b6ababf6787aadad7606357c5bc756b49f23be0d4b2d4ca3ff0a414c1a17a127426bc7d02dbab40d409c0a2302236fddbd6820185add667e39e98cf6641ef20543cbbbf673b34aa50b167244a5893d33cc929e25cb25b767e0ccb2f468363a9a651facd2ccd1d295df5ddcf760a3a4b011e6b0e15b375e86f179bc927612dee773329a632c3bbfcb865fdcc11a90147e74de785a027161864d61dbbd13af399534dd30dfa9b1ed33d2a7860c22c9b44796d2f4f422759bbc6c0f21dc3b0926862e9a078922acebf1c82087a9ff156c8b75675fdfb0fb7fff7f88be0b4782d492267b2cb39a6839c8db54e8959275c34c7803961a5418db0bd3df94d92693237de69ef48aa837fdd415df0ac43ff87f00818da048ec3f3bb33239e61ba35b0dd2d7c5eec78d60d9f79a476424f779287cb501b089afbdbb3d13a3282a8b3cb814dc330826586b6c99f26c36b8e16b2aae5a5fd9cf513a92c6f59a845d41d11e836c711528806772ff8a42c3c32d3706b5bbc2004a24c8d2a528087a31bcbc2e8bb1bc36a95ce6660993e2318bc092d531c1a235d43e9e4d68531bbe7bbd9f97eb9e8c910d170f29454f9e50608c3b3383b55053e2b47309f114bd5250efe644cd6bfc28384fe2cb2e9a41714b14657c2b50530f8f0226938e5e36016fb322f4cc4520b905e024d17175bc54a8ebecdecde65be59bd37360ee44b71fa4a986e552d78bc4a578b785a4c9c46f806ec70d98f7a17ce63d6ce7f8b1baefa94f7ea8a7ab1a384f6dfe4b5a403b10ebcb808a37616d6cb5e41eea5b805fbfac9debcd6d709a6f00dd1c1e63dd3fc93a759217580332b5ad3e79ef691d0f435459766071af3521580bed11b85c6fa31b807525c6646f0cbf3814a697573d43397a13f2d02ee2627642794c6a70b7ef908c9cac84075fd9f2225bee546e638118a9430f974497d6c4aec9bae04ca975d63282040369b6247449662b85f4fa72a4a23270a21f47d567caa2756aa1502e53ac21ff5a26305bec1cc2c1a12abe23f3eacf76427e4a0f82c94ba06fa41811f0b2a2e1a78935de65f2f125712ab05612b268178ed0f1fea1aba0e9b173ae978be8b451a9b966069a6f85461cb3639187bdc1d350c3a2bed4b9f6ab1d1ec278ce568b5eda9afce126a6c4f72b6afa47b30c09aa3db8fee3fe454ba58389ef9ad2a2564159972750cecd843a9549003087437a7e78fea44c0d177074bf5c02c1928ffbf50b4c49cb73e226c37c68503e1dfa9c221aca54758837e116a2e2e81209dc40ccba2ea1fe82944b5fde8f1424b607eef09e7120e9c27cd05f9984731234ce6d2a0eab088b3a22118bac22fc8a20aafac825f9f8d7155593aaee8ec2d921f5073f849282690e2d5ff02d9fed956021688c88fb0f87ac97c115d6e581c8752401c5e491d686f1eff5dd88ab586139ddac5dc355eca93431700b644deaa09e85f57615964c6def58b9b41ab5268d9cb8661044e992842c5c8302a33668cd7a720f703439538ac54935cc1f76e39492e397565a60c24b3562650e82aaf6010a6f0a83aee3de9c43e318a6f20124594c23cf7dcc0e200c4ce85def77ed8ee006c03c96c34dbda2a5ea943f62037648ca57b24952fd90e834e5849f76d54084991236e612b43ee676fa410ac0e0b6804e64dcd211723259a0ad4bb397be4af3c2dee3afe7e4ad78a3280e72aded0982f9993b74770aee61a4753ba130036cd0de4e6044735380ab5f814b2ec3f2efe568fb985971bae684aa9575cdbe4d853d03b5adce9460dd5b5d43ee90890c1bfe03b20db768e48850167038ffbf5d1ba7c32f165c078ec6cd8e9e9595966c1d03994a1e9577e7dc18d5f40dbab3fc7f14536d37b8607dc44726b2cba27ec077d4b46c3cc630ba9d08dcb514338dd9605e6f8e20f05809a0887c3146b54511565d2d59ebd4df60330e20ce32fa78f6b41ea1b27e4c6e3fc779524b1b04f85b5f72a2ba3030940469457a5901a9f45f467254cd9c2b140dae5256912ce74c96d76872b620db98ce4ebfc211ef49f769d2c39c142470fb80429f042a5e13745098f82dd65dc94f0811a3185114b98a71175fbd9862859e48b8d539dfa36d8905512caccd6cf7389370a63aedc50e2ea2a121d5c76777ec57043526a1d5d2fd85530f9689affcabeb28f3464a6b285322aed651cc69ec10da6f20c9874b1e041b30e2fc3d0f2f234d53b511f8d56ebf51b78ebef81ee8eb312ca6d0055aba033a7a069f4bf10fff68a56534fc061680609dfad992cdf59abac7aea9d0445c08fdca1dbb8089a5e6309157fbd91c19da5c9ca71bf4df367fccc7358b86b6f37ed5c3be61fd2d55b80f5c43ac33b3d32ec1efb9b4e0edaeb98929713acee3629eae67028b52bfcb635bbcb7a22c399e3308de780501b2a6d1a75817f3bb4f6845dd97e1422a003a52acd1461fbcc00dbbecd0902938e112c000e6c890117bfc10155a6602c35daed2d856274556dc16144fa1172d1052f18c13554d1768fada5aa1ae0507c72cc0ba8dbadba81ff6ce2ad020644c7c9f3afed96b173fa2870928c44059e67194b7fd064557d514ba97e49583d7aec3f6d6a1394536ae82ef47952591833d8b99eb58100db98cc19021f1c4f24ee2afff9959fafd195a104480dc53b3419908e9258a1ea0c95709ee971f0a89642cc107171bcad31e5e8752300093a01399531477434cd75f9af3d838303bd90a33af300eea1b91692e50ab4e92e447cd0d4f1f68f6ebfc5850620fa4cc5b0bba586d95c12f96be564eb82c87c634192f1a79146fafdd8cb341b11942e547f70780f11aa073f38d1ebe74bc5b5d4d4b1becb70c7d329f7bc2766781b6900447f742e51f29c90727b92668e9353b16a21d6dc8506076caf31498b607ec70c3ae0cefe081f03029fb9ce40cc5688dd20b79bdd4c38aad423a88c0467ccdf5bda6585c1cfe1d74f13b74d2b0e29932da6499aa178d141d2bd418b0aedbfc58421466f788b8fc0417cff708ac5a3b72de289ab46e69347af749dfd82687c46fbdb4b231f57c1fb034aae3dfcfa0bc2cbaed5cc4294a1dba8c73f3e0458b882d7c3d58846652211a14011cfbe521e72e75194229215a7dc1353380ccdb710643afe8b7a6c840f9a649ebbc12b8d5a21c13dfd35ce35cb6431c40c48a474acdbc6ba2566b51997bbbbc5030114c6286c6f1259546e557fbc8a8293ce8085eca05193bedbdeb06f4c7652a94173433c879d06610cd139c968b49b481d17e9870113ad0404180d26bf7f6cfd0a3525b99bf2e772bdec6c175559a84d92ca5ef9796db24fca8ddba0faee028d893bc4d598202a81c5b223ab49fb136a70a48869effcbbd82391f1bc15ed9c87df382ca3592f2552825d185b8df36b762c15a94433b6c316cdde37f65e63318e72da039b7468b41216865d08cc7910ec4d0ca8463232c99c62ba617b21081e3efe259d462966f0b7f07742494beb93915519e1741bef04a379967348b09a01a544d9e89fc572e3e3fd6e43165ee6f5b337c9e4481161957c211c391c8cc3ae245d55299165186b84bfc62a2d4ca1aa66c6b7728ba013860dd4bb4f31652894a022a213c66c0f26ad14b6922fd6af1c4bc9bfd48e69eeec48a473af64eef6bd8b60573a423c498d146ee606b90bb910ce120e0f0ba434d1c51c1a4381c291e813c2de95a766475e512411d03de2b730f8961696bc6957fd4e38c566a67d50a46f8971b2c264826e2a1cb84839847d36e5c2c4f795c0c31ee5b24512426da8426cffbdf23e7ef3c138eac597976d4c3abf5be4ddb5913d5c190498c4b6ae64655b8843576dbae686cbd9f09c99a781d5e0db9b953111573c82c035e598d3f34149d6bcfc90360a40688fff8375f865fbcf9d82333bcde5613af3ba495a1e637adc19c5f1c6ca6d058f975ef827706cf17b8e157c509fd18e3fb858d93d7161382fa4e17f3be8ca31db98eb89d06933463fba4391a34e7a8e5e45700c18292490964e699d48321362a768cc914efa0b9ec4a641ac30b96c71ec2343320856159a009def96a8737fa812005c9c908f89bd70361ea8fead0b3a0a5d3cabc544c548cf5dc5121cefdf93dd5f98006e126fd7023d334b46012f8ed3aef52b78a24e6551c14c2865c3ea97d3a56f884b1fc6df36c20037f30263d657ebc3463393b901c0f4273193caa073eaa50a3e960324109b565c57259e1c57f7a077230c99b07f25673a06a90e26235cf0fceb7582e8ca30d1f15ef43a4fc67254a3d1135217623b9cec0dad044a7e9d06dcae1c95ffd2a6abf37e90a0e380586fdf77cdce4f0342109dac674f9e40e0ba482a7be61b7d69d78cfbb6791566f6d0994510a55a8668bba29701f81bbb4f02d7cc5227fa018dc9c24f364347e75e574ff360164187ec76f35392f35d3b4d166b854cf2771c384b0784148391ee657d2b751738f0622c6865ebfa7aa2787dd36f8a200fe398cf47ff6eda41b9b2b16767765b3ef084b22caad1310917e50379ff499a7c480619e69666a160dd9353dca44b347619dab10ec12133ed4ac2999cd2c961b133c8368f0ea60dd2e7b8d08644dee908e775b2c1537ae26067b9456f47e10efac565854668d2da76e794650526f4c9fd2dcb9b6222759bd30786a570ba8d7ab3b2b23dc16f2d0aff6ad18c5ead20d6d820fb0a99db1909bc58b1fec4cf0fc246ac146c6706547baa6b741c6ce1121c0bd9f94ba5ba35af840e73a43d213fdbb49a54ef71cdb7c1f78421cb4a98cce19666135a4a1effd94b1414b70764de3425904f1e08e97a023fc0e599b9654e67df403e9a1c382472cba53d8bd6b6ac902d19a0300797068e894b807fbad5ccafbc15ec831a75eb46a4f21a4ae3fe9e3e449c639fa30cd6e65f9ccb34a3c31ee753b25b9b642de53b9029abe265403a5d69822417da92801be6378ac4919e157dd9a6d04a4f69b39395b9ea73a90a97211028d627e311339043b908718bc1300923808de857ec2b501dc7ad5bdbd5cb8f923651e1190fad2fd51557d52fff8b53ade2b5d1d1b7e3b5bb26e25c9f231a026585e95d6a0b2f00b9be7d1f414953b543dede93a5a44fa1a2ec877677429a1171c80a4e95e4395b1e7992b51597be49524c28ca38c5160ff7ce098d5f04d22c7d6491ed1d0586b333ad41e90cf55653267c86266f0a322715bfc864dd8daf515eb61b7916b8ba360426296eb762224693f2ca4b8d310a4b56488cccacfabce883a613ee7759b1dbbe6ec5523989037f1ad801202af86f1c6700345f77c498933ec8099ad81a10d22edb86c02fa934df19bdb0db3c1ef2a22a4fecb89eeda95328d9c802752ee49a93b6ff3bdc890ba45d422db01cd4ab5eeca9d461b4fdb070a3b2c03437d5b3168b08ecde44714b8eb469c3831ee0d83fa0490fc547ba820420a3f4f7e705ca974ad6c66e8dc5990e8ea8088fe1fee5c29124c1fa2138da9eb3476e93add9323d53276674b512b8fe3390d7096722e615d21e39429c855f8650158ffceedbee1bdbfaaa4b4ece869438b7e332d177ad4782e8ff681b9465ad16c5e4bf1dd5f6b4255a93494a18ac7cf53c3b2f73634ed1aa7863f8c5ee39ad49ca249ac0a964ea01512390cb49bb098a8f0fbd279f0214c3b72e6da31ffba0aa729906cd32ece99b8ff7e12112dc63c6e86d9ea16edd25b22b6e875feb1cddc1612cfb299bbd8d9990075aeed6c77c38590a12f95352c17e8dacbd2b0086c96c807c06c735b6db6b179256ebcadeb9349fb86cb28f46ac3ae5c5bffcb58061ee9b6abb75232fdf07705b5a80c85ce7b20d695aa0d5ac2686bd7aaccb3686e55a80e75bdb880c6c9c80befbd33bd5b5616062985810c08ac90c307183a26bd59929c3965eb9c5d8494b4c4e8ee2c6981cd5b95774e6af2b9069caa9cd6f47394cf6e1fca219df464ba9566801f7d09ecba729506b18d0ac625fafda92b72b88dfe3bfd3317eb1b15707ac6bd2644a7ae1a7c730471594fdfd95d2e56e6b091288fa563fa532a209bb692fd29f6089f6a349fb6a7647f0f5c2676dc0478976b0283eb4086c661f34d3e7a60daef0346ada082e819cef4de9334cdae8190f104eb53d86ee857f75004b0c7b2c18b6349852d933ff9aad23be03c8d579666c55f86a27163f6652c60cc2be6fbbaf7524c5d6235b41920f190315b36d88e6033ef6c932299538a1d35b6a0f7f516dbdc358ad3cf36ea1f41daa7d49afabae2d1b698f3bdd05e78611952e86be6a294706c95c4b86d90ed42c2bcea21d2beceda1c4684783593a95888e321311f1e53264837a20afa9aa7282ef0f1d3ab11a2419752df20d53c494df7cdb6f9a73275be9e253d0991184dc16e98164f1452b55cf65ecf613682252a47d3ad9e80daffc25d19ad8f54b5691c21fd905467c5703fcb740f22ee26a7b9fc5717241250516d7236cea46d6dfedaeec783ba49ac54e49466ac51f62648f678e3150a10d98bb9da07bb3a623811e2cb5ae72e7666a954493d9b9399fcf856370c1d9c85798b26bbbc0ca49c13cbfb0e5b221ba4da3f602be9e4e45d512ee4749a805ce9550c80ec87c5a10e445b61fb4e0549dd4ce393b9e9a003070b5a7c6c5a545a2cf6a1b650633ec52c2cc5659a6323687b921a978db8de60ec03d43e5de87849b1f7b053bfdd5915d6e4628f4ce4cdc7f2ef04ba357cb83c7210b02e73f9a0d08dcd9aa37b88b10d716c4aec9a9894561225feccd15d7cecd6e630e626ead5cc029bcc0b03d451b1c3e6d7723cf085204c7ba23d61ce2746e92fee33154bea9a6b6ea99fcc5b15436ba4c957652264c6a3055c64792184bb533a1733ec71130fed8ea987debc5a5d75a151da5a11191a1e5cd6a0f65abe1bae46568167917082919fc5755635aad0f2c6e58c0005f85bfe397ed9255398c734b112685d438bbe9ced8302beab478c88617a8226e6ace8eeba70f018610d32f30d8df00057cb0ec6443d8556d16c8e54e83a493b990307d0f04b4860d7e0bbe3a98cf5c71f49f242a8c2eca40a490f988ee809faa6f71cd8e91201b4e163b6b41d287abb059bc6d86db3c8dde40c4ea77b45c148ff91db710a8aba0c8f7c42fc312a986eb860a2eacfcdeab9ea31ae59acb0ff36cff0f7fc25b61b4ae1ab7bfd9b0dba1265873ffb4bea51b7404229fc578f66ce9c1a78c42c95b226698fc9c261ca9a469f44afbfb5efea95f6348ce70cc6177ad3f8f16cdf56a880278fd64d2964e0ca14c457d8551c0f2f83452a4c22e8e4c0636f49cb7fbb81e6072016c42aa1088be38e00f04c57d2b0560e66f6e622b3898b538687434d1cbea2437b5e701b1c1d945b4fa852493cf647cc3074f49786ecf9a9b787ce4b5469d614f1d7536c0a96073df1ed61aed11434c29219688dab5ac38961ee593aac8af43a57e2acc9b92cc3f7bf4c8f1fe1a4a8b65b339529aed7780a570648f81033833dca415fe9702ddfdeb5fc4faf7910120b6b881042cbd6a34c1bc7d8af0d0161d2cb784e41c3ba04fd7a7f4c5cdf079e6f2b925e8782ced37bf78161ce0e05055b298c1cf3a2a1c28bfc87829576275b752961f2fecf8c043f6685593799b64ceb9933ad42f9118fde47d5dc33b8049226c145e6d56e9a1997fe511ba80e6e0ce5a104ef6c7bdb06f5b078bb858c464160582fba298c115c06df8d3f3a4ec644a89404fa27979a7887b7a8711e324f70900a0659661529beff04364aaa62beb224675e5eea8f47b4aba741ea7e384e7b434f4d068a2b6dc8b6b85e4c0bbdfa34494ffb60b8b78d984687eeee0ad7eab459bbbeccd318d086467d4dcbe2d5a99741fbaa5835c91e9c0d9f85845bafd3eee4f1ab1d86327924ff4083fc8ef1ae115b9b2d516333542a8f64fe4cc9f2fbdbdc3dc411e566210f263e1c275da0e18e247dd59ee6e014531f2c62baad6140ca8ffbba78dd89b29ddafaf2a73ff8c38f02f3f12a40b174f4dab7f832084ef4eeaf9382ac1050aa1daaf2bdacce51b6069ae9123886dc88b9bdc15ecb4bf66ae4c92fb0d3b4d3df318188975d8390622c18933e945d7a932699bbbcbdd031b64f1f2fe7ce16ed4d5dcc9189b30b5be705f8215bacbe549f5f4fd152a2de0eab8178f2e2d78ec57f9d102783c107aaa82608c01b1e9baddc172e0ac4ff3c358041d2f1690614d48f74c48f87eede01123d2234db9b3e844956a949508fb989194b35705fa8f1cc85fa1cbb0cad1d1571a5dc8ea5cdae63617ac5ce14ec2ead1e748cd242b8cae5c12b1254dc6041efaf9dce66c618f54f8554ff0596b98c6945340589fd0959b84fd5d9a371081ea7b6a21d1596ae0ed04b09ca27d244443602eb8ff0ccc4162a431e6ce6ef50e42b9b9ef01cefeca584ee4ff86373f0ba469bd6c3c01849c559d742cdd12698410b49eb6230a409ae7872b71698fb5298417f99a8024278536f3b0b3e70d3366d54a561cdd3c465a48fee5e54c380bb7c4c904299a90d185eb428d825ce251324b66faf4c88fbf2094eea2fc03184240c50caa153ece432b936d284509c697464c01a5a9977a12df20412c02d63c1d74e82ad094395ee15133f727046582ffc506a12e97b67270ffddb879433d1fd8d0ee8cf5293bcf526ada368cd49594241ed79288e6d88f2cf4cf07c6f1a20eb7e78a3f73bd1848e2780a0384a07a57fe9b0b2a6da5a4673a43e7a3b574843ab39e4a6c008ec6a53de3194f9b5de8218ad121e21793e293bdc01179f4d0d37555f740623b134dcfbbce8a5a0cb677771fc48bf75b7a5d9271b74378af89bb090f8eeb0034dc566ea120e0b55de2ae382dd5313eac84518d0b9aa000af30dcce127ead800a59e4ab3658b7e7c0b99b07dc75ef0405d44c224737b71d4b8e9ab773c0d01a6f12e27e11bc801cc65825827d48cb56ef8ebcb980f30acb0ee4f443ddc00078c3aa612eb073dec767a2f72b03cbfd856cb5bf3c8791bda15a05655b43258fb7186a0279cd6582ec2d504a9e871fcd7245ff5750a2b96635df503a81e58cf12a96219379547408c9afc3305c5fdc22027487bb341672d00bca82e11d27e4f9cf61a9491c3812a695cb7bdd0455b4db7c2c092a4784a7f8726c76c880a3b5ea767c54fbbe6c3206563c149300674e0b58c577fe06b6ee657cd1ee041418469a8ad530ae0c5dc4d0722772f1e9f10bc99dd1899b7c6d2d26bcc5d10545f8143f71257aa5e079eba5409a5ae49b1da572fba75310ad0f1bd3f6e8692c20d0e2f923796c38f7a112bb1994bbc988fe341d52365f85c1300a5126fa482b01416d18868cb31df2ea910c322af1628aa26c0a11a42822606e621ba233f81ab14645f7fee52e6bb9a30557278b173c86fd95eb687450a8a4d7fdb67c9e29bdeafd7ae6c5563b3eda5dcca678bd29c4193c1cdf50206d7cbaf91b60b6932eb7084a46ca98e871f39a916f898e508380c341fa5f9e12e60bf4748af033f792aa5583a91e512453876a980deb749f702a3e64991fd6ed379f0b8b567b153e6e28ef6a6529e0b3364c634e33875c22503ea3f379d854923948d68d57c1fa1689c0d70317a6f5303fe9a035c755f58cc11f47afc20d6e654535fd4a5a640c1e06db91217de3da8ce33ea20a4ee76eec036612db015bbd7136de9c4723486bf0677e39c00a3daed5647459e7fd64a082cc8844440715b0a29b4b01ad93b6a2cfccf380ee9afc7ab600c429076b38fdf6fe1f7343034012e08f1865674c7f5a20801922c2d1717d7d19ff896087be222d2ca54547356b2e343242e88da97dd2b4a0eea6d59359bea6e1a5a2a9c214de73ef728c61f74adb85aabc4322e36983ef95f08751500773d70e8e6033931676a346489f555583e72f317d9a3cdef76d5a12441cc7711ea7bfc3ebbc9eb460fc1d64e7a060ad1fd5ed72fdbc4f14a3584eac2a49c854db81174fe6076a642ac9277c78db06819f0f4278344bb91cf31d2119eb30eea05a717447407b4cdf4f732850c03794efab4aa0e0ad2d19dbc2c8754ecd8603975f3b260b7f153f1d6779443d41b4471776436da1751bc9ace540cb6ba3e6c5b54749b7302770d3db8dd5125166f9cfc937017f3599f5377f5d67f77c28fe46f3ff0b6c4654b7394112bef121a3020c03e776ba6ae7ff80e415c928598ec191806770a8eb63c623c27cb49965ee9882760e79c8145b154638cfde563ba12d31c6149ff0c9e486133900d4f191cf8cb3853bfc1ec8447c7cdac042512046847f2f9d7a481bc06aedaf8db7d8dc754fb0cf606e46a78442c8c92400355ee9c65f16f150bee284f6916b6379811faaf4da63fcf1deb89eec6bf1cb2ad01a7e73b20fde49f48ea985f389d44e3f6126f5cb541103b59f8bec1e1e912ba42ce7492600db9962d9bd54a1ba67fdefe31d7e0530f5677c49c6f9992d454e03e60550faab4de4ce942cb69a7ed7fbf4a02ed18616f1ff80ee8b41828c68df8fd95d192cb44fd5f709e5eb961fbe41d92eaea3423bdf8dfc0399010c808ebf0ccceeefdaafd322c5e7c8a85dfe6849bde1049017ee4fa476b00a69df2f4f35399a6f48ef21c1c28449b803dcf37936341057e6463e8bb1aa219b21ae95f2b24ee66e8a94458e9a2e4e0c12b4053c612017709ad5fc32bb6c37aeb01c12ed3a29d9623a626f278719da65b1dbf8e15683d9a974609fd29505dedd31a2fc979d885dea68a40f12dd2b2ea3e33df9363508dd0b49ba97d95444a72802af5c176b9d2f956f419974bc97a7036b00f6ab5a066a4f639279e28cc23ab9cd097a60447ecec7a63a541d3be477a596c4b59d4b883f644c13cda31420d4f6a2e09a35e81c5435b89a1725927802a1257f156c72bb2a8859c957cb58008d7e07b7944253eea82ecc59d124a312fc5ff9bb5ebd85659730d37e135fa1fbf74447709514c1c0a4c5a10c3d19c6d658031925c6d008297c68bba2a3bb7216cc0989e2af61093dc479fc407df1f4f03f9621a50ad735b26cd7b11f3911076f1cd7da947b72b4d0bb4a3bbdab93d90583e3835f3ed47cb3e6c37e1cce3724755123ac069ce2b61b2c52d48cf81d189a5d26e1be61ac159ccffe664dd1e8acdf75979d83bb4d2f470e0e0c89bc0d496ce31644fa806f41995d525933878ec46140b551ae14d658c44ffd64e28b528a10520eb0fbd165d12e141502eb8656119cbc1510d57828ee74136f9c3e26358b673a5fbf8b6d95e30fedb7383bc463524fbfe258d03de855812920c28048f33724980224abfa26514281b2b84184e978de6826371b7d16e1b60f22063ba0171fed2ab368533a82086d65da560d51e32d2cd2e65caf4bc2a45294699475527e9727ee801c2dd1d8b6761cf254901e085d55f9e38493cda0ca3e3c1919cc6d6d5796132dd0ad3fa6fde7dc65dcb5c109586a0ef0fd4188e6543a9ce3dc59ca45bbb8ad1d54cf276ab281530bc3afd9cbb3f1c351a9b2aa088a66addc91e16d0482b10bdb63b2beb5599497fa28808b1559ec3d3f22e687102eb582c459a31d915c3acb566e1379981a7d6619336761b73dbd416a95664bf0846358f04603cf7d8a2f72e730d0ec0763df5a724587285423eee722aaf43c95d943045d40551e38bcaae311e65771a69536d7aec237a1cf771c186ea75707fc6b9b027a97464bc798cda73acea4b45c73e24f8d5d081c9604d09f6d285bc70e1f62d9a2699fe6c42705c7b5d5806bdc4a071f39c11a58ed070eaba2d382cbf4a168be127fde86f45643d9b8bd18fd04ff685d4587b1282cb75a5d7cc2e9e3287856d8700123bf736ded622bffcecbbb2d1e9e0c5195d90142b36d40fffae8abc31c5a8683c99c81adb6a5aebebec9fd27130d5ba01f8ae487e53ec0cc8d5e0dfeed69a0875925de133d849ae20995bdd263230475e8440082297400c28590025c1252806e56d988443b173ac1dce22d5f27561868e95a514d13157da99ec2c943433bd098f0be92f69f076bbedb1aeaf3c9e43bed5005a817b01159eb1ca4cd7d519746768e8217bd7266398f15e00d8d3c82e1925810cbfffe663cc551090a0ea3db38aa59095014407218934d5c23894d880838d50373c65209d66df549a63417556571cacd143b9101b9cc5ce83c5047463151d6d9dcdcea6a97122736f815ab7db085afacedb0b587f7c70014463d0d7fd1eae1fa4f2ab84bbff34f9738d20cd8d71fa3522cfadaf3a615066b0ec66828b5e1f9ad924a725c2412acddcbe7207eb1b03600686a723925d38c6955ef334d5a7115698dd5e3d1bc8b7bdbca5908c7f124a715b19ca6aa80e82dfa9fa9157662f09cbe8d6aed9c26ef8f4869b62a8e6c37644ffe1416345573b5e8544fccfb41838073258609f453b6a5c9090eb758d8377ed652d414cf07dae08c0bc5af97de98193b417ffee244209552ddbcd29360567de04ab294b7ad53887054a7f2d06b8c10246fc474146c38d34139046052d4ee3204f27a60c6ba0eed58bab051c1420828a4c0ab9240060c9c328b8462b8d7b4fa92f96983bdd7cf7ce4c43d3354077cdba3b44b583d8700d3921f6da56e30d80c0b1973b1dcd632978f7e299078b48588e7b483bc215f0a36044e5d01a1e89802e0386459f9c283ba7fcda749a68a36d40a1b6b8fb92a8e465f49684ee8cc0fd63715ff0b20fea7b1cc7ea7cf9ce8949e30a755a653a8d92b2ccbead3e3033da29b51a4d3e6648f00330df35dd1c6fbab5d3308a590abd5614699bbc71e1e38ff287bd21d543be1986e8263b8a84471fdf80ff90bd7708cc445d183885115a692e7b37c1439c9f8fce7a182c56e6ef06ffc803df3813c78ac578dab51cdcd14289a2715953edce33ffb177fa27009b156832d40d348d7ec769d8ec114384fe9cf93b350e17deb67464b93951ff5b506ec91e2b73ca31ef0682bec782d72eae3f6ac00d0e301c57a13cace1b648cc0d5602201a1d3177e200d6d1ec8e9cffb29a47eae8c5f2db12ba5e351c99978d349cb77169f4de386ce5274194684766cab27f16773487bcdaa3f469f819f8e9eaf5926c2e04992a31f564d884285c0142fd6d82604bd3c2ad66e65d703ffa851d79b22154fa8f55dafeffd8e156d202c04eb5d950383eaa218419f5dbf7070279b6d5f496efa3fb7cc2be23234e9d9dc3a9ae26672d3ec77e11275807f4d04a99093233ad2226e3b095cad6502ba16d1044ba934287e6f3bfe9130fa98cde14baae8374d035bc4c7e7235a3d242c0c159b5843a5176409280384a22e5f89ec9ac0a601fd5670767bdd940c6634d5527b8064873f8e11ebda44c0c2322e80d05658fc44378944588f0104364c373723c80f2a3f66be5d4a14b367a13532b540fb65aef88be7297d91532cbbad8f91257d5d333b7b14e90f284923e496dc540e242b7a474627b8abc41e54f5782bc9834c26d41dacf80c35667e6d0dfda09ee2b76e8391ccb11ed65b81f581cd5048e9d5176b468ea8fc6bb18c8ca35df31751a7552b1ba8c8bd587812cc9bdec416d3022b925000573dcb46f032f590976bc8c6279aab67d8286b7ac55b44c801e2c0fdff9ccc52ab9588a599d03999e5f6d8965a877e074518613da920ee1cca39c198fdd239b35a39f66c8f7b8129145a6b46ce7f57313dcb8a71d41bf9a0750f335d43d8b49a5edc025233e96c95f3cac53399b13052e3d96625e2213a0ddf176c9879063a0ecb838ab85e4910d1e272224fd566f95ee534d5cfe4c4d8236d66713eef4c1d069cd0ae641347aa42cfc9678fab6d2a38c6c768016b490472ce6398274f6dc59084d73db92f75e44655fc9926098b2bfe458e22fd30ae59be0b74d44556e49c3f561cd9eda8063b5315764d705e163f984a836b94d8a531ee9ad4d51d2fd81ba9f4ef73d06557d28a77a63ab4def4362797984a740d5bf4daeea972441e7f970417cd933183ff07bab1f839f367f7b503499135c8aad7a602fab00ea94fc14cc0064f5e87698200f0ffd2eb1c4047693412d403dc9bc2bde2ed31aff7e789d8118caf5d3c40631bc79615784711d58fd05584a361d06e98cc50695619054aeb06d72aacb6ad40227ed3892771e7c4a4786940ed3766d2ff088d364d38dcac050f4c5192e2f36c91b5065aea5ecd38ea1761080ae583dba05852fa8424b304b127ee9b686761ecdfb645956d5fe2dde1ea802f498b22b163457f8c69a4589cd61ce12530f923f887081b857e877434475b730faa0345a0313fef47d7c9c99be6a60308e6002be1fcf710d1c83cd9c999aca7de9a814a3604dc4b0feb97484a105dd0ba08bd76f1d2cf32c217c114a77088fa8bbc8a7d75684e49fc7fc37dd1deb84d8fb866b63b1dc66b646f0a1e5a0101bc25de13577c689c1cdbb9e785d3648d25eeffac6c447703110d76f01cbfdc611d91b0ce555ae876c98eb834b766a62548d92dd52cc95c9eba7d10b1ddf6dec77f057c615aeb970f38579666733ce5db3cbe99511c36dc8019cb3eaa2718c669aa2bfdb39e8408f97487bd50242d0fb21b808a324cfc9d165ded04691250b3284429c3e47a8e351e344644210cb3327da833d6107c79740f028c7c1e1a7250f9821c926ab27326cc983cb9512ed59706d19abd192f00efe4a5951008068e1b68beab29ba8b8448e0d5babaaa1dc87f7ebe6074739114814d3a4a4cdfcfe0946aef0a3db722df4f3f6bd59bfa138173ed6744420bd6593a7193f50f56867912e16d0be9a8d58acea7fda6e000e6e76fffa5a68f54c8b9ccd6431a1469bc18b42d5d05d1f3a3d4768b36dc9a5b95ee489210bb4051e3821ed41f865a77dc5acd2ae5897033fd694f457ba6d8d3272b394a700c0e4d9c9e979afdf0f40470017fdb2e67a0c8fd780a441a2a42aadaa5d9fa831ef60a971217db0a68278a8f9feb474809d6e5335630a1148f0fae8614995878358d04f43033a5a7065444356b45fd39bd8174a5d38582cc579e71581130c7a0ae2bd56e339f91035aa0018b78ec156b8d30f0a3a45c795075aed72b37ad31fc156457c81812b959e627d11a206ad193973a53c8cb97a3847cb1aa9948160eee7baffac0446c646e3f52c20356eacd8c53c6144a2f2b1e2778d92db38d605ea7fc2ce966548507ab32382b60d31fa50f24e42eea144f3b512dbe01944a1327b849012e2676dc43b70657cec2b0f43b7c2a3916caf4a5b008039a10077457ed7d7048ab1f2ec152d581faa993e012092fc4b073e28aea27024b67baaec5200955f8ae7618b39e1261cae483ab95cc46436cc11dd87c438e63eb5a09156a19345be0885e5078deaced0c3edd0ddeaeea40f846477a825aba2c18b3becac61af13dbd66fb83d0a259f981ef7d2b530b782ce106be37fb5b62145d5f34590bc55bd53208c8ebb3c64cfc6a6c327019507c7a922c7eccf98c3a59c83680612c4a287b525bbdaafc2eea96642097d801b5bb5ea2fc678b62ced01476178e48bc588fb4f0486de18a43cf6eeb2db6f09ca431c2c167b81feec0d8fe67911c720e0886e042f7eea7f79bdc87c3b610992a4ff7ea79d3703fb16ad0af00371eaa50fd282ea209761ba7ead165af723cbff8664ff3526581a2f2679c5df71efbae21eca1640bc12c8cd71466a56343572a15e40f444bbcb7f0bda424356e015e91c4cab25d2be4244ec032cad4789400a634540e0079ae457354d8d08ab995a61b7339f6c625794306cb841d94c06c5f3d29f4953f21c2e13516dce5c24aeb3b4876ff87406036c1412b1169b26f6ed00e79b0ae82c746fd505fe5ed31b8c778c9f6c62b056eaa2f135f55d67b1c67dcd4798d50bc4e2f7a6161f7922164675b3a35ad05b29a4549d427f1e5b4a3cf6cc10e69e43a295f34d99b71439e593135a53a31b6256e0e12d730e0d8da24cc4dcbf1fe522f09e7702dc8efa38867522893e589409d0b159bf81e71f02bc721759385757d50ad2439e82f6ed2b9be60644dde0cc2228b780f84108060c3c05d865c497f67dd8f7be3062aa38488098a3f5aae03c4a67d8def25fa3c5b29089e640a0b8e00026c7adfcbe433ead6b4a1b54518cc22771f1ff061476480eefeeef8778d2900f71ec6834d9c6fad4d86698949a42a4eef72ad616d1f4989888c9ae468355af279c831426b0115a0716f1a59401a26c96283b59b2a572ad98884d74d73b32ced4121fa7d4bc6255694662ae62e508e25390d3834f13969ae064d4d3e9c9076cd9ee461d7aa9deeaa500354946eb85804ea599f2ccdea5146d3bf2f3a64b8dd61b650018414c436a6215a87a9a5012684ccf74803cde867b0a6b64b872609f4c6b46031968ec4a5f42bc568b6be0413af30c21c1a445513ce4384128ecf0e7f9905b66d822b360a98090b7181bf1ddcaa899a66a606428f941dfbe0c1f5539af98d8a171bdf8d0b5909938a8bd8c2744f37143ff868173f1da87445f40480eea5fa9690a92675bea059ca91177fdbf2ff8e6ba2cd01b966f1b0d039f4c5b1fff79a594947f46d364a4324b231832b9acec279849775346684d9dd2fbaae2f27860d4500155b757c8842b59310679efb3b2e648b490885c54c9b78b67793793e945b9cf9db902f0151f1d29e735147eb407efb7bc3a54c4f845f21a935d14f7b4861cc61ef6ba8b9a8cc418108a2ee7afd2081032fb6ed866f4aa5a6c480433a2465b3cec3693e5b32c2b101d6bca2c11ae9a78403ed421984c62385223f31a3e0a94e2540cb398782f6070d9228280fd0c676d7b8a4adb7434d7c722a454be2cbf9f28856157d4d16ddbc2d45339bef6dc00fe66e23df8c7e23313c9a0af2f7ff9f56940b62a260605d1b16c1dfabda868941666d2fd51a4e0075dae110784d1070910a755d64be1e26f671f7e5fc88fe76836006fb158234f203cdab552877be4feea6c8da9f1729247b14c9d4ac3e829b50979e07ba0b458572b2d73eaa3301074f4cb9dc1fcd644c8441b954398a42b4c36427417a7fa4c39daeac7d783dd1dde8b215bde8c53d52d5dbbd86cb4a9f0bce600f31a8aac0a1ecfc4b4385bcd476b1e8c79dde58e2370620a0d2002837d258d9c39effa37f5ecd77967fb3c277ba74418897ec5518510a31ca0426e93447c54569e18690a3bd8d7b721b643376fd6ef920bd500d039107c723e7a4ac579a7244b7c12026e2a10be090940bb9b66137eed83dd96aa0dbdca21edd41519616298c74cc086d223c1da389e6b6b6f80177f9280d1aa8c95993268891525d46bd5b93d6fb19e7895c9b85b0b9b1df1c84370b99ab3faaaba18cb44f1e02348c9f45b121ee4cccdfd9b4682245c8e8e5e149e100801520d8b1cdc5b1aafd1abaa7c31ca2247c73a3b3f9b686c137276ba658d0ac57f87f930e616ac1834f6daa4fa26658cd8cc6ff40d702b1c9e113c02e23eff6d423dbbb81f9a1938ef7d55a46a78171035c6949fd84a927a1b723bf627814688edd22795ce555a64fc1af9704ddce355a96436120425056b367a905d2f792f711428e299a9a1ae52992a43e524c2695ff9513e6d9b2ab7a4eeee5c40e8f17a7f3933074bf3fb548427fa1aa3835aa7973339283d7669fd0d6a9ea2bdf9da150bc308146812f23bc174ea467bb29f0424647e2bf8bd8be69a7f7b60769ee5f691a9ea848eb7c49810e2ab31c6b70071617a1a50ec58f8b4afd7661070eb9995557f7bfb4303b51d9f2fdc8cbb833bbd7c9c15ea677e010a6fc45aea8710bdaccd27e72c0a2bbcb926a6114dcfa508707bd61f79adb5878cad04203ae16f6b60dfa0387d43309ce209e5cc0fc03c0553ea46b5152a7371414466d46a7fbe06c59cbdcb39c45fe7e1e13b058fccfae504c1735ec3cefe4c1135818321b58047e3cf665fb60dd46c3a2e6035266f4ee489a62fbc531c5f9e47b265aa6b66f367d36d3fb28c1d39bff6064a189775ab080028faa8331421b2c093e69980ac16505752288634de15c81d4592ce828d62ee65900757726ac33bab4808673d154ee040c89996471407335870d166db348f61c60db4579c8568997810a230d720acaf8a6f549d9ef3c965e5e507712b57174e199bdb2f2b963acb042cec1ca01f5ac9c388adb277c6c40b4cc6780e694c787b46a40b9a088b36d66e91d36150c55672beb9857ad3dc84bb1908db0bae94461bc25c816f4cb9b7ba51d018b039838087b446a31f848baf092ebb8bff1ef519831f373b931e755bfc9eea95b8d397767176b36a5efe33b77a437e92080a1d595b802255d3f44b2eb50955858e0e21dd8162651842dfd83e6b1ced3c3e2b1f838e7c5954f13b103b390c5f69af1aafcc2d4ae060e9d92746d5be231ff387ecff82e26795534e34f08f6b4bfe3dd5514a9df024aebbc6b47cfb5a2709bfe6d331f2252a840e390e658d76f80d8b9b72d5c5e29f213244b7dc1dc9b16d2b9b59756a2026816bac69f6a80096132c53ec48e875929b5b5912a044d6a37acb71b11ccac2e11f294deaac83f6ab20ac70cb98d226eb8791cc47391524fa163f0c0cb8436f2a1f1328116fa5085e81233d98a2cae8f8be3b482e618a00901a60acfdb525675eaf32e50a1091ee533cdc94d7b6c9c5895d6d21f265358e367cc9816fdba49d1c4348f6492b99ba6a4aada44ce5e2e012ba4ab85faa89496cc9f9fc1acacb5f8ed6eebd1a2cffd2620bc8b93b071ef59f1099ba1892dfb03ae7eac90e8d8130f0879c7b7551dba9b47f7e8fcbcfe9ea75b8835dc0916b10d2d92486dbdbfe3770cc95f168b8eed26067f8b9e8b4e172fec1e8b7ffdc80610b5561d111301ad6fd61ed84851f4c844bd1410009ee62be0d2424334bde5b2e64ab3f6fdaf1963b7b7e86927d69fcd5977609f9e9feb576bb012de6803fa31773f9f8488013f5537ff20e0a6684ce791cfda39a895d61e97b59263b339359a2d032c86a3820ab284095d5c8fc6bb39f7594d9f91ae1c38a68faa5f87c37a4fe88c56643815f7237bb962b726549952a88c0b4a6488f1cbe4bb3fed0dfa52a503e09080692b0aa604ef4673138d57d2d05171d0baa7e78b97d1132072557f2720dccd1dbbf93e1334a293dff29887ff8f13b3957faeb4c083e6a5d848d47772ca81aaafa28fbc7347818fd562b72e64848438c2ab091854ffab6f53b67498abaddfcdc337cd5b2ea4a5663a7efc541529a38c9f39828943503a3380a548a966b19ae4d05f2b192e638d73d2fa2a1425ad720713003f5f0ccdc6e3a798c2895e83a0e2ba958de6ec4d46e75a37973e5253043776b6ef00cb9ba70f6ea15b85eb32c5572acdde7add8c70abe1b4929c89b2d8c77f25a3d19b3b3deff5d6cd0c75e570a16a34f49ab6496b89f94b25234fb281c38544a972e6265f1b3f20109f7faf10ca98333182f9fd0871d146e6714cd009c73b846044b748c7fe87883d4f61a15e45c9d7b5fb2dcfd1cb0a2629d902c43c1b7f18716089f3bb08758c99697476f8a8c972d5ac665f299bbf34a296a00f92214b2f85533218d8b5dd7a9daa0c16bd10a2d568b7f68e1f09462e8fa6f0559019cec3a1e1dc5c9d2fd204fc847f6609ced7f8b9a7f54907d24b71c5c96ffbfab6489e9b6b646e09eab59fbbdca3a114d6d32cb76065d158267d8858177708e6402601469f78b0df199ae7d236ef89e56d3b414c982c34a369b37cee2a00f5dda468287d5147ac0356746dcfcc7a762d25cd7891b565dddfc61d62c94dfe4491893aa37608fab69ee63edc7ce27e1341e9fba726efe2344abe396ec600381493dff62368b7856ebaa9900d903836d9a4c46a93549c02a9999edc8eb59f61b208867c92c8e7e4040eacca643c4c8d591159c8d6f11299997cfc2e589171e9fd9f4d2ddaab7b152b8e8f3759ecee07cc56186aa02a5ef25df77cfb7625b4feb4c061f76c7fdc695484df0e17dfa0fc244a72670721539f44fd1e7eee850ae3ad3e38b7733c822f53e09132801176094b969d9e68911d4b89e36e42f2584e62fa683c1087f98255328eb354cb30d8897afd8c358a6f5051ab01c8a48e789532ba5f7522dfbb17c75e5a366bcb1645358f7f391356f2c0c618e36f1789fbd0e6e00d86271809e99b3c8dc865c76911eec4d44b2bc4c416375395a432b3c6dcbc3ab3c1a5aa42f9f17ee966a8f050eb1622f5519cc02be17dd15e90a9dedc3ae99ae1ded0c3b54eb06230a95b2eb97970ad15be05201cf2d0a76c2dd04787d798053a3d87555fe864519599b43bb69bac409e4f50bda57d361e7008ad302b590cd89052269f7dfccbe829d83b3ee46bdd30364f04f2854f493dc1d319f43d3ac30e80653e0a2ed72c02b574f7f13b19bd31ea4a89bb5f054475067d24f788014554461107636f9ae7d25e5eae173641279d03169afaa59ab5c99ad8108cd2819c4c8cdad6cd1dba6aa5bd59c4fbe2d06721e5bbff8d47c37748c83e02fee5e396b5d7fa2d82747f7ba205fa0d5de019f0283b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>架构师笔记</category>
      </categories>
      <tags>
        <tag>jstack</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装kafka 3.2.0单机版</title>
    <url>/kafka-install/</url>
    <content><![CDATA[<h3 id="1-jdk依赖"><a class="markdownIt-Anchor" href="#1-jdk依赖"></a> 1. JDK依赖</h3>
<p>请参考这篇博客：<a href="https://xiaoyuge.work/jdk-install/">Linux安装JDK以及配置</a></p>
<h3 id="2-下载解压kafka"><a class="markdownIt-Anchor" href="#2-下载解压kafka"></a> 2. 下载解压Kafka</h3>
<p>下载地址：<a href="https://kafka.apache.org/downloads%EF%BC%8C">https://kafka.apache.org/downloads，</a>  点击相应的版本，下载Binary 二进制版本而不是源码<br>
我这里下载的是3.2.0版本（<a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/3.2.0/kafka_2.12-3.2.0.tgz%EF%BC%89">https://www.apache.org/dyn/closer.cgi?path=/kafka/3.2.0/kafka_2.12-3.2.0.tgz）</a><br>
<img src="/kafka-install/1.png" alt></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools</span><br><span class="line">wget https://dlcdn.apache.org/kafka/3.2.0/kafka_2.12-3.2.0.tgz</span><br><span class="line">tar -xzvf kafka_2.12-3.2.0.tgz</span><br><span class="line">cd kafka_2.12-3.2.0</span><br></pre></td></tr></table></figure>
<h3 id="3-启动zookeeper默认端口2181"><a class="markdownIt-Anchor" href="#3-启动zookeeper默认端口2181"></a> 3. 启动zookeeper(默认端口2181)</h3>
<p>kafka需要依赖ZK，安装包中已经自带了一个ZK，也可以改成指定已运行的ZK。<br>
如果改成指定的ZK需要修改修改 kafka 安装目录下的 config/server.properties 文件中的 zookeeper.connect 。这里使用自带的ZK。</p>
<p>后台启动zk</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup ./bin/zookeeper-server-start.sh config/zookeeper.properties &gt;&gt; zookeeper.nohup &amp;</span><br></pre></td></tr></table></figure>
<p>检查zookeeper是否启动成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep zookeeper</span><br></pre></td></tr></table></figure>
<h3 id="4-启动kafka默认端口9092"><a class="markdownIt-Anchor" href="#4-启动kafka默认端口9092"></a> 4. 启动kafka（默认端口9092）</h3>
<ol>
<li>
<p>修改相关配置</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim config/server.properties</span><br></pre></td></tr></table></figure>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">broker.id</span>=<span class="string">1                 #Broker ID启动以后就不能改了</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://192.168.44.160:9092       #取消注释，改成本机IP：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">num.partitions</span>=<span class="string">1                #num.partitions后面增加2行。</span></span><br><span class="line"><span class="meta">auto.create.topics.enable</span>=<span class="string">true          #发送到不存在topic自动创建</span></span><br><span class="line"><span class="meta">delete.topic.enable</span>=<span class="string">true                #允许永久删除topic</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>后台启动kafka</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> nohup ./bin/kafka-server-start.sh ./config/server.properties &amp;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">或者</span></span><br><span class="line">./bin/kafka-server-start.sh -daemon ./config/server.properties</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="5-创建topic"><a class="markdownIt-Anchor" href="#5-创建topic"></a> 5. 创建Topic</h3>
<p>创建一个名为<code>gptest</code>的<code>topic</code>，只有一个副本，一个分区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh bin/kafka-topics.sh --create --bootstrap-server localhost:2181 --replication-factor 1 --partitions 1 --topic gptest</span><br></pre></td></tr></table></figure>
<p>查看已经创建的 topic：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh bin/kafka-topics.sh -list -bootstrap-server localhost:2181</span><br></pre></td></tr></table></figure>
<p>从Kafka 2.2版本开始，Kafka社区推荐用–bootstrap-server参数替换–zookeeper参数用于指定Kafka Broker。集群的多个IP端口用逗号,隔开</p>
<h3 id="5-启动producer"><a class="markdownIt-Anchor" href="#5-启动producer"></a> 5. 启动Producer</h3>
<p>打开一个窗口，在kafka解压目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh bin/kafka-console-producer.sh --broker-list localhost:9092 --topic gptest</span><br></pre></td></tr></table></figure>
<h3 id="6-启动consumer"><a class="markdownIt-Anchor" href="#6-启动consumer"></a> 6. 启动Consumer</h3>
<p>在一个新的远程窗口中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic gptest --from-beginning</span><br></pre></td></tr></table></figure>
<h3 id="7-producer窗口发送消息"><a class="markdownIt-Anchor" href="#7-producer窗口发送消息"></a> 7. Producer窗口发送消息</h3>
<p>输入hello world 回车<br>
<img src="/kafka-install/2.png" alt></p>
<p>消费者收到了消息：<br>
<img src="/kafka-install/3.png" alt></p>
<h3 id="8-删除kafka全部数据"><a class="markdownIt-Anchor" href="#8-删除kafka全部数据"></a> 8. 删除kafka全部数据</h3>
<p>1、停止每台机器上的kafka；</p>
<p>2、删除kafka存储目录（server.properties文件log.dirs配置，默认为“/tmp/kafka-logs”）全部topic的数据目录；</p>
<p>3、删除zookeeper上与kafka相关的znode节点；除了/zookeeper</p>
<p>4、重启kafka。</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装Maven 3.8.6</title>
    <url>/maven-install/</url>
    <content><![CDATA[<h3 id="1-下载"><a class="markdownIt-Anchor" href="#1-下载"></a> 1. 下载</h3>
<ol>
<li>maven官网地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a> ， 右键复制链接地址，wget下载，或者下载到本地再上传到Centos</li>
<li>可以从镜像仓库下载：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.8.6/binaries/">https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.8.6/binaries/</a> ，</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="2-解压"><a class="markdownIt-Anchor" href="#2-解压"></a> 2. 解压</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.8.6-bin.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="3-配置环境变量"><a class="markdownIt-Anchor" href="#3-配置环境变量"></a> 3. 配置环境变量</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>
<p>在末尾增加两行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MAVEN_HOME=/usr/local/tools/apache-maven-3.8.6</span><br><span class="line">export PATH=$PATH:$MAVEN_HOME/bin</span><br></pre></td></tr></table></figure>
<p>编译生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
<h3 id="4-验证是否配置成功"><a class="markdownIt-Anchor" href="#4-验证是否配置成功"></a> 4. 验证是否配置成功</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure>
<p>如果出现版本信息则配置成功</p>
<h3 id="5-配置本地仓库和镜像仓库"><a class="markdownIt-Anchor" href="#5-配置本地仓库和镜像仓库"></a> 5. 配置本地仓库和镜像仓库</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/apache-maven-3.8.6/conf</span><br><span class="line">vim setting.xml</span><br></pre></td></tr></table></figure>
<p>在相应注释位置添加如下两行：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/home/mavenRepository/<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装RabbitMQ单机版</title>
    <url>/rabbitmq-standalone/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8bb269097fa7d1762b8cfe254427bba954d7ebcf8a5fe7c79153690a26cb230b">91b4a72afde41933824d9b47e790ab2759c7fe391c65e762bc3007c35c45f10895d2fbec2e1b21a2138ddfe2e48b9fe34e280adb69a6ced6b8613101ed85b10f2ae01f308f0ab07d93295d5e58d3f9d0104f87f4cf26ed42b66ddc7202d340726bc089d3628d0a79bbe525c4a0f8772a65c32f2d578393b2cf5e5e32ff3fc2936bb50d40a98ee536abca7fc53032126c3963f1892e7795fd44a831490f165c1e4c07867f8f6b83f705ad1df475cc5f8ca85e1fd0dabf5ada8b22c80690024c3236b04ac953f188a6d121351a69a005fab97d8cbe76200c287cb6fc0008654597bfaa7428c105aaa9ba0ba3aa0ca2cf0719ee5e3bc38b878465f271d079ceeaa5052b2a2e0c2b56e7d2716551a08eabee2d30869ed34df87507641a0c9c8f63c665ddf066f2a431ca4b7d54361c788474232713ba46386fa5e9abc8b2339a9a7484db48066d35b169bd97ec006682415c3dd7231d24742abce1ca3b55b0e0769b698c8383e01b4473c0a86935bbf0cc2e0c9743b90d0c2961393b7d3319f592c8ee06e03b71e2e3f60a953a0373b8c88cba9d1db68de94e155c5d16a3e2054e4b6784b1b509a2413468c68ad49e8cfeb20c29a445bdff29405fc8460ce5244b360ee5c27c896a4b6273780f25907baaeb004f98e7d2c102589dfd065c741bdcecc60ee92dea1d4bd74aff89778d0c1a2f83096a17cb5dfe435ade554b540036d4e4bc4510fdcc323821bc69e3c2575f092d7e9bc7556d2d76605f16a23dff65f90221533260ebd045120e735e582982df2ef230409478c334a7e852737107caf9e60621850f7c46b34e40ce1398ed6ba36c2ab357eaf73b472d95fcdde8ab56fee93239147ef71f5b6b1c0d07ad37af4be7c8e26f0091a5669b2a7fcc8138d9e286b3c8df591f105c5b9711fdca05b356bc88f9df91dc1e5086bf3bd713b5bef29cfbb821ada696d8ebf9dff125bdfb0430ea8edf210429dab80311144a151d1a7b08de9b1705dbe13d499672c0a7dd667fdf066bf8043dbef5092f350b05425e1931fc27b804f05a2732597b955fb3baef93969b0260435f87f55d46fafdc28c29e58deb220d3ac3112c759aae35a38db9c487da686494106e2e0b76a0bdb2885a37a07cd572592448db64c93c1646d9a12adb3138d46ff152b1a933b604d2898641301b7389dd3ffc98523c162de0308193e49a922874e5d4a92a15df652cf1dd0f2d55fd573ee431947b2a460894cfb9da60d34d54c8a988832db4833ec467aa6ddeb8bb9ab182fbbd374d043b625d785096b6957478a43bbf275ccd6ac737407682990c0ca520c250a7444ea0419bcae9017f20efb13a5308ba34f86ca01bce56d5ad3d443473416589ee53b11ad075416f53f685d2d8ee532a510f215804d1c29bc970661836f617200be51d7d1da02d4753109ac004a4372ab4e6a2b952ee4b56794296bec913843fb1342b4f717ba23ee18bfd7d18f1edab160fac39aa9252ef9accf5cfa8d3afc787bcc665ac0cc73168f445c0cde996ec3e5a5739c92c6609decff3a7c2f8fe0422bca09be99ec637ab696994dbd4db83173517b2f975f879ddc518e18aa6b972cb2188f1edc1e075692ef54ab0b2112db8a720e7bf8cb42213558d9dc6b2f5d94979204db1d33bfb6f983f8009e586313a3c12c69ba46aa35dd8f5952308b508837a6ef3452e552b3bcefe15e99eed6372d73bd07c5c4099286c448f80c9ca6aef5d519ba63e592bfdeba223f5faee6e4ec0e85e94a7f75bada00a8206dd6ed5e68f922d175a07f22d41cd392f00d490fa6cf0732c45a7507d16d85aca29b113b9d39c9aed63fc52b5dd5e11559ac48e7b2c684a9c10210135b3c2a2ff3722bef77a7677cb5c042783e46dd04bcdd6c151c2cc7ffc27b3b740138dfdf9037d38dde62c0aaa8bdf2dc9854b53bca895c200281422803a94b841e881c2992404ab99bece3a1cc43820a19938c82360dc4cf96603c16c955a6b200e703a64678c78ab489b6369b1c8b1b55fb6efd49bd5c263baaeda273415c0950b34aec557553f5370461a34236be6159c66bb7cbe786b441f7481e320d6fa1f773366053c7a655a30b92637a277b6f8027263d703d75c45b1459073abba5b79bdf95625899ddba1304558b330047954fdaf2c2bad218538f63f1ab71e88065048b0ce5f621f3989406c4e1cf08aa60ada820d37fa3287767eaa09276f4f341e410ec65627986b45ebe1acbc1f1850d4e7f5e877d5d74fb5b718b914c9ea539004bdc5784933118fec5116ffe98e9c3184dcc3de4592e897cce652635633e235bcb58a13838d3256a4d891a1eb7d715a845b2bb0cf48aa65dcc5fdc8ba301012881cac1d76a09910c62d7f06edc5b7d9807ac509df943c7d6c4565ba840ec7a0e7aa8320b0a670a27009aa9611e088fab18a3f3cdf8be0ba7b177c3658e610562524a7a6e1a9a7a7f4ee828447f6e868660e4f1170cc16e44538f9b71dbd7407784a07a65b5a8f26dff3024e7187743c42e2f5d566a1ebafad015398b27e4942b84be3f091d71b99085811fb2a8c319ec6e5123136486a5258cef44ea7ecd278c563960660a54128c0aaa3a8dcb27fe110184d6643e658a85e76bfc7700f185dea684bb80fda37eb52d584508027dd75f8dc040e7eefbda1948ff037338db85d01fda1168f9214252567d043a493d5c4ecba227b1f7c9de8e8936175863ed8dee7b39d93847441bd8cd3f47247ee80ffde51d8fb14ea78dcee7cc3aa0e567ff2ec5db0ea2466c6cf4d2d38362e634e2ed96780f5f918e607f6b8b14cd387e226cf7bea1e2a62573b228b3792a840a40491a80af629f30801ceb8d4228d2810e5b5d9ddea2e9156fde4e2022cf73eca886934f9c11fdb6329f35de05de14c96b04a66f6e16fc39558f2162ba34d4d1cc9a1d598c6ff799c3ab3aad8a1ae3fddf5df2176636ba301f327c384dfe4a413622d84244f74f5da5dfb759ef183ca1fddef06ab36c7b6fcb9793b437956ba12e3b6209bfd66b4ec58b9f73ea97828e922b5e4f922db73f84dfb477b8fa84f22704015723f5652de780209083aebf6b6c45fd9f5beb14b68d7b4a5b6627961035f85252c1e45e96647735791afc27633f884e8cb1db6b6c0950386f0af4f5b216565458522a136b2e96b95ae62e6555c83f8a310337beb1689c94d2a839c77aa0eb05e26804add639b46ff5c27d0ef45a54e075b70c5ae8ce6a109c89bdf7535881211168b386225861d57e76718bccb2a907b222f478ea9b7a42af701e6d122b0c8a5b82d8cda6e32f744c8b3e403c909ef9ec795e4f1d9dae92b740ba24b42b3902669666e8c3fed9f5a9951bae6c3a80e912fa355c787bc4170f2e20010edfbe81581b2171845c2456f174040076ea696e02958a4b570135d83b30468b3f2203054027663197b0dbf5bc271c6f17b99ff3c4607d65b2fae5260f73124e506094181f1b9716fb9d353c6e4f7e348d93021d36adf6653641023783ebec6f6ae2b7503efe3b34e9c79f27227ee9ba321e5de028e9e142d13e99ffaf3f5db9401ef527f4b21abbb92eb8c86c223f97c8f59537e25ec7f6155dc604285ce57f3a67e9d7ba0586f030a0e312c66c85776b895b5d6ac0adc643b08fa0bc99f3157a1a10f92c2dd9c9eaf4569b760eb3d582b633a45ec1a0214ccb1acd720fd94b147dd16baf3f85996cfe00ff8b14355d564aac0e5afbe0977e93cb3983e13d883e8c62bafb999792b0d31cdcc78bc1992c3decb498025fba28ad9cee6f98a1d18e7527dd0a157e911c4eccf02c8872ce129f302003be4ff81f1f9f505aa7acea3232d2bf9b6b60fb29de9cfdc78c60d7b0815bb6a5284a8c026dcb9387e1897a515514b8cd08a68f9b8e7ac63ed9b89e9835c769165237907a29fe43ca24c193f9516870f3c99b80b0f0244940ec8bd911e1e6804a34899914004ec3982f55865869ad026fcf160ad7baaa9dc93a6d6caae8f9497c1e478c4d3a635a89e374c497286572e2439d3bf4d2b45e3f9d7f1f3533f4b6048909f44158cf275e1435fd96dacf4908804b11d6ac90cc9ba8bdc1e730bfa54df3a5691082736ce8b8b9602bddd786b7eac9c02d3809fdefb5f1b1f1a4f7dc21caf5bb0e1a06089eb869d857be5c770d8581f586e6f3b8119bf7622b2a4a161f5c3e2d3081fbf18db107e967f8e225c20f58b9ca2a391ab3a13508aeeb8a39d5334045cee5b391f5f3cca3d6564d8644ee287c32495e551fc7d683671d2c6bce5a075c29a66691e076a9ef97d250d8ffe9352b82c0b312cdb217474834ae825955e4e5526b1dab57de414f7474b3bf066de80f941b667f6e0551c908f99b56622d4dab78aa491abed8103fb6bc1de9bedb7e3f67c9b68b2af5015e01def4ccbef1f9704813d81c6e0a56316f418d88ac0eae97eca06ccf65f5e142d505128cf7ca3c28b60e35ad034024cc7d87bb4600090b151a70fd5d273610c800bbee3acee19eaa0439faa962a6c4029038e29a5ee3d2aae6f3c2410dc1602234064767f5b792a7d9b7efe11b760070895431433c8f51f9d5581d5a74e805331e1a087af0d05a04a390fec3e486f56fd3e4f3b5bc58b37bbdefec78e64eda32c23c14725f8ea39f32b5e779817fee029e545a105a772e0e1c634f748b38d97b8c1520fe4859cb5308732be180ab79420c4139067af01849a164395b2e05b44d36edafb061e5b4de7b4796ee3233a7b4bc42a92e2f7947f4b997beadd20e8770a63a9fbb1e0fd2706ddc8fc1cec174edccbdc8ef53d4d0bb2c60b832d0934203739674fdb9e793080ddffc7208a82693de73ded16d521f52de0a0aac1cec4591a47b46e5d9f848d82a7cb23a470dd97fa99a42f86a1e43517ac8bd795240da3c7b73b95a8aeb0e09e97f769899ad1dcb8a42547cbef29de1d204409b9a5072f773793d51f7935f2eff55b451d849d78fef2ec03c3ed4fa63f4a86c6eec6c1b8cd0d36cff90974dff0d7713dbf9addc30c84056a3dbcc077871d8ae2ecc26e4a8f6fec1f84d04a7bdbe55cfcc00633399ee9f6f21a5d5ec7a57c2a02ded761564af9fb14f88685ab33282cddf4a07d64b5f35ca06b3c2ac549529215f7b17ba11f1c0777fab836e11fba47bc798e8c675670c9d64c688d73b1503a7251228e9b891e26b4048de78f16e522ee1b0aaf254d20cddca1dbd8642c03de6f1221aeebdcafd7e142e84840d2cdb0cdd13e375c02a0930ad8d08df96c905aab5b6c6569a548e61117d7fac44e83cfb66abbfb2b5ba39b77c43909db453196871617232ac078d5b9d7fb68c2bba4347d65b3510f8ae267aa5741fa569da19af6d6839cae9c636282724b4faad84ef4a8f92948b8f5cdb180c5ec164ff85d52f851321c783845f54393652ca32c5726004791257079f24ae287c242a28f8572185d93feea0cc8071a475cafa7f9d7566a712d64d8db83d31aab2f7b87311aeb3848ee73cb176bd413dd45dc902391e350a55b37c7f3b5fb1b3ec049f1b49f0b203d8daff0a54b188a06b620539c31b63c9d1e4ea1872409600baadda1cd87d62a7497a57fc8a3cdcb874b8d2870af215646310a521f3fee9440ad06a288b52093e1aff9aca4996d367a8612d6706b9a7f85e7af3373403401042216a4f688a2229dd30c8bd1501e0d1cf9111f9bdb2ba5ce0aa47b220e5b51ff465bb02cd50b8720d6a9610499b5ae68801fa9a90e99bd86b8b0679c8dd69cd4ac0f37dfff02855b5d2b79a03a4979c0d269c2ba402766654244abbd3a03e5d442486809794428cad42387dca2118d8add9cb2158ba00cf7c9f47de3a3a2aebcb59312b01846212cc354110816937f5eefb93c6b40e1be667584f00b71a9117feba1d37f80dc1d5600fd9afe73f794ed95af7364800306d14e74264f73d7fdc53b0aedc4d1e6d69159a832bf44338a1873a6a1253ca8380ad536068c1cdf3072f9b09acc75706b49b16cfe984441832208f0cb56f1c077d5aa2d021ed1e7f4534ba3bfa43e1d6e3f26ae2074de1693fb79cd8282bd84c458635cc4bd208ba35d288d6536597fa38e63cd53c949e25b9febfbca1dca3dd408fd980ecf2a888a33656a74ff6b6e49409e95105f9569e7eb31e48193305839e90f7c85e3fe56b7f28404d2933acb4a218a751ac69b62a4f865dc867f4e5e3a94f62c7d8732b43e3d9e88a9d167db71c157f65666225d3e543919ad0c278bc99581918dd54edacaf01cdde756209e4d6bc3f597adb6b62bc1859cef3da6f6a4472ce29f610bc9e0317d17d2a49c53d3c7c9aaca8420379fca875aee5d6db473d1c6d8ac786a40c0e6ce32ee9e47e2a4ebcccef6bd227fd74d6ca31f4e1306384f789025223ce99ebe3d06b3214a70083418ce1df1de9d977dd46be8db67f805b1bf2f8f0067adcc32f6525076f695094dc67a1f369466ca0f4aa7fe934f6d301a7c9db68b2ce96932e146d1d4c9fc7ae052fe87c8c3959d21794f81af97d3606d7cf4d70b0ed888297a421919b9741bc88ec59a60a97c52093867cf4e2e5c88f58f176ac2f447b8c2149f73b60a7301f1be12005aa742f80ab6577a185bac493f653e024cb94bce410eb2b954c35f4585030ccab41a3453f718254b90405b8d371a7d5db91e693b0512c220dfcc9f01b12b1b973851fd161368a05ca7578b47021fc30f4010c3f250ea2af91503da37977e809018c2f6df624f13b3ddebfa47b0cc77ccca41b94f0d2e65b9253a79f7a287e23b3a515c34d7b2e736126d03d697b706f0cb1f3ca262ab765ff8fb29876021d494fb00dc73ccca0c50fb9090286995cf2918b3c6111067a02d1ac18b832aed0c93e4e1690ca4827b8ef2238de7dcfb51ebf9aa76a6284cc52a22edfa64dd33c474c6bb1e36b2286f548eb6e280c0509a40b46550c47ce92766c41dfca83ce3cb1e015814376d7e8fb3aea635a7f02374895de7ad8daac426ef830f5c04412c80c3969a601c87e451feaea60be26fa25d0e3714717f7ec7bced11ef603a5bf032836bd058c8cdbff9bd2c72cdda8f753fec14569939eeae0fd80c08d24c12bd97bd5a53bd11cd24a9c9a358a8025479682b92cf8aaf40ef29a18e39a072dbe6b8234e99c3b1e141eaebcd9b6d2b1b7e4438676e33faff785e750bcdaef2de902cb8dca873916e47db528421f8cc89dceb0be08862c078119b61e95360793d9de04c0304e7f327519525f61dace0426937a626408aac057a73ad73f5b2c406f72ed89de0bfee23abc7b662e1d35575696f97c413d08e2c77519995b1db9c7df8957c94aa7adce16ecef355304dacd04c8bfd7c59edc6add80141258ea3d3f764a64cf134bee5e1a71e7add5c2244e3d9af56c83e373e59250e8852f8a22bdab8c1127881038b7987f9660e7befd0bc41dbc8804557949ddccaa40dfab6fbf96da30fdd9608dab012614035fda356678f55167e9e7758a0da87c4d5188d54d26e68ca95ba2e15b40e9c3e1ddb27a502234f7dde5c24d6124437f3dcecae8ddeea97010c417891c9bb05b58766bbd51afe423d76dc7423b1545b1848006cc3fe1c6e60669d98e59d0710637c77d8080e7a21c898cf8734fce09e841db4b61f4b50dfb70128886ce9f5628126fd85dd7acb6b90e2021e7c17bdcc597f1f495460ff4b6ae9b6ba85d815aab8fd7cf6caf27802b493e6c2a58fddb7b5c28bfb882368ea852db3fc809c32e4bca4a3b6fa0c6596289d33b63f17584502c0bedb2bb061a3fc5e65ebca4203ef45bae5f6f43feeab62a80356f07cf230c02c46705ad85571563d769ebb3b2dc44581f07af9e569a1b3b6245ef566cf2a412a506a404d25f8b379d84fcd7508a145043f0c7067adb96c9af38b48a4a8fb9de4a4af78a829579990367ca9243333cf94e72a607094d2b24993bba5b2cd569662c292f812be56768c8edd2810887e33bc62490cc4a90585f9983a3c5e9c64127a464b7d5671529320d99d5b8bbceab7875da131ac69321e85c38d9759e9d7f2b579670c0f7650be86706d5aa9c15056ca1e27e93f653d1d201383e04fb373813234377cf339a7db8d3198b71c26b71ab0fcd8827dcc4fc3f555d01ad1299364dc6e25b2070f7bf694e9a46d21271c1fcac637b693426f586a1d9ccc03ec9e068533eb720d9c348d2783c715a0b01aa6c5c9b8941c3f0d2760ad7496d7d8af72b00c38640619a990c7ac168b1f7dd8f7fc9318db1ea2e5d14fa7313826ead60e189278d91faedceec9403710598dbca8deda290edd15c3bf6d3094b4c9195a348a7498b7018eac50bfa49b719037bab9bcab97ea36273c03a3b08c52264539331b80302d67e05aa81b20c3742e6c0c1600cc92a39a258042f06567daf0fa1c28f49f2e822c15f7f21ead60a1c68aa2a1848e2d2b4ed26d926a554e30d66510517f811d970cc7a3895f2148a735e6fed2e0fb68e02db1f6b283ec267003c28fbeccc606e8b60adb0243f07e48ac2d4334c45af127dc631b15f7d1647b5b576506af1ba6f93424cf1ba2b94a86f6da8aa9d3e2da313c9bf635312c8061c0e3c1f698723bef48d9e81d422c928b9419db6d6e9debc32eee6a84e0eccdce1209adaa48eeb972e7c8d2238bbe94b587a9136550ea2807ddc5d2b8910cef14e225bc20bf52650a6914810b9bd9fd5e3a9dc90768dd57806a43674fc99ac0a3c4404ebca1d323bffc9c7f2a8315518d9383aa7a0811aa37c3d654f97e429c1dfa2c6195171ec237feb3b860672cf2a2dd64fe7945b483b1e24a2e9c2bb047ca6edfd9b58a5369855f2f6078f2daebab73643e7ebc5a0183e866519eb69197860477424458b77898e1a08989fea4d9280f5862bb820b974e1a47ccf87dfd2f8ddde4ac059e0af1227e2db5d13757c83f532b04791a6b04d105e22a6cc334fd6a79cc0e0aecabfe1123c6d5df2f4e0ddf8f8e2be389bf8c12fc8b40ce2f23be8da2e3a2f033d621b315b219053bfac8c010af50d99aca81429a58d3c33bf9ec43fdd8647ad286f517b809fcf04c5ecadabe6e5466c21eea46b00e567af8db53fa7ae2d710b0aa974654a1ef46647dd5f329afba9f5d4db5f2dd4644798be16083f54167afc1c708e36d6663c98031adf9a9cc05f1a6ed08260975ae0897a60c07b409ffa1cfb74afe5487202c5e50213ca7276b69d3f3eb0f0e48c833f3792be3ba5f454987410d8feed7d66f07a75fac8071b39499ddf6bfa02f797bfe966b6bd02a07a071b198a60dd9f0868ba40af7c7db8c6a427f69deeefaaaac5624fd80140f6243e24425614dae9d9ba06d1305fe28d0f86c554fd108bfb0ea60047511174dc3eb2854fe2333f3a36f133141cf1a72edc9e9dc795eb1f139cbfc05314fcd564afcc21eab83c137db3f91be74a8b7af52ee16a5cd1a02873d7d4342f4ec304892f2aa4b8f1566239720c1316837c1374b81a23800246b3f2f67ef55152fe5e90d81b621db0d7e39bbca35adfaac4ad13ea175c180d3340e9d68fbc9d0c89e3f32898e75ba5406a5b33dd909db663c2daa29753371ecb9da983aa097c049575518681b8f0605009abe39d6164d9a9529b356653c7ab36ce0c41cee59d4ed03311d617ff78abd31906286e36d6ed308593e74848d139e3df884d6cec7648f76c1d9680994daa1eb560ee46df96a63bc2adf7d718f267df343b1d61eef6dcd8f272ed4b7e433296b3a11237d8f9db705e8af8e47c5d23dc695c3e38fdf10dc1108f68007afac16528adacbd5552660a6f5d7d7890111a02193c78a62a9da0b305f5bdf6e43162e9ff63b9ff7f70207c9040391269e6e7c6abcdfdc73df15ab07af5977448c481bb0e6db1d40a81a073e2125ec5af6a70ba4823eb462ec3c6ed17a97b8a40d3fe7530461fdbd00ba4f2b6d025a504e56c6c3929ff6bb16ffc9b3766cc5a68c88fdabc9f36bd11fbb590f2449a89a541de3268b1c1d9bc395f26ee8b5e0308d196176359adc455ef1c6c3ef8f17960eec9af4e8986d9dd018d2832b5645f9f15ebbf3bd14718251e162f2d05a619ebca83cb9a34d42fb243799856802574b9db9f8ef7eeb60c6f7fb2bbed1e34657510a9675a253ce0016cbf1f197cff580f6b5a6c3fcbc5f5a0a7e2cd5c7a0545a7082347649aafc6e9c6213210bbac526a95ba68c2e73cf9ac9a35a2e18da2982b83da143edf3bd1a418fb95dc2dd2c4470fd929cb03acf1a4e4810e36b636bd544390b0b544133e4dfd35811a532ef293d2f389612a2d8f624542f056a4c3eb7dcb0d674c6ed8dfef1eadcfc63bcfaed1b451c0d0beff5b2261be1b6fd58f81b62b9b3c40fd3acba5a345d563a2af5c8d61a1cabec4d677032a6bbf44577720b9b683938785ccf658053eeee2bede6ad0b5d35dd12742b9281accce767da99a717aa833aae111ceb7b018b5a187490356a67cf747217ff2df302b0b32cc30765f8133e1867ad9acf244e3634d7dcfa3bc007baefd2a30f1da32bbcf040962d40311412a9129e9c34fb353142bcca78a67d4e52be362156b2e06fd28b64dade627b96f4a70e3c167c426dab29fbea6a624bfc5d3eca1d12ad069b0721d019392590859f66fc376ecaca6937f4ffd4f3ee08715e9b9f8decbbb24372d2d494f394ecf90ec4c079e91504d4199f4b3127e0dc81c1799fa0e3f2084db8df68e1cf58be563f058fe6ee7b7579592fc9fd56cf463a8a4442ecb525444704cfc9754d3d4a754a048104e624fec101a884db6edf9d80d6f16c1fe10566a85e01ad5e8c7f42531400537200c24f71bb6a9a1cb7a68f890464a77b96cc1f710d9acb1a0829dbd47508553dd45905cd7ab6f229ba3d4a23fae09fc150439a334cdc284f759ec674cb5be7b2cce65838a02d4302a8a711b5e525a9d87edd77e0200e65cea034938c3d8f529ee9d06a8c28a2998a09fd510144db63102752d06050c5115bfe81c361e917bfef9a106a44449e6dae0a8f675f73486994ed5bff35ddd03706ce3592c936be239491d0bf734f7a3e0bba28207b45b4b48244d00d3c9cef7ae50f174494f78e9e1489d286ea5497604763166e0a3516a5501cbb3b3ac9f3bdf643ace020bd08867d5417c70ffabe153ee28370f35445bba5fa3f4e2b639a1778ae95775fc03237e05f69adfe195c45e2bf08d99d5ef6e1437757b27fa53e5d609964ecffc4b8567488c83293be46901446fd1f8877a2a5c9d6fa21fb8224d31726599b03810dbe115bb5e27e22d8f865ca39455032cdcd9f30880a425fdc7e8242075c2c7f9026b357bc93d2363725e2041f1db8bbc0dd9c7454ed54a92001c8bd2ab3d9ac5763dbb872ad223f383b5c38a17b3a526640898c095f3874eded0bae12820dc79fc816388195eb7311a4199cece64adc4a5d40f000e8920c09636da060079ee01ee72c9351d96e8a47414d7d6914e8386a32a25911016d38c416b9f9a4285e974e61188a5547412ed859dd0d17aae807c612b1c4fffc94b146bbe8591df0732d5aeac49f7ad6544a2717309deb756421ecafe321e4c9c026aaba2670877d33eeab27cb12130f7b50bdf0c8faa9671e8bdd4e52fbb6f741923cabaadc779f070ef04e8ce47a3693dd8389e63c87b0495976ad051f892272f2a1fc108a60a481a7ded75c5dd56741b1e82a88f513b17e01525c9a44ed3b4a5e99ab47d373a8e1667271d02e627e4866b9c66d7b95a9c36f0f171d04a3a8707a35c35d17b026593e483ff1141a1f51c7482b7a81711884bd493d97e5ae80152a3ec12ab8710865764d5d3e164b5dc49e83d97aa2fb88f728ee64b958b17194d1505c78e10dd90e4cab55a9dfccf477120bad96770ecc799ed78c154d5effbf6dc343346a6cd5b54e4929c24084f706ec71e2c7a90b676c6a6f5c5f15b27d1457ab6bda4e30907bfb681713e2589678a9e36ce38acdcbdc3b06a89476fa375b3e9e38e48a05cce9cf2bba3b1623d7b4eba6336d48e6725f5713fcdfaf7dc439bdbe2d7769063a9af6f7be2c4ad095108e5978dd325a2f6c4d4fcf8405cf210c5407b6b3f0b154132e8cc0f857f4485729ec3f0eb9c09823ce19e66dac3de07f9318a883f0fa3eb5263e136cb1a024730097e46fa46d821ba6f1d9a556af667ed1efffa0c15cf71c71d7d745a8f56dfec5ad30bac4c176e271f18aff555ece6f3c74c3a687c3f33618e17287499f262a1f5feb40f302b69410f634d39751ed3cf25aed78d118afa5efd68f056272ab860a2a393a51274056464e4fd04f8fd49635d5df6fd7f4abbfe1b83b556e22cf0eff0f1c4310ce5c68ea4f129196f7498298d053e69ec54a35b9305428789325a0c8f039d0888b6f74fa4e214d8ef235ca4424bd8f59d4d2909cf42a8f4c19c2877901f157f8d1dc6862d700c16dddb5c8ff3ecdc5fb533730c82fe2c95490901b12b9fe531a194a9b0c5fc913ab6c41f9e0063b0ab575751f3e9b9e5ce2e683572026bc1c6b68dcc3a394c3fdb32a1aa110331562173830c8e53f5b2c4ae83ad90eb9916b93668cf6f51d13913981ff34c8d8eea6878e5927d51b1e0a043f7e5752e0f0aaf575b5a64b0dd39974a6d8fe7f261927caddc04e2b382084d452704a380ee7a887db215db857740a4e652bb96522d7719ed83729bca20422509364fde7e60c45fa1b10fb40d1a69c6ed216a1cf48b99483ebe3bfe990b2870d9b47128b4954d1e7a1b95a937a9f6385cf229d8521a5e1eb23b147f108b96069cba35f96b60fe39c29a3da5ed7a9faaf2ff7f7e54690494ef05fe7d4888ce33f50594f00414a4a521409e13c17a557b67e9d4cd3d8fdb37c4e8d9f3df97541e265b92d7efdbc6d3a9c2e3ecd28d1af5e1c97945148f253c4fa6d805422e95ddd1bcef45539e49eed697227c4e239a042cc813e56f111e6d4d7148200dd4e5a016585a87bf9c39751c90be96a9729c823c6253bbb428ffa5bb0118a8d2acc8799794de8d1aba3e7eec2aa48b56778bb164c01e50817d903af1d71cad2eec6db270484a45586058b6f49a6b36307f0c595cb49afb470c31e956a41a955950a4155b9cfdd07b433e672e1a481516b8488fc719bcc9e0a5ae112e3f5893d6bd65acacd0bc18dd3045092aa31cfe32ffb320469fa8aa80b974001e4eb8e360c8e10d7070b29eb147138e9786da1012ae7f9e8731004026e6aca4bc0cda737b91d776f64511f0ea29bbff8c213228ab070eb02423a62305185c5ffa893fbe7ef060f9d003057200903157c21e8e65a52644cd8a5e62ec8d30d4519b617ab76794ec6aa6d4c1713ca32954d4db9b51652cb9aeb9a3c62c9c25347e9601004fc7eb9c0a47fe456bf03533430eb453e80abd4f2172e20987d5c2e763ca0c87f2013fb2bc898569749ce51286a02312b084789077dd1b66d4c63607fe41231c7b81408e53a11bec29aa20817e388694de7374078e805450beaf56ed418a82c48e3207e3033e77e845d19d6a4f4d55c78ff1aafdde3260bedb87923d40c2fa18accb8a1890353787b8a6487f3fd076b0e7454a073365f4305618c9e14a4a2b3944d786d0f6209fecd35311f30177bb3829bb0ec2f01564ff68253196381797484039a90a6ef8221c819d4463e124339ec61638d232547566e99dddb36940fe81df36ec8a7658caa39aea2bfe108f71ef5d0f74bcd4c86e0dbb1ac0c659b994874f3e5b9763400046e4049f63164ac8f9bafd7000432f48c0170e9410e30fc80d8afd91b947d0f73d1f4db14436636e1e0b5718c7d7f102a3aa25eb7b0fdfb71b691703d744eb508fe56ef9b14f99e949993f6eef3b5f30c347cd3c4e6b5aae41725743efaa207afd33745be852dbdad2ec752c2645bf1215edfce911e17c234b06136a68e7626b0a288faa0e2ff5679b584462ec5c30896eb6981dc739c7c7f0098b581c4d718d44d11c4a216bba3382cd72f4f96093a482f8b8f65cd8ef4b09ebd05ebbf6f79cc5b25899268994201e26fa4a006b203c9d44a77ac7516ea12534793d6a8755ba374634c749c5e52556d9332ecd8f2e0a978c605d68f199ec3e49c5616b4c5c01e95568bb2eb4dd5bafdd688e9986572fbb6869d592fcfbf252824008c006104b2809db109b5ea85fc14e3d54474e27456cb223b832c0f31c5ccd9f39a76cd966c06d532c92bddb50e3be48c71d459044064ece80af49642fc0a50fde4263b8adff1a7674f61b105ae5c4db2caa57fef07f0aed92e89aa661991da2dfcacfb5a23eae962ab2513501d833717111e7bdebad3fa9a73bc3187d2ad0095585ddab7f3b4f300cf034e1cfe591b91806144e284d9e94fc92caa87c328524a946061871ecabb88a293509f9563fa9a1f95df65e037d8df192f777ee1c20498411ed71fbc34acec7074a69c38efcf28c95f7a30cf811cac2da639215a4ea52da7b73910ad1a27ea1beb47be97be1a9ceca67074398c04f0f4740a087e9a092dac94ac54505ddf8caea5e74be87b3fde9a6c24b3375e5e34a5ffd46fdc57e6deb1a46f0e20a2c14537196c89f85d5c0afdf67475cc7598ceed96644583a3b964004227bfd25f12197d12b974ccc337336ee0839ebd355cd04579d5d48a419b783286f662385d1694df4dfa6671e55b475116dfc2e170aab9a0b76d908d3206f87aa109ea0093d67cccc9e8f84d1b01c542aa02d493a810f9b657cd2eaa2702299195af3168c8850b685e4abac1848f2eb8afd5f1da7ed0b1ee84a4ba92786235158edf52e700e41f0edd048f3af4a1988adfd0064d338a40d79a4fcdc97ad4d2047fcebc1c4af1086dd6fa9917da1c9c88aad5e3efe986a7583a28799176cd000b75322c85124fe6988d41bd4f24fb2d427b1a49b37fdc1793abb80d30c019a51eb4328460340a73e3e3ddf845f1a8a2cfb0fd274c5c7830fe9919b17dde67b2bd4b2369e25fde8a4b7d49eeb9e558463f31cf2b5426634b92531f6c27fe0820b8e9994897265413b813489ba7019fcbd95aa5121f6266b0211bf5fb4fbf142646cafd94e158258d577a787cc8b5eebc7082eda5c2579799c073f3856ed176cf657e8733680bf588b15c2b78e0ad67cf5b8e1c673809475fa740359812defba8cba71a529ca619144cd71301d6730d5ada05c763cf5b7b5fa3912de9aaabaf367d93a3c29793f4ffed359e2bee93905e39c45a39a134c7397329efd93b95a9d116949aa97ff4821a59e605c230061ec759beca8b3a10bade32850cd3db30515bdbd3d957df7b5683e6a7d8c9e274bfd7553fa86eba178f8ad92c313a15dd994356cd72418e25eb2a9b8c75d4c9fad5e7599eca25dc89ac4c5d16ac30177f5cf2f50f4c811a85618a02d65c39c81e83e84df466f9029e512aad1d227bda28f96e1277b9ed95476d6eb681560c5a273887a8fe0c4e366a176af2569d94fe883b02d56c006801ab18c91b91afc04d0f15b829af4a889c5a3284aa36965e2d42b981e99e1655f52c2a4bdb9518d690c638b8b29a7d4df42e03d7d955e1db44ec6a1cb546335c36b0e1c9eff1570bdd7a20a6efd3254ad99f5899e2f544b0d23dc38013da62c10c7240aefeb6f844fef5cc6daca689c76d391b38092688237c6ce9233a18bf148d1500bd863af713496eeb09b14aacba0145c92a2fc382dfed024bc7a2ea1cfcd880b26655109c299c5b12d26a4d975fd963a3e4cf4c88f361f438b6b8eea9a5fc4ca1538d401de22a76afb2c49ac12cec0dc8f840d1c8896b9253cb25decc2c2921e31d29251fe63f566f3b9de4357d4025258998577cd2d67e459498441a565b3716a2ffa994d88fdda11cc4f33babc171d77d26c81c7ec99ab250b057365ad036d4390b9547877707561ca7edb90571cf60ff1189ec12bc70cf7e86f799e3bf856dd6223c4b2966128d1f8f6ae6685dbc41702cc428d454cd12d04b76724a716bf0924ccbadd5d974779863489c1ef6f03bcd540f820a8a044188be95b4456f699331b9210201c37be07fea65708585cec41b3fe56b742f83b656e2087f05367130b848cb7d0d4cd459611bc8e3cafbc41ad6d36e8fddf2dd30c82d6ffe7344fbe7ee9479b96927205db1930b33c1e4aff75e98e0ae13620ddfdeed30bee4e8b20052dc1e47ef3e638a05c16a2c8024ce2787977853689be0784752fc1d9a88b6166823d0c26ff6dfabbfa4293bd4c03f94b1fcd1b722def313b023a1dc2d20cd09c463b5440647ee1f85c4751843b0fae64c49d7abe21205bce513435953d4d51cf76302798456383e2750abc43c4d593423264a256c17d6f95f08be77c9a493f149f82fe0b1d7f9febf6b4ce004551be9cbfb6d68b1c13262f0f392c9847eac9739361b2372e3d73e821afd85f759ba4032d5f79242df0d2ff0f2940f19f188ce4bc258938d8d6a2d13a76fee685e9d940e09b3637ecd01f1a063e1386b4cfc0b2f610f6666b63a1ecf274ba0af77fe4082e4df80f6d1ab25eb443a6e9bde3388ae7479874b6fd65e9e9326392f3549f388cefb83d867537ffd61163bbcbb66ef553263b7ba0d2511a4252cb179bac0975b44f9d964301aef800e74e93c30224608cd908f1180e77911c632c0e7a68fb7198f6e9230ad35940c26a9ca6cd45cd0f7e129c204e3eed2469d4b535369a1584984e94f3478b18278121b4ebee38b7ba3abbcb9407fccc589ee58ff8fa301d5a9bda8b1dbf37d1f04ef180054727a017016ff903c3fac8b63a6b7d1a0e9b475aa57178c1a289d06c3783fd9b63e851b2e2be260673254cc2515d303d9f9389613a6efdbb77b5707c605f3b6a1687cc339ac0327673cffd7fca81cfb183a24c5605ea33914b544d4668b367e75fc8fc50e3c211cfbc1cd1fe2b5a1a017b28708b04f40e8660e06980e4dd4374c7029f057dcad710b51a5c08ac6cf4d2577fe05ab8c54aefb15461c590f8f60675dedb4b814ecf4095f2976be21683cce5d4c005af8691a4913c6e7e07c533c084c09dab6a4c401ce3894c6ed9d70bb7c6576bdbba76604691c92f51ad0432f9bfbba4d0d4c7cf6d8a9ec53f1c064f1f82bbb996a1325f247ac2c4bf37d55241ac5233d53798be9a6227a9285b000ff5ccc3a05695d8eed680c89650387111a588c291f1b4632ca5a7cc35b48561d09b5bb0caaa912754e0720b3ba5eb9001827f4c4b38abff99477c64a095d1a2aaa2e3843c860c789595d30863741074f861a3fffc188dedbb0a4679f8ab8a89b8c0c017e663c5f6f9fb78b18f5027c7292a4d1d42b19c581271d6f5188f58d006c3dce1908fbf06f4445eada69f07ad9b1fd4c95e6200e4b1d7d2d3723c22cf8993d5db8ededc560569bbb39c92f70d287d5ee2791fc2544d6a1f20bc22416ffe0dfeb0d2b8bea820a74e60021d8be3025fb108e65429402e67bf0db0a4afeb86d87d7659e5b4484199e96f390f27ffefdf8867bb0f7ad8c4df0e51a8fd54839fc24c2aad06bc555594179399458462cddae9271d39a925df7326e185888b3b7db8ae3698c1d43472b54ff5545d133faee26661b0155602ec6153380130625a65c19e8954e7838824673893fdd79ea4787a12fa235cc8a234345edc16aba7f6120c6d693f85cea188651147d3d63bc3dbcb0f39c275c7bd367d1b5e047e4138a92a9677a31997e3ffdfd47acdd6b70708a64b76da8fe2dfa3b318318e48d554a5a4b47a24973db6502966b60ced13c49054db76fbe0f9c27396f88c3840a9c35d6e9aad90873330ebbe4ab2d4b55cbeb54cc0543ccbdd41a6102c328011d4b38bee8fbd96a092a2604a8aeee6d1076a29b42bb186baa03a9b067228353b8a81ea9d6b3aab4cd354f828c83a4f734e45bf659a874c6b1eb2f71c71ea4dd4f78a704fd02ea62b20b6d066f749da33031baf68495f4876128278a392381bcbcf45e4ceb4fe0897befecde4220f2e5a1ce2d8c145c0701173ed578ed25ee7819a7a72b2adbaf6ce914d0be2b624277330978ce5a7f3f7a4ce36d9c54e61046a0bc85ab8c3ba822fe51075ba501cefe27b415de99fe3abc65531713c683f357ef4147f4c0e9974084e6d50e8a87f1fce7a05b442adb87465fedd31d506da3ac46993c46c4d61122514fecc7eb52a7a9f5e955b335704c6010489ab8c1665dbc021bce4438fd7f052777faf9c56674e9738ddb66d795b3ed960ffeeb993f6e263614946da29440f4be31d5ce66827809e4e664fd75e976f53449e3596f296458e84f20452d077d7deae28d993b433a6c5b82aa790d98d292c13fff4ec828730f03bff5c7f69a4d634ca43e2cbf022202f4c58bd2f0879ec0044ea62997587f3d7065ca8666633a78fe6681fa7b3e9de188675290877daab5d5c11d999a356085d6c4bf1b75db9ae9e46d363d98096fe32c343fc76017e232593b9e1c53d1e3549a3e09</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>rabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装RabbitMQ集群</title>
    <url>/rabbitmq/</url>
    <content><![CDATA[<h3 id="1-安装-docker"><a class="markdownIt-Anchor" href="#1-安装-docker"></a> 1. 安装 Docker</h3>
<ol>
<li>更新yum源（如果你的网速慢这一步就别做了） <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure>
</li>
<li>添加仓库 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
</li>
<li>查看最新版本 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">如果之前安装了docker，需要卸载旧版本</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure>
</li>
<li>安装Docker CE版本 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker-ce -y </span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="2-安装-rabbitmq"><a class="markdownIt-Anchor" href="#2-安装-rabbitmq"></a> 2. 安装 RabbitMQ</h3>
<p>1个磁盘节点+2个内存节点</p>
<ol>
<li>拉取RabbitMQ镜像（带managment） <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3.7.17-management</span><br></pre></td></tr></table></figure>
</li>
<li>创建docker网络（让容器可以和主机通信） <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create rabbitmqnet</span><br></pre></td></tr></table></figure>
</li>
<li>创建三个容器，端口分别是 5673 5674 5675 ，管理端口是 15673 15674 15675 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">英文引号</span></span><br><span class="line">docker run -d \</span><br><span class="line"> --name=rabbitmq1 \</span><br><span class="line"> -p 5673:5672 \</span><br><span class="line"> -p 15673:15672 \</span><br><span class="line"> -e RABBITMQ_NODENAME=rabbitmq1 \</span><br><span class="line"> -e RABBITMQ_ERLANG_COOKIE=&#x27;GUPAOEDUFORBETTERYOU&#x27; \</span><br><span class="line"> -h rabbitmq1 \</span><br><span class="line"> --net=rabbitmqnet \</span><br><span class="line"> rabbitmq:management</span><br></pre></td></tr></table></figure>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line"> --name=rabbitmq2 \</span><br><span class="line"> -p 5674:5672 \</span><br><span class="line"> -p 15674:15672 \</span><br><span class="line"> -e RABBITMQ_NODENAME=rabbitmq1 \</span><br><span class="line"> -e RABBITMQ_ERLANG_COOKIE=&#x27;GUPAOEDUFORBETTERYOU&#x27; \</span><br><span class="line"> -h rabbitmq2 \</span><br><span class="line"> --net=rabbitmqnet \</span><br><span class="line"> rabbitmq:management</span><br></pre></td></tr></table></figure>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line"> --name=rabbitmq3 \</span><br><span class="line"> -p 5675:5672 \</span><br><span class="line"> -p 15675:15672 \</span><br><span class="line"> -e RABBITMQ_NODENAME=rabbitmq1 \</span><br><span class="line"> -e RABBITMQ_ERLANG_COOKIE=&#x27;GUPAOEDUFORBETTERYOU&#x27; \</span><br><span class="line"> -h rabbitmq3 \</span><br><span class="line"> --net=rabbitmqnet \</span><br><span class="line"> rabbitmq:management</span><br></pre></td></tr></table></figure>
</li>
<li>后两个节点作为内存节点加入集群 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it rabbitmq2 /bin/bash       #进入容器内部</span><br><span class="line">rabbitmqctl stop_app              #停止rabbitmq 服务 </span><br><span class="line">rabbitmqctl reset           #重置rabbitmq </span><br><span class="line">rabbitmqctl join_cluster --ram rabbitmq1@rabbitmq1          #加入集群</span><br><span class="line">rabbitmqctl start_app         #启动服务</span><br></pre></td></tr></table></figure>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it rabbitmq3 /bin/bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbitmq1@rabbitmq1</span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure>
</li>
<li>访问： <a href="http://ip:15673/;">http://ip:15673/;</a> guest/guest登录<br>
<img src="/rabbitmq/1.png" alt></li>
</ol>
<h3 id="3-常见问题"><a class="markdownIt-Anchor" href="#3-常见问题"></a> 3. 常见问题</h3>
<ol>
<li>[error] Bad characters in cookie <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">到创建容器的时候，docker <span class="builtin-name">run</span> -d <span class="attribute">--name</span>=rabbitmq1 -p 5673:5672 -p 15673:15672 -e <span class="attribute">RABBITMQ_NODENAME</span>=rabbitmq1 -e <span class="attribute">RABBITMQ_ERLANG_COOKIE</span>=‘GoodGoodStudyDayDayUp’ -h rabbitmq1 <span class="attribute">--net</span>=rabbitmqnet rabbitmq:management</span><br><span class="line">由于Cookie的引号是中文引号，所以docker ps -a 时看到Status为Exited</span><br></pre></td></tr></table></figure>
解决方法：移除容器，把cookie的引号改为英文引号再执行就可以了</li>
</ol>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>rabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Apache Http Server</title>
    <url>/Apache-Http-Server/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="830044a9d07e530cda652214b82d495941b8cc481dac790f77c45eb837059df5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot参数校验</title>
    <url>/springboot-validate-params/</url>
    <content><![CDATA[<h2 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1. 前言</h2>
<p>在控制器类的方法里自己写校验逻辑代码也可以，只是不够优美，业界有更好的处理方法，主要有以下几种。</p>
<h2 id="2-pathvariable校验"><a class="markdownIt-Anchor" href="#2-pathvariable校验"></a> 2. PathVariable校验</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用正则表达式限制group 只能是a-zA-Z0-9_</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/path/&#123;group:[a-zA-Z0-9_]+&#125;/&#123;userid&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">path</span><span class="params">(<span class="meta">@PathVariable(&quot;group&quot;)</span> String group, <span class="meta">@PathVariable(&quot;userid&quot;)</span> Integer userid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> group + <span class="string">&quot;:&quot;</span> + userid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当请求URI不满足正则表达式时，客户端将收到404错误码，不方便的是，不能通过捕获异常的方式，向前端返回统一的、自定义格式的响应参数</p>
<h2 id="3-方法参数校验"><a class="markdownIt-Anchor" href="#3-方法参数校验"></a> 3. 方法参数校验</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/validate&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">validate1</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Size(min = 1, max = 10, message = &quot;姓名长度必须为1到10&quot;)</span> <span class="meta">@RequestParam(&quot;name&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Min(value = 10, message = &quot;年龄最小为10&quot;)</span> <span class="meta">@Max(value = 100, message = &quot;年龄最大为100&quot;)</span> <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">&quot;:&quot;</span> + age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用@Size 、@Min、@Max等校验注解进行参数校验</p>
<p>如果前端传递的参数不满足规则，则跑出异常，上面代码中@size、@Min、@Max注解来源于validation-api包中。<br>
更多注解参 <a href="#index1">参数校验注解</a> 小节。</p>
<h2 id="4表单对象vo对象校验"><a class="markdownIt-Anchor" href="#4表单对象vo对象校验"></a> 4.表单对象/VO对象校验</h2>
<p>当参数是VO时，可以在VO类的属性上添加校验注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Size(min = 1,max = 10,message = &quot;姓名长度必须为1到10&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(value = 10,message = &quot;年龄最小为10&quot;)</span><span class="meta">@Max(value = 100,message = &quot;年龄最大为100&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Future</span></span><br><span class="line">    <span class="meta">@JSONField(format=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="comment">//。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，@Future注解要求必须是相对当前时间来讲“未来的”某个时间。@Past表示过去的某个时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/validate2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">validate2</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5自定义校验规则"><a class="markdownIt-Anchor" href="#5自定义校验规则"></a> 5.自定义校验规则</h2>
<h3 id="51-自定义注解校验"><a class="markdownIt-Anchor" href="#51-自定义注解校验"></a> 5.1 自定义注解校验</h3>
<p>需要自定义一个注解类和一个校验类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER,ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = FlagValidatorClass.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FlagValidator &#123;</span><br><span class="line">    <span class="comment">// flag的有效值，多个使用,隔开</span></span><br><span class="line">    <span class="function">String <span class="title">values</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// flag无效时的提示内容</span></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;flag必须是预定义的那几个值，不能随便写&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlagValidatorClass</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">FlagValidator</span>,<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FlagValidator注解规定的那些有效值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String values;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(FlagValidator flagValidator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.values = flagValidator.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户输入的值，必须是FlagValidator注解规定的那些值其中之一。</span></span><br><span class="line"><span class="comment">     * 否则，校验不通过。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 用户输入的值，如从前端传入的某个值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(Object value, ConstraintValidatorContext constraintValidatorContext)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 切割获取值</span></span><br><span class="line">        String[] value_array = values.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        Boolean isFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value_array.length; i++)&#123;</span><br><span class="line">            <span class="comment">// 存在一致就跳出循环</span></span><br><span class="line">            <span class="keyword">if</span> (value_array[i] .equals(value))&#123;</span><br><span class="line">                isFlag = <span class="keyword">true</span>; <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> isFlag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用我们自定义的注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 前端传入的flag值必须是1或2或3，否则校验失败</span></span><br><span class="line">    <span class="meta">@FlagValidator(values = &quot;1,2,3&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String flag ;</span><br><span class="line">    <span class="comment">//。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="52-分组校验"><a class="markdownIt-Anchor" href="#52-分组校验"></a> 5.2 分组校验</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resume</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;id不能为空&quot;, groups = Update.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;名字不能为空&quot;, groups = Default.class)</span></span><br><span class="line">    <span class="meta">@Length(min = 4, max = 10, message = &quot;name 长度必须在 &#123;min&#125; - &#123;max&#125; 之间&quot;, groups = Default.class)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;年龄不能为空&quot;, groups = Default.class)</span></span><br><span class="line">    <span class="meta">@Min(value = 18, message = &quot;年龄不能小于18岁&quot;, groups = Default.class)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//。。。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Defaul分组进行验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resume</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/validate5&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(<span class="meta">@Validated(value = Resume.Default.class)</span> <span class="meta">@RequestBody</span> Resume resume)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;validate5&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Default、Update分组进行验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resume</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/validate6&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(<span class="meta">@Validated(value = &#123;Resume.Update.class, Resume.Default.class&#125;)</span> <span class="meta">@RequestBody</span> Resume resume)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;validate6&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立了两个分组，名称分别为Default、Update。POST方法提交时使用Defaut分组的校验规则，PUT方法提交时同时使用两个分组规则。</p>
<h2 id="6-异常拦截器"><a class="markdownIt-Anchor" href="#6-异常拦截器"></a> 6. 异常拦截器</h2>
<p>通过设置全局异常处理器，统一向前端返回校验失败信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.scj.springbootdemo.WebResult;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ObjectError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolationException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来处理bean validation异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex 异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ConstraintViolationException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  WebResult <span class="title">resolveConstraintViolationException</span><span class="params">(ConstraintViolationException ex)</span></span>&#123;</span><br><span class="line">        WebResult errorWebResult = <span class="keyword">new</span> WebResult(WebResult.FAILED);</span><br><span class="line">        Set&lt;ConstraintViolation&lt;?&gt;&gt; constraintViolations = ex.getConstraintViolations();</span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(constraintViolations))&#123;</span><br><span class="line">            StringBuilder msgBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span>(ConstraintViolation constraintViolation :constraintViolations)&#123;</span><br><span class="line">                msgBuilder.append(constraintViolation.getMessage()).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String errorMessage = msgBuilder.toString();</span><br><span class="line">            <span class="keyword">if</span>(errorMessage.length()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                errorMessage = errorMessage.substring(<span class="number">0</span>,errorMessage.length()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            errorWebResult.setInfo(errorMessage);</span><br><span class="line">            <span class="keyword">return</span> errorWebResult;</span><br><span class="line">        &#125;</span><br><span class="line">        errorWebResult.setInfo(ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> errorWebResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebResult <span class="title">resolveMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException ex)</span></span>&#123;</span><br><span class="line">        WebResult errorWebResult = <span class="keyword">new</span> WebResult(WebResult.FAILED);</span><br><span class="line">        List&lt;ObjectError&gt;  objectErrors = ex.getBindingResult().getAllErrors();</span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(objectErrors)) &#123;</span><br><span class="line">            StringBuilder msgBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (ObjectError objectError : objectErrors) &#123;</span><br><span class="line">                msgBuilder.append(objectError.getDefaultMessage()).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String errorMessage = msgBuilder.toString();</span><br><span class="line">            <span class="keyword">if</span> (errorMessage.length() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                errorMessage = errorMessage.substring(<span class="number">0</span>, errorMessage.length() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            errorWebResult.setInfo(errorMessage);</span><br><span class="line">            <span class="keyword">return</span> errorWebResult;</span><br><span class="line">        &#125;</span><br><span class="line">        errorWebResult.setInfo(ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> errorWebResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7span-idindex1参数校验注解span"><a class="markdownIt-Anchor" href="#7span-idindex1参数校验注解span"></a> 7.<span id="index1">参数校验注解</span></h2>
<p>Java中参数校验的注解来自三个方面，分别是</p>
<ul>
<li>javax.validation:validation-api，对应包javax.validation.constraints</li>
<li>org.hibernate:hibernate-validator，对应包org.hibernate.validator.constraints</li>
<li>org.springframework:spring-context，对应包org.springframework.validation</li>
</ul>
<p>JSR 303 是Bean验证的规范 ，Hibernate Validator 是该规范的参考实现，它除了实现规范要求的注解外，还额外实现了一些注解。</p>
<h3 id="71-validation-api中的注解"><a class="markdownIt-Anchor" href="#71-validation-api中的注解"></a> 7.1 validation-api中的注解：</h3>
<table>
<thead>
<tr>
<th style="text-align:left">配置项</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">适用类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">@AssertFalse</td>
<td style="text-align:left">限制必须是false</td>
<td style="text-align:left">boolean Boolean：not null时才校验</td>
</tr>
<tr>
<td style="text-align:left">@AssertTrue</td>
<td style="text-align:left">限制必须是true</td>
<td style="text-align:left">boolean Boolean：not null时才校验</td>
</tr>
<tr>
<td style="text-align:left">@Max(value)</td>
<td style="text-align:left">限制必须为一个小于等于value指定值的整数，value是long型</td>
<td style="text-align:left">byte/short/int/long/float/double及其对应的包装类；包装类对象not null时才校验</td>
</tr>
<tr>
<td style="text-align:left">@Min(value)</td>
<td style="text-align:left">限制必须为一个大于等于value指定值的整数，value是long型</td>
<td style="text-align:left">byte/short/int/long/float/double及其对应的包装类；包装类对象not null时才校验</td>
</tr>
<tr>
<td style="text-align:left">@DecimalMax(value)</td>
<td style="text-align:left">限制必须小于等于value指定的值，value是long型</td>
<td style="text-align:left">byte/short/int/long/float/double及其对应的包装类；包装类对象not null时才校验</td>
</tr>
<tr>
<td style="text-align:left">@DecimalMin(value)</td>
<td style="text-align:left">限制必须大于等于value指定的值，value是字符串类型</td>
<td style="text-align:left">byte/short/int/long/float/double及其对应的包装类；包装类对象not null时才校验</td>
</tr>
<tr>
<td style="text-align:left">@Digits(integer, fraction)</td>
<td style="text-align:left">限制必须为一个小数（其实整数也可以），且整数部分的位数不能超过integer，小数部分的位数不能超过fraction。integer和fraction可以是0。</td>
<td style="text-align:left">byte/short/int/long/float/double及其对应的包装类；包装类对象not null时才校验</td>
</tr>
<tr>
<td style="text-align:left">@Null</td>
<td style="text-align:left">限制只能为null</td>
<td style="text-align:left">任意对象类型（比如基本数据类型对应的包装类、String、枚举类、自定义类等）；不能是8种基本数据类型</td>
</tr>
<tr>
<td style="text-align:left">@NotNull</td>
<td style="text-align:left">限制必须不为null</td>
<td style="text-align:left">任意类型（包括8种基本数据类型及其包装类、String、枚举类、自定义类等）；但是对于基本数据类型，没有意义</td>
</tr>
<tr>
<td style="text-align:left">@Size(min, max)</td>
<td style="text-align:left">限制Collection类型或String的长度必须在min到max之间，包含min和max</td>
<td style="text-align:left">1.Collection类型（List/Set）<br> 2.String</td>
</tr>
<tr>
<td style="text-align:left">@Pattern(regexp)</td>
<td style="text-align:left">限制必须符合regexp指定的正则表达式</td>
<td style="text-align:left">String</td>
</tr>
<tr>
<td style="text-align:left">@Future</td>
<td style="text-align:left">限制必须是一个将来的日期</td>
<td style="text-align:left">Date/Calendar</td>
</tr>
<tr>
<td style="text-align:left">@Past</td>
<td style="text-align:left">限制必须是一个过去的日期</td>
<td style="text-align:left">Date/Calendar</td>
</tr>
<tr>
<td style="text-align:left">@Valid</td>
<td style="text-align:left">校验任何非原子类型，标记一个对象，表示校验对象中被注解标记的对象（不支持分组功能）</td>
<td style="text-align:left">需要校验成员变量的对象，比如@ModelAttribute标记的接口入参</td>
</tr>
</tbody>
</table>
<h3 id="72-hibernate-validator中的注解"><a class="markdownIt-Anchor" href="#72-hibernate-validator中的注解"></a> 7.2 hibernate-validator中的注解：</h3>
<p>下面列举的注解是hibernate-validator-5.3.6版本的。</p>
<table>
<thead>
<tr>
<th style="text-align:left">配置项</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">适用类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">@Length(min,max)</td>
<td style="text-align:left">限制String类型长度必须在min和max之间，包含min和max</td>
<td style="text-align:left">String, not null时才校验</td>
</tr>
<tr>
<td style="text-align:left">@NotBlank</td>
<td style="text-align:left">验证注解的元素值不是空白（即不是null，且包含非空白字符）</td>
<td style="text-align:left">String</td>
</tr>
<tr>
<td style="text-align:left">@NotEmpty</td>
<td style="text-align:left">验证注解的元素值不为null且不为空（即字符串非null且长度不为0、集合类型大小不为0）</td>
<td style="text-align:left">1.Collection类型（List/Set）<br> 2.String</td>
</tr>
<tr>
<td style="text-align:left">@Range(min,max)</td>
<td style="text-align:left">验证注解的元素值在最小值和最大值之间</td>
<td style="text-align:left">1. String(数字类型的字符串)，非null时才校验 <br>  2. byte/short/int/long/float/double及其包装类，包装类非null时才校验</td>
</tr>
<tr>
<td style="text-align:left">@Email(regexp)</td>
<td style="text-align:left">验证注解的字符串符合邮箱的正则表达式，可以使用regexp自定义正则表达式</td>
<td style="text-align:left">String</td>
</tr>
<tr>
<td style="text-align:left">@CreditCardNumber</td>
<td style="text-align:left">验证银行借记卡、信用卡的卡号</td>
<td style="text-align:left">String（不能包含空格等特殊字符）</td>
</tr>
</tbody>
</table>
<h3 id="73-spring-context中的注解"><a class="markdownIt-Anchor" href="#73-spring-context中的注解"></a> 7.3 spring-context中的注解：</h3>
<table>
<thead>
<tr>
<th style="text-align:left">配置项</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">适用类型</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">@Validated</td>
<td style="text-align:left">校验非原子类型对象，或启用类中原子类型参数的校验（支持分组校验；只校验包含指定分组的注解参数）</td>
<td style="text-align:left">1. Controller类  <br> 2. @ModelAttribue标记的查询条件对象类 <br>3. @RequestBody标记的请求体对象类</td>
</tr>
</tbody>
</table>
<h3 id="74-注解的启用"><a class="markdownIt-Anchor" href="#74-注解的启用"></a> 7.4 注解的启用</h3>
<ol>
<li>方法中对象参数中成员变量校验注解的生效条件
<ul>
<li>@ModelAttribute标记的查询条件类参数，需要同时用@Valid或@Validated标记，类中的注解校验才会生效</li>
<li>@RequestBody标记的请求体对象参数，需要同时用@Valid或@Validated标记，类中的注解校验才会生效</li>
<li>@Valid或@Validated标记在方法或方法所属类上无效</li>
</ul>
</li>
<li>方法中原子类型参数校验注解的生效条件
<ul>
<li>@Validated标记在方法所属类上</li>
</ul>
</li>
<li>按照分组启用
<ul>
<li>在注解中使用groups添加启用注解的分组</li>
<li>在@Validated中指定启用的分组</li>
</ul>
</li>
</ol>
<p>博客参考地址：<a href="https://mp.weixin.qq.com/s/0VX6lLS133CA4NFCVOHhhw">https://mp.weixin.qq.com/s/0VX6lLS133CA4NFCVOHhhw</a></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>VMWare创建虚拟机并设置静态IP</title>
    <url>/static-ip-setting/</url>
    <content><![CDATA[<h2 id="1-vmwarecentos7-静态ip设置"><a class="markdownIt-Anchor" href="#1-vmwarecentos7-静态ip设置"></a> 1. VMware+Centos7 静态IP设置</h2>
<h3 id="11-vmware设置"><a class="markdownIt-Anchor" href="#11-vmware设置"></a> 1.1 VMware设置</h3>
<p>省略windows安装VMWare的过程。</p>
<ol>
<li>
<p>查看虚拟网卡信息</p>
<p>虚拟机安装好以后，当前的系统会多出来两个虚拟网卡，一般情况下这两个网卡的命名是</p>
 <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">VMware</span> Virtual Ethernet Adapter for VMnet<span class="number">1</span></span><br><span class="line"><span class="attribute">VMware</span> Virtual Ethernet Adapter for VMnet<span class="number">8</span></span><br></pre></td></tr></table></figure>
<p>我们可以把虚拟机中的系统的静态IP绑定到VMnet8上，所以下一步我们看一下VMnet8的ip地址</p>
</li>
<li>
<p>查看虚拟网卡IP</p>
<p>在当前操作系统中，输入<code>ipconfig -all</code>显示网卡的IP信息如下<br>
<img src="/static-ip-setting/1.png" alt><br>
记住当前VMnet8网卡的网段，如图所示，网段为:<code>192.168.8</code></p>
</li>
<li>
<p>虚拟机设置</p>
<p>打开VMware，进入<code>编辑 -&gt; 虚拟机网络编辑器</code><br>
<img src="/static-ip-setting/2.png" alt><br>
选中VMnet8这个网卡，点击<code>NAT</code>设置<br>
<img src="/static-ip-setting/3.png" alt></p>
<p>在NAT设置中，可以看到子网IP、网关IP等信息。这里我们需要把网关IP记录下来： <code>192.168.8.2</code><br>
<img src="/static-ip-setting/4.png" alt></p>
</li>
<li>
<p>设置虚拟机的网络连接方式</p>
<p>选中创建好的虚拟机，右键<code>设置</code>进入虚拟机设置面板。<br>
将网络社配置设置为<code>自定义</code>，选中<code>VMnet8</code>这个网卡保存<br>
<img src="/static-ip-setting/5.png" alt></p>
</li>
</ol>
<h3 id="12-centos7中的静态ip设置"><a class="markdownIt-Anchor" href="#12-centos7中的静态ip设置"></a> 1.2 Centos7中的静态ip设置</h3>
<p>前置工作完成之后，就开始进入虚拟机的设置环节了</p>
<ol>
<li>
<p>找到网卡信息配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
<p><img src="/static-ip-setting/6.png" alt><br>
找到网卡名称<code>ens33</code>，输入命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改配置</p>
<p>这个配置需要修改两个地方</p>
<ul>
<li>设置BOOTPROTO=“static”</li>
<li>添加IPADDR/NETMASK/DNS1/GATEWAY这几个配置<br>
<img src="/static-ip-setting/7.png" alt></li>
</ul>
<p>配置说明</p>
<ul>
<li>IPADDR 就是当前虚拟机要设置的固定ip地址，网段要一致，我这边的案例是在8网段(这个网段是<code>VMnet8</code>对应的子网网段，不是真实机上的网段）。</li>
<li>NETMASK 子网掩码 用<code>VMnet8</code>对应的子网掩码值就行</li>
<li>DNS1 在真实机器上通过<code>ipconfig</code>，获得真实机器的网卡对应的DNS地址，填在这个位置</li>
<li>GATEWAY 网关地址，用前面第二个步骤中找到的网关地址： 192.168.8.2</li>
</ul>
</li>
<li>
<p>重启网络服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="13-可能会遇到的问题"><a class="markdownIt-Anchor" href="#13-可能会遇到的问题"></a> 1.3 可能会遇到的问题</h3>
<ol>
<li>
<p><code>VMnet8</code>的网段和真实机器上的网段不一样</p>
<p>真实机器的网段是8， 而<code>VMnet8</code>的网段是136. 由于网段不一致，就会存在网络不通的问题。所以第一步，应该是把VMnet8这个网卡的网段重新设置，</p>
<p>进入VMware， 找到 <code>编辑 -&gt;虚拟网络编辑器</code><br>
<img src="/static-ip-setting/8.png" alt></p>
<p>点击<code>更改设置</code></p>
<p><img src="/static-ip-setting/9.png" alt><br>
修改子网IP，原本的网段是136， 改成8网段。 保存以后，改网卡会自动重启</p>
</li>
<li>
<p>真实机器无法Ping通虚拟机</p>
<ul>
<li>
<p>原因1： 虚拟机的网段设置不正确，这个网段不是真实机器的网段，而是<code>VMnet8</code> NAT模式对应的网段，本案例中的网段是8.</p>
</li>
<li>
<p>原因2：虚拟机迁移过，原本设置的网段在新的网络中无效，可以在VMware这个工具的如下菜单处</p>
</li>
</ul>
<pre class="highlight"><code class>编辑 -&gt; 虚拟网络编辑器
还原默认设置，这个还原操作会重建虚拟网卡， 重建之后，VMware NAT模式的子网地址的网段会发生变化。后续的配置采用这个网段就行
</code></pre>
<p><img src="/static-ip-setting/10.png" alt></p>
</li>
</ol>
<h2 id="2-mac用vmware创建虚拟机并设置静态ip"><a class="markdownIt-Anchor" href="#2-mac用vmware创建虚拟机并设置静态ip"></a> 2. Mac用VMWare创建虚拟机并设置静态IP</h2>
<p>参考博客：<a href="https://blog.51cto.com/u_15298624/3033418">https://blog.51cto.com/u_15298624/3033418</a></p>
]]></content>
      <categories>
        <category>经验分享</category>
      </categories>
      <tags>
        <tag>ip</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习</title>
    <url>/vue-1/</url>
    <content><![CDATA[<h2 id="1-什么是vue"><a class="markdownIt-Anchor" href="#1-什么是vue"></a> 1. 什么是vue</h2>
<p>vue 官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a><br>
渐进式框架，</p>
<h2 id="2安装"><a class="markdownIt-Anchor" href="#2安装"></a> 2.安装</h2>
<ol>
<li>
<p>安装 <code>npm</code><br>
<code>npm</code> 全称为 <code>Node Package Manager</code>，是一个基于<code>Node.js</code>的包管理器，也是整个<code>Node.js</code>社区最流行、支持的第三方模块最多的包管理器。</p>
 <figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> -v</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>由于网络原因 安装 <code>cnpm</code></p>
 <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#旧版，cnpm官方公告将在2022年6月30日停止老域名解析</span></span><br><span class="line">npm install -g cnpm --registry=https:<span class="regexp">//</span>registry.npm.taobao.org</span><br><span class="line">   </span><br><span class="line"><span class="comment">#新版</span></span><br><span class="line">npm install -g cnpm --registry=https:<span class="regexp">//</span>registry.npmmirror.com</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装 <code>vue-cli</code></p>
 <figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">cnpm install -g <span class="meta">@vue</span>/cli</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>安装 <code>webpack</code></p>
<p><code>webpack</code> 是  <code>JavaScript</code> 打包器(module bundler)</p>
 <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cnpm <span class="keyword">install</span> -g webpack</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="3-vue练习"><a class="markdownIt-Anchor" href="#3-vue练习"></a> 3  Vue练习</h2>
<h3 id="31-vue实例"><a class="markdownIt-Anchor" href="#31-vue实例"></a> 3.1 Vue实例</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt; &#123;&#123; message &#125;&#125; &#123;&#123; name &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var data = &#123;</span><br><span class="line">        message: &#x27;hello world&#x27;,</span><br><span class="line">        name: &#x27;xiaoyuge&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">    //view model 数据模型 vm</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        //如果要某一个属性声明式响应，必须在new vue的时候声明</span><br><span class="line">        data: data</span><br><span class="line">    &#125;);</span><br><span class="line">    //vm.$data.message =  data.message == vm.message;</span><br><span class="line">    //实例创建之后，可以通过 vm.$data 访问原始数据对象。Vue 实例也代理了 data 对象上所有的 property，因此访问 vm.message 等价于访问 vm.$data.message</span><br><span class="line">    vm.$watch(&#x27;message&#x27;, function(newVal, oldVal) &#123;</span><br><span class="line">        console.log(newVal, oldVal);</span><br><span class="line">    &#125;)</span><br><span class="line">    //修改值必须放到后面，</span><br><span class="line">    vm.$data.message = &quot;test....&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="32-数据和方法"><a class="markdownIt-Anchor" href="#32-数据和方法"></a> 3.2 数据和方法</h3>
<p>当一个 Vue 实例被创建时，它将 data 对象中的所有的 property 加入到 Vue 的响应式系统中。当这些 property 的值发生改变时，视图将会产生“响应”，即匹配更新为新的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们的数据对象</span></span><br><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该对象被加入到一个 Vue 实例中</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得这个实例上的 property</span></span><br><span class="line"><span class="comment">// 返回源数据中对应的字段</span></span><br><span class="line">vm.a == data.a <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 property 也会影响到原始数据</span></span><br><span class="line">vm.a = <span class="number">2</span></span><br><span class="line">data.a <span class="comment">// =&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ……反之亦然</span></span><br><span class="line">data.a = <span class="number">3</span></span><br><span class="line">vm.a <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure>
<p>当这些数据改变时，视图会进行重渲染。值得注意的是只有当实例被创建时就已经存在于 data 中的 property 才是响应式的。也就是说如果你添加一个新的 property，比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.b = &#x27;hi&#x27;</span><br></pre></td></tr></table></figure>
<p>那么对 b 的改动将不会触发任何视图的更新。如果你知道你会在晚些时候需要一个 property，但是一开始它为空或不存在，那么你仅需要设置一些初始值。比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  newTodoText: &#x27;&#x27;,</span><br><span class="line">  visitCount: 0,</span><br><span class="line">  hideCompletedTodos: false,</span><br><span class="line">  todos: [],</span><br><span class="line">  error: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里唯一的例外是使用 Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;!-- 这里的 `foo` 不会更新！ --&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;foo = &#x27;baz&#x27;&quot;&gt;Change it&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var obj = &#123;</span><br><span class="line">  foo: &#x27;bar&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object.freeze(obj)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  data: obj</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>除了数据 property，Vue 实例还暴露了一些有用的实例 property 与方法。它们都有前缀 $，以便与用户定义的 property 区分开来。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = &#123; a: 1 &#125;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &#x27;#example&#x27;,</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.$data === data // =&gt; true</span><br><span class="line">vm.$el === document.getElementById(&#x27;example&#x27;) // =&gt; true</span><br><span class="line"></span><br><span class="line">// $watch 是一个实例方法</span><br><span class="line">vm.$watch(&#x27;a&#x27;, function (newValue, oldValue) &#123;</span><br><span class="line">  // 这个回调将在 `vm.a` 改变后调用</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="23-生命周期钩子"><a class="markdownIt-Anchor" href="#23-生命周期钩子"></a> 2.3 生命周期钩子</h3>
<p>Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: &quot;hi vue&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        //在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</span><br><span class="line">        beforeCreate: function() &#123;</span><br><span class="line">            console.log(&#x27;beforeCreate&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        //在实例创建完成后被立即调用。</span><br><span class="line">        // 在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。</span><br><span class="line">        // 然而，挂载阶段还没开始，$el 属性目前不可见 </span><br><span class="line">        created: function() &#123;</span><br><span class="line">            console.log(&#x27;created&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        //在挂载开始之前被调用：相关的渲染函数首次被调用</span><br><span class="line">        beforeMount: function() &#123;</span><br><span class="line">            console.log(&#x27;beforeMount&#x27;);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        //el 被新创建的 vm.$el 替换, 挂在成功	</span><br><span class="line">        mounted: function() &#123;</span><br><span class="line">            console.log(&#x27;mounted&#x27;);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        //数据更新时调用</span><br><span class="line">        beforeUpdate: function() &#123;</span><br><span class="line">            console.log(&#x27;beforeUpdate&#x27;);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        //组件 DOM 已经更新, 组件更新完毕 </span><br><span class="line">        updated: function() &#123;</span><br><span class="line">            console.log(&#x27;updated&#x27;);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">          beforeDestroy() &#123;</span><br><span class="line">            console.log(&quot;=========&quot; + &quot;beforeDestroy：销毁之前&quot; + &quot;========&quot;);</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">            console.log(this.$data);</span><br><span class="line">          &#125;,</span><br><span class="line">          destroyed() &#123;</span><br><span class="line">            console.log(&quot;==========&quot; + &quot;destroyed：销毁之后&quot; + &quot;===========&quot;);</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">          &#125;,</span><br><span class="line">          activated() &#123;</span><br><span class="line">            console.log(&quot;&quot;);</span><br><span class="line">          &#125;,</span><br><span class="line">          deactivated() &#123;</span><br><span class="line">            console.log(&quot;&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    //3秒后修改值，触发beforeUpdate, updated事件</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        vm.msg = &quot;change ......&quot;;</span><br><span class="line">    &#125;, 3000);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>控制台依次打印：    <br><br>
beforeCreate    <br><br>
created <br><br>
beforeMount <br><br>
mounted <br><br>
beforeUpdate    <br><br>
updated <br></p>
<p>注意事项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不要在选项 property 或回调上使用箭头函数，比如 created: () =&gt; console.log(this.a) 或 vm.$watch(&#x27;a&#x27;, newValue =&gt; this.myMethod())。</span><br><span class="line">因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 Uncaught TypeError: Cannot read property of undefined </span><br><span class="line">或 Uncaught TypeError: this.myMethod is not a function 之类的错误。</span><br></pre></td></tr></table></figure>
<p><img src="/vue-1/instance.png" alt></p>
<h3 id="33-条件与循环"><a class="markdownIt-Anchor" href="#33-条件与循环"></a> 3.3 条件与循环</h3>
<ul>
<li>
<p>v-if: 控制切换一个元素是否显示</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;vue-app&quot;&gt;</span><br><span class="line">    &lt;p v-if=&quot;seen&quot;&gt;v-if: 如果为false，Dom将不渲染该元素&lt;/p&gt;</span><br><span class="line">    &lt;p v-show=&quot;seen&quot;&gt;show：Dom渲染，只是通过css控制display属性是否显示&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;show: 渲染时开销大；v-if：渲染时开销小；具体场景根据实际情况选定&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#vue-app&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          seen: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    vm.seen = false;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>当改变<code>seen</code> 的值为false的时候，<code>v-if</code>绑定的元素Dom元素不渲染<br>
<img src="/vue-1/if_each.png" alt></p>
</li>
<li>
<p>v-for: 绑定数组的数据来渲染一个项目列表</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;div id=&quot;vue-app&quot;&gt;</span><br><span class="line">     &lt;!--遍历输出list--&gt;</span><br><span class="line">     &lt;p&gt;遍历输出list&lt;/p&gt;</span><br><span class="line">     &lt;ol&gt;</span><br><span class="line">         &lt;li v-for=&quot;item in list&quot;&gt;</span><br><span class="line">              &#123;&#123; item.name &#125;&#125;</span><br><span class="line">         &lt;/li&gt;</span><br><span class="line">     &lt;/ol&gt;</span><br><span class="line">     &lt;br&gt;</span><br><span class="line">     &lt;p&gt;遍历输出map key value-&lt;/p&gt;</span><br><span class="line">     &lt;ul&gt;</span><br><span class="line">         &lt;li v-for=&quot;value, key in object&quot;&gt;</span><br><span class="line">             &#123;&#123;key&#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line">         &lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">     var vm = new Vue(&#123;</span><br><span class="line">         el: &#x27;#vue-app&#x27;,</span><br><span class="line">         data:&#123;</span><br><span class="line">             list:[</span><br><span class="line">                 &#123;name: &#x27;张三&#x27;&#125;,</span><br><span class="line">                 &#123;name: &#x27;李四&#x27;&#125;,</span><br><span class="line">                 &#123;name: &#x27;王五&#x27;&#125;</span><br><span class="line">             ],</span><br><span class="line">             object: &#123;</span><br><span class="line">truetruetitle: &#x27;How to do lists in Vue&#x27;,</span><br><span class="line">truetrueauthor: &#x27;Jane Doe&#x27;,</span><br><span class="line">truetruepublishedAt: &#x27;2016-04-10&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">     //往数组里面添加元素，页面上响应式渲染</span><br><span class="line">     vm.list.push(&#123;name:&#x27;赵六&#x27;&#125;);</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p><img src="/vue-1/v-for.png" alt></p>
</li>
</ul>
<h3 id="34-处理用户输入"><a class="markdownIt-Anchor" href="#34-处理用户输入"></a> 3.4 处理用户输入</h3>
<ul>
<li>
<p>v-on: 事件监听器</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;example-1&quot;&gt;</span><br><span class="line">        &lt;!-- 单击事件：计算器加一 --&gt;</span><br><span class="line">        &lt;button v-on:click=&quot;counter += 1&quot;&gt; 数值 : &#123;&#123; counter &#125;&#125; &lt;/button&gt;&lt;br /&gt;</span><br><span class="line">  </span><br><span class="line">        &lt;!-- 双击事件 --&gt;</span><br><span class="line">        &lt;button v-on:dblclick=&quot;greet(&#x27;abc&#x27;, $event)&quot;&gt;Greet&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=&quot;example-2&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;!-- 单击 --&gt;</span><br><span class="line">        &lt;button v-on:click=&quot;reverseMessage&quot;&gt;反转消息&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            counter: 0,</span><br><span class="line">            name: &quot;vue&quot;,</span><br><span class="line">            message: &#x27;hello world&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            greet: function(str, e) &#123;</span><br><span class="line">                alert(str);</span><br><span class="line">            &#125;,</span><br><span class="line">            reverseMessage: function() &#123;</span><br><span class="line">                //更新了应用的状态，但没有触碰 DOM。所有的 DOM 操作都由 Vue 来处理，这样我们只需要关注逻辑层面即可</span><br><span class="line">                //this 表示vue实例对象，可以获取相关的数据信息</span><br><span class="line">                this.message = this.message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>v-model: 表单输入和应用状态之间的双向绑定</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;example-1&quot;&gt;</span><br><span class="line">        &lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot;&gt;</span><br><span class="line">        &lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;textarea v-model=&quot;message2&quot; placeholder=&quot;add multiple lines&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">        &lt;p style=&quot;white-space: pre-line;&quot;&gt;&#123;&#123; message2 &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;div style=&quot;margin-top:20px;&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; id=&quot;jack&quot; value=&quot;Jack&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;jack&quot;&gt;Jack&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; id=&quot;john&quot; value=&quot;John&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;john&quot;&gt;John&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; id=&quot;mike&quot; value=&quot;Mike&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;mike&quot;&gt;Mike&lt;/label&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            &lt;span&gt;Checked names: &#123;&#123; checkedNames &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;div style=&quot;margin-top:20px;&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;radio&quot; id=&quot;one&quot; value=&quot;One&quot; v-model=&quot;picked&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;one&quot;&gt;One&lt;/label&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            &lt;input type=&quot;radio&quot; id=&quot;two&quot; value=&quot;Two&quot; v-model=&quot;picked&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;two&quot;&gt;Two&lt;/label&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            &lt;span&gt;Picked: &#123;&#123; picked &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;button type=&quot;button&quot; @click=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            //这里可以设置初始值，也可以设置为&#x27;&#x27; 空值</span><br><span class="line">            message: &quot;test&quot;,</span><br><span class="line">            message2: &quot;hi&quot;,</span><br><span class="line">            checkedNames: [&#x27;Jack&#x27;, &#x27;John&#x27;], //多选框，值是数组格式</span><br><span class="line">            picked: &quot;Two&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            submit: function() &#123;</span><br><span class="line">                //this代表的是vue实例对象，可以通过this获取表单数据，如下</span><br><span class="line">                var params = &#123;</span><br><span class="line">                    message: this.message,</span><br><span class="line">                    message2: this.message2,</span><br><span class="line">                    checkedNames: this.checkedNames,</span><br><span class="line">                    picked: this.picked</span><br><span class="line">                &#125;</span><br><span class="line">                console.log(params);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装Zookeeper 3.7.1单节点</title>
    <url>/zookeeper-install/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="012a63b81137ab1570c28d3f02b9c2974322ce8e622baf7564fd13538f30c674"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Canal和Kafka实现数据同步</title>
    <url>/canal-kafka-async/</url>
    <content><![CDATA[<h3 id="1-前言"><a class="markdownIt-Anchor" href="#1-前言"></a> 1. 前言</h3>
<p>Canal的作用：把自己&quot;伪装&quot;成一个<code>Mysql</code>的<code>slave</code>，不停同步<code>master</code>的<code>binlog</code>数据，再把<code>binlog</code>数据以<code>TCP</code>或者<code>MQ</code>的方式（支持kafka、RabbitMQ、RocketMQ）发送给需要同步数据的项目</p>
<p><code>canal</code>项目地址：<a href="https://github.com/alibaba/canal/releases">https://github.com/alibaba/canal/releases</a> , 2022-05-24发布的最新版1.1.6。</p>
<p>测试需要同步的目标数据库是192.168.44.121上部署的数据库</p>
<h3 id="2-在目标数据库上创建用户和数据库"><a class="markdownIt-Anchor" href="#2-在目标数据库上创建用户和数据库"></a> 2. 在目标数据库上创建用户和数据库</h3>
<p>注意 121 的数据库首先要开启<code>binlog</code>，<code>binlog-format</code>必须是<code>ROW</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log-bin</span>=<span class="string">/var/lib/mysql/mysql-bin</span></span><br><span class="line"><span class="meta">binlog-format</span>=<span class="string">ROW</span></span><br></pre></td></tr></table></figure>
<p>用户和数据库创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建canal专用的用户，用于访问master获取binlog</span><br><span class="line">CREATE USER canal IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line">-- 给canal用户分配查询和复制的权限</span><br><span class="line">GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO canal@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">ALTER USER &#x27;canal&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line">-- 创建测试数据库</span><br><span class="line">CREATE DATABASE `canaltest` CHARSET `utf8mb4` COLLATE `utf8mb4_unicode_ci`;</span><br></pre></td></tr></table></figure>
<h3 id="3-安装zk和kafka"><a class="markdownIt-Anchor" href="#3-安装zk和kafka"></a> 3. 安装ZK和kafka</h3>
<p>在192.168.44.161机器上安装ZK和kafka, 这里我们安装伪集群版本，具体步骤请参考 <a href="https://xiaoyuge.work/kafka-colony-install/">CentOS Kafka 3.2.0 单机集群安装（伪集群）</a></p>
<h3 id="4-安装canal"><a class="markdownIt-Anchor" href="#4-安装canal"></a> 4. 安装canal</h3>
<ol>
<li>
<p>下载canal<br>
以安装目录:/usr/local/tools/canal 为例。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/</span><br><span class="line">midir canal</span><br><span class="line">cd canal</span><br><span class="line"></span><br><span class="line">wget https://github.com/alibaba/canal/releases/download/canal-1.1.6/canal.deployer-1.1.6.tar.gz</span><br><span class="line">tar -zxvf canal.deployer-1.1.6.tar.gz</span><br></pre></td></tr></table></figure>
<p>如果下载慢的话，可以先下载到本地，然后上传到服务器</p>
</li>
<li>
<p>修改配置：conf/canal.properties</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/canal/conf</span><br><span class="line">vim canal.propertis</span><br></pre></td></tr></table></figure>
<p>修改配置如下：</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">canal.serverMode</span>=<span class="string">kafka</span></span><br><span class="line"><span class="meta">canal.mq.servers</span> = <span class="string">192.168.44.160:9092</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改配置：example/instance.properties</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/canal/example</span><br><span class="line">vim instance.properties</span><br></pre></td></tr></table></figure>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">canal.instance.master.address</span>=<span class="string">192.168.44.121:3306</span></span><br><span class="line"><span class="meta">canal.instance.dbUsername</span>=<span class="string">canal</span></span><br><span class="line"><span class="meta">canal.instance.dbPassword</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"># 新增</span></span><br><span class="line"><span class="meta">canal.instance.defaultDatabaseName</span>=<span class="string">canaltest</span></span><br><span class="line"><span class="comment"># 这个topic会自动创建</span></span><br><span class="line"><span class="meta">canal.mq.topic</span>=<span class="string">canal-topic</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动canal</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/canal/bin</span><br><span class="line">sh startup.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看实例日志</span></span><br><span class="line">tail -100f /usr/local/tools/canal/logs/canal/canal.log</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="5-建表测试"><a class="markdownIt-Anchor" href="#5-建表测试"></a> 5. 建表测试</h3>
<p>在canaltest数据随表建一张表，做增删改的操作。</p>
<p>在Kafka服务器上消费这个topic</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-console-consumer.sh --bootstrap-server 192.168.44.160:9092 --topic canal-topic</span><br></pre></td></tr></table></figure>
<p>kafka相关命令可以查看这篇博客 <a href="https://xiaoyuge.work/kafka-command/">kafka常用命令</a></p>
<p>成功消费到canal发送的消息：<br>
<img src="/canal-kafka-async/1.png" alt></p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>Canal</tag>
      </tags>
  </entry>
  <entry>
    <title>Java知识系统整理1</title>
    <url>/java-basic/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="25f68693b346b89baf83488d65ef8b2ef5bd50d15f826561183cb79eeddd0088">91b4a72afde41933824d9b47e790ab27512af815f571870ab6669de88f4dca4a01f1dd8673e0a7b1d2aa851302adc531e181f6a519f07d3f97e2462f0b089f099efd9330c0f3d7b1ba97ba257aa62a1679b83baf51fe35e94a9ce8a5e420eb1815e7f92434b158931fb517efba288cc0</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins自动化部署入门教程</title>
    <url>/jenkins/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="90050493dc4f0fd06dd531b040700edbdce0ef8d8e93f81a6db1664c63f329fe"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>devops</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS Kafka 3.2.0 单机集群安装（伪集群）</title>
    <url>/kafka-colony-install/</url>
    <content><![CDATA[<h3 id="1-准备工作"><a class="markdownIt-Anchor" href="#1-准备工作"></a> 1. 准备工作</h3>
<p>由于没有那么多台机器，所以在同一台机器上运行多个Kafka服务，只是端口不同</p>
<ol>
<li>
<p>安装路径： /usr/local/tools ; 服务器IP： 192.168.44.161</p>
</li>
<li>
<p>基于Kafka单机版安装流程，请查看 <a href="https://xiaoyuge.work/kafka-install/">CentOS安装kafka 3.2.0单机版</a></p>
</li>
<li>
<p>所有Kafka节点连接到相同的ZK（或ZK集群），需要先安装一个ZK，请参考 <a href="https://xiaoyuge.work/zookeeper-install/">CentOS安装Zookeeper 3.7.1单节点</a> , 在本例中ZK也安装在这台机器上。</p>
</li>
</ol>
<p>注意：单机的kafka和集群的Kafka不要混用一个ZK，否则会出现数据混乱的问题。</p>
<h3 id="2-下载解压kafka"><a class="markdownIt-Anchor" href="#2-下载解压kafka"></a> 2. 下载解压kafka</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools</span><br><span class="line">wget https://dlcdn.apache.org/kafka/3.2.0/kafka_2.12-3.2.0.tgz</span><br><span class="line">tar -xzvf kafka_2.12-3.2.0.tgz</span><br><span class="line">cd kafka_2.12-3.2.0</span><br></pre></td></tr></table></figure>
<h3 id="3-修改配置文件"><a class="markdownIt-Anchor" href="#3-修改配置文件"></a> 3. 修改配置文件</h3>
<p>复制3个配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd config</span><br><span class="line">cp server.properties server1.properties </span><br><span class="line">cp server.properties server2.properties </span><br><span class="line">cp server.properties server3.properties </span><br></pre></td></tr></table></figure>
<p>修改配置文件中的broker.id分别为1、2、3</p>
<p>listeners这一行取消注释，端口号分别为9093、9094、9095</p>
<p>log.dirs分别设置为kafka-logs1、kafka-logs2、kafka-logs3（先创建）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /tmp/kafka-logs1 /tmp/kafka-logs2 /tmp/kafka-logs3</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>server1.properties 的配置：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">broker.id=1</span><br><span class="line">listeners=PLAINTEXT://192.168.44.161:9093</span><br><span class="line">log.dirs=/tmp/kafka-logs1</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>server2.properties 的配置:</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">broker.id=2</span><br><span class="line">listeners=PLAINTEXT://192.168.44.161:9094</span><br><span class="line">log.dirs=/tmp/kafka-logs2</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>server3.properties 的配置：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">broker.id=3</span><br><span class="line">listeners=PLAINTEXT://192.168.44.161:9095</span><br><span class="line">log.dirs=/tmp/kafka-logs3</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>如果listeners取消注释导致topic创建失败，可以修改为</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://:9093</span></span><br><span class="line"><span class="meta">advertised.listeners</span>=<span class="string">PLAINTEXT://10.1.14.159:9093</span></span><br></pre></td></tr></table></figure>
<h3 id="4-启动3个服务"><a class="markdownIt-Anchor" href="#4-启动3个服务"></a> 4. 启动3个服务</h3>
<ol>
<li>启动ZK<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/apache-zookeeper-3.7.1-bin/bin</span><br><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure>
</li>
<li>启动Kafka <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ../bin</span><br><span class="line">./kafka-server-start.sh -daemon ../config/server1.properties</span><br><span class="line">./kafka-server-start.sh -daemon ../config/server2.properties</span><br><span class="line">./kafka-server-start.sh -daemon ../config/server3.properties</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>PS：如果遇到zk node exists的问题，先把brokers节点删掉（临时解决方案）。</p>
<h3 id="5-集群下创建topic"><a class="markdownIt-Anchor" href="#5-集群下创建topic"></a> 5. 集群下创建Topic</h3>
<p>在bin目录下，创建一个名为ygbtest的<code>topic</code>，只有一个服务本一个分区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic ygbtest</span><br></pre></td></tr></table></figure>
<p>查看一创建的topic：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh kafka-topics.sh -list -zookeeper localhost:2181</span><br></pre></td></tr></table></figure>
<h3 id="6-集群下启动consumer"><a class="markdownIt-Anchor" href="#6-集群下启动consumer"></a> 6. 集群下启动Consumer</h3>
<p>在一个新的原车鞥窗口中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh kafka-console-consumer.sh --bootstrap-server 192.168.44.161:9093,192.168.44.161:9094,192.168.44.161:9095 --topic ygbtest --from-beginning</span><br></pre></td></tr></table></figure>
<p>kafka相关命令可以查看这篇博客 <a href="https://xiaoyuge.work/kafka-command/">kafka常用命令</a></p>
<h3 id="7-集群下启动producer"><a class="markdownIt-Anchor" href="#7-集群下启动producer"></a> 7. 集群下启动Producer</h3>
<p>打开一个新的窗口，在kafka解压目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh kafka-console-producer.sh --broker-list 192.168.44.161:9093,192.168.44.161:9094,192.168.44.161:9095 --topic ygbtest</span><br></pre></td></tr></table></figure>
<h3 id="8-集群下producer窗口发送消息"><a class="markdownIt-Anchor" href="#8-集群下producer窗口发送消息"></a> 8. 集群下Producer窗口发送消息</h3>
<p>在生产者<code>Producer</code>窗口输入hello world 回车</p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis6.2.6一主二从Sentinel监控配置</title>
    <url>/redis-sentinel/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8bd7d9ad3e9ecc0d5a513f64e82bd24b6f3494a9721f6235dc44750534c85fa3"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ 二主二从异步集群部署</title>
    <url>/rocketmq-colony-install/</url>
    <content><![CDATA[<h3 id="1-节点规划"><a class="markdownIt-Anchor" href="#1-节点规划"></a> 1. 节点规划</h3>
<ol>
<li>
<p>第一台机器 <strong>192.168.44.163</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">端口</th>
<th style="text-align:left">名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">9876</td>
<td style="text-align:left">NameServer1</td>
</tr>
<tr>
<td style="text-align:left">10910</td>
<td style="text-align:left">BrokerA-master</td>
</tr>
<tr>
<td style="text-align:left">10921</td>
<td style="text-align:left">BrokerB-slave</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>第二台机器 <strong>192.168.44.164</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">端口</th>
<th style="text-align:left">名称</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">9876</td>
<td style="text-align:left">NameServer2</td>
</tr>
<tr>
<td style="text-align:left">10911</td>
<td style="text-align:left">BrokerA-slave</td>
</tr>
<tr>
<td style="text-align:left">10920</td>
<td style="text-align:left">BrokerB-slave</td>
</tr>
</tbody>
</table>
</li>
</ol>
<p><img src="/rocketmq-colony-install/1.png" alt></p>
<h3 id="2-下载并解压"><a class="markdownIt-Anchor" href="#2-下载并解压"></a> 2. 下载并解压</h3>
<p>具体操作可以查看 <a href="https://xiaoyuge.work/rocketmq-install/">CentOS安装RocketMQ以及常用命令</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools</span><br><span class="line">wget https://dlcdn.apache.org/rocketmq/4.9.4/rocketmq-all-4.9.4-bin-release.zip</span><br><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">unzip rocketmq-all-4.9.4-bin-release.zip </span><br><span class="line"><span class="meta">#</span><span class="bash">改名</span></span><br><span class="line">mv rocketmq-all-4.9.4-bin-release rocketmq</span><br></pre></td></tr></table></figure>
<p>在两台机器上都下载、解压好。<br>
在<code>rocketmq/conf</code>目录下，有三种建议配置模式：</p>
<ul>
<li>2m-2s-async(2主2从异步) —— 本文采用这种</li>
<li>2m-2s-sync (2主2从同步)</li>
<li>2m-noslave (2主)</li>
</ul>
<p><img src="/rocketmq-colony-install/2.png" alt><br>
现在需要修改两台机器上<code>2m-2s-async</code>这个目录中的文件。<br>
配置文件修改之前先备份。</p>
<h3 id="3-配置第一台机器163"><a class="markdownIt-Anchor" href="#3-配置第一台机器163"></a> 3. 配置第一台机器163</h3>
<p>192.168.44.163的两个配置文件<br>
<img src="/rocketmq-colony-install/3.png" alt></p>
<ol>
<li>
<p>broker-a.properties</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/rocketmq/conf/2m-2s-async</span><br><span class="line">vim  broker-a.properties</span><br></pre></td></tr></table></figure>
<p>修改的内容（名字自定义，保持一直，否则不能组成集群）</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">ygb-cluster</span></span><br></pre></td></tr></table></figure>
<p>增加内容:</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10910</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">192.168.44.163:9876;192.168.44.164:9876</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/usr/local/tools/rocketmq/store/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/usr/local/tools/rocketmq/store/abort</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>broker-b-s.properties</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim  broker-b-s.properties</span><br></pre></td></tr></table></figure>
<p>修改的内容（名字自定义，保持一直，否则不能组成集群）</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">ygb-cluster</span></span><br></pre></td></tr></table></figure>
<p>增加内容:</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10921</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">192.168.44.163:9876;192.168.44.164:9876</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b-s</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b-s/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b-s/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b-s/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/usr/local/tools/rocketmq/store/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/usr/local/tools/rocketmq/store/abort</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="4-配置第二台机器164"><a class="markdownIt-Anchor" href="#4-配置第二台机器164"></a> 4. 配置第二台机器164</h3>
<p>192.168.44.164的两个配置文件; 修改的内容基本一致，主要是注意一下端口号、路径名。<br>
<img src="/rocketmq-colony-install/4.png" alt></p>
<ol>
<li>
<p>broker-b.properties</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/rocketmq/conf/2m-2s-async</span><br><span class="line">vim  broker-b.properties</span><br></pre></td></tr></table></figure>
<p>修改的内容（名字自定义，保持一直，否则不能组成集群）</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">ygb-cluster</span></span><br></pre></td></tr></table></figure>
<p>增加内容:</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10920</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">192.168.44.163:9876;192.168.44.164:9876</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/usr/local/tools/rocketmq/store/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/usr/local/tools/rocketmq/store/abort</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>broker-a-s.properties</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/rocketmq/conf/2m-2s-async</span><br><span class="line">vim broker-a-s.properties</span><br></pre></td></tr></table></figure>
<p>修改的内容（名字自定义，保持一直，否则不能组成集群）</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">ygb-cluster</span></span><br></pre></td></tr></table></figure>
<p>增加内容:</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10911</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">192.168.44.163:9876;192.168.44.164:9876</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a-s</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a-s/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a-s/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a-s/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/usr/local/tools/rocketmq/store/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/usr/local/tools/rocketmq/store/abort</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="5-创建数据目录"><a class="markdownIt-Anchor" href="#5-创建数据目录"></a> 5. 创建数据目录</h3>
<ol>
<li>
<p>在第一台机器163 执行（只需要执行一次）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/tools/rocketmq/store/broker-a /usr/local/tools/rocketmq/store/broker-a/consumequeue /usr/local/tools/rocketmq/store/broker-a/commitlog /usr/local/tools/rocketmq/store/broker-a/index /usr/local/tools/rocketmq/logs /usr/local/tools/rocketmq/store/broker-b-s /usr/local/tools/rocketmq/store/broker-b-s/consumequeue /usr/local/tools/rocketmq/store/broker-b-s/commitlog /usr/local/tools/rocketmq/store/broker-b-s/index</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在第二台机器164 执行（只需要执行一次）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/tools/rocketmq/store/broker-a-s /usr/local/tools/rocketmq/store/broker-a-s/consumequeue /usr/local/tools/rocketmq/store/broker-a-s/commitlog /usr/local/tools/rocketmq/store/broker-a-s/index /usr/local/tools/rocketmq/logs /usr/local/tools/rocketmq/store/broker-b /usr/local/tools/rocketmq/store/broker-b/consumequeue /usr/local/tools/rocketmq/store/broker-b/commitlog /usr/local/tools/rocketmq/store/broker-b/index</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="6-启动两个nameserver"><a class="markdownIt-Anchor" href="#6-启动两个nameserver"></a> 6. 启动两个NameServer</h3>
<ol>
<li>
<p>启动第一台163的NameServer</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sh /usr/local/tools/rocketmq/bin/mqnamesrv &gt;/usr/local/tools/rocketmq/logs/mqnamesrv.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动第二台164的NameServer</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sh /usr/local/tools/rocketmq/bin/mqnamesrv &gt;/usr/local/tools/rocketmq/logs/mqnamesrv.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="7-启动broker"><a class="markdownIt-Anchor" href="#7-启动broker"></a> 7. 启动Broker</h3>
<ol>
<li>
<p>启动 163 机器上的<code>broker-a-master</code>（在163上执行）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sh /usr/local/tools/rocketmq/bin/mqbroker -c /usr/local/tools/rocketmq/conf/2m-2s-async/broker-a.properties &gt; /usr/local/tools/rocketmq/logs/broker-a.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>在虚拟机中可能由于内存不够导致无法启动，日志文件中出现如下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup: ignoring input</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000005c0000000, 8589934592, 0) failed; error=&#x27;Cannot allocate memory&#x27; (errno=12)</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/tools/rocketmq/bin/runbroker.sh</span><br></pre></td></tr></table></figure>
<p>把8g和4g改成512m和256m</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">JAVA_OPT</span>=<span class="string">&quot;$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn256m&quot;</span></span><br></pre></td></tr></table></figure>
<p>再次启动。</p>
</li>
<li>
<p>启动 164 机器上的<code>broker-a-s</code>（在164上执行）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">nohup</span> <span class="string">sh /usr/local/tools/rocketmq/bin/mqbroker -c /usr/local/tools/rocketmq/conf/2m-2s-async/broker-a-s.properties &gt; /usr/local/tools/rocketmq/logs/broker-a-s.log 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动 164 的<code>broker-b-master</code>（在164上执行）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sh /usr/local/tools/rocketmq/bin/mqbroker -c /usr/local/tools/rocketmq/conf/2m-2s-async/broker-b.properties &gt; /usr/local/tools/rocketmq/logs/broker-b.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动 163 机器上的<code>broker-b-s</code>（在163上执行）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sh /usr/local/tools/rocketmq/bin/mqbroker -c /usr/local/tools/rocketmq/conf/2m-2s-async/broker-b-s.properties &gt; /usr/local/tools/rocketmq/logs/broker-b-s.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看两台机器的端口启动情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -an|grep 端口号</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>rocketmq</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式消息中间件设计篇</title>
    <url>/distributed-message-middleware1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="17e4468eb45a9ec4486732b8e7cd0ea2bff1f72c06aa5499df9bb3880aa96a8a">91b4a72afde41933824d9b47e790ab276fb896cf66d88c172d81884618061a3a06494a53a06c86388946a43ef7a98e9bfe2600edaa3821977485df16c9c2abaf44c1e9e1c91c802f63d1efd6bcbe48fd85b275ea7c8a186755966a35994dd505693db2037109f4406e9a863cf5d9846d0cdc5e5a77e42463028a330428cbb4adce1aa20abfc2795484ab7f0a6dbfffaeea893de6792ae7c4831ada054ba1f7752db125d66e899319e38e632f66d7c970</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>rocketmq</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>过滤器Filter与拦截器区别</title>
    <url>/filter-interceptor/</url>
    <content><![CDATA[<h2 id="1-过滤器filter"><a class="markdownIt-Anchor" href="#1-过滤器filter"></a> 1. 过滤器（Filter）</h2>
<p>Servlet中的过滤器Filter实现了<code>javax.servlet.Filter</code>接口的服务器端程序，主要用途是<strong>设置字符集（CharacterEncodingFilter）</strong>、<strong>控制权限</strong>、<strong>控制转向</strong>、<strong>用户是否已经登陆</strong>、<strong>有没有权限访问该页面</strong>等。其工作原理是，只要你在<code>web.xml</code>文件配置好要拦截的客户端请求，它都会帮你拦截到请求，此时，其实你可以对请求或响应(Request、response)统一设置编码；</p>
<p>它web应用启动而启动，只初始化一次，以后就可以拦截相关请求，只有当你的web应用停止或重新部署的时候才销毁。</p>
<ol>
<li>Filter可以认为是Servlet的一种&quot;加强版&quot;，它主要用于对<strong>用户请求进行预处理</strong>，也可以对HttpServletResponse进行后处理，是个典型的处理链。</li>
<li>Filter可以对用户请求生成响应，和Servlet相同</li>
<li>处理流程：用户请求-&gt;Filter预处理-&gt;Servlet处理请求生成响应-&gt;Filter对响应进行后处理</li>
</ol>
<h3 id="11-filter用处"><a class="markdownIt-Anchor" href="#11-filter用处"></a> 1.1 Filter用处</h3>
<ul>
<li>在<code>HttpServletRequest</code>到达<code>Servlet</code>之前，拦截客户的<code>HttpServletRequest</code>。</li>
<li>根据需要检查<code>HttpServletRequest</code>，也可以修改<code>HttpServletRequest</code>头和数据。</li>
<li>在<code>HttpServletResponse</code>到达客户端之前，拦截<code>HttpServletResponse</code>。</li>
<li>根据需要检查<code>HttpServletResponse</code>，也可以修改<code>HttpServletResponse</code>头和数据。<br>
Filter有如下几个种类。</li>
</ul>
<h3 id="12-filter种类"><a class="markdownIt-Anchor" href="#12-filter种类"></a> 1.2 Filter种类</h3>
<ul>
<li>用户授权的Filter：Filter负责检查用户请求，根据请求过滤用户非法请求。</li>
<li>日志Filter：详细记录某些特殊的用户请求。</li>
<li>负责解码的Filter:包括对非标准编码的请求解码。</li>
<li>能改变XML内容的XSLT Filter等。</li>
<li>Filter可以负责拦截多个请求或响应；一个请求或响应也可以被多个Filter拦截。</li>
</ul>
<h3 id="13-创建filter步骤"><a class="markdownIt-Anchor" href="#13-创建filter步骤"></a> 1.3 创建Filter步骤</h3>
<ol>
<li>创建<code>Filter</code>处理类，并实现<code>javax.servlet.Filter</code>接口</li>
<li><code>web.xml</code>文件中配置Filter（或者使用@WebFilter注解）</li>
</ol>
<p><code>javax.servlet.Filter</code>接口中中定义的三个方法：</p>
<ul>
<li>void init(FilterConfig config):用于完成Filter的初始化。</li>
<li>void destory():用于Filter销毁前，完成某些资源的回收。</li>
<li>void doFilter(ServletRequest request,ServletResponse response,FilterChain chain):实现过滤功能，该方法就是对每个请求及响应增加的额外处理。该方法可以实现对用户请求进行预处理(ServletRequest request)，也可实现对服务器响应进行后处理(ServletResponse response)—它们的分界线为是否调用了chain.doFilter(),执行该方法之前，即对用户请求进行预处理；执行该方法之后，即对服务器响应进行后处理。</li>
</ul>
<h2 id="2-拦截器interceptor"><a class="markdownIt-Anchor" href="#2-拦截器interceptor"></a> 2. 拦截器（Interceptor）</h2>
<p>拦截器是在面向切面变成中应用的，就是service或一个方法前/后调用一个方法。是基础java的放射机制。拦截是不是在<code>web.xml</code></p>
<p>在AOP（Aspect-Oriented Programming)中用于某个方法或字段被访问之前，进行拦截，然后在之前或之后加入某些操作，甚至在抛出异常的时候做业务逻辑的操作。拦击器是AOP的一种实现策略。</p>
<h3 id="21-拦截器的实现方式"><a class="markdownIt-Anchor" href="#21-拦截器的实现方式"></a> 2.1 拦截器的实现方式</h3>
<p>SpringMVC中的Interceptor拦截请求是通过<code>HandlerInterceptor</code>来实现的，在SpringMVC中定义Interceptor主要有两种方式：</p>
<ol>
<li>实现Spring的<code>HandlerInterceptor</code>接口或者继承了实现<code>HandlerInterceptor</code>接口的类（比如 HandlerInterceptorAdapter ）</li>
<li>实现Spring的<code>WebRequestInterceptor</code>接口，或者继承了实现<code>WebRequestInterceptor</code>接口的类</li>
</ol>
<p><code>Interceptor</code>中的方法：</p>
<ul>
<li>
<p>preHandle (HttpServletRequest request, HttpServletResponse response, Object handle) 方法，顾名思义，该方法将在请求处理之前进行调用。SpringMVC 中的Interceptor 是链式的调用的，在一个应用中或者说是在一个请求中可以同时存在多个Interceptor 。每个Interceptor 的调用会依据它的声明顺序依次执行，而且最先执行的都是Interceptor 中的preHandle 方法，所以可以在这个方法中进行一些前置初始化操作或者是对当前请求的一个预处理，也可以在这个方法中进行一些判断来决定请求是否要继续进行下去。该方法的返回值是布尔值Boolean类型的，当它返回为false 时，表示请求结束，后续的Interceptor 和Controller 都不会再执行；当返回值为true 时就会继续调用下一个Interceptor 的preHandle 方法，如果已经是最后一个Interceptor 的时候就会是调用当前请求的Controller 方法</p>
</li>
<li>
<p>postHandle (HttpServletRequest request, HttpServletResponse response, Object handle, ModelAndView modelAndView) 方法，由preHandle 方法的解释我们知道这个方法包括后面要说到的afterCompletion 方法都只能是在当前所属的Interceptor 的preHandle 方法的返回值为true 时才能被调用。postHandle 方法，顾名思义就是在当前请求进行处理之后，也就是Controller 方法调用之后执行，但是它会在DispatcherServlet 进行视图返回渲染之前被调用，所以我们可以在这个方法中对Controller 处理之后的ModelAndView 对象进行操作。postHandle 方法被调用的方向跟preHandle 是相反的，也就是说先声明的Interceptor 的postHandle 方法反而会后执行，这和Struts2 里面的Interceptor 的执行过程有点类型。Struts2 里面的Interceptor 的执行过程也是链式的，只是在Struts2 里面需要手动调用ActionInvocation 的invoke 方法来触发对下一个Interceptor 或者是Action 的调用，然后每一个Interceptor 中在invoke 方法调用之前的内容都是按照声明顺序执行的，而invoke 方法之后的内容就是反向的。</p>
</li>
<li>
<p>afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handle, Exception ex) 方法，该方法也是需要当前对应的Interceptor 的preHandle 方法的返回值为true 时才会执行。顾名思义，该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图之后执行。这个方法的主要作用是用于进行资源清理工作的</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecuteTimeInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(ExecuteTimeInterceptor.class);</span><br><span class="line">    <span class="comment">//before the actual handler will be executed</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">        HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        request.setAttribute(<span class="string">&quot;startTime&quot;</span>, startTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//after the handler is executed</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = (Long)request.getAttribute(<span class="string">&quot;startTime&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//统计耗时</span></span><br><span class="line">        <span class="keyword">long</span> executeTime = endTime - startTime;</span><br><span class="line">        <span class="comment">//modified the exisitng modelAndView</span></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;executeTime&quot;</span>,executeTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//log it</span></span><br><span class="line">        <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">           logger.debug(<span class="string">&quot;[&quot;</span> + handler + <span class="string">&quot;] executeTime : &quot;</span> + executeTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>非Springboot项目<br>
使用mvc:interceptors标签来声明需要加入到SpringMVC拦截器链中的拦截器</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.company.app.web.interceptor.AllInterceptor&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/parent/**&quot;</span>/&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.company.authorization.interceptor.SecurityInterceptor&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/parent/**&quot;</span>/&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.company.authorization.interceptor.SecuritySystemInterceptor&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以利用mvc:interceptors标签声明一系列的拦截器，然后它们就可以形成一个拦截器链，拦截器的执行顺序是按声明的先后顺序执行的，先声明的拦截器中的preHandle方法会先执行，然而它的postHandle方法和afterCompletion方法却会后执行。</p>
<p>在mvc:interceptors标签下声明interceptor主要有两种方式：</p>
<ul>
<li>直接定义一个Interceptor实现类的bean对象。使用这种方式声明的Interceptor拦截器将会对所有的请求进行拦截。</li>
<li>使用mvc:interceptor标签进行声明。使用这种方式进行声明的Interceptor可以通过mvc:mapping子标签来定义需要进行拦截的请求路径。<br>
经过上述两步之后，定义的拦截器就会发生作用对特定的请求进行拦截了</li>
</ul>
</li>
<li>
<p>Springboot项目<br>
配置拦截器</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@Configurationpublic</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 多个拦截器组成一个拦截器链</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> ExecuteTimeInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//API限流拦截</span></span><br><span class="line">        registry.addInterceptor(accessLimitAjaxInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/static/**&quot;</span>,<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        registry.addInterceptor(accessInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/static/**&quot;</span>,<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="22-拦截器interceptor使用"><a class="markdownIt-Anchor" href="#22-拦截器interceptor使用"></a> 2.2 拦截器（interceptor）使用</h3>
<ol>
<li>请求到达DispatcherServlet</li>
<li>DispatcherServlet发送至Interceptor，执行preHandler</li>
<li>请求到达Controller</li>
<li>请求结束后，执行postHandler</li>
</ol>
<h2 id="3-过滤器filter与-拦截器interceptor的区别"><a class="markdownIt-Anchor" href="#3-过滤器filter与-拦截器interceptor的区别"></a> 3. 过滤器（Filter）与 拦截器（Interceptor）的区别</h2>
<p>Spring的Interceptor(拦截器)与Servlet的Filter有相似之处，比如二者都是AOP编程思想的体现，都能实现权限检查、日志记录等。不同的是：</p>
<table>
<thead>
<tr>
<th>Filter</th>
<th>Interceptor</th>
<th>Summary</th>
</tr>
</thead>
<tbody>
<tr>
<td>Filter 接口定义在 javax.servlet 包中</td>
<td>接口 HandlerInterceptor 定义在org.springframework.web.servlet 包中</td>
<td></td>
</tr>
<tr>
<td>Filter 定义在 web.xml 中</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Filter在只在 Servlet 前后起作用。Filters 通常将 请求和响应（request/response） 当做黑盒子，Filter 通常不考虑servlet 的实现。</td>
<td>拦截器能够深入到方法前后、异常抛出前后等，因此拦截器的使用具有更大的弹性。允许用户介入（hook into）请求的生命周期，在请求过程中获取信息，Interceptor 通常和请求更加耦合。</td>
<td>在Spring架构的程序中，优先使用拦截器，几乎所有的Filter能够做的事情，Interceptor都可以实现</td>
</tr>
<tr>
<td>Filter 是 Servlet 规范规定的。</td>
<td>而拦截器既可以用于Web程序，也可以用于Application、Swing程序中。</td>
<td>使用范围不同</td>
</tr>
<tr>
<td>Filter 是在 Servlet 规范中定义的，是 Servlet 容器支持的。</td>
<td>而拦截器是在 Spring容器内的，是Spring框架支持的。</td>
<td>规范不同</td>
</tr>
<tr>
<td>Filter 不能够使用 Spring 容器资源</td>
<td>拦截器是一个Spring的组件，归Spring管理，配置在Spring文件中，因此能使用Spring里的任何资源、对象，例如 Service对象、数据源、事务管理等，通过IoC注入到拦截器即可</td>
<td>Spring使用interceptor更容易</td>
</tr>
<tr>
<td>Filter 是被 Server(like Tomcat) 调用</td>
<td>Interceptor 是被 Spring 调用</td>
<td>Filter优先于interceptor执行</td>
</tr>
</tbody>
</table>
<h3 id="31-执行顺序"><a class="markdownIt-Anchor" href="#31-执行顺序"></a> 3.1 执行顺序</h3>
<p><strong>用户请求 -&gt; 过滤前 -&gt; 拦截前 -&gt; Action处理 -&gt; 拦截后 -&gt; 过滤后 -&gt; 响应</strong><br>
<img src="/filter-interceptor/1.png" alt="filter与intercepor的执行顺序"><br>
<img src="/filter-interceptor/2.png" alt="filter与intercepor的执行顺序"></p>
<h2 id="4-过滤器filter与-拦截器interceptor常见用途"><a class="markdownIt-Anchor" href="#4-过滤器filter与-拦截器interceptor常见用途"></a> 4. 过滤器（Filter）与 拦截器（Interceptor）常见用途</h2>
<ul>
<li>Authentication Filters</li>
<li>Logging and Auditing Filtersx</li>
<li>Image conversion Filters</li>
<li>Data compression Filters</li>
<li>Encryption Filters</li>
<li>Tokenizing Filters</li>
<li>Filters that trigger resource access events</li>
<li>XSL/T filters</li>
<li>Mime-type chain Filter</li>
</ul>
<p>Request Filters 可以:</p>
<ul>
<li>执行安全检查 perform security checks</li>
<li>格式化请求头和主体 reformat request headers or bodies</li>
<li>审查或者记录日志 audit or log requests</li>
<li>根据请求内容授权或者限制用户访问 Authentication-Blocking requests based on user identity.</li>
<li>根据请求频率限制用户访问</li>
</ul>
<p>Response Filters 可以:</p>
<ul>
<li>压缩响应内容,比如让下载的内容更小 Compress the response stream</li>
<li>追加或者修改响应 append or alter the response stream</li>
<li>创建或者整体修改响应 create a different response altogether</li>
<li>根据地方不同修改响应内容 Localization-Targeting the request and response to a particular locale.</li>
</ul>
<h2 id="5-总结"><a class="markdownIt-Anchor" href="#5-总结"></a> 5. 总结</h2>
<ol>
<li>
<p>过滤器：所谓过滤器顾名思义是用来过滤的，在java web中，你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，然后再传入servlet或者struts的action进行业务逻辑，比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,或者在传入servlet或者struts的action前统一设置字符集，或者去除掉一些非法字符（聊天室经常用到的，一些骂人的话）。filter 流程是线性的， url传来之后，检查之后，可保持原来的流程继续向下执行，被下一个filter, servlet接收等.</p>
</li>
<li>
<p>java的拦截器 主要是用在插件上，扩展件上比如 hibernate spring struts2等 有点类似面向切片的技术，在用之前先要在配置文件即xml文件里声明一段的那个东西。</p>
</li>
<li>
<p>拦截器（Interceptor）是基于Java的反射机制，而过滤器（Filter）是基于函数回调。从灵活性上说拦截器功能更强大些，Filter能做的事情，都能做，而且可以在请求前，请求后执行，比较灵活。Filter主要是针对URL地址做一个编码的事情、过滤掉没用的参数、安全校验（比较泛的，比如登录不登录之类），太细的话，还是建议用interceptor。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>filter</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql重置密码</title>
    <url>/mysql-forget-pwd/</url>
    <content><![CDATA[<p>Mysql 安装的时候忘记保存默认密码，需要重置密码；<br>
<img src="/mysql-forget-pwd/1.png" alt="忘记密码"></p>
<h3 id="1-跳过mysql密码认证"><a class="markdownIt-Anchor" href="#1-跳过mysql密码认证"></a> 1. 跳过Mysql密码认证</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>
<p>在文档内<code>[mysqld]</code>第一行添加<code>skip-grant-tables</code>用来跳过密码验证的过程<br>
<img src="/mysql-forget-pwd/2.png" alt="跳过密码认证"></p>
<h3 id="2-重启mysql"><a class="markdownIt-Anchor" href="#2-重启mysql"></a> 2. 重启Mysql</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld restart</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">或者</span></span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>
<p>然后再输入<code>mysql -uroot -p</code> 一直按<code>enter</code> 就可以顺利进入数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line">use mysql;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/mysql-forget-pwd/3.png" alt="跳过密码认证"></p>
<h3 id="3-创建用户"><a class="markdownIt-Anchor" href="#3-创建用户"></a> 3. 创建用户</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">identity</span> <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- lolcahost表示本地，mysql登陆的时候不用指定IP登陆</span></span><br><span class="line"><span class="comment">-- 如果需要外网访问，则将localhost改成 % </span></span><br></pre></td></tr></table></figure>
<p>此步骤可能会报以下错误，没报错的跳过第4步</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement</span></span><br><span class="line"><span class="meta">#</span><span class="bash">输入</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;刷新配置</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次创建用户</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identity by <span class="string">&#x27;123456&#x27;</span>;</span></span><br></pre></td></tr></table></figure>
<p><img src="/mysql-forget-pwd/4.png" alt="创建用户"><br>
再次报错，这步没报错的也是直接跳到赋予权限那一步，报错的以下操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> drop user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span></span><br></pre></td></tr></table></figure>
<h3 id="4-赋予root权限"><a class="markdownIt-Anchor" href="#4-赋予root权限"></a> 4. 赋予root权限</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> WITH GRANT OPTION;</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">赋予所有库所有表操作权限</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">exit</span>;</span></span><br></pre></td></tr></table></figure>
<p><img src="/mysql-forget-pwd/5.png" alt="赋予权限"><br>
再次查询<code>user</code>表，会发现用户表新建了一个root用户</p>
<h3 id="5-修改配置文件"><a class="markdownIt-Anchor" href="#5-修改配置文件"></a> 5. 修改配置文件</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#删除配置</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">skip-grant-table=1</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#保存并重启mysql</span></span></span><br><span class="line">service myqld restart</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Tidb查询优化</title>
    <url>/tidb-optimization/</url>
    <content><![CDATA[<h3 id="1-tidb查询优化"><a class="markdownIt-Anchor" href="#1-tidb查询优化"></a> 1. tidb查询优化</h3>
<p>tidb数据库查询3亿条数据需要花费20s以上，然后按照下面的优化方式执行过后，查询只需要1.5s；</p>
<ol>
<li>
<p>查看表的健康度</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">show</span> stats_healthy <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;xxxx&#x27;</span>;</span><br><span class="line">   ```                        </span><br><span class="line"><span class="number">2.</span> 查看自动统计状态            </span><br><span class="line">    ```<span class="keyword">sql</span></span><br><span class="line">    <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%auto_analyze%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>tidb_auto_analyze_start_time和tidb_auto_analyze_end_time控制了自动收集统计信息的窗口；</li>
<li>tidb_auto_analyze_ratio 控制了可以进行自动收集统计信息的阈值，默认为0.5，如果后续表的数据量增加，可以酌情调整这个参数到0.3或者0.2，意味着这张表的数据修改超过总表行数的30%或者20%就会自动收集，会更敏感一些</li>
</ul>
<p>官方文档：<a href="https://docs.pingcap.com/zh/tidb/dev/statistics#%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0">https://docs.pingcap.com/zh/tidb/dev/statistics#自动更新</a></p>
</li>
<li>
<p>调整自动收集统计信息的阈值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> tidb_auto_analyze_ratio <span class="operator">=</span> <span class="number">0.2</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看健康度低于阈值的表信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> stats_healthy <span class="keyword">where</span> healthy<span class="operator">&lt;</span><span class="number">80</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>低于80的重新收集统计信息</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">analyze <span class="keyword">table</span> xxx</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>加快索引添加速度</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;tidb_ddl_reorg_%&#x27;</span>;</span><br><span class="line">   </span><br><span class="line"># 记录原来的数值， 添加完索引后记得改回去</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> tidb_ddl_reorg_batch_size <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> tidb_ddl_reorg_worker_cnt <span class="operator">=</span> <span class="number">16</span>;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>如果某张表因为业务需求导入了大量的数据，而这些数据在达到tidb_auto_analyze_start_time之前就需要使用SQL进行查询，此时建议对导入的表进行手动的收集；<br>
我们也可以分析业务的行为，如果某张表有定时任务会自动插入大量数据，自动任务完成后需要产生报表的需求，也建议在自动任务结束后手动对相关的表进行手动收集；</p>
]]></content>
      <categories>
        <category>tidb</category>
      </categories>
      <tags>
        <tag>tidb</tag>
      </tags>
  </entry>
  <entry>
    <title>破解LIMIT和OFFSET分页性能瓶颈</title>
    <url>/limit-offset/</url>
    <content><![CDATA[<h3 id="1-分页方法分类"><a class="markdownIt-Anchor" href="#1-分页方法分类"></a> 1. 分页方法分类</h3>
<ol>
<li>LIMIT X <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- LIMIT X 表示: 读取 X 条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">20</span></span><br></pre></td></tr></table></figure>
</li>
<li>LIMIT Y OFFSET X <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- LIMIT Y OFFSET X 表示: 跳过 X 条数据，读取 Y 条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">20</span> <span class="keyword">OFFSET</span> <span class="number">10</span></span><br><span class="line"><span class="comment">-- 从第10+1 行开始读取20条数据</span></span><br></pre></td></tr></table></figure>
</li>
<li>LIMIT X, Y <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 跳过 X 条数据，读取 Y 条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">20</span> , <span class="number">10</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>对于简单的小型应用程序和数据量不是很大的场景，这种方式还是没有问题的，但是一旦数据量过大，这种分页方式存在瓶颈。</p>
<h3 id="2-limit和offset-的问题"><a class="markdownIt-Anchor" href="#2-limit和offset-的问题"></a> 2. LIMIT和OFFSET 的问题</h3>
<p>OFFSET 和 LIMIT 对于数据量少的项目来说是没有问题的，但是，当数据库里的数据量超过服务器内存能够存储的能力，并且需要对所有数据进行分页，问题就会出现，为了实现分页，每次收到分页请求时，数据库都需要进行低效的全表遍历</p>
<blockquote>
<p>全表遍历就是一个全表扫描的过程，就是根据双向链表把磁盘上的数据页加载到磁盘的缓存页里去，然后在缓存页内部查找那条数据，这个过程是非常满的，所以说当数据量大的时候，全表遍历的性能非常低，时间特别长，应该尽量避免全表遍历</p>
</blockquote>
<p>为了获取一页的数据：10万行中的第50000行到第50020行需要先获取 5 万行，这么做非常低效！</p>
<h3 id="3-初探limit查询效率"><a class="markdownIt-Anchor" href="#3-初探limit查询效率"></a> 3. 初探LIMIT查询效率</h3>
<h4 id="31-建表"><a class="markdownIt-Anchor" href="#31-建表"></a> 3.1 建表</h4>
<p>测试数据库采用的是（存储引擎采用InnoDB）<br>
<img src="/limit-offset/1.png" alt><br>
表结构如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<p><img src="/limit-offset/2.png" alt></p>
<h4 id="32-插入数据"><a class="markdownIt-Anchor" href="#32-插入数据"></a> 3.2 插入数据</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建存储过程， 参数param1 为int 类型</span></span><br><span class="line"><span class="keyword">CREATE</span> DEFINER<span class="operator">=</span>`root`@`localhost` <span class="keyword">PROCEDURE</span> `insert_limit_test`(param1 <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> <span class="comment">-- for循环遍历 插入 350万条数据</span></span><br><span class="line">    WHILE param1 <span class="operator">&lt;</span> <span class="number">3500000</span> DO</span><br><span class="line">          <span class="comment">-- 插入表数据</span></span><br><span class="line">            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` ( `name`, `age` ) <span class="keyword">VALUES</span> (CONCAT(<span class="string">&#x27;name_&#x27;</span>,param1)  , (param1 <span class="operator">%</span> <span class="number">4</span>)<span class="operator">+</span><span class="number">10</span> );</span><br><span class="line">          <span class="keyword">SET</span> param1 <span class="operator">=</span> param1 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">CALL</span> insert_limit_test(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3499999</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.11</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="33-开始测试"><a class="markdownIt-Anchor" href="#33-开始测试"></a> 3.3 开始测试</h4>
<p>首先偏移量设置为0，取20条数据(中间输出省略)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">0</span>,<span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> name_1  <span class="operator">|</span>   <span class="number">11</span> <span class="operator">|</span></span><br><span class="line">#...中间输出省略</span><br><span class="line"><span class="operator">|</span> <span class="number">18</span> <span class="operator">|</span> name_18 <span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">19</span> <span class="operator">|</span> name_19 <span class="operator">|</span>   <span class="number">13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span> name_20 <span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">20</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>可以看到查询时间基本忽略不计，于是我们要一步一步的加大这个偏移量然后进行测试，先将偏移量改为10000(中间输出省略)：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">10000</span>,<span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10001</span> <span class="operator">|</span> name_10001 <span class="operator">|</span>   <span class="number">11</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10002</span> <span class="operator">|</span> name_10002 <span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"> #...中间输出省略</span><br><span class="line"><span class="operator">|</span> <span class="number">10018</span> <span class="operator">|</span> name_10018 <span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10019</span> <span class="operator">|</span> name_10019 <span class="operator">|</span>   <span class="number">13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10020</span> <span class="operator">|</span> name_10020 <span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+------+</span></span><br><span class="line"><span class="number">20</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>可以看到查询时间还是非常短的，几乎可以忽略不计，于是我们将偏移量直接上到340W(中间输出省略)：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">3400000</span>,<span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> name         <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3400001</span> <span class="operator">|</span> name_3400001 <span class="operator">|</span>   <span class="number">11</span> <span class="operator">|</span></span><br><span class="line">#...中间输出省略</span><br><span class="line"><span class="operator">|</span> <span class="number">3400018</span> <span class="operator">|</span> name_3400018 <span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3400019</span> <span class="operator">|</span> name_3400019 <span class="operator">|</span>   <span class="number">13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3400020</span> <span class="operator">|</span> name_3400020 <span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+------+</span></span><br><span class="line"><span class="number">20</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.48</span> sec)</span><br></pre></td></tr></table></figure>
<p>这个时候就可以看到非常明显的变化了，查询时间增到了0.48s。</p>
<h4 id="34-分析原因"><a class="markdownIt-Anchor" href="#34-分析原因"></a> 3.4 分析原因</h4>
<p>根据下面的结果可以看到三条查询语句都进行了全表扫描：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">0</span>,<span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>    <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">3493299</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">10000</span>, <span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>    <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">3493299</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">3400000</span>, <span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>    <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">3493299</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>此时就可以知道的是，在偏移量非常大的时候，就像案例中的LIMIT 3400000,20这样的查询。<br>
此时MySQL就需要查询3400020行数据，然后在返回最后20条数据。<br>
前边查询的340W数据都将被抛弃，这样的执行结果可不是我们想要的。<br>
接下来就是优化大偏移量的性能问题</p>
<h3 id="4-优化"><a class="markdownIt-Anchor" href="#4-优化"></a> 4. 优化</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> id<span class="operator">&gt;</span><span class="number">10</span> limit <span class="number">20</span></span><br></pre></td></tr></table></figure>
<p>这是一种<strong>基于指针</strong>的分页。你要在本地保存上一次接收到的主键 (通常是一个 ID) 和 LIMIT，而不是 OFFSET 和 LIMIT，那么每一次的查询可能都与此类似。<br>
为什么？因为通过显式告知数据库最新行，数据库就确切地知道从哪里开始搜索（基于有效的索引），而不需要考虑目标范围之外的记录。<br>
我们再来一次测试(中间输出省略)：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>  <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">3400000</span> limit <span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> name         <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3400001</span> <span class="operator">|</span> name_3400001 <span class="operator">|</span>   <span class="number">11</span> <span class="operator">|</span></span><br><span class="line">#....中间输出省略</span><br><span class="line"><span class="operator">|</span> <span class="number">3400019</span> <span class="operator">|</span> name_3400019 <span class="operator">|</span>   <span class="number">13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3400020</span> <span class="operator">|</span> name_3400020 <span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+------+</span></span><br><span class="line"><span class="number">20</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> id<span class="operator">&gt;</span><span class="number">3400000</span> LIMIT <span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+--------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>   <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+--------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">198326</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+--------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>返回同样的结果，第一个查询使用了<code>0.48</code> sec，而第二个仅用了<code>0.00</code> sec。</p>
<p><strong>注意</strong>：如果我们的表没有主键，比如是具有多对多关系的表，那么就使用传统的 OFFSET/LIMIT 方式，只是这样做存在潜在的慢查询问题。所以建议在需要分页的表中使用自动递增的主键，即使只是为了分页。</p>
<h4 id="继续优化"><a class="markdownIt-Anchor" href="#继续优化"></a> 继续优化</h4>
<p>类似于查询 <code>SELECT * FROM table_name WHERE id &gt; 3400000 LIMIT 20;</code> 这样的效率非常快,因为主键上是有索引的,但是这样有个缺点,就是ID必须是连续的,并且查询不能有WHERE语句,因为WHERE语句会造成过滤数据。那使用场景就非常的局限了，于是我们可以这样</p>
<h4 id="使用覆盖索引优化"><a class="markdownIt-Anchor" href="#使用覆盖索引优化"></a> 使用覆盖索引优化</h4>
<p>mysql的查询完全命中索引的时候，称为覆盖索引，是非常快的，因为查询只需要在索引上进行查找，之后就可以直接返回，而不用再回数据表那数据，因此我们可以先查处索引的ID，然后根据ID取数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- user 为表名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> <span class="keyword">user</span> LIMIT <span class="number">3400000</span>,<span class="number">20</span>) a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">user</span> b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.id;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> <span class="keyword">user</span> LIMIT <span class="number">3400000</span>,<span class="number">20</span>) a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">user</span> b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+------+---------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>      <span class="operator">|</span> partitions <span class="operator">|</span> type   <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>    <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+------+---------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="operator">&lt;</span>derived2<span class="operator">&gt;</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">3400020</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> b          <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> eq_ref <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> a.id <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> DERIVED     <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">3493299</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+------+---------+----------+-------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>或者是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> <span class="keyword">user</span> LIMIT <span class="number">3400000</span>,<span class="number">20</span>) b <span class="keyword">USING</span> (id);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> <span class="keyword">user</span> LIMIT <span class="number">3400000</span>,<span class="number">20</span>) b <span class="keyword">USING</span> (id);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+------+---------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>      <span class="operator">|</span> partitions <span class="operator">|</span> type   <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>    <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+------+---------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="operator">&lt;</span>derived2<span class="operator">&gt;</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">3400020</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> a          <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> eq_ref <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> b.id <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> DERIVED     <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">3493299</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+------+---------+----------+-------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<h3 id="5-总结"><a class="markdownIt-Anchor" href="#5-总结"></a> 5. 总结</h3>
<ol>
<li>数据量大的时候不能使用OFFSET/LIMIT来进行分页，因为OFFSET越大，查询时间越久。</li>
<li>当然不能说所有的分页都不可以，如果你的数据就那么几千、几万条，那就很无所谓，随便使用。</li>
<li>如果我们的表没有主键，比如是具有多对多关系的表，那么就使用传统的 OFFSET/LIMIT 方式。</li>
<li>这种方法适用于要求ID为数值类型，并且查出的数据ID连续的场景且不能有其他字段的排序。</li>
</ol>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>搞定 CompletableFuture</title>
    <url>/completableFuture/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2a5a0935193b2d3490d45c81ad9f5572e988d65d4ecf2b3f764ef2239c0eff29">91b4a72afde41933824d9b47e790ab27dd6bf54facb3caa587357a4247da69dda8218436756d71a48444bb81ff54f3f9acdeb100e60d8f708f8887c1b68579b40eae4d425973df9f7c4164f35b0ba9afddfc65e33cc39a29ec976876dbf6adee</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>select ... for update表锁还是行锁</title>
    <url>/select-for-update/</url>
    <content><![CDATA[<h2 id="1-概要"><a class="markdownIt-Anchor" href="#1-概要"></a> 1. 概要</h2>
<p>Select 查询语句是不会枷锁的，但是Select … for update 除了有查询语句的作用，还是加锁，而且是悲观锁。</p>
<ul>
<li>使用索引： 行锁</li>
<li>未使用索引：表锁</li>
</ul>
<h2 id="2-建表"><a class="markdownIt-Anchor" href="#2-建表"></a> 2. 建表</h2>
<p><img src="/select-for-update/0.png" alt></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--建表语句</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user (</span><br><span class="line">    id <span class="type">INT</span> ( <span class="number">11</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span> ( <span class="number">255</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span> ( <span class="number">11</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    addr <span class="type">VARCHAR</span> ( <span class="number">255</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY ( id ), <span class="comment">-- 主键索引</span></span><br><span class="line">    KEY idx_age ( age ) <span class="keyword">USING</span> BTREE    <span class="comment">-- 唯一索引</span></span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user (name, age, addr) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user (name, age, addr) <span class="keyword">VALUES</span> (<span class="string">&#x27;李四&#x27;</span>, <span class="number">31</span>, <span class="string">&#x27;广东&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user (name, age, addr) <span class="keyword">VALUES</span> (<span class="string">&#x27;王五&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;南昌&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user (name, age, addr) <span class="keyword">VALUES</span> (<span class="string">&#x27;赵六&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;广东&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>需要关闭自动提交，通过<code>set @@autocommit = 0;</code>设置为手动提交，0代表手动提交，1代表自动提交<br>
<img src="/select-for-update/1.png" alt="关闭自动提交"></p>
<h2 id="3-验证"><a class="markdownIt-Anchor" href="#3-验证"></a> 3. 验证</h2>
<h3 id="31-场景一"><a class="markdownIt-Anchor" href="#31-场景一"></a> 3.1 场景一</h3>
<p>使用<strong>主键id为1</strong>条件去查询，然后开启另一个事务对<strong>主键id为1</strong>对数据进行更新；</p>
<p>第一个事务使用select … for update查询，没有提交事务；<br>
<img src="/select-for-update/2.png" alt><br>
第二个事务，去更新主键id为1的数据，被阻塞了，长时间拿不到锁导致报错<br>
<img src="/select-for-update/3.png" alt><br>
<u>结论：使用主键字段进行select … for update操作会锁住当前记录。</u></p>
<h3 id="32-场景二"><a class="markdownIt-Anchor" href="#32-场景二"></a> 3.2 场景二</h3>
<p>使用<strong>主键id=1</strong>为条件查询，开启另一个事务对<strong>主键id=2</strong>的数据进行更新</p>
<p>第一个事务使用select … for update查询，没有提交事务；<br>
<img src="/select-for-update/2.png" alt><br>
第二个事务对另一条id为2的数据更新，可以看到更新成功。<br>
<img src="/select-for-update/4.png" alt><br>
<u>结论：使用主键字段进行select … for update操作会锁住当前记录，其他行数据可以进行正常的更新操作。</u></p>
<h3 id="33-场景三"><a class="markdownIt-Anchor" href="#33-场景三"></a> 3.3 场景三</h3>
<p>使用 <strong>唯一索引age12</strong> 查询，开启另一个事务对 <strong>唯一索引age=12</strong> 的数据进行更新</p>
<p>第一个事务使用select … for update查询，没有提交事务；<br>
<img src="/select-for-update/5.png" alt><br>
第二个事务对age=12的数据更新，被阻塞了。<br>
<img src="/select-for-update/6.png" alt><br>
<u>结论：使用唯一索引字段进行select … for update操作会锁住当前记录，其他数据可以进行正常的更新操作。</u></p>
<h3 id="34-场景四"><a class="markdownIt-Anchor" href="#34-场景四"></a> 3.4 场景四</h3>
<p><strong>使用普通字段 addr 进行操作</strong></p>
<p>第一个事务使用select … for update查询，没有提交事务；<br>
<img src="/select-for-update/7.png" alt><br>
第二个事务<strong>进行任何数据更新操作</strong>，被阻塞了。<br>
<img src="/select-for-update/8.png" alt><br>
<u>结论：使用非索引字段进行select … for update操作都会锁表，没有commit之前任何更新操作无法获取锁。</u></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>13种锁的实现方式</title>
    <url>/lock-granularity/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2a5a0935193b2d3490d45c81ad9f5572e988d65d4ecf2b3f764ef2239c0eff29">91b4a72afde41933824d9b47e790ab27dd6bf54facb3caa587357a4247da69dda8218436756d71a48444bb81ff54f3f9acdeb100e60d8f708f8887c1b68579b40eae4d425973df9f7c4164f35b0ba9afddfc65e33cc39a29ec976876dbf6adee</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Linux安装JDK以及配置</title>
    <url>/jdk-install/</url>
    <content><![CDATA[<h3 id="1-安装包安装"><a class="markdownIt-Anchor" href="#1-安装包安装"></a> 1. 安装包安装</h3>
<ol>
<li>
<p>下载jdk安装包（<a href="https://www.oracle.com/cn/java/technologies/javase/downloads/#java8%EF%BC%89">https://www.oracle.com/cn/java/technologies/javase/downloads/#java8）</a><br>
<img src="/jdk-install/1.png" alt></p>
</li>
<li>
<p>上传并解压</p>
</li>
</ol>
<ul>
<li>在/usr/local/目录下新建文件夹：java</li>
<li>上传介质到/usr/local/java/</li>
<li>解压：tar -zxvf jdk-8u311-linux-x64.tar.gz</li>
</ul>
<ol start="3">
<li>配置环境变量 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑配置文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在末尾追加</span></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_311</span><br><span class="line">export JRE_HOME=/usr/local/java/jdk1.8.0_311/jre</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使配置文件生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li>测试 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试版本号</span></span><br><span class="line">java -version</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回</span></span><br><span class="line">java version &quot;1.8.0_311&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_311-b10)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询JAVA_HOME</span></span><br><span class="line">echo $JAVA_HOME</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回</span></span><br><span class="line">/usr/local/java/jdk1.8.0_311</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="2-yum源安装"><a class="markdownIt-Anchor" href="#2-yum源安装"></a> 2. yum源安装</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查是否已经存在java相关命令</span></span><br><span class="line">rpm -qa|grep java</span><br><span class="line">rpm -qa|grep jdk</span><br><span class="line">rpm -qa|grep gcj</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果需要卸载</span></span><br><span class="line">rpm -qa | grep java | xargs rpm -e --nodeps</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检索Java1.8源列表</span></span><br><span class="line">yum list java-1.8*</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装Java1.8</span></span><br><span class="line">yum install java-1.8.0-openjdk* -y</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询JAVA_HOME</span></span><br><span class="line">which java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回</span></span><br><span class="line">/usr/bin/java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls -l命令</span></span><br><span class="line">ls -l /usr/bin/java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回</span></span><br><span class="line">lrwxrwxrwx 1 root root 22 Nov 13 14:37 /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls -l命令</span></span><br><span class="line">ls -l /etc/alternatives/java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回</span></span><br><span class="line">lrwxrwxrwx 1 root root 73 Nov 13 14:37 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64/jre/bin/java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 则JAVA_HOME路径为：/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装mysql8</title>
    <url>/mysql-install/</url>
    <content><![CDATA[<h3 id="1-下载"><a class="markdownIt-Anchor" href="#1-下载"></a> 1. 下载</h3>
<ul>
<li>下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></li>
<li>百度网盘链接: <a href="https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg">https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg</a>  密码: 0l15</li>
</ul>
<h3 id="2卸载mariadb"><a class="markdownIt-Anchor" href="#2卸载mariadb"></a> 2.卸载mariadb</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看mariadb 的安装包</span></span><br><span class="line">rpm -qa | grep mariadb</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">卸载 mariadb</span></span><br><span class="line">rpm -e mariadb-libs-5.5.68-1.el7.x86_64 --nodeps</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">卸载验证</span></span><br><span class="line">rpm -qa | grep mariadb</span><br></pre></td></tr></table></figure>
<h3 id="3安装"><a class="markdownIt-Anchor" href="#3安装"></a> 3.安装</h3>
<ol>
<li>
<p>解压安装包</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"> 进入下载目录</span></span><br><span class="line"> cd /usr/local/src/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">解压， 如果是.tar则用 tar -zxvf解压， 我下载的是.tar.xz包，使用的是tar -xvJf</span></span><br><span class="line"> tar -xvJf mysql-8.0.28-linux-glibc2.17-x86_64-minimal.tar.xz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移动解压后的文件夹至/usr/<span class="built_in">local</span></span></span><br><span class="line"> mv /usr/local/src/mysql-8.0.28-linux-glibc2.17-x86_64-minimal /usr/local/</span><br><span class="line"> cd /usr/local/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> 重命名</span></span><br><span class="line"> mv ./mysql-8.0.28-linux-glibc2.17-x86_64-minimal mysql8</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> 创建文件夹data,存储文件;</span></span><br><span class="line"> cd /usr/local/mysql8/</span><br><span class="line"> mkdir ./data</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>创建用户以及用户组</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用户组</span></span><br><span class="line">groupadd mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户 （用户名/密码）</span></span><br><span class="line">useradd -g mysql mysql</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>授权</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R mysql.mysql /usr/local/mysql8/ </span><br><span class="line"><span class="meta">#</span><span class="bash">或</span></span><br><span class="line">chown -R mysql .</span><br><span class="line">chgrp -R mysql .</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>初始化数据库</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前所在目录</span></span><br><span class="line">pwd # 若显示/usr/local/mysql-8.0,请继续执行，否则请先进入此目录/usr/local/mysql-8.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化 注意查看是否存在相关目录,若不存在,请新建</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 亲测</span></span><br><span class="line">./bin/mysqld --user=mysql --basedir=/usr/local/mysql8/ --datadir=/usr/local/mysql8/data/ --initialize </span><br><span class="line"><span class="meta">#</span><span class="bash">或</span></span><br><span class="line">./bin/mysql --user=mysql --basedir=/usr/local/mysql8/ --datadir=/usr/local/mysql8/data/ --initialize ;</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span><span class="bash">如果出现错误：./bin/mysqld: error <span class="keyword">while</span> loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</span></span><br><span class="line">yum install -y libaio  #安装后在初始化就OK了</span><br></pre></td></tr></table></figure>
<p><img src="/mysql-install/3.png" alt><br>
注意：后面白色高亮选中的是初始密码！！！！</p>
</li>
<li>
<p>配置my.cnf</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/local/mysql8/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>
<p>在配置中键入如下内容：</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"> <span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">port</span>=<span class="string">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=<span class="string">/usr/local/mysql8</span></span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=<span class="string">/usr/local/mysql8/data</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="string">1000</span></span><br><span class="line"><span class="comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="string">100</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为UTF8</span></span><br><span class="line"><span class="meta">character-set-server</span>=<span class="string">utf8mb4</span></span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="meta">default-storage-engine</span>=<span class="string">INNODB</span></span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=<span class="string">mysql_native_password</span></span><br><span class="line"><span class="comment">#是否对sql语句大小写敏感，1表示不敏感</span></span><br><span class="line"><span class="attr">lower_case_table_names</span> = <span class="string">1</span></span><br><span class="line"><span class="comment">#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭</span></span><br><span class="line"><span class="comment">#MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效</span></span><br><span class="line"><span class="attr">interactive_timeout</span> = <span class="string">1800</span></span><br><span class="line"><span class="attr">wait_timeout</span> = <span class="string">1800</span></span><br><span class="line"><span class="comment">#Metadata Lock最大时长（秒）， 一般用于控制 alter操作的最大时长sine mysql5.6</span></span><br><span class="line"><span class="comment">#执行 DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞</span></span><br><span class="line"><span class="attr">lock_wait_timeout</span> = <span class="string">3600</span></span><br><span class="line"><span class="comment">#内部内存临时表的最大值。</span></span><br><span class="line"><span class="comment">#比如大数据量的group by ,order by时可能用到临时表，</span></span><br><span class="line"><span class="comment">#超过了这个值将写入磁盘，系统IO压力增大</span></span><br><span class="line"><span class="attr">tmp_table_size</span> = <span class="string">64M</span></span><br><span class="line"><span class="attr">max_heap_table_size</span> = <span class="string">64M</span></span><br><span class="line"><span class="attr">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="meta">default-character-set</span>=<span class="string">utf8mb4</span></span><br><span class="line"><span class="attr">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="string">3306</span></span><br><span class="line"><span class="meta">default-character-set</span>=<span class="string">utf8mb4</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>建立Mysql服务</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -a ./support-files/mysql.server /etc/init.d/mysql</span><br><span class="line">chmod +x /etc/init.d/mysql</span><br><span class="line">chkconfig --add mysql</span><br><span class="line">chkconfig --list mysql</span><br></pre></td></tr></table></figure>
<p><img src="/mysql-install/4.png" alt></p>
</li>
<li>
<p>启动Mysql服务</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">service mysql start;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看启动状态</span></span><br><span class="line">service mysql status;</span><br></pre></td></tr></table></figure>
<p>如果提示： -bash: mysql: command not found</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/mysql8/bin/mysql /usr/bin</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>登录Mysql</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入<span class="string">&quot;初始化数据库&quot;</span>操作时的<span class="string">&quot;临时密码&quot;</span></span></span><br></pre></td></tr></table></figure>
<p><img src="/mysql-install/5.png" alt></p>
<p>修改密码：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>远程连接</p>
<ol>
<li>进入mysql命令行 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set host =&#x27;%&#x27; where user=&#x27;root&#x27;;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
<img src="/mysql-install/7.png" alt></li>
</ol>
</li>
<li>
<p>检查端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">检查3306端口是否开放</span></span><br><span class="line">netstat -nlp|grep 3306</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">开放3306端口</span></span><br><span class="line">firewall -cmd --permanent --add-prot=3306/tcp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启防火墙</span></span><br><span class="line">firewall -cmd --reload</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="4-常见问题"><a class="markdownIt-Anchor" href="#4-常见问题"></a> 4. 常见问题</h3>
<ol>
<li>
<p>The server quit without updating PID file</p>
<ul>
<li>第一，权限的问题，在出这个错误的时候，我所说的权限是mysq.cnf和所定义的mysql数据库存放目录的权限，要保证是mysql用户的权限，如果启动mysql还有问题，那么需要考虑提高权限了。<br>
说人话， 数据库存放目录必须是mysql这个用户的属组(通常的，安装MySQL的时候建立的用户为mysql，不建议使用别的用户），mysql的启动脚本必须有执行权限。赋予权限的命令为：chown -R mysql. /usr/local/mysql,假设我的mysql是安装在  /usr/local/mysql目录，数据库存放目录为 /usr/local/mysql/data/</li>
<li>第二，进程中有mysql的进程，上次的退出并没有自动结束该pid，导致新的进程无法启动，毕竟，mysql每次启动系统只会给分配一个pid号，再启动，系统也不可能给你分配pid号了。运行命令 ps -ef |grep mysql  找到mysql的进程结束它，然后在启动mysql。</li>
<li>第三，进入mysql数据库的存放目录，如果有mysql-bin.index这样的文件，删除它，在启动mysql，该文件产生的原因不详，不过删除必定没影响，或者另一个binlog.index也删除，两个index后缀的都删除也可以。</li>
<li>第四，my.cnf 这个配置文件内容不对，检查有没有skip-federated这个字段，如果有注释或者删除。<br>
检查是否定义了数据库存放目录，如果没有定义，请立刻定义。</li>
<li>第五，错误日志目录不存在解决方法：使用“chown” “chmod”命令赋予mysql目录所有者及权限。</li>
<li>第六，<strong>my.cnf文件内存在lower_case_table_names=1 字段，注释掉它。（这个选项是1表示不区分大小写）。具体原因不详</strong>。</li>
</ul>
<p>总结：mysql说好安装也好安装，说难也难，难点在于权限的配置，给高了不安全，给低了有可能启动出问题，如果启动出问题了，首先第一件事就是检查目录权限，第二就是检查my.cnf这个配置文件，skip-federated，lower_case_table_names=1 ，这样的字段注释掉，第三，清除旧的mysql进程，如果有就清除掉，旧的不去新的不来，就这么一个道理。第四，进入mysql数据库存放目录删除index后缀的文件。下面，给张图，详细的权限慢慢体会</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -al /etc/init.d/mysql</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Can 't connect to local MySQL server through socket '/tmp/mysql.sock</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">连接localhost通常通过一个Unix域套接字文件进行，一般是/tmp/mysql.sock。如果套接字文件被删除了，本地客户就不能连接。这可能发生在你的系统运行一个cron任务删除了/tmp下的临时文件。</span><br><span class="line">如果你因为丢失套接字文件而不能连接，你可以简单地通过重启服务器重新创建得到它。因为服务器在启动时重新创建它。</span><br><span class="line">如果和我一样，重启服务器还是没有任何变化，你可以先执行下面的语句</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -h 127.0.0.1 -p</span><br></pre></td></tr></table></figure>
<p>解决方式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /var/run/mysqld/</span><br><span class="line">sudo ln -s /tmp/mysql.sock /var/run/mysqld/mysqld.sock</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>however file don’t exists. Create writable for user ‘mysql’<br>
问题描述：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@test2 my57_3307]# /usr/local/mysql57/bin/mysqld_safe  --defaults-file=/dbdata/mysql/my57_3307/my57_3307.cnf  --ledir=/usr/local/mysql57/bin</span><br><span class="line">2018-08-26T14:12:45.459798Z mysqld_safe error: log-error set to &#x27;/var/log/mysqld/my57_3307.log&#x27;, however file don&#x27;t exists. Create writable for user &#x27;mysql&#x27;.</span><br></pre></td></tr></table></figure>
<p>解决方式：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch /usr/local/mysql8/log/error.log</span><br><span class="line">chown mysql /usr/local/mysql8/log/error.log</span><br><span class="line">/usr/local/mysql8/bin/mysqld_safe  --defaults-file=/etc/my.cnf  --ledir=/usr/local/mysql8/bin</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>cannot open shared object file: No such file or directory</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">需要安装 libnuma</span></span><br><span class="line">yum install libnuma</span><br><span class="line">yum -y install  numactl</span><br><span class="line">yum install libaio1 libaio-dev</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>mysqld启动报错Failed to find valid data directory</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf #查看datadir配置项的路径，然后一般是/var/lib/mysql，将这个文件夹删掉，然后重新初始化</span><br><span class="line"></span><br><span class="line">/usr/local/mysql8/bin/mysqld --initialize --user=mysql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果mysqld启动服务时提示不能用root启动，则在/var/lib/mysql中加入这行 user=mysql</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Navicat无法连接：Host is not allowed to connect to this MySQL server</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta">#</span><span class="bash">输入密码</span></span><br></pre></td></tr></table></figure>
<p>操作数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="keyword">select</span> host <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/mysql-install/q6.png" alt="navicat无法连接数据库"></p>
<p>该结果表示当前的root用户限制在当前的IP内访问，需要修改他的访问域</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">flush privileges ;</span><br></pre></td></tr></table></figure>
<p><img src="/mysql-install/q61.png" alt="navicat无法连接数据库"></p>
</li>
<li>
<p>Can’t connect to MySQL server ‘xxxxxx’ on(60)</p>
<p>我买的是阿里云服务器，前往阿里云服务器配置安全组规则即可</p>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>ConcurrentHashMap线程安全</title>
    <url>/ConcurrentHashMap/</url>
    <content><![CDATA[<p>##1. jdk1.7 ConcurrentHashMap<br>
jdk1.7 ConcurrentHashMap是由一个Segment数组和多个HashEntry数组组成<br>
<img src="/ConcurrentHashMap/01.png" alt="image-20201210103251475"><br>
其实就是将HashMap分为多个小HashMap,每个Segment元素维护一个小HashMap,目的是锁分离，本来实现同步，直接可以是对整个HashMap加锁，但是加锁粒度太大，影响并发性能，所以变换成此结构，仅仅对Segment元素加锁，降低锁粒度，提高并发性能</p>
<p>###1.1 初始化过程<br>
由于变换成<strong>Segment数组+HashEntry数组</strong>，所以初始化时，需要依次对Segment数组和HashEntry数组初始化</p>
<ol>
<li>
<p>Segment数组初始化</p>
<p>初始化时，使用右移一位，乘以2的计算方式，保证ssize是2的幂次方，小于指定参数concurrencyLevel的最大2的幂次方</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sshift = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//记录Segment数组大小</span></span><br><span class="line"><span class="keyword">int</span> ssize = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class="line">    ++sshift;</span><br><span class="line">    ssize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>HashEntry数组初始化</p>
<p>跟Segment数组初始化方式相同</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cap = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(cap &lt; c)&#123;</span><br><span class="line">    cap &lt;&lt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="12-put操作"><a class="markdownIt-Anchor" href="#12-put操作"></a> 1.2 put操作</h3>
<p>对于插入操作，需要两次Hash映射去定位数据存储位置</p>
<ol>
<li>首先通过第一次hash过程，定位Segment位置</li>
<li>然后通过第二次hash过程定位HashEntry位置</li>
</ol>
<p>Segment继承ReentrantLock,在数据插入指定HashEntry过程的时候会尝试调用ReentrantLock的tryLock方法获取锁，如果获取成功就直接插入相应位置，如果有线程获取该Segment的锁，当前线程就会以自旋方式去继续调用tryLock方法去获取锁，超过指定次数就挂起，等待唤醒。</p>
<h3 id="13-get操作"><a class="markdownIt-Anchor" href="#13-get操作"></a> 1.3 get操作</h3>
<p>也是两次Hash映射，相对于put操作，少了加锁过程</p>
<h3 id="14-size操作"><a class="markdownIt-Anchor" href="#14-size操作"></a> 1.4 size操作</h3>
<p>size操作就是计算ConcurrentHashMap的大小，有两种方案</p>
<ul>
<li>给每个Segment都加上锁(相当于给整个Map加上锁)，然后计算size返回</li>
<li>不加锁的模式，尝试多次计算ConcurrentHashMap的size,最多三次，比较前后计算的结果，结果一致就认为当前没有元素加入，计算结果是准确的。(查看计算出size的前后modCount的数值有没有发生变化，modCount的值用于记录元素变化的操作。如put，remove，clear)</li>
</ul>
<h2 id="2-jdk18-concurrenthashmap"><a class="markdownIt-Anchor" href="#2-jdk18-concurrenthashmap"></a> 2. jdk1.8 ConcurrentHashMap</h2>
<p>jdk1.8ConcurrentHashMap是数组+链表，或者数组+红黑树结构,并发控制使用Synchronized关键字和CAS操作<br>
<img src="/ConcurrentHashMap/02.png" alt="jdk1.8 ConcurrentHashMap"></p>
<h3 id="21关键概念点"><a class="markdownIt-Anchor" href="#21关键概念点"></a> 2.1关键概念点</h3>
<ul>
<li>sizeCtl变量(volatile修饰)<br>
通过CAS操作+volatile, 控制数组初始化和扩容操作
<ul>
<li>-1 代表正在初始化</li>
<li>-N 前16位记录数组容量，后16位记录扩容线程大小+1，是个负数</li>
<li>正数0，表示未初始化</li>
<li>正数，0.75*当前数组大小</li>
</ul>
</li>
<li>&lt;key,value&gt;键值对，封装为Node对象</li>
<li>table变量(volatile)：也就是所说的数组，默认为null，默认大小为16的数组，每次扩容时大小总是2的幂次方</li>
<li>nextTable(volatile):扩容时新生成的数组，大小为table的两倍</li>
</ul>
<h3 id="22put函数"><a class="markdownIt-Anchor" href="#22put函数"></a> 2.2put函数</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>1.putValue函数</strong><br>
首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">//spread函数计算hash值</span></span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//自旋过程</span></span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            tab = initTable();</span><br><span class="line">        <span class="comment">//判断映射位置节点是否为空</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                         <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;                  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果映射位置节点value==MOVED，说明正在进行扩容操作</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                          value, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//红黑树结构</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                       value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//链表节点数量超过阈值，转为红黑树</span></span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2. spread函数</strong><br>
spread函数，计算hash值。key的hash值与其高16位相异或，然后与HASH_BITS将最高位置0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">spread</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; HASH_BITS;</span><br><span class="line">    <span class="comment">//HASH_BITS=0x7fffffff</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3. tableAt函数</strong><br>
获取最新的tab[i]</p>
<p><strong>4. casTabAt函数</strong><br>
通过CAS操作，将值赋值进tab中对应位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function">Node&lt;K,V&gt; <span class="title">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>5. addCount函数</strong><br>
尝试使用CAS操作，将BASECOUNT加1，操作失败，则说明有其他线程在进行加一操作,发生冲突。之后判断是否需要扩容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> check)</span> </span>&#123;</span><br><span class="line">    CounterCell[] as; <span class="keyword">long</span> b, s;</span><br><span class="line">    <span class="comment">//使用CAS操作，将BASECOUNT加1</span></span><br><span class="line">    <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> ||</span><br><span class="line">        !U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class="line">        CounterCell a; <span class="keyword">long</span> v; <span class="keyword">int</span> m;</span><br><span class="line">        <span class="comment">//发生冲突</span></span><br><span class="line">        <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="keyword">null</span> ||</span><br><span class="line">            !(uncontended =</span><br><span class="line">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class="line">            <span class="comment">//多线程冲突执行</span></span><br><span class="line">            fullAddCount(x, uncontended);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        s = sumCount();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab, nt; <span class="keyword">int</span> n, sc;</span><br><span class="line">        <span class="comment">//判断是否需要扩容  大于0.75当前数组大小</span></span><br><span class="line">        <span class="keyword">while</span> (s &gt;= (<span class="keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            <span class="keyword">int</span> rs = resizeStamp(n);</span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//判断是否需要帮助扩容</span></span><br><span class="line">                <span class="comment">//扩容完成，或者扩容线程达到阈值不需要进行扩容，直接break</span></span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</span><br><span class="line">                    transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//帮助扩容，扩容线程数+1</span></span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                    transfer(tab, nt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//进行扩容操作</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</span><br><span class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                transfer(tab, <span class="keyword">null</span>);</span><br><span class="line">            s = sumCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="23-inittable函数"><a class="markdownIt-Anchor" href="#23-inittable函数"></a> 2.3 initTable函数</h3>
<p>进入一个自旋过程，一旦有线程扩容成功，才break</p>
<ul>
<li>如果sizeCtl &lt; 0,说明已经有线程正在扩容，所以直接让出线程。</li>
<li>如果sizeCtl&gt;=0,说明当前没有线程扩容，尝试CAS操作，设置sizeCtl为-1</li>
<li>设置sizeCtl为-1成功的线程，进行扩容操作，并且将sc更新为数组负载阈值0.75*n</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="comment">//自旋过程</span></span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">            Thread.yield(); </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                    table = tab = nt;</span><br><span class="line">                    <span class="comment">//0.75*n</span></span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                sizeCtl = sc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="24-统计concurrenthashmap中的元素个数"><a class="markdownIt-Anchor" href="#24-统计concurrenthashmap中的元素个数"></a> 2.4 统计ConCurrentHashMap中的元素个数</h3>
<p><strong>1. mappingCount函数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用sumCount,获得元素数量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">mappingCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> n = sumCount();</span><br><span class="line"><span class="keyword">return</span> (n &lt; <span class="number">0L</span>) ? <span class="number">0L</span> : n; <span class="comment">// ignore transient negative values</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>2. sumCount函数</strong></p>
<p>baseCount+ counterCells各个元素值，就是元素数量<br>
其实baseCount就是记录容器数量的，直接放回baseCount不就可以了吗？为什么sumCount()方法中还要遍历counterCells数组，累加对象的值呢？<br>
其中：counterCells是个全局的变量，表示的是CounterCell类数组。CounterCell是ConcurrentHashmap的内部类，它就是存储一个值。<br>
JDK1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据put()或则删除数据remove()时，会通过addCount()方法更新baseCount<br>
初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，执行fullAddCount(x, uncontended)方法，这个方法其实就是初始化counterCells，并将x的值插入到counterCell类中，而x值一般也就是1或-1，这可以从put()方法中得知。<br>
这些对象是因为在CAS更新baseCount值时，由于高并发而导致失败，最终将值保存到CounterCell中，放到counterCells里。这也就是为什么sumCount()中需要遍历counterCells数组，sum累加CounterCell.value值了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">sumCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CounterCell[] as = counterCells; CounterCell a;</span><br><span class="line">    <span class="keyword">long</span> sum = baseCount;</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="keyword">null</span>)</span><br><span class="line">                sum += a.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>3. CounterCell类</strong><br>
只存储一个值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterCell</span></span>&#123;</span><br><span class="line">   <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line">   CountCell(<span class="keyword">long</span> x) &#123;value = x;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原文链接：<a href="https://blog.csdn.net/zycxnanwang/article/details/105424734">https://blog.csdn.net/zycxnanwang/article/details/105424734</a></p>
]]></content>
      <categories>
        <category>知识整理</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch安装</title>
    <url>/ElasticSearch/</url>
    <content><![CDATA[<h2 id="1-jdk14安装"><a class="markdownIt-Anchor" href="#1-jdk14安装"></a> 1. JDK14安装</h2>
<ol>
<li>
<p>下载jdk14：  <a href="https://jdk.java.net/14/">https://jdk.java.net/14/</a></p>
</li>
<li>
<p>将文件存放在linux系统某文件夹内</p>
</li>
<li>
<p>解压</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置环境变量</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径</span></span></span><br><span class="line">JAVA_HOME=/usr/lib/tools/jdk-14.0.2</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>保存后，更新配置文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看JDK是否配置完成</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>
<p>出现下图表示安装成功！</p>
<p><img src="/ElasticSearch/image-20200806170145844.png" alt="image-20200806170145844"></p>
</li>
</ol>
<h2 id="2-elasticsearch安装"><a class="markdownIt-Anchor" href="#2-elasticsearch安装"></a> 2. ElasticSearch安装</h2>
<ol>
<li>
<p>解压tar.gz包</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>添加elasticsearch用户</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd elastic</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>赋予elastic search操作文件夹的权限</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>查看本机的hostname</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostname</span><br><span class="line"><span class="meta">#</span><span class="bash">localhost.localdomain</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改elastic search配置</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> cd ./elasticsearch-7.8.0/config</span><br><span class="line">vim elasticsearch.yml</span><br></pre></td></tr></table></figure>
<p><strong>elasticsearch.yml</strong></p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ======================== Elasticsearch Configuration =========================</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span></span><br><span class="line"><span class="comment">#       Before you set out to tweak and tune the configuration, make sure you</span></span><br><span class="line"><span class="comment">#       understand what are you trying to accomplish and the consequences.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The primary way of configuring a node is via this file. This template lists</span></span><br><span class="line"><span class="comment"># the most important settings you may want to configure for a production cluster.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please consult the documentation for further information on configuration options:</span></span><br><span class="line"><span class="comment"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use a descriptive name for your cluster:</span></span><br><span class="line"><span class="comment">#集群名称，默认可以不修改，此处 xiaoyuge</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">xiaoyuge</span></span><br><span class="line"><span class="comment"># ------------------------------------ Node ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use a descriptive name for the node:</span></span><br><span class="line"><span class="comment">#节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">xiaoyuge-local1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Add custom attributes to the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#node.attr.rack: r1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------------------- Paths ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class="line"><span class="comment">##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定</span></span><br><span class="line"><span class="comment">#path.data: /path/to/data</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to log files:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#path.logs: /path/to/logs</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------------------- Memory -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Lock the memory on startup:</span></span><br><span class="line"><span class="comment">#内存交换锁定，此处需要操作系统设置才生效</span></span><br><span class="line"><span class="comment">#bootstrap.memory_lock: true</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Make sure that the heap size is set to about half the memory available</span></span><br><span class="line"><span class="comment"># on the system and that the owner of the process is allowed to use this</span></span><br><span class="line"><span class="comment"># limit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Elasticsearch performs poorly when the system is swapping the memory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Network -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class="line"><span class="comment">#IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">192.168</span><span class="number">.135</span><span class="number">.111</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set a custom port for HTTP:</span></span><br><span class="line"><span class="comment">#访问端口，默认 9200，9300，建议明确指定</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">transport.port:</span> <span class="number">9300</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the network module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># --------------------------------- Discovery ----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Pass an initial list of hosts to perform discovery when this node is started:</span></span><br><span class="line"><span class="comment"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span></span><br><span class="line"><span class="comment">## 集群发现配置</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> [<span class="string">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the discovery and cluster formation module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Block initial recovery after a full cluster restart until N nodes are started:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#gateway.recover_after_nodes: 3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the gateway module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Various -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Require explicit names when deleting indices:</span></span><br><span class="line"><span class="comment">##防止批量删除索引</span></span><br><span class="line"><span class="attr">action.destructive_requires_name:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#设置密码</span></span><br><span class="line"><span class="attr">xpack.security.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.license.self_generated.type:</span> <span class="string">trial</span></span><br><span class="line"><span class="attr">xpack.security.transport.ssl.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="attr">http.cors.allow-headers:</span> <span class="string">Authorization</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>切换为elastic search用户，然后启动elastic search</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su elastic			#切换用户</span><br><span class="line">./bin/elasticsearch -d      #后台启动</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>设置密码</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bin/elasticsearch-setup-passwords interactive</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system</span></span><br><span class="line">Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.</span><br><span class="line">You will be prompted to enter passwords as the process progresses.</span><br><span class="line">Please confirm that you would like to continue [y/N]y</span><br><span class="line">Enter password for [elastic]:</span><br><span class="line">passwords must be at least [6] characters long</span><br><span class="line">Try again.</span><br><span class="line">Enter password for [elastic]:</span><br><span class="line">Reenter password for [elastic]:</span><br><span class="line">Passwords do not match.</span><br><span class="line">Try again.</span><br><span class="line">Enter password for [elastic]:</span><br><span class="line">Reenter password for [elastic]:</span><br><span class="line">Enter password for [kibana]:</span><br><span class="line">Reenter password for [kibana]:</span><br><span class="line">Enter password for [logstash_system]:</span><br><span class="line">Reenter password for [logstash_system]:</span><br><span class="line">Enter password for [beats_system]:</span><br><span class="line">Reenter password for [beats_system]:</span><br><span class="line">Changed password for user [kibana]</span><br><span class="line">Changed password for user [logstash_system]</span><br><span class="line">Changed password for user [beats_system]</span><br><span class="line">Changed password for user [elastic]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>常见异常：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash">java.lang.RuntimeException: can not run elasticsearch as root</span></span><br><span class="line"><span class="meta"> #</span><span class="bash">切换为elastic search用户，不能用root项目启动</span></span><br><span class="line">  </span><br><span class="line">su elastic</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore</span></span><br><span class="line"><span class="meta">#</span><span class="bash">elastic search用户没有操作该文件夹的权限</span></span><br><span class="line">  </span><br><span class="line">su root</span><br><span class="line">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR: [2] bootstrap checks failed</span><br><span class="line">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</span><br><span class="line">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span><span class="bash">分配内存不够</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1. 修改 /etc/security/limits.conf</span></span><br><span class="line">sudo vi /etc/security/limits.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">在文件末尾加上</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 4096</span><br><span class="line">* hard nproc 4096</span><br><span class="line"><span class="meta">#</span><span class="bash">2. 修改 /etc/sysctl.conf</span></span><br><span class="line">sudo vi /etc/sysctl.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">在文件末尾增加</span></span><br><span class="line">vm.max_map_count=262144</span><br><span class="line"><span class="meta">#</span><span class="bash">3. 配置重新生效</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<p><strong>效果如下：</strong></p>
<p><img src="/ElasticSearch/image-20200807093208470.png" alt="image-20200807093208470"></p>
<h2 id="3-kibana安装"><a class="markdownIt-Anchor" href="#3-kibana安装"></a> 3. Kibana安装</h2>
<ol>
<li>
<p>解压文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改配置文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ./config/kibana.yml</span><br></pre></td></tr></table></figure>
<p><strong>kibana.yml:</strong></p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Kibana is served by a back end server. This setting specifies the port to use.</span></span><br><span class="line"><span class="comment">##访问端口，默认无需修改</span></span><br><span class="line"><span class="attr">server.port:</span> <span class="number">5601</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></span><br><span class="line"><span class="comment"># The default is &#x27;localhost&#x27;, which usually means remote machines will not be able to connect.</span></span><br><span class="line"><span class="comment"># To allow connections from remote users, set this parameter to a non-loopback address.</span></span><br><span class="line"><span class="comment">#访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enables you to specify a path to mount Kibana at if you are running behind a proxy.</span></span><br><span class="line"><span class="comment"># Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath</span></span><br><span class="line"><span class="comment"># from requests it receives, and to prevent a deprecation warning at startup.</span></span><br><span class="line"><span class="comment"># This setting cannot end in a slash.</span></span><br><span class="line"><span class="comment">#server.basePath: &quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies whether Kibana should rewrite requests that are prefixed with</span></span><br><span class="line"><span class="comment"># `server.basePath` or require that they are rewritten by your reverse proxy.</span></span><br><span class="line"><span class="comment"># This setting was effectively always `false` before Kibana 6.3 and will</span></span><br><span class="line"><span class="comment"># default to `true` starting in Kibana 7.0.</span></span><br><span class="line"><span class="comment">#server.rewriteBasePath: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The maximum payload size in bytes for incoming server requests.</span></span><br><span class="line"><span class="comment">#server.maxPayloadBytes: 1048576</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Kibana server&#x27;s name.  This is used for display purposes.</span></span><br><span class="line"><span class="comment">#server.name: &quot;your-hostname&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The URLs of the Elasticsearch instances to use for all your queries.</span></span><br><span class="line"><span class="comment"># ES 服务指向，集群下配置多个</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [<span class="string">&quot;http://192.168.135.111:9200&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># When this setting&#x27;s value is true Kibana uses the hostname specified in the server.host</span></span><br><span class="line"><span class="comment"># setting. When the value of this setting is false, Kibana uses the hostname of the host</span></span><br><span class="line"><span class="comment"># that connects to this Kibana instance.</span></span><br><span class="line"><span class="comment">#elasticsearch.preserveHost: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Kibana uses an index in Elasticsearch to store saved searches, visualizations and</span></span><br><span class="line"><span class="comment"># dashboards. Kibana creates a new index if the index doesn&#x27;t already exist.</span></span><br><span class="line"><span class="comment"># Kibana 元数据存储索引名字，默认.kibana 无需修改</span></span><br><span class="line"><span class="comment">#kibana.index: &quot;.kibana&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The default application to load.</span></span><br><span class="line"><span class="comment">#kibana.defaultAppId: &quot;home&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If your Elasticsearch is protected with basic authentication, these settings provide</span></span><br><span class="line"><span class="comment"># the username and password that the Kibana server uses to perform maintenance on the Kibana</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"> 当前窗口内启动</span></span><br><span class="line"> ./bin/kibana# </span><br><span class="line"><span class="meta">#</span><span class="bash">后台进程启动</span></span><br><span class="line">nohup ./bin/kibana &amp;</span><br></pre></td></tr></table></figure>
<p><strong>效果如下</strong></p>
<p><img src="/ElasticSearch/image-20200807093309761.png" alt="image-20200807093309761"></p>
</li>
</ol>
<p><strong>遇见问题：</strong></p>
<ul>
<li>
<p>root启动报错<img src="/ElasticSearch/image-20201211095101816.png" alt="image-20201211095101816"></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换到elastic账户</span></span><br><span class="line">su xiaoyuge</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>elastic用户权限不足 <strong>Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json</strong><img src="/ElasticSearch/image-20201211095258901.png" alt="image-20201211095258901"></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换到root用户</span></span><br><span class="line">su root </span><br><span class="line"><span class="meta">#</span><span class="bash">赋予elastic账户 xiaoyuge操作权限</span></span><br><span class="line">chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64</span><br><span class="line"><span class="meta">#</span><span class="bash">切换为elastic账户</span></span><br><span class="line">su xiaoyuge</span><br><span class="line"><span class="meta">#</span><span class="bash">再次启动即可</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/algorithm/</url>
    <content><![CDATA[<p>二分法查找是一种基于比较目标值和数组中间元素的算法</p>
<ul>
<li>如果目标值 = 中间值，则找到目标值</li>
<li>如果目标值 &lt; 中间值，则在左侧继续搜索</li>
<li>如果目标值 &gt; 中间值，则在右侧继续搜索<br>
<img src="/algorithm/01.png" alt="二分查找"></li>
</ul>
<p><strong>解题思路：</strong></p>
<ul>
<li>初始化指针left = 0, right=n-1;</li>
<li>当left &lt;= right：
<ul>
<li>比较中间元素nums[pivot]和目标值target<br>
1.target = nums[pivot], 返回pivot<br>
2.target &gt; nums[pivot], 则在右侧继续搜索left = pivot+1<br>
3.target &lt; nums[pivot], 则在左侧继续搜索right = pivot+1<br>
<img src="/algorithm/02.png" alt><br>
<img src="/algorithm/03.png" alt></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，</span></span><br><span class="line"><span class="comment"> * 写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</span></span><br><span class="line"><span class="comment"> * 输入: nums = [-1,0,3,5,9,12], target = 9</span></span><br><span class="line"><span class="comment"> * 输出: 4</span></span><br><span class="line"><span class="comment"> * 解释: 9 出现在 nums 中并且下标为 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot, left =<span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right)&#123;</span><br><span class="line">        pivot = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[pivot] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> pivot;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[pivot] &lt; target)&#123;</span><br><span class="line">            left = pivot + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            right = pivot - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(logN)</li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>springCloud之FeignClient访问微服务接口缓慢</title>
    <url>/bug-sprigCloud/</url>
    <content><![CDATA[<h3 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h3>
<p>逻辑是A服务调用B服务(AB在同一个局域网内)。 经过反复测试，有一个访问缓慢的现象，具体表现为：<br>
程序启动第一次访问初始化1.2秒左右，还可以理解。<br>
但后面访问还是要1.1秒左右（格式化到SSS毫秒打印日志监控的）。<br>
但如果连续访问几次，后面几次又是几十毫秒。过一会再访问，或者换浏览器换post工具请求，又会1.2秒左右。</p>
<h3 id="原因排查1"><a class="markdownIt-Anchor" href="#原因排查1"></a> 原因排查1</h3>
<p>查看连接查实的接口<br>
<img src="/bug-sprigCloud/02.png" alt="请求缓慢2"><br>
发现接口调用的是这个地址，其实是别人启动项目的时候吧自己的ip注册到了eureka注册中心，导致接口有时候走的是getway，有时候又是走的别人的接口</p>
<p>解决方法：eureka.client.register-with-eureka 为false  这样就不会注册到eureka注册中心了</p>
<h3 id="原因排查2"><a class="markdownIt-Anchor" href="#原因排查2"></a> 原因排查2</h3>
<ol>
<li>查看日志<br>
<img src="/bug-sprigCloud/01.png" alt="请求缓慢"><br>
查看是否是hystrix 配置的时间小于了ribbon的时间</li>
</ol>
]]></content>
      <categories>
        <category>踩坑记录</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>java缓存一致性问题</title>
    <url>/cache-consistency/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA类加载过程</title>
    <url>/classLoad/</url>
    <content><![CDATA[<h2 id="1类加载机制"><a class="markdownIt-Anchor" href="#1类加载机制"></a> 1.类加载机制</h2>
<p>JVM将类描述数据从.class文件中加载到内存，并对数据进行解析、初始化，最终形成被JVM直接使用的Java类型；类从被加载到JVM中开始，到卸载为止，<br>
整个生命周期包括：<strong>加载、验证、准备、解析、初始化、使用和卸载</strong>7个阶段<br>
<img src="/classLoad/01.png" alt="完整的类加载过程"></p>
<ol>
<li>
<p>加载</p>
<p>加载时jvm做了三件事</p>
<ul>
<li>1)通过一个类的全限定名获取该类的二进制流</li>
<li>2)将这个字节流的静态存储结构转化为方法区运行时数据结构</li>
<li>3)在内存堆中生成一个代表该类的java.lang.class对象，最为该类数据的访问入口</li>
</ul>
</li>
<li>
<p>验证</p>
<p>验证、准备、解析这三步可以看作是一个连接的过程，将类的字节码连接到JVM的运行黄台之中;  验证是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，不会威胁到jvm的安全。<br>
验证内容如下：</p>
<ul>
<li>文件格式的验证： 验证字节流是否符合class文件袋额规范，是否能被当前版本的虚拟机处理</li>
<li>元数据验证： 对字节码描述的信息进行语义分析，确保符合Java语言规范</li>
<li>字节码验证：通过数据流和控制流分析，确定寓意是否合法，符合逻辑的</li>
<li>符号引用验证：这个娇艳在解析阶段发生</li>
</ul>
</li>
<li>
<p>准备</p>
<p>为类的静态变量分配内存，设置初始值，对于final static修饰的变量，直接赋值为用户的定义值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//准备阶段过后的初始值为0， 而不是7</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">7</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>解析</p>
<p>解析是将常量池内的符号引用转化为直接引用（如物理内存地址指针）</p>
</li>
<li>
<p>初始化</p>
<p>初始化阶段，jvm才开始真正执行类中定义的Java代码</p>
<ul>
<li>执行类构造器<clinit>()方法的过程，类构造器方法是有编译器自动手机类中所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的</clinit></li>
<li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，需有限触发其父类的初始化</li>
<li>虚拟机会保证一个类的<clinit>()方法在多线程环境被正确加锁和同步<br>
<img src="/classLoad/02.png" alt="完整的类加载过程2"></clinit></li>
</ul>
</li>
</ol>
<h2 id="2类加载器"><a class="markdownIt-Anchor" href="#2类加载器"></a> 2.类加载器</h2>
<p>类加载器的主要任务：对类加载过程中的加载操作（根据一个类的全限定名读取该类的二进制字节流到JVM内部，然后转换为一个对应的java.lang.Class对象实例）</p>
<p>类加载器的分类</p>
<ul>
<li>启动类加载器Bootstrap ClassLoader:<br>
在HotSpot虚拟机中，Bootstrap ClassLoader用C++语言编写并嵌入JVM内部，主要负载加载JAVA_HOME/lib目录中的所有类，或者加载由选项-Xbootcalsspath指定的路径下的类</li>
<li>拓展类加载器/ExtClassLoader：<br>
ExtClassLoader继承ClassLoader类，负载加载JAVA_HOME/lib/ext目录中的所有类型，或者由参数-Xbootclasspath指定路径中的所有类型</li>
<li>应用程序类加载器/AppClassLoader:<br>
ExtClassLoader继承ClassLoader类，负责加载用户类路径ClassPath下的所有类型，一般情况下为程序的默认类加载器</li>
<li>自定义加载器:<br>
Java虚拟机规范将所有继承抽象类java.lang.ClassLoader的类加载器，定义为自定义类加载器</li>
</ul>
<h2 id="3-双亲委派模型"><a class="markdownIt-Anchor" href="#3-双亲委派模型"></a> 3. 双亲委派模型</h2>
<p><img src="/classLoad/03.png" alt="双亲委派模型"><br>
如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。</p>
<ul>
<li>除了启动类加载器以外，每个类加载器拥有一个父类加载器，用户的自定义类加载器的父类加载器是AppClassLoader；</li>
<li>双亲委派模型可以保证全限名指定的类，只被加载一次；</li>
<li>双亲委派模型不具有强制性约束，是Java设计者推荐的类加载器实现方式；</li>
</ul>
<h3 id="31-双亲委派模式优势"><a class="markdownIt-Anchor" href="#31-双亲委派模式优势"></a> 3.1 双亲委派模式优势</h3>
<ol>
<li>采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次</li>
<li>java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改</li>
<li>如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常</li>
</ol>
<h3 id="32-双庆委派模型实现源码"><a class="markdownIt-Anchor" href="#32-双庆委派模型实现源码"></a> 3.2 双庆委派模型实现源码</h3>
<p>可以打开 java.lang.ClassLoader 类，其 loadClass方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                    c = findClass(name);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>实现方式很简单，首先会检查该类是否已经被加载过了，若加载过了直接返回（默认resolve取false）；若没有被加载，则调用父类加载器的 loadClass方法，若父类加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，则在抛出 ClassNotFoundException 异常后，在调用自己的 findClass 方法进行加载</p>
<h2 id="4自定义类加载器"><a class="markdownIt-Anchor" href="#4自定义类加载器"></a> 4.自定义类加载器</h2>
<ol>
<li>
<p>加密</p>
<p>我们知道Java字节码是可以进行反编译的，在某些安全性高的场景，是不允许这种情况发生的。那么我们可以将编译后的代码用某种加密算法进行加密，加密后的文件就不能再用常规的类加载器去加载类了。而我们自己可以自定义类加载器在加载的时候先解密，然后在加载</p>
</li>
<li>
<p>动态创建</p>
<p>比如很有名的动态代理。</p>
</li>
<li>
<p>从非标准的来源加载代码<br>
我们不用非要从class文件中获取定义此类的二进制流，还可以从数据库，从网络中，或者从zip包等。</p>
</li>
</ol>
<h3 id="41-自定义类加载器方法"><a class="markdownIt-Anchor" href="#41-自定义类加载器方法"></a> 4.1 自定义类加载器方法</h3>
<p>类加载时根据双亲委派模型会先一层层找到父加载器，如果加载失败，则会调用当前加载器的 findClass() 方法来完成加载。因此我们自定义类加载器，有两个步骤：<br>
1、继承 ClassLoader</p>
<p>2、覆写 findClass() 方法</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>ClassLoader</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客加密</title>
    <url>/hexo-encrypt/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3bb37800eaacf08354c4244e097b485a513dda4939b2ccc20f23b85c7fd3c402"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo部署出现错误Error Spawn failed解决方式</title>
    <url>/hexo-spawn-failed/</url>
    <content><![CDATA[<p>部署过程中可能会出现错误:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br><span class="line">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span><br><span class="line">fatal: unable to access &#x27;https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git/&#x27;: The requested URL returned error: 403</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (/Users/xiaoyuge/workspace/mybolg/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:315:20)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line">xiaoyuge@xiaoyugedeMacBook-Pro mybolg % hexo clean</span><br></pre></td></tr></table></figure>
<p>####解决方式一：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#进入站点根目录</span></span></span><br><span class="line">cd cd /Users/xiaoyuge/workspace/mybolg</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#删除git提交内容文件夹</span></span></span><br><span class="line">rm -rf .deploy_git/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行</span></span></span><br><span class="line">git config --global core.autocrlf false</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#最后</span></span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>####解决方式二：<br>
有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式（我的就是这个问题）<br>
github在2021-08-13正式启用personal access token后，原来的用户名+密码方式部署会报错，需要采用最新的token登录方式进行部署 。<br>
具体方式参考：<a href="https://cloud.tencent.com/developer/article/1861466">https://cloud.tencent.com/developer/article/1861466</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br></pre></td></tr></table></figure>
<p>查看_config.yml文件，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment">#repo:https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git  这是原来的路径，现在改成了下面这种</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xiaoyuge5201/xiaoyuge5201.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>面试常见的趣味题</title>
    <url>/interest/</url>
    <content><![CDATA[<h3 id="8升-5升-3升水桶各一个如何分成两个4升"><a class="markdownIt-Anchor" href="#8升-5升-3升水桶各一个如何分成两个4升"></a> 8升、5升、3升水桶各一个,如何分成两个4升</h3>
<p><img src="/interest/3_5_8.png" alt="分成两个4升"></p>
<h3 id="以面向对象的思想设计长方形和正方形"><a class="markdownIt-Anchor" href="#以面向对象的思想设计长方形和正方形"></a> 以面向对象的思想设计长方形和正方形</h3>
<ul>
<li>方式1：设计接口，然后长方形和正方形各自实现这个接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//形状类：结算面积和周长</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">perimeter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//长方形：实现接口并实现方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">true<span class="keyword">private</span> <span class="keyword">double</span> width;</span><br><span class="line">true<span class="keyword">private</span> <span class="keyword">double</span> height;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">double</span> width,<span class="keyword">double</span> height)</span></span>&#123;</span><br><span class="line">truetrue<span class="keyword">this</span>.width=width;</span><br><span class="line">truetrue<span class="keyword">this</span>.height=height;</span><br><span class="line">true&#125;	</span><br><span class="line">true<span class="meta">@Override</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> <span class="keyword">this</span>.width*<span class="keyword">this</span>.height;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="meta">@Override</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">perimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> <span class="number">2</span>*(<span class="keyword">this</span>.width+<span class="keyword">this</span>.height);</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正方形：实现接口并实现方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">true<span class="keyword">private</span> <span class="keyword">double</span> side;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">double</span> side)</span></span>&#123;</span><br><span class="line">truetrue<span class="keyword">this</span>.side=side;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="meta">@Override</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> side*side;</span><br><span class="line">true&#125;</span><br><span class="line"> </span><br><span class="line">true<span class="meta">@Override</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">perimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> <span class="number">4</span>*side;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>方式2：使用extents<br>
因为正方形 <strong>is a</strong> 长方形，所以可以使用继承来设计正方形，然后在构造函数中使用super函数；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span></span>&#123;</span><br><span class="line">true<span class="keyword">private</span> <span class="keyword">double</span> side;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">double</span> side)</span></span>&#123;</span><br><span class="line">truetrue<span class="keyword">super</span>(side,side);</span><br><span class="line">truetrue<span class="keyword">this</span>.side=side;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">truetrueSquare s=<span class="keyword">new</span> Square(<span class="number">2.5</span>);</span><br><span class="line">truetrueSystem.out.println(s.perimeter());</span><br><span class="line">truetrueSystem.out.println(s.area());</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="java使用递归计算123n之间的和"><a class="markdownIt-Anchor" href="#java使用递归计算123n之间的和"></a> java使用递归计算1+2+3+…+n之间的和</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumNumber</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(sumN(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用递归的方法计算1+2+3+4+....n的和; 切记注意n不能小于1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sumN</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n+ sumN(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="java读取一篇英文文章并输出其中出现单词次数最多的3个单词以及次数"><a class="markdownIt-Anchor" href="#java读取一篇英文文章并输出其中出现单词次数最多的3个单词以及次数"></a> java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数</h3>
<p>文件文章中存在,.以及空格</p>
<ul>
<li>读取文件内容</li>
<li>对文件进行内容匹配</li>
<li>使用map 保存单词、次数</li>
<li>map排序</li>
<li>输出</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 使用流读取文件</span></span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;d:/n.txt&quot;</span>));</span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.close();</span><br><span class="line">            <span class="comment">//替换所有的英文逗号和句号</span></span><br><span class="line">            String temp = sb.toString().replaceAll(<span class="string">&quot;/[\\w\\,\\.]+/&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//2.使用正则表达式匹配</span></span><br><span class="line">            Pattern pattern = Pattern.compile(<span class="string">&quot;/[a-zA-Z\\w\\,\\.]+/&quot;</span>);</span><br><span class="line">            Matcher matcher = pattern.matcher(temp);</span><br><span class="line">            Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">            String word;</span><br><span class="line">            <span class="keyword">int</span> count;</span><br><span class="line">            <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">                word = matcher.group();</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(word)) &#123;</span><br><span class="line">                    count = map.get(word);</span><br><span class="line">                    map.put(word, count + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(word, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将map的数据根据count排序；</span></span><br><span class="line">            List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class="line">            Collections.sort(list, Comparator.comparing(Map.Entry::getValue));</span><br><span class="line">            <span class="keyword">int</span> last = list.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = last; i &gt; last - <span class="number">5</span>; i--) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;key=&quot;</span> + list.get(i).getKey() + <span class="string">&quot; value=&quot;</span> + list.get(i).getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="java-获取字符串第一次出现重复的字符"><a class="markdownIt-Anchor" href="#java-获取字符串第一次出现重复的字符"></a> java 获取字符串第一次出现重复的字符</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">    Set&lt;Character&gt; uniqueChars = <span class="keyword">new</span> HashSet(chars.length,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!uniqueChars.add(chars[i]))&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内部类初始化</title>
    <url>/java-inner-class-01/</url>
    <content><![CDATA[<h3 id="1-在同个java文件中但不是内部类"><a class="markdownIt-Anchor" href="#1-在同个java文件中但不是内部类"></a> 1. 在同个java文件中，但不是内部类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在同一个Java文件中只能存在一个public类，除内部类外</span></span><br><span class="line"><span class="comment">//只允许使用“public”、“abstract”和“final”。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    D d = <span class="keyword">new</span> D();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-常规内部类"><a class="markdownIt-Anchor" href="#2-常规内部类"></a> 2. 常规内部类</h3>
<p>要实例化内部类对象，必须先有外部类对象，通过外部类对象.new 内部类();来实例化内部类对象，在其他文件或者其他包内都是这样，只是要能在其他包实例化的话，内部类Inner还得加上修饰符public。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outter out = <span class="keyword">new</span> Outter();</span><br><span class="line">        Outter.Inner in = out.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种情况：通过提供方法来获取实例对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="number">111</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> B <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        B b = a.getInstance();</span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-静态内部类"><a class="markdownIt-Anchor" href="#3-静态内部类"></a> 3. 静态内部类</h3>
<p>实例化静态内部类和实例化常规内部类有类似的地方，而不同之处在与静态内部类由于是静态的，所以不需要外部类对象就可以实例化，如上例Outter.Inner in = new Outter.Inner();<br>
在其他Java文件也是这么实例化的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outter.Inner in = <span class="keyword">new</span> Outter.Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-局部内部类"><a class="markdownIt-Anchor" href="#4-局部内部类"></a> 4. 局部内部类</h3>
<p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内，所以只能在方法或者该作用域内实例化,局部内部类不能有访问说明符,因为它不是外围类的一部分,但是可以访问当前代码块的常量,以及此外围类的所有成员</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> C();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pint</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">new</span> D();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="5-匿名内部类"><a class="markdownIt-Anchor" href="#5-匿名内部类"></a> 5. 匿名内部类</h3>
<p>匿名内部类可以继承一个类或实现一个接口，这里的ClassOrInterfaceName是匿名内部类所继承的类名或实现的接口名。但匿名内部类不能同时实现一个接口和继承一个类，也不能实现多个接口。如果实现了一个接口，该类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;() &#123;&#123;</span><br><span class="line">        add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(</span><br><span class="line">        <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">        &#125;</span><br><span class="line">).start();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>内部类</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8学习</title>
    <url>/java8%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h2 id="1-optional"><a class="markdownIt-Anchor" href="#1-optional"></a> 1. Optional</h2>
<p>Optional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException)。<br>
本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空</p>
<h3 id="11-optional构造方式"><a class="markdownIt-Anchor" href="#11-optional构造方式"></a> 1.1. optional构造方式</h3>
<ul>
<li>
<p>Optional.of(T)</p>
<p>该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。</p>
</li>
<li>
<p>Optional.ofNullable(T)</p>
<p>该方式的入参可以为null，当入参不确定为非null时使用。</p>
</li>
<li>
<p>Optional.empty()</p>
<p>这种方式是返回一个空Optional，等效Optional.ofNullable(null)</p>
</li>
</ul>
<h3 id="12-如何正确的使用optional"><a class="markdownIt-Anchor" href="#12-如何正确的使用optional"></a> 1.2. 如何正确的使用Optional</h3>
<ul>
<li>
<p>尽量避免使用的地方</p>
<ol>
<li>
<p>避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。</p>
</li>
<li>
<p>避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。</p>
</li>
<li>
<p>避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。</p>
</li>
<li>
<p>避免使用Optional作为方法的参数，原因同3。</p>
</li>
</ol>
</li>
<li>
<p>正确使用方式</p>
<ol>
<li>
<p>实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存在则返回</span></span><br><span class="line">User king = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;king&quot;</span>);</span><br><span class="line">Optional&lt;User&gt; userOpt = Optional.of(king);</span><br><span class="line">User user =  userOpt.orElse(<span class="keyword">null</span>);</span><br><span class="line">System.out.println(user.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//不存在提供默认值</span></span><br><span class="line">User user2 = <span class="keyword">null</span>;</span><br><span class="line">Optional&lt;User&gt; userOpt2 = Optional.ofNullable(user2);</span><br><span class="line">User user3 = userOpt2.orElse(unknown);</span><br><span class="line">System.out.println(user3.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过方法提供值</span></span><br><span class="line">User user4 = userOpt2.orElseGet(() -&gt; <span class="keyword">new</span> User(<span class="number">0</span>, <span class="string">&quot;DEFAULT&quot;</span>)); </span><br><span class="line">System.out.println(user4.getName())</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//不建议下面这种使用</span></span><br><span class="line"><span class="keyword">if</span>(userOpt.isPresent()) &#123;</span><br><span class="line">    System.out.println(userOpt.get().getName());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用ifPresent()来进行对象操作，存在则操作，否则不操作。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例存在则操作，否则不操作</span></span><br><span class="line">userOpt.ifPresent(u -&gt; System.out.println(u.getName()));</span><br><span class="line">userOpt2.ifPresent(u -&gt; System.out.println(u.getName()));</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用map/flatMap来获取关联数据</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用map方法获取关联数据</span></span><br><span class="line">System.out.println(userOpt.map(u -&gt; u.getName()).orElse(<span class="string">&quot;Unknown&quot;</span>));</span><br><span class="line">System.out.println(userOpt2.map(u -&gt; u.getName()).orElse(<span class="string">&quot;Default&quot;</span>));</span><br><span class="line"><span class="comment">//使用flatMap方法获取关联数据</span></span><br><span class="line">List&lt;String&gt; interests = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">interests.add(<span class="string">&quot;a&quot;</span>);interests.add(<span class="string">&quot;b&quot;</span>);interests.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">user.setInterests(interests);</span><br><span class="line">List&lt;String&gt; interests2 = Optional.of(user)</span><br><span class="line">    .flatMap(u -&gt; Optional.ofNullable(u.getInterests()))</span><br><span class="line">    .orElse(Collections.emptyList());</span><br><span class="line">System.out.println(interests2.isEmpty());</span><br></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ul>
<h3 id="13optional判断第三方接口"><a class="markdownIt-Anchor" href="#13optional判断第三方接口"></a> 1.3.Optional判断第三方接口</h3>
<p>使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。</p>
<h4 id="131-接口返回参数问题"><a class="markdownIt-Anchor" href="#131-接口返回参数问题"></a> 1.3.1. 接口返回参数问题</h4>
<ol>
<li>在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准</li>
<li>参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多</li>
</ol>
<p>这是我们期望的返回格式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">true<span class="attr">&quot;code&quot;</span>: <span class="string">&quot;200&quot;</span>,</span><br><span class="line">true<span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;调用成功!&quot;</span>,</span><br><span class="line">true<span class="attr">&quot;data&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟接口调用方法</span></span><br><span class="line">Map&lt;String,Object&gt; map = serviceImpl.queryList();</span><br><span class="line"><span class="comment">//即使map为空也能正常返回，配合map直接映射数据值</span></span><br><span class="line"><span class="keyword">return</span> Optional.ofNullable(map).map(r-&gt; r.get(<span class="string">&quot;data&quot;</span>)).orElseGet(ArrayList:: <span class="keyword">new</span>)</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   </span></span><br><span class="line">JSONObject jsonObject = service.updateDate();</span><br><span class="line">Optional.ofNullable(jsonObject).map(r-&gt;r.getInteger(<span class="string">&quot;code&quot;</span>)).orElse(<span class="number">400</span>)</span><br></pre></td></tr></table></figure>
<h4 id="132-避免判断风暴"><a class="markdownIt-Anchor" href="#132-避免判断风暴"></a> 1.3.2. 避免判断风暴</h4>
<p>对象层层嵌套，为了逻辑严谨必须要进行空判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对于一个对象里面嵌套对象，那么需要层层去判断非空</span></span><br><span class="line">School school = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(school != <span class="keyword">null</span>)&#123;</span><br><span class="line">    Clazz clazz = school.getClazz();</span><br><span class="line">    <span class="keyword">if</span>(clazz != <span class="keyword">null</span>)&#123;</span><br><span class="line">        Student student = clazz.getStudent();</span><br><span class="line">        <span class="keyword">if</span>(student != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String name = student.getName();</span><br><span class="line">            <span class="keyword">if</span>(name == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(name))&#123;</span><br><span class="line">                name = <span class="string">&quot;学生的姓名为空&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用Optional后</span></span><br><span class="line"> String name = Optional.ofNullable(school)</span><br><span class="line">                .map(School::getClazz)</span><br><span class="line">                .map(Clazz::getStudent)</span><br><span class="line">                .map(Student::getName)</span><br><span class="line">                .orElse(<span class="string">&quot;学生的姓名为空&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="2-stream"><a class="markdownIt-Anchor" href="#2-stream"></a> 2. Stream</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找出某一个字段等于某个值的那一条数据</span></span><br><span class="line">JaponicaRiceCheck1 streamCheck = listItemRice.stream()</span><br><span class="line">.filter(o -&gt; o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>知识整理</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>锁优化</title>
    <url>/lock01/</url>
    <content><![CDATA[<h2 id="1-优化思路以及方法"><a class="markdownIt-Anchor" href="#1-优化思路以及方法"></a> 1. 优化思路以及方法</h2>
<ul>
<li>减少锁持有时间</li>
<li>减小锁粒度</li>
<li>锁分离</li>
<li>锁粗化</li>
<li>锁消除</li>
</ul>
<h3 id="11-减少锁持有时间"><a class="markdownIt-Anchor" href="#11-减少锁持有时间"></a> 1.1 减少锁持有时间</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    othercode1();</span><br><span class="line">    mutextMethod();</span><br><span class="line">    othercode2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。</p>
<p>分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    othercode1();</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">        metextMethod();</span><br><span class="line">    &#125;</span><br><span class="line">    othercode2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="12-减小锁粒度"><a class="markdownIt-Anchor" href="#12-减小锁粒度"></a> 1.2 减小锁粒度</h3>
<p>将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。</p>
<p>降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。</p>
<p>最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。</p>
<h3 id="13-锁分离"><a class="markdownIt-Anchor" href="#13-锁分离"></a> 1.3 锁分离</h3>
<p>最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。</p>
<p>分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue</p>
<img src="..\images/read_writer_Lock1.png" alt="read_writer_Lock1" style="zoom: 67%;">
<p>从头部获取数据，从尾部放入数据，使用两把锁。</p>
<h3 id="14-锁粗化"><a class="markdownIt-Anchor" href="#14-锁粗化"></a> 1.4 锁粗化</h3>
<p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demoMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>&#123;</span><br><span class="line">    	<span class="comment">//dow sth.</span></span><br><span class="line">true&#125;</span><br><span class="line">    <span class="comment">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class="line">    <span class="keyword">synchronized</span>&#123;</span><br><span class="line">        <span class="comment">//do sth.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种情况，根据锁粗化的思想，应该合并：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demoMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成</span></span><br><span class="line">    <span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">        <span class="comment">//do sth.</span></span><br><span class="line">        <span class="comment">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再举一个极端的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; circle; i++)&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">        <span class="comment">//.....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; circle; i++)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。<br>
<strong>分析</strong>: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。</p>
<h3 id="15-锁消除"><a class="markdownIt-Anchor" href="#15-锁消除"></a> 1.5 锁消除</h3>
<p>锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。<br>
但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterrruptedException</span>&#123;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">20000</span>; i++)&#123;</span><br><span class="line">        createStringBuffer(<span class="string">&quot;JVM&quot;</span>,<span class="string">&quot;asdfasdfasdf&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> bufferCost = System.currentTimeTimeMillis() - start;</span><br><span class="line">    System.out.println(<span class="string">&quot;createStringBuffer:&quot;</span>+bufferCost+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createStringBuffer</span><span class="params">(String s1, String s2)</span></span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。<br>
开启锁消除是在JVM参数上设置的，当然需要在server模式下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>
<p>并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。<br>
比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuffer <span class="title">createStringBuffer</span><span class="params">(String s1, String s2)</span></span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    <span class="keyword">return</span> sb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。<br>
所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。<br>
当JVM参数为：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">createStringBuffer: 302ms</span><br></pre></td></tr></table></figure>
<p>JVM参数为：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">createStringBuffer: 660ms</span><br></pre></td></tr></table></figure>
<p>显然，锁消除的效果还是很明显的。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>lock</tag>
      </tags>
  </entry>
  <entry>
    <title>MVCC多版本并发控制</title>
    <url>/mvcc/</url>
    <content><![CDATA[<h3 id="1-mvcc"><a class="markdownIt-Anchor" href="#1-mvcc"></a> 1. MVCC</h3>
<p>全称Multi-Version Concurrency Control即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中是心啊事务内存。<br>
MVCC在mysql Innodb中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使读写冲突时，也能做到不加锁，非阻塞并发读</p>
<h3 id="2-当前读和快照读"><a class="markdownIt-Anchor" href="#2-当前读和快照读"></a> 2. 当前读和快照读</h3>
<ul>
<li>
<p>当前读</p>
<p>像select lock in share mode（共享锁），select for update， update, insert,delete(排他锁)这些操作都是一种当前读；<strong>当前读就是读取记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁</strong>。</p>
</li>
<li>
<p>快照读</p>
<p>像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别（串行级别快照读会变成当前读）；快照读的实现是基于多版本并发控制（即MVCC）；可以任务MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；<br>
既然是基于多版本，即快照读可能读到的并不一定是最新版本的数据，有可能是之前的历史版本</p>
</li>
</ul>
<p><strong>MVCC就是为了实现读（快照读）-写冲突不加锁，当前读实际上是一种加锁的操作，是悲观锁的实现。</strong></p>
<hr>
<h3 id="3-当前读-快照读和mvcc的关系"><a class="markdownIt-Anchor" href="#3-当前读-快照读和mvcc的关系"></a> 3. 当前读、快照读和MVCC的关系</h3>
<p>MVCC多版本并发控制指的是&quot;维持一个数据的多个版本，使得读写操作没有冲突&quot;；<br>
Mysql通过快照读的方式去实现MVCC理想模型的其中一个具体非阻塞读功能，相对而言，当前读就是悲观锁的具体功能实现</p>
<p>MVCC模型在Mysql中具体实现有3个隐式字段：undo日志、Read View等去完成的</p>
<h3 id="4-mvcc的作用与好处"><a class="markdownIt-Anchor" href="#4-mvcc的作用与好处"></a> 4. MVCC的作用与好处</h3>
<p>数据库并发场景分为以下三种：</p>
<ul>
<li>读-读：没有问题，也不需要并发控制</li>
<li>读-写：有线程安全问题，可能会造成事务隔离性问题，（脏读、幻读、不可重复读）</li>
<li>写-写：有线程安全问题，可能会存在更新丢失问题</li>
</ul>
<p><strong>MVCC带来的好处：</strong></p>
<p>MVCC是一种用来解决读-写冲突的无所并发控制（在MVCC提出之前采用的是采用<strong>悲观锁</strong>），也就是事务分配增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务前的数据库快照，主要解决以下问题：</p>
<ul>
<li>在并发读写数据库时，可以做到在读操作是不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能；</li>
<li>解决脏读、幻读、不可重复读等事务隔离性问题，但不能解决更新丢失问题</li>
</ul>
<p><strong>MVCC组合方法</strong></p>
<ul>
<li>MVCC + 悲观锁： MVCC解决读写冲突，悲观锁解决写写冲突</li>
<li>MVCC + 乐观锁： MVCC解决读写冲突，乐观锁解决写写冲突，这种方式可能最大程度的提高数据库并发性能，并解决读写冲突和写写冲突导致的问题</li>
</ul>
<h3 id="5-mvcc的实现原理"><a class="markdownIt-Anchor" href="#5-mvcc的实现原理"></a> 5. MVCC的实现原理</h3>
<p>实现原理主要是依赖记录中的 3个隐式字段、undo日志 、ReadView 来实现的</p>
<p>在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程<br>
这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。</p>
<h4 id="51-版本链"><a class="markdownIt-Anchor" href="#51-版本链"></a> 5.1 版本链</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line">#触发分配TRX_ID</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_role;</span><br><span class="line">#指定TRX_MYSQL_THREAD_ID<span class="operator">=</span>当前CONNECTION_ID,表示查询当前连接</span><br><span class="line"><span class="keyword">select</span> TRX_ID, ROLL_PTR, ROW_ID  <span class="keyword">from</span> INFORMATION_SCHEMA.INNODB_TRX <span class="keyword">where</span> TRX_MYSQL_THREAD_ID <span class="operator">=</span> CONNECTION_ID();</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<p>在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：</p>
<ul>
<li>
<p>TRX_ID</p>
<p>6byte，这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id</p>
</li>
<li>
<p>roll_pointer</p>
<p>每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)</p>
</li>
<li>
<p>ROW_ID</p>
<p>6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引</p>
</li>
<li>
<p>实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了<br>
<img src="/mvcc/02.png" alt></p>
</li>
</ul>
<p>比如现在有个事务id是60的执行的这条记录的修改语句</p>
<p><img src="/mvcc/03.png" alt></p>
<p>此时在undo日志中就存在版本链<br>
<img src="/mvcc/04.png" alt></p>
<h4 id="52-readview"><a class="markdownIt-Anchor" href="#52-readview"></a> 5.2 ReadView</h4>
<p>已提交读和可重复读的区别就在于它们生成ReadView的策略不同<br>
ReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务id为[80,100]。</p>
<ul>
<li>如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。</li>
<li>如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。</li>
<li>如果你要访问的记录版本的事务id为110，那比事务列表最大id100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。<br>
这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。</li>
</ul>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql索引</title>
    <url>/mysql-index/</url>
    <content><![CDATA[<p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。<br>
索引分单列索引和组合索引。</p>
<ul>
<li>单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。</li>
<li>组合索引，即一个索引包含多个列。</li>
</ul>
<p>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。<br>
实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。<br>
上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：<br>
虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。<br>
建立索引会占用磁盘空间的索引文件。</p>
<h2 id="1普通索引"><a class="markdownIt-Anchor" href="#1普通索引"></a> 1.普通索引</h2>
<ul>
<li>创建索引  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX indexName <span class="keyword">on</span> table_name (column_name )</span><br></pre></td></tr></table></figure>
</li>
<li>添加索引（修改表结构）  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 表结构已经存在了，然后使用alter修改表结构添加索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name  <span class="keyword">add</span> INDEX indexName(column_name )</span><br></pre></td></tr></table></figure>
</li>
<li>创建表指定  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line">    ID <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,   </span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">    INDEX [indexName] (username(length))  </span><br><span class="line">); </span><br></pre></td></tr></table></figure>
</li>
<li>删除索引  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index [indexName] <span class="keyword">on</span>  table_name </span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-唯一索引"><a class="markdownIt-Anchor" href="#2-唯一索引"></a> 2. 唯一索引</h2>
<p>他和普通索引类似，不同的是：索引列的值必须唯一，但允许有控制。如果是组合索引，则列值的组合必须唯一。</p>
<ul>
<li>
<p>创建索引</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX indexName <span class="keyword">ON</span> table_name (column_name (length ))</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>修改表结构</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> mytable <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [indexName] (column_name(length))</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>创建表的时候指定</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line">    ID <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,   </span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">    <span class="keyword">UNIQUE</span> [indexName] (username(length))  </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3组合索引"><a class="markdownIt-Anchor" href="#3组合索引"></a> 3.组合索引</h2>
<ul>
<li>修改表结构指定索引  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> INDEX indexName (column_name1 , column_name2,...)</span><br></pre></td></tr></table></figure>
</li>
<li>创建表的时候指定  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line">    ID <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,   </span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">    KEY [indexName] (column_name1 , column_name2,...)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="31-组合索引查询问题"><a class="markdownIt-Anchor" href="#31-组合索引查询问题"></a> 3.1 组合索引查询问题</h3>
<p><strong>问题描述：<strong>在mysql中有张表test_a，有3个字段id,name,num；对这三个字段建立组合索引，那么查询时使用其中某两个或者一个作为查询条件，是否还会走索引<br>
<img src="/mysql-index/01.png" alt="表结构"><br>
根据查询字段的位置不同来决定，如查询</strong>id</strong>、<strong>id,num</strong>、<strong>id,num,name</strong>、 <strong>id, name</strong> 都可以走索引的，其他条件的查询不能走索引。</p>
<p><strong>组合索引 有“最左前缀”原则。就是只从最左面的开始组合，并不是所有只要含有这三列存在的字段的查询都会用到该组合索引</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加组合索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_a <span class="keyword">ADD</span> INDEX <span class="string">&#x27;lianhe&#x27;</span>(id, num, name)</span><br></pre></td></tr></table></figure>
<ol>
<li>使用三个字段id, num, name查询</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 只要三个条件都有，可以随意变换位置，结果都会走索引</span></span><br><span class="line"><span class="comment">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_a <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> num<span class="operator">=</span><span class="string">&#x27;001&#x27;</span> <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="/mysql-index/02.png" alt="使用三个字段id, num, name查询"><br>
从执行结果上可以看到是从走索引进行查询的</p>
<ol start="2">
<li>使用num, name 查询</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_a <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;1#&#x27;</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_a <span class="keyword">WHERE</span> num<span class="operator">=</span><span class="string">&#x27;001&#x27;</span> </span><br></pre></td></tr></table></figure>
<p><img src="/mysql-index/03.png" alt="使用id, name 查询"><br>
3. 使用id, name或者id, num 查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 只要包括id，可以随意变换位置，结果都会走索引</span></span><br><span class="line"><span class="comment">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class="line"><span class="comment">--如果只有两个字段，只有id条件命中，num或者name 条件不走联合索引。</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_a <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="/mysql-index/02.png" alt="使用id, name 查询"></p>
<p>需要避免索引失效的情况，如：LIKE %xxx，或者条件中使用函数等。<br>
4. 使用id查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_a <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><img src="/mysql-index/02.png" alt="使用id查询"></p>
<ol start="5">
<li>使用name或者num查询</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_a <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;1#&#x27;</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_a <span class="keyword">WHERE</span> num <span class="operator">=</span> <span class="string">&#x27;001&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="32-创建组合索引选择规则"><a class="markdownIt-Anchor" href="#32-创建组合索引选择规则"></a> 3.2 创建组合索引选择规则</h3>
<ul>
<li>经常用的列优先（最左匹配原则）</li>
<li>离散度高的列优先（离散度高原则）</li>
<li>宽度小的列优先（最少空间原则）</li>
</ul>
<h2 id="4使用alter命令添加索引"><a class="markdownIt-Anchor" href="#4使用alter命令添加索引"></a> 4.使用alter命令添加索引</h2>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (column_list): </span><br><span class="line">    </span><br><span class="line"><span class="comment">--  这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> index_name (column_list):</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加普通索引，索引值可出现多次。</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> INDEX index_name (column_list):</span><br><span class="line"></span><br><span class="line"><span class="comment">--该语句指定了索引为 FULLTEXT ，用于全文索引。</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> FULLTEXT index_name (column_list):</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql事务</title>
    <url>/mysql-transcation/</url>
    <content><![CDATA[<h2 id="事务的定义"><a class="markdownIt-Anchor" href="#事务的定义"></a> 事务的定义</h2>
<p>事务是数据管理系统DBMS执行过程中的一个<strong>逻辑单位</strong>，有一个有限的数据库<strong>操作序列</strong>构成</p>
<h2 id="事务四大特性"><a class="markdownIt-Anchor" href="#事务四大特性"></a> 事务四大特性</h2>
<ol>
<li>原子性atomicity：依赖undo log做到全部失败</li>
<li>隔离性isolation：实现方式LBCC 和 MVCC</li>
<li>持久性durability ：实现方式redo log和double write</li>
<li>一致性consistency：通过上面的三种方式实现</li>
</ol>
<p>数据恢复：</p>
<ul>
<li>redo log 崩溃恢复</li>
<li>双写缓冲（double write）</li>
</ul>
<p>Mysql中insert、delete、update 自带事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> veriables <span class="keyword">like</span> ‘autocommit’;</span><br><span class="line"><span class="keyword">set</span> session autocommit <span class="operator">=</span> <span class="keyword">on</span>;</span><br><span class="line">update xxx <span class="keyword">where</span> <span class="keyword">set</span> xx <span class="operator">=</span><span class="number">1</span> ;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<p>结束事务两种方式：rollback     commit</p>
<h2 id="事务并发的三大问题"><a class="markdownIt-Anchor" href="#事务并发的三大问题"></a> 事务并发的三大问题</h2>
<p>数据并发的三大问题其实都是数据库读一致性问题，必须有数据库提供一定的事务隔离机制来解决。</p>
<h3 id="脏读"><a class="markdownIt-Anchor" href="#脏读"></a> 脏读</h3>
<p><img src="/mysql-transcation/image-20201202210510525.png" alt="image-20200727224117281"></p>
<h3 id="不可重复读"><a class="markdownIt-Anchor" href="#不可重复读"></a> 不可重复读</h3>
<p><img src="/mysql-transcation/image-20201202210235089.png" alt="image-20200727224117281"></p>
<h3 id="幻读"><a class="markdownIt-Anchor" href="#幻读"></a> 幻读</h3>
<p><img src="/mysql-transcation/image-20201202210357906.png" alt="image-20200727224117281"></p>
<h2 id="事务隔离级别"><a class="markdownIt-Anchor" href="#事务隔离级别"></a> 事务隔离级别</h2>
<p><a href="http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt">http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt</a><br>
<img src="/mysql-transcation/image-20201202210817094.png" alt="image-20200727224117281"><br>
<img src="/mysql-transcation/image-20201202211406282.png" alt="image-20200727224117281"></p>
<p><img src="/mysql-transcation/image-20201202211752764.png" alt="image-20201202211752764"></p>
<h3 id="mvcc思想"><a class="markdownIt-Anchor" href="#mvcc思想"></a> MVCC思想</h3>
<p><img src="/mysql-transcation/image-20201202212103393.png" alt="image-20201202212103393"></p>
<h4 id="read-view一致性试图"><a class="markdownIt-Anchor" href="#read-view一致性试图"></a> Read View（一致性试图）</h4>
<p>存储内容</p>
<p><img src="/mysql-transcation/image-20201202213520136.png" alt="image-20201202213520136"></p>
<h4 id="read-view判断规则"><a class="markdownIt-Anchor" href="#read-view判断规则"></a> Read View判断规则</h4>
<p><img src="/mysql-transcation/image-20201202213757692.png" alt="image-20201202213757692"></p>
<h4 id="rc与rr-read-view-的区别"><a class="markdownIt-Anchor" href="#rc与rr-read-view-的区别"></a> RC与RR read View 的区别</h4>
<p><img src="/mysql-transcation/image-20201202214418001.png" alt="image-20201202214418001"></p>
<p>所以RC解决不了脏读的问题</p>
<h1 id="mysql-innodb所得基本类型"><a class="markdownIt-Anchor" href="#mysql-innodb所得基本类型"></a> Mysql InnoDb所得基本类型</h1>
<p>InnoDB支持行锁</p>
<p>MyiSAM支持行锁</p>
<p>表锁和行锁的区别</p>
<ul>
<li>锁力度：表锁 &gt; 行锁</li>
<li>加锁效率：表锁 &gt; 行锁</li>
<li>冲突概率：表锁 &gt; 行锁</li>
<li>并发性能：表锁 &lt; 行锁</li>
</ul>
<h2 id="表锁"><a class="markdownIt-Anchor" href="#表锁"></a> 表锁</h2>
<p><img src="/mysql-transcation/image-20201202214957559.png" alt="image-20201202214957559"></p>
<p>一个事务能够给一张表加上锁的前提是：没有其他任何一个事务锁定了这张表的任意一行数据。如果没有意向锁的话，那么加表锁需要扫描表中的每行数据，大大的浪费时间；</p>
<p>如果在添加行锁的时候，会在表上添加意向锁，那么在添加表锁的时候就不需要去扫描所有表数据了，只需要看下表上是否由意向锁就可；</p>
<h2 id="行锁"><a class="markdownIt-Anchor" href="#行锁"></a> 行锁</h2>
<h3 id="共享锁shared-locks"><a class="markdownIt-Anchor" href="#共享锁shared-locks"></a> 共享锁shared locks</h3>
<p><img src="/mysql-transcation/image-20201202215350319.png" alt="image-20201202215350319"></p>
<h3 id="排它锁exclusive-locks"><a class="markdownIt-Anchor" href="#排它锁exclusive-locks"></a> 排它锁Exclusive locks</h3>
<p><img src="/mysql-transcation/image-20201202215717524.png" alt="image-20201202215717524"></p>
<h3 id="innodb行锁锁定的是什么"><a class="markdownIt-Anchor" href="#innodb行锁锁定的是什么"></a> Innodb行锁锁定的是什么</h3>
<p>锁定的是index索引，如果表中没有索引，那么Innodb会把隐藏列DB_ROW_ID当作聚集索引</p>
<p>加锁一定要加上条件，不然会锁表</p>
<p><img src="/mysql-transcation/image-20201202222250939.png" alt="image-20201202222250939"></p>
<h3 id="记录锁rcord-lock-锁定记录"><a class="markdownIt-Anchor" href="#记录锁rcord-lock-锁定记录"></a> 记录锁Rcord Lock 锁定记录</h3>
<p><img src="/mysql-transcation/image-20201202222823984.png" alt="image-20201202222823984"></p>
<h3 id="间隙锁gap-lock-锁定范围"><a class="markdownIt-Anchor" href="#间隙锁gap-lock-锁定范围"></a> 间隙锁Gap Lock 锁定范围</h3>
<p>专门用于阻塞插入，间隙锁如果没有命中的话，会锁定最后一个值到正无穷，那么在最后一个值和正无穷之间的插入都不能成功。</p>
<p><img src="/mysql-transcation/image-20201202222914087.png" alt="image-20201202222914087"></p>
<h3 id="临健锁next-key-lock-锁定范围加记录"><a class="markdownIt-Anchor" href="#临健锁next-key-lock-锁定范围加记录"></a> 临健锁Next-key Lock ：锁定范围加记录</h3>
<p><img src="/mysql-transcation/image-20201202223655445.png" alt="image-20201202223655445"></p>
<p><strong>为了解决幻读的问题</strong></p>
<h3 id="事务隔离级别的实现"><a class="markdownIt-Anchor" href="#事务隔离级别的实现"></a> 事务隔离级别的实现</h3>
<p><img src="/mysql-transcation/image-20201202224136052.png" alt="image-20201202224136052"></p>
<h3 id="事务隔离级别的选择"><a class="markdownIt-Anchor" href="#事务隔离级别的选择"></a> 事务隔离级别的选择</h3>
<p><img src="/mysql-transcation/image-20201202224412832.png" alt="image-20201202224412832"></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql知识总结</title>
    <url>/mysql/</url>
    <content><![CDATA[<h1 id="mysql-初识"><a class="markdownIt-Anchor" href="#mysql-初识"></a> mysql 初识</h1>
<h2 id="1-版本历史"><a class="markdownIt-Anchor" href="#1-版本历史"></a> 1. 版本历史</h2>
<ul>
<li>1996年 mysql.10发布</li>
<li>1996年10月3.11.1发布</li>
<li>2000年ISAM升级成MyISAM引擎，mysql开源</li>
<li>2003年 Mysql4.0发布集成InnoDB存储引擎</li>
<li>2005年 MySQL 5.0版本发布，提供了试图，存储过程等功能</li>
<li>2010年MySQL5.5发布，InnoDB成为默认的存储引擎</li>
<li>2016年发布8.0.0版本</li>
</ul>
<h2 id="2-流行分支"><a class="markdownIt-Anchor" href="#2-流行分支"></a> 2. 流行分支</h2>
<ul>
<li>Maria DB</li>
<li>Percona Server</li>
</ul>
<h2 id="3-sql-执行流程"><a class="markdownIt-Anchor" href="#3-sql-执行流程"></a> 3. SQL 执行流程</h2>
<h3 id="通信类型"><a class="markdownIt-Anchor" href="#通信类型"></a> 通信类型</h3>
<ul>
<li>同步</li>
<li>异步</li>
</ul>
<h3 id="连接方式"><a class="markdownIt-Anchor" href="#连接方式"></a> 连接方式</h3>
<ul>
<li>长连接</li>
<li>短连接</li>
</ul>
<h3 id="超时时间"><a class="markdownIt-Anchor" href="#超时时间"></a> 超时时间</h3>
<ul>
<li>
<p>非交互式超时时间，如JDBC程序，单位s</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;wait_timeout&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>交互式超时间，如数据库工具</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> variables <span class="keyword">LIKE</span> <span class="string">&#x27;interactive_timeout&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="查看连接"><a class="markdownIt-Anchor" href="#查看连接"></a> 查看连接</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Thread%&#x27;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th style="text-align:center">连接名称</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Threads_cached</td>
<td style="text-align:center">缓存中的线程</td>
</tr>
<tr>
<td style="text-align:center">Threads_connected</td>
<td style="text-align:center">连接中线程</td>
</tr>
<tr>
<td style="text-align:center">Threads_created</td>
<td style="text-align:center">创建过的线程</td>
</tr>
<tr>
<td style="text-align:center">Threads_running</td>
<td style="text-align:center">正在执行的线程</td>
</tr>
</tbody>
</table>
<h4 id="查看所有的线程"><a class="markdownIt-Anchor" href="#查看所有的线程"></a> 查看所有的线程</h4>
<p>如果是root权限，可以看到所有用户发起的线程，否则只能看到自己的线程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> processlist</span><br></pre></td></tr></table></figure>
<p><img src="/mysql/image-20200727224117281.png" alt="image-20200727224117281"></p>
<ul>
<li>id ：一个表示，kill一个语句的时候可以使用</li>
<li>user：显示当前用户，如果不是root，这个命令就只显示你权限范围内的sql语句</li>
<li>host：显示这个语句是从哪个ip的端口上发出的，可以用来追踪出问题语句的用户</li>
<li>db：显示这个进程目前连接的是哪个数据库</li>
<li>commmand：显示当年连接的执行命令，一般分为休眠slee、查询query、连接connect</li>
<li>time：此状态持续的时间，单位是秒</li>
<li>state： 显示使用当年连接的sql语句状态，state只是语句执行中的某一个状态，如查询：需要经过copying to tmp table、sorting result、sending data等转台才可以完成</li>
<li>info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全</li>
</ul>
<h4 id="查看最大连接数"><a class="markdownIt-Anchor" href="#查看最大连接数"></a> 查看最大连接数</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">LIKE</span> <span class="string">&#x27;max_connections&#x27;</span>; <span class="operator">/</span><span class="operator">/</span>一般默认是<span class="number">151</span>，最大可以是<span class="number">2</span>的<span class="number">14</span>次方</span><br></pre></td></tr></table></figure>
<h4 id="mysql变量级别"><a class="markdownIt-Anchor" href="#mysql变量级别"></a> mysql变量级别</h4>
<ul>
<li>
<p>global全局</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">在mysql中修改全局变量global有两种方法：</span><br><span class="line">1. 修改my.ini配置文件（永久有效）</span><br><span class="line">2. 在不修改配置文件的基础上，使用关键字global设置全局变量</span><br><span class="line">   set global autocommit = 1;将autocommit变量的值设置为ON，需要注意的是此方法对global全局变量的设计进对于新开启的会话有效，对已开启的会话无效，同理，如果修改回哈session变量，可以使用session关键字，如set session autocommit = 1；这个仅对本session的变量配置有效，对其他的session无效；（在MySQL服务重启之后，数据库的配置重新按照my.ini文件 初始化，global和session 的配置都会失效）</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>session当前会话</p>
</li>
</ul>
<h3 id="通信协议"><a class="markdownIt-Anchor" href="#通信协议"></a> 通信协议</h3>
<ul>
<li>Unix Socket</li>
<li>TCP/IP</li>
<li>Named Pipes命名管道</li>
<li>Share Memory共享内存</li>
</ul>
<h3 id="通信方式"><a class="markdownIt-Anchor" href="#通信方式"></a> 通信方式</h3>
<ul>
<li>单工</li>
<li>半双工</li>
<li>全双工</li>
</ul>
<p><img src="/mysql/image-20200727231112059.png" alt="image-20200727231112059"></p>
<h3 id="mysql-缓存"><a class="markdownIt-Anchor" href="#mysql-缓存"></a> MySQL 缓存</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;query_cache%&#x27;</span></span><br><span class="line">#默认关闭，是因为mysql要保证两次执行的<span class="keyword">sql</span>完全一致，连空格，大小写都一致，而且当数据表中的任何一条数据发生变化，整个缓存会失效；</span><br></pre></td></tr></table></figure>
<p>#2. 删除数据</p>
<h2 id="1-数据删除方式"><a class="markdownIt-Anchor" href="#1-数据删除方式"></a> 1. 数据删除方式</h2>
<ul>
<li>DELETE</li>
<li>Truncate</li>
<li>Drop</li>
</ul>
<h2 id="2-执行速度"><a class="markdownIt-Anchor" href="#2-执行速度"></a> 2. 执行速度</h2>
<p>drop &gt; truncate &gt; delete</p>
<h3 id="21-delete"><a class="markdownIt-Anchor" href="#21-delete"></a> 2.1 DELETE</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> XXX</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>DELETE 数据数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger</p>
</li>
<li>
<p>在InnoDB中，delete其实并不会真的把数据删除，mysqL实际上只是给删除的数据打个标记为删除，因此delete删除表中的数据，表文件在磁盘所占的控件不会变小，存储控件不会被释放，只是把删除的数据设置为不可见。虽然未释放磁盘控件，但是下次插入数据的时候，仍然可以重用这部分空间（重用-&gt;覆盖）</p>
</li>
<li>
<p>delete执行时，会先把所删除数据缓存到rollback segement中，事务commit之后生效</p>
</li>
<li>
<p><strong>delete from  table_name</strong> 删除表的全部数据对于MyISAM会释放磁盘控件，Innodb不会释放磁盘空间</p>
</li>
<li>
<p>对于<strong>DELETE from table_name where xxx</strong>带条件的删除，不管是Innodb还是MyISAM都不会释放磁盘控件</p>
</li>
<li>
<p>delete 操作以后使用<strong>optimize table  table_name</strong>会里级释放磁盘空间（不管是Innodb还是MyISAM）</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查看表占用磁盘空间大小</span></span><br><span class="line"><span class="keyword">select</span> concat(round(<span class="built_in">sum</span>(DATA_LENGTH<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>),<span class="number">2</span>),<span class="string">&#x27;M&#x27;</span>) <span class="keyword">as</span> table_size</span><br><span class="line"><span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;demo_db&#x27;</span> <span class="keyword">AND</span> table_name<span class="operator">=</span><span class="string">&#x27;demo_table&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行空间优化语句，以及执行后的表size变化</span></span><br><span class="line">optimize <span class="keyword">table</span> demo_table</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>delete 操作时一行一行执行删除的，并且同时将该行的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作</strong>，生成大量日志也会占用磁盘空间</p>
</li>
</ul>
<h3 id="22-truncate"><a class="markdownIt-Anchor" href="#22-truncate"></a> 2.2 Truncate</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--删除表数据， 不带where条件</span></span><br><span class="line"><span class="comment">--与不带where的delete ：只删除数据，而不删除表的结构	</span></span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> table_name</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>Truncate数据数据库DDL定义语言，不走事务，原数据不放到rollback segement中，操作不触发trigger</strong>，执行后里级生效，无法找回；</p>
</li>
<li>
<p><strong>truncate table table_name里级释放磁盘空间不管是Innodb 和MyISAM</strong>；truncate table其实有点类似余drop table然后create，只不过这个crate table的过程做了优化，比如表结构文件之前已经有了等，所以速度上应该是接近drop table的速度</p>
</li>
<li>
<p>truncate 能快速清空一个表，并且重置auto_increment的值</p>
<p>​	但是对于不同的类型存储引擎需要注意的地方是：</p>
<ul>
<li><strong>对于MyISAM</strong>：truncate会重置auto_increment（自增序列）的值为1，而delete后表仍然保持auto_increment。</li>
<li><strong>对于Innodb</strong>：truncate会重置auto_increment（自增序列）的值为1， 而delete后表仍然保持auto_increment。但是在做delete整个表之后重启mysql的话，而重启后的auto_increment会被置为1</li>
</ul>
<p>也就是说，Innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始，实质上重启后的auto_increment会从SELETE 1+MAX(ai_col) FROM t开始</p>
</li>
<li>
<p>小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553</p>
</li>
</ul>
<h3 id="23-drop"><a class="markdownIt-Anchor" href="#23-drop"></a> 2.3 Drop</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表结构以及表数据</span></span><br><span class="line"><span class="keyword">Drop</span> <span class="keyword">table</span> table_name</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>drop：属于数据库DDL定义语言，同Truncate；</strong></p>
<p><strong>执行后立即生效，无法找回！ 执行后立即生效，无法找回！ 执行后立即生效，无法找回！</strong></p>
</li>
<li>
<p>**drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; **drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。</p>
</li>
<li>
<p>小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553</p>
</li>
</ul>
<h2 id="3-总结"><a class="markdownIt-Anchor" href="#3-总结"></a> 3. 总结</h2>
<p><strong>可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了</strong></p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存泄漏排查</title>
    <url>/outOfMemoryError/</url>
    <content><![CDATA[<h2 id="1内存溢出"><a class="markdownIt-Anchor" href="#1内存溢出"></a> 1.内存溢出</h2>
<p>java.lang.OutOfMemoryError：是指程序在申请内存是，没有足够的内存空间供其使用，出现OutOfMemoryError</p>
<ol>
<li>
<p>产生原因</p>
<ul>
<li>JMM内存过小</li>
<li>程序不严谨，产生了过多的垃圾</li>
</ul>
</li>
<li>
<p>具体表现在以下集中情况</p>
<ul>
<li>内存中加载的数据量过于庞大，如一次从数据库取出过多的数据</li>
<li>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收</li>
<li>代码中存在死循环或循环过多产生过多重复的对象实体</li>
<li>使用第三方软件的bug</li>
<li>启动参数内存值设定过小</li>
</ul>
</li>
<li>
<p>常见错误提示</p>
<ul>
<li>tomcat:java.lang.OutOfMemoryError: PermGen space</li>
<li>tomcat:java.lang.OutOfMemoryError: Java heap space</li>
<li>weblogic:Root cause of ServletException java.lang.OutOfMemoryError</li>
<li>resin:java.lang.OutOfMemoryError</li>
<li>java:java.lang.OutOfMemoryError</li>
</ul>
</li>
<li>
<p>解决方法</p>
<ul>
<li>增加JVM的内存大小<br>
对于tomcat容器，找到tomcat在电脑中的安装目录，进入这个目录，然后进入bin目录中，在window环境下找到bin目录中的catalina.bat，<a href="http://xn--linuxcatalina-t40uj69bkxsyifbo6cbj6d.sh">在linux环境下找到catalina.sh</a>。<br>
编辑catalina.bat文件，找到JAVA_OPTS（具体来说是 set “JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%”）这个选项的位置，这个参数是Java启动的时候，需要的启动参数。<br>
也可以在操作系统的环境变量中对JAVA_OPTS进行设置，因为tomcat在启动的时候，也会读取操作系统中的环境变量的值，进行加载。<br>
如果是修改了操作系统的环境变量，需要重启机器，再重启tomcat，如果修改的是tomcat配置文件，需要将配置文件保存，然后重启tomcat，设置就能生效了</li>
<li>优化程序，释放垃圾<br>
主要思路就是避免程序体现上出现的情况。避免死循环，防止一次载入太多的数据，提高程序健壮型及时释放。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间</li>
</ul>
</li>
</ol>
<h2 id="2-内存泄漏"><a class="markdownIt-Anchor" href="#2-内存泄漏"></a> 2. 内存泄漏</h2>
<p>Memory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。<br>
在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：<br>
1）首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；<br>
2）其次，这些对象是无用的，即程序以后不会再使用这些对象。<br>
如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。<br>
关于内存泄露的处理页就是提高程序的健壮型，因为内存泄露是纯代码层面的问题</p>
<h2 id="3内存溢出和内存泄漏的联系"><a class="markdownIt-Anchor" href="#3内存溢出和内存泄漏的联系"></a> 3.内存溢出和内存泄漏的联系</h2>
<p>内存泄露会最终会导致内存溢出。<br>
<strong>相同点</strong>：都会导致应用程序运行出现问题，性能下降或挂起。<br>
<strong>不同点</strong>：<br>
1) 内存泄露是导致内存溢出的原因之一，内存泄露积累起来将导致内存溢出。<br>
2) 内存泄露可以通过完善代码来避免，内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。</p>
<h2 id="4排查案例"><a class="markdownIt-Anchor" href="#4排查案例"></a> 4.排查案例</h2>
<p>Java的内存泄露多半是因为对象存在无效的引用，对象得不到释放，如果发现Java应用程序占用的内存出现了泄露的迹象，那么我们一般采用下面的步骤分析：</p>
<ol>
<li>用工具生成java应用程序的heap dump（如jmap）</li>
<li>使用Java heap分析工具（如MAT），找出内存占用超出预期的嫌疑对象</li>
<li>根据情况，分析嫌疑对象和其他对象的引用关系。</li>
<li>分析程序的源代码，找出嫌疑对象数量过多的原因。</li>
</ol>
<p>实际操作如下：<br>
1.登录linux服务器，获取tomcat的pid</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep java</span><br></pre></td></tr></table></figure>
<p>2.利用jmap初步分析内存映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jmap -histo:live pid | head -7</span><br></pre></td></tr></table></figure>
<p><img src="/outOfMemoryError/01.png" alt="jmap"><br>
第2行是我们业务系统的对象，通过这个对象的引用可以初步分析出到底是哪里出现了引用未被垃圾回收收集，通知开发人员优化相关代码</p>
<p>3.如果上面一步还无法定位到关键信息，那么需要拿到heap dump，生成离线文件，做进一步分析</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jmap -dump:live,format=b,file=heap.hprof 3514 </span><br></pre></td></tr></table></figure>
<p><img src="/outOfMemoryError/02.png" alt="jmap"><br>
4. 拿到heap dump文件，利用eclipse插件MAT来分析heap profile。</p>
<ul>
<li>1.安装MAT插件</li>
<li>2.在eclipse里切换到Memory Analysis视图</li>
<li>3.用MAT打开heap profile文件。<br>
<img src="/outOfMemoryError/03.png" alt="jmap"><br>
直接看到下面Action窗口，有4种Action来分析heap profile，介绍其中最常用的2种:</li>
<li><strong>Histogram</strong>：这个使用的最多，跟上面的jmap -histo 命令类似，只是在MAT里面可以用GUI来展示应用系统各个类产生的实例。<br>
<img src="/outOfMemoryError/04.png" alt="jmap"><br>
Shllow Heap排序后发现 Cms_Organization 这个类占用的内存比较多（没有得到及时GC），查看引用<br>
<img src="/outOfMemoryError/05.png" alt="jmap"><br>
分析引用栈，找到无效引用，打开源码<br>
<img src="/outOfMemoryError/06.png" alt="jmap"><br>
<strong>查看源码！！！</strong></li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>内存溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库锁</title>
    <url>/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%94%81/</url>
    <content><![CDATA[<p>当数据库有事务的时候，可能会产生数据的不一致，这时就需要一些机制来保证访问的次序，这就是锁的机制；<br>
<strong>锁的作用</strong>：用于挂你对共享资源的并发访问，保证数据库的完整性和一致性。<br>
##1. 不同引擎的锁以及锁分类<br>
<strong>Mysql数据库中，InnoDB支持表、行级锁，而MyISAM支持表级锁</strong><br>
<br><br>
Mysql大致可以归纳为以下3种锁：</p>
<ul>
<li>表级锁：开销小，加锁块，不会出现死锁，发生锁冲突的概率最高，并发度最低。</li>
<li>行级锁：开销大，加锁慢，会出现死锁，发生锁冲突的概率最低，并发度最高。</li>
<li>页面锁：开销和加锁的时间介于表级锁和行级锁之间，会出现死锁，锁粒度介于两者之间；并发度一般，一次锁定相邻一组记录</li>
</ul>
<p>Mysql表级锁两种模式: <strong>表共享锁（Table Read Lock）和 表独占写锁（Table Write Lock）</strong>，表现如下：</p>
<ul>
<li>对一个表的读操作，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；</li>
<li>对MyISAM的写操作，则会则色其他用户对同一表的读和写操作；</li>
<li>MyISAM表的读操作和写操作之间，以及写操作之间是串行的。<br>
当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其他线程的读、写操作都会等待。</li>
</ul>
<h2 id="2加表级锁"><a class="markdownIt-Anchor" href="#2加表级锁"></a> 2.加表级锁</h2>
<p>MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。<br>
给MyISAM表显式加锁，一般是为了一定程度模拟事务操作，实现对某一时间点多个表的一致性读取。例如，有一个订单表orders，其中记录有订单的总金额total，同时还有一个订单明细表order_detail，其中记录有订单每一产品的金额小计subtotal，假设我们需要检查这两个表的金额合计是否相等，可能就需要执行如下两条SQL</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>redis常见使用场景</title>
    <url>/redis-usage-scenario/</url>
    <content><![CDATA[<h2 id="1-缓存"><a class="markdownIt-Anchor" href="#1-缓存"></a> 1. 缓存</h2>
<p>String类型<br>
例如：热点数据缓存、对象缓存、全页缓存可以提升热点数据的访问效率</p>
<h2 id="2-数据共享分布式"><a class="markdownIt-Anchor" href="#2-数据共享分布式"></a> 2. 数据共享分布式</h2>
<p>String类型，因为redis是分布式的独立服务，可以在多个应用服务之间共享，例如分布式session</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="3-分布式锁"><a class="markdownIt-Anchor" href="#3-分布式锁"></a> 3. 分布式锁</h2>
<p>String类型 setnx方法，只有不存在时才能添加成功返回true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    Long flag = jedis.setnx(key, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">        jedis.expire(key, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">releaseLock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    jedis.del(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-全局id"><a class="markdownIt-Anchor" href="#4-全局id"></a> 4. 全局ID</h2>
<p>int 类型， incrby, 利用原子性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">incrby userid 1000</span><br></pre></td></tr></table></figure>
<p>分库分表的场景，一次性拿一段。</p>
<h2 id="5-计数器"><a class="markdownIt-Anchor" href="#5-计数器"></a> 5. 计数器</h2>
<p>int 类型，incr方法<br>
例如：文章的阅读量、微博点赞数；允许一定的延迟，先写入redis在定时同步到数据库</p>
<ol>
<li>第一种方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">testRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class="line">            ops.increment(<span class="string">&quot;success&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//return (int) ops.get(&quot;success&quot;); //使用这个会出现错误，报错信息 Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.EOFException。</span></span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(redisTemplate.boundValueOps(<span class="string">&quot;success&quot;</span>).get(<span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>第二种方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">testRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class="line">            ops.increment(<span class="string">&quot;success&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//return (int) ops.get(&quot;success&quot;);</span></span><br><span class="line">            <span class="comment">//return Integer.valueOf(redisTemplate.boundValueOps(&quot;success&quot;).get(0, -1));</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) getKey(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getKey</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute(<span class="keyword">new</span> RedisCallback&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Long <span class="title">doInRedis</span><span class="params">(RedisConnection connection)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">                </span><br><span class="line">                RedisSerializer&lt;String&gt; redisSerializer = redisTemplate.getStringSerializer();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">byte</span>[] rowkey = redisSerializer.serialize(key);</span><br><span class="line">                <span class="keyword">byte</span>[] rowval = connection.get(rowkey);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String val = redisSerializer.deserialize(rowval);</span><br><span class="line">                    <span class="keyword">return</span> Long.parseLong(val);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置每天零点过期，重新计数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当天时间</span></span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">//当天零点</span></span><br><span class="line">date = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);</span><br><span class="line"><span class="comment">//第二天零点</span></span><br><span class="line">date = DateUtils.addDays(date, +<span class="number">1</span>);</span><br><span class="line">redisTemplate.expireAt(<span class="string">&quot;success&quot;</span>, date);</span><br></pre></td></tr></table></figure>
<h2 id="6-限流"><a class="markdownIt-Anchor" href="#6-限流"></a> 6. 限流</h2>
<p>int类型，incr方法<br>
以访问者的IP和其他信息作为key,访问一次增加一次次数，超过次数 则返回false</p>
<h2 id="7-位统计"><a class="markdownIt-Anchor" href="#7-位统计"></a> 7. 位统计</h2>
<p>String类型的bitcount<br>
字符是以8位二进制存储的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set k1 a</span><br><span class="line">setbit k1 6 1</span><br><span class="line">setbit k1 7 0</span><br><span class="line">get k1 </span><br><span class="line">/* 6 7 代表的a的二进制位的修改</span><br><span class="line"></span><br><span class="line">a 对应的ASCII码是97，转换为二进制数据是01100001</span><br><span class="line">b 对应的ASCII码是98，转换为二进制数据是01100010</span><br><span class="line"></span><br><span class="line">因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p>例如：在线用户统计，留存用户统计</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setbit onlineusers 01 </span><br><span class="line">setbit onlineusers 11 </span><br><span class="line">setbit onlineusers 20</span><br></pre></td></tr></table></figure>
<p>支持按位与、按位或等等操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       </span><br><span class="line">BITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 </span><br><span class="line">BITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 </span><br><span class="line">BITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。</span><br></pre></td></tr></table></figure>
<p>计算出7天都在线的用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BITOP &quot;AND&quot; &quot;7_days_both_online_users&quot; &quot;day_1_online_users&quot; &quot;day_2_online_users&quot; ...  &quot;day_7_online_users&quot;</span><br></pre></td></tr></table></figure>
<h2 id="8-购物车"><a class="markdownIt-Anchor" href="#8-购物车"></a> 8. 购物车</h2>
<p>String 或hash。所有String可以做的hash都可以<br>
hash类型是一个String类型的field和value的映射表，每个hash都可以存储2^32 -1键值对<br>
<strong>使用hash做购物车：以用户id为key, 商品id为field，商品数量为value。</strong><br>
<img src="/redis-usage-scenario/01.png" alt></p>
<h2 id="9-用户消息时间线timeline"><a class="markdownIt-Anchor" href="#9-用户消息时间线timeline"></a> 9. 用户消息时间线timeline</h2>
<p>list，双向链表，直接作为timeline就好了。插入有序</p>
<h2 id="10-消息队列"><a class="markdownIt-Anchor" href="#10-消息队列"></a> 10. 消息队列</h2>
<p>List提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间</p>
<ul>
<li>
<p>blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>
</li>
<li>
<p>brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。<br>
上面的操作。其实就是java的阻塞队列。学习的东西越多。学习成本越低</p>
</li>
<li>
<p>队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列</p>
</li>
<li>
<p>栈：先进后出：rpush brpop</p>
</li>
</ul>
<h2 id="11-抽奖"><a class="markdownIt-Anchor" href="#11-抽奖"></a> 11. 抽奖</h2>
<p>自带一个随机获得值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">spop myset</span><br></pre></td></tr></table></figure>
<h2 id="12-点赞-签到-打卡"><a class="markdownIt-Anchor" href="#12-点赞-签到-打卡"></a> 12. 点赞、签到、打卡</h2>
<p><img src="/redis-usage-scenario/02.png" alt="点赞、签到、打卡"><br>
假如上面的微博ID是t1001，用户ID是u3001</p>
<p>用 like:t1001 来维护 t1001 这条微博的所有点赞用户</p>
<ul>
<li>点赞了这条微博：sadd like:t1001 u3001</li>
<li>取消点赞：srem like:t1001 u3001</li>
<li>是否点赞：sismember like:t1001 u3001</li>
<li>点赞的所有用户：smembers like:t1001</li>
<li>点赞数：scard like:t1001</li>
</ul>
<h2 id="13-商品标签"><a class="markdownIt-Anchor" href="#13-商品标签"></a> 13. 商品标签</h2>
<p><img src="/redis-usage-scenario/03.png" alt="商品标签"><br>
用 tags:i5001 来维护商品所有的标签。</p>
<ul>
<li>sadd tags:i5001 画面清晰细腻</li>
<li>sadd tags:i5001 真彩清晰显示屏</li>
<li>sadd tags:i5001 流程至极</li>
</ul>
<h2 id="14商品筛选"><a class="markdownIt-Anchor" href="#14商品筛选"></a> 14.商品筛选</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 获取差集</span><br><span class="line">sdiff set1 set2</span><br><span class="line">// 获取交集（intersection ）</span><br><span class="line">sinter set1 set2</span><br><span class="line">// 获取并集</span><br><span class="line">sunion set1 set2</span><br></pre></td></tr></table></figure>
<p><img src="/redis-usage-scenario/04.png" alt="商品筛选"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sadd brand:apple iPhone11</span><br><span class="line"></span><br><span class="line">sadd brand:ios iPhone11</span><br><span class="line"></span><br><span class="line">sad screensize:6.0-6.24 iPhone11</span><br><span class="line"></span><br><span class="line">sad screentype:lcd iPhone 11</span><br></pre></td></tr></table></figure>
<p>筛选商品，苹果的、ios的、屏幕在6.0-6.24之间的，屏幕材质是LCD屏幕</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sinter brand:apple brand:ios screensize:6.0-6.24 screentype:lcd</span><br></pre></td></tr></table></figure>
<h2 id="15-用户关注-推荐模型"><a class="markdownIt-Anchor" href="#15-用户关注-推荐模型"></a> 15. 用户关注、推荐模型</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># follow 关注 fans 粉丝</span></span></span><br><span class="line">sadd 1:follow 2</span><br><span class="line">sadd 2:fans 1</span><br><span class="line">sadd 1:fans 2</span><br><span class="line">sadd 2:follow 1</span><br></pre></td></tr></table></figure>
<p>我关注的人也关注了他(取交集)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sinter 1:follow 2:fans</span><br></pre></td></tr></table></figure>
<p>可能认识的人：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 用户1可能认识的人(差集)：</span></span></span><br><span class="line">sdiff 2:follow 1:follow</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 用户2可能认识的人：</span></span></span><br><span class="line">sdiff 1:follow 2:follow</span><br></pre></td></tr></table></figure>
<h2 id="16-排行榜"><a class="markdownIt-Anchor" href="#16-排行榜"></a> 16. 排行榜</h2>
<p>id 为6001 的新闻点击数加1：zincrby hotNews:20190926 1 n6001<br>
获取今天点击最多的15条：zrevrange hotNews:20190926 0 15 withscores<br>
<img src="/redis-usage-scenario/05.png" alt="排行榜"></p>
<hr>
<p><img src="/redis-usage-scenario/06.png" alt></p>
<h2 id="redis不适用的场景"><a class="markdownIt-Anchor" href="#redis不适用的场景"></a> redis不适用的场景</h2>
<p>Redis是一种缓存技术，主要用来提高应用的性能，更多的应用场景是对数据库读数据进行缓存，减轻数据库的IO的访问压力，以下场景不太适合使用Redis:</p>
<ul>
<li>
<p>数据规模大小角度</p>
<p>Redis是将数据放在内存进行缓存的，内存相对于磁盘来锁价格是比较贵的。<strong>如果成本是需要考虑的重要因素，那么大规模的数据就不太适合</strong>；</p>
</li>
<li>
<p>数据冷热程度角度</p>
<p>很多业务数据可以根据数据读的频繁程度分为热数据和冷数据；<strong>频繁使用的热数据一般适合用redis，冷数据一般不太适合用redis</strong>,如果大量的冷数据进行了缓存，那是对内存资源的浪费，<br>
所以在应用场景上区分冷热数据，将热数据放在内存中，进而提高性能。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境下安装Redis</title>
    <url>/redis_install/</url>
    <content><![CDATA[<h5 id="1-安装gcc"><a class="markdownIt-Anchor" href="#1-安装gcc"></a> 1. 安装gcc</h5>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++</span><br></pre></td></tr></table></figure>
<h5 id="2-下载安装包"><a class="markdownIt-Anchor" href="#2-下载安装包"></a> 2. 下载安装包</h5>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/redis-stable.tar.gz </span><br></pre></td></tr></table></figure>
<h5 id="3-解压"><a class="markdownIt-Anchor" href="#3-解压"></a> 3. 解压</h5>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xvzf redis-stable.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">移动redis目录，一般都会将redis目录放置到 /usr/<span class="built_in">local</span>/redis目录</span></span><br><span class="line">mv redis-stable /usr/local/redis</span><br></pre></td></tr></table></figure>
<h5 id="4-编译"><a class="markdownIt-Anchor" href="#4-编译"></a> 4. 编译</h5>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/redis</span><br><span class="line">make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果执行make命令报错：cc 未找到命令，原因是虚拟机系统中缺少gcc，执行下面命令安装gcc：yum -y install gcc automake autoconf libtool make</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果使用make失败，致命错误:jemalloc/jemalloc.h: 没有那个文件或目录，则需要在make指定分配器为libc make MALLOC=libc</span></span><br><span class="line">//make之后如果出现Hint: To run &#x27;make test&#x27; is a good idea ;</span><br><span class="line">//运行make test, 会提示需要安装tcl,执行yum install tcl</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">执行下面命令安装redis，并指定安装目录</span></span><br><span class="line">make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure>
<h5 id="5-配置密码以及允许外网ip访问"><a class="markdownIt-Anchor" href="#5-配置密码以及允许外网ip访问"></a> 5. 配置密码以及允许外网ip访问</h5>
   <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在redis.conf中配置requirepass 密码以及port端口号（非必须）</span></span><br><span class="line"><span class="attr">requirepass</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#开启redis允许外网ip访问，在 Linux 中安装了redis 服务，当在客户端通过远程连接的方式连接时，报could not connect错误。错误的原因为：redis采用的安全策略，默认会只准许本地访问。</span></span><br><span class="line"><span class="comment">#将所有的bing信息全部屏蔽</span></span><br><span class="line"><span class="comment">#bind 192.168.1.100 10.0.0.1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置redis后台启动，如果不配置的话可以使用hohup启动</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br></pre></td></tr></table></figure>
<h5 id="6-启动redis服务"><a class="markdownIt-Anchor" href="#6-启动redis服务"></a> 6. 启动redis服务</h5>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ./src</span><br><span class="line">nohup ./redis-server ../redis.conf &amp;</span><br></pre></td></tr></table></figure>
<h5 id="7-查看redis进程"><a class="markdownIt-Anchor" href="#7-查看redis进程"></a> 7. 查看redis进程</h5>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis]# pstree</span><br></pre></td></tr></table></figure>
<p><img src="/redis_install/image-20201201155441018.png" alt="image-20201210103251475"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot读取yml配置的方式</title>
    <url>/springboot-yml/</url>
    <content><![CDATA[<p>springboot项目中默认的配置文件是application.properties；</p>
<h3 id="1yml文件规则"><a class="markdownIt-Anchor" href="#1yml文件规则"></a> 1.yml文件规则</h3>
<ul>
<li>树状结构，结构清晰</li>
<li>不支持tab缩进</li>
<li>可以使用&quot;_“或”-&quot;消协字母代替大写字母；如userName 与user-name， user_name含义是一样的（宽松绑定原则 relaxed binding）; key: value格式书写，value前面有个空格</li>
</ul>
<h3 id="2-数据格式"><a class="markdownIt-Anchor" href="#2-数据格式"></a> 2. 数据格式</h3>
<ul>
<li>
<p>普通的值（数字，字符串，布尔）如：</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">123</span>      </span><br><span class="line"><span class="attr">name:</span> <span class="string">abc</span>      </span><br><span class="line"><span class="attr">flag:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>字符串默认不用加上单引号或者双引号；</p>
<p>“”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,name: “zhangsan \n lisi”：输出；zhangsan 换行 lisi</p>
<p>‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据,name: ‘zhangsan \n lisi’：输出；zhangsan \n lisi</p>
</li>
<li>
<p>对象、Map(属性和值)如：</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#k: v：在下一行来写对象的属性和值的关系；注意缩进(不支持tab,使用空格)</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8123</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/app</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>数组（list， set）</p>
  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用- 值表示数组中的一个元素</span></span><br><span class="line"><span class="attr">hands:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">left</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">right</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3-读取方式"><a class="markdownIt-Anchor" href="#3-读取方式"></a> 3. 读取方式</h3>
<ol>
<li>
<p>@Value注解</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">public String port;</span><br></pre></td></tr></table></figure>
<p>此处的port所在的类需要是一个组件,如果是实体类需要加上@Component</p>
</li>
<li>
<p>@ConfigurationProperties</p>
<p>需要一个JavaBean 来专门映射配置的话,我们一般会使用@ConfigurationProperties来读取.</p>
<p>使用的使用需要@EnableConfigurationProperties注解让类被springboot扫描到；</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3307/app?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;useLegacyDatetimeCode=false</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//prefix 指定前缀</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataSourceProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//省略getter setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>前缀定义了哪些外部属性将绑定到类的字段上</li>
<li>根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配</li>
<li>我们可以简单地用一个值初始化一个字段来定义一个默认值</li>
<li>类本身可以是包私有的</li>
<li>类的字段必须有公共 setter 方法</li>
</ul>
</li>
<li>
<p>Environment</p>
<p>Spring Environment bean</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;index&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;environment : &quot;</span>+ env.getProperty(<span class="string">&quot;spring.datasource.druid.url&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>常见sql优化方式</title>
    <url>/sql-01/</url>
    <content><![CDATA[<ol>
<li>
<p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>
</li>
<li>
<p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num <span class="keyword">is</span> <span class="keyword">null</span>    </span><br><span class="line"><span class="comment">-- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    </span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>
</li>
<li>
<p>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">=</span><span class="number">10</span> <span class="keyword">or</span> num<span class="operator">=</span><span class="number">20</span>    </span><br><span class="line"><span class="comment">--可以这样查询：    </span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">=</span><span class="number">10</span>    </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span>    </span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">=</span><span class="number">20</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>in 和 not in 也要慎用，否则会导致全表扫描，如：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)    </span><br><span class="line"><span class="comment">--对于连续的数值，能用 between 就不要用 in 了：    </span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>下面的查询也将导致全表扫描：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%abc%&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">/</span><span class="number">2</span><span class="operator">=</span><span class="number">100</span>    </span><br><span class="line"><span class="comment">---应改为:    </span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">=</span><span class="number">100</span><span class="operator">*</span><span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> <span class="built_in">substring</span>(name,<span class="number">1</span>,<span class="number">3</span>)<span class="operator">=</span><span class="string">&#x27;abc&#x27;</span><span class="comment">--name以abc开头的id    </span></span><br><span class="line"><span class="comment">---应改为:    </span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;abc%&#x27;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>
</li>
<li>
<p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>
</li>
<li>
<p>不要写一些没有意义的查询，如需要生成一个空表结构：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> col1,col2 <span class="keyword">into</span> #t <span class="keyword">from</span> t <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">0</span>    </span><br><span class="line"><span class="comment">--这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> #t(...)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>很多时候用 exists 代替 in 是一个好的选择：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> num <span class="keyword">from</span> a <span class="keyword">where</span> num <span class="keyword">in</span>(<span class="keyword">select</span> num <span class="keyword">from</span> b)    </span><br><span class="line"><span class="comment">--用下面的语句替换：    </span></span><br><span class="line"><span class="keyword">select</span> num <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> b <span class="keyword">where</span> num<span class="operator">=</span>a.num)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>
</li>
<li>
<p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。<br>
一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>
</li>
<li>
<p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。<br>
这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>
</li>
<li>
<p>尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>
</li>
<li>
<p>任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p>
</li>
<li>
<p>避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>
</li>
<li>
<p>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>
</li>
<li>
<p>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>
</li>
<li>
<p>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>
</li>
<li>
<p>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>
</li>
<li>
<p>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>
</li>
<li>
<p>与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。<br>
在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>
</li>
<li>
<p>尽量避免大事务操作，提高系统并发能力。</p>
</li>
<li>
<p>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Java守护线程和非守护线程</title>
    <url>/thread-01/</url>
    <content><![CDATA[<p>用户线程：我们平常创建的普通线程。</p>
<p>守护线程：用来服务于用户线程；不需要上层逻辑介入</p>
<p>java线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程</p>
<p>守护线程是所有的用户线程结束生命周期，守护线程才会结束生命周期，只要有一个用户线程存在，那么守护线程就不会结束，例如Java中的垃圾 回收器就是一个守护线程，只有应用程序中所有的线程结束，它才会结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(DaemonThread::print);</span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程main 结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//写一个死循环的方法来测试</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Counter:&quot;</span> + counter++);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主线程main 结束</span><br><span class="line">Counter:1</span><br></pre></td></tr></table></figure>
<p>如果我们将daemon设置为非守护线程，代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread.setDaemon(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
<p>这个时候就不会退出while(true)循环了，会一直执行下去，结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主线程main 结束</span><br><span class="line">Counter:1</span><br><span class="line">Counter:2</span><br><span class="line">Counter:3</span><br><span class="line">Counter:4</span><br><span class="line">Counter:5</span><br><span class="line">....</span><br></pre></td></tr></table></figure>
<p><strong>总结：守护线程是为用户线程服务的，当用户线程全部结束，守护线程会自动结束。</strong></p>
<p><strong>注意事项：</strong></p>
<ol>
<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。</li>
<li>在Daemon线程中产生的新线程也是Daemon的。</li>
<li>守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。</li>
<li>Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。</li>
</ol>
<p><strong>意义以及应用场景:</strong></p>
<p>当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。</p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>守护线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加评论系统Valine</title>
    <url>/valine/</url>
    <content><![CDATA[<p>Hexo的评论系统有很多，常见的有以下几个</p>
<ul>
<li><s>多说</s></li>
<li><s>网易云跟帖</s></li>
<li>畅言</li>
<li>来必力（LiveRe）</li>
<li>Disqus</li>
<li>Hypercomments</li>
<li>valine</li>
</ul>
<p>首先多说和网易云已经倒下了，其次畅言需要备案，Disqus，Hypercomments和LiveRe都是国外的，加载速度贼慢，甚至有被墙的可能，寻觅了很久之后，从Material主题换成next主题之后，终于找到了一个好用的评论系统，那就是 valine</p>
<p>我使用的是Next 6.x版本，本身就已经集成了valine，因此正常情况下是按照官方文档走就可以了，5分钟开启你的评论系统~</p>
<ol>
<li>
<p>注册LeanCloud</p>
<p>我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号，注册地址：<a href="https://www.leancloud.cn/">https://www.leancloud.cn/</a><br>
<img src="/valine/1.png" alt></p>
</li>
<li>
<p>获取AppId</p>
<p>注册完了之后 创建一个应用，名字随便起；然后进入应用-&gt;设置-&gt;应用凭证 中获取appid 和 appkey<br>
<img src="/valine/2.png" alt></p>
</li>
<li>
<p>配置valine</p>
<p>拿到appid和appkey之后，打开主题配置文件_config.yml 搜索 valine，填入appid 和 appkey</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comment:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">valine</span>  <span class="comment"># 启用哪种评论系统</span></span><br><span class="line">    <span class="attr">valine:</span> <span class="comment"># Valine. https://valine.js.org</span></span><br><span class="line">       <span class="attr">appid:</span> <span class="string">your</span> <span class="string">leancloud</span> <span class="string">application</span> <span class="string">appid</span></span><br><span class="line">       <span class="attr">appkey:</span> <span class="string">your</span> <span class="string">leancloud</span> <span class="string">application</span> <span class="string">appkey</span></span><br><span class="line">       <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line">       <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">       <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># comment box placeholder</span></span><br><span class="line">       <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line">       <span class="attr">meta:</span> <span class="string">nick,mail</span> <span class="comment">#,link      #   custom comment header</span></span><br><span class="line">       <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br><span class="line">       <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>LeanCloud 安全域名配置</p>
<p>在LeanCloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去<br>
<img src="/valine/3.png" alt></p>
</li>
<li>
<p>查看评论数据</p>
<p>在数据存储 -&gt; 结构化数据 中可以查看到所有的存储的数据信息<br>
<img src="/valine/4.png" alt></p>
</li>
</ol>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>volatile关键字</title>
    <url>/volatile/</url>
    <content><![CDATA[<h2 id="1volatile作用"><a class="markdownIt-Anchor" href="#1volatile作用"></a> 1.volatile作用</h2>
<p>volatile保证有序性，可见性，不能保证原子性</p>
<ol>
<li>禁止指令重排</li>
<li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量值，这个新值对其他线程立即可见的</li>
<li>不能保证原子性(线程不安全)</li>
</ol>
<h2 id="2-实现原理"><a class="markdownIt-Anchor" href="#2-实现原理"></a> 2. 实现原理</h2>
<ol>
<li>通过插入内存屏障指令禁止编译器和CPU对程序进行重排序。</li>
<li>当对声明了volatile的变量进行写操作时，JVM就会向处理器发送一条Lock前缀的指令，这条Lock前缀指令产生如下两个作用：
<ul>
<li>Lock前缀指令会引起处理器缓存回写到系统内存，并使用缓存一致性机制来确保回写的原子性。</li>
<li>一个处理器的缓存回写到系统内存会导致其他处理器的缓存无效。处理器使用MESI控制协议去维护内部缓存和其他处理器缓存的一致性。处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充</li>
</ul>
</li>
</ol>
<h2 id="3synchronized与volatile比较"><a class="markdownIt-Anchor" href="#3synchronized与volatile比较"></a> 3.synchronized与volatile比较</h2>
<ol>
<li>volatile关键字是线程同步的轻量级实现，性能较synchronized好；但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块</li>
<li>synchronized关键字在java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了显著的提升；</li>
<li>多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞</li>
<li>volatile关键字保证数据的可见性，但是不能保证数据的原子性；synchronized关键字两者都能保证（synchronized保证原子性，有序性，可见性）</li>
<li>volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。</li>
<li>synchronized是同步锁，同步快内的代码相当于同一时刻单线程执行</li>
</ol>
<h2 id="4-可见性问题"><a class="markdownIt-Anchor" href="#4-可见性问题"></a> 4. 可见性问题</h2>
<p>Java虚拟机规范中定义了一种Java内存 模型（Java Memory Model，即JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果。Java内存模型的主要目标就是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的细节。</p>
<p>JMM中规定所有的变量都存储在主内存（Main Memory）中，每条线程都有自己的工作内存（Work Memory），线程的工作内存中保存了该线程所使用的变量的从主内存中拷贝的副本。线程对于变量的读、写都必须在工作内存中进行，而不能直接读、写主内存中的变量。同时，本线程的工作内存的变量也无法被其他线程直接访问，必须通过主内存完成<br>
整体内存模型如下：<br>
<img src="/volatile/01.png" alt="image-20201210103251475"></p>
<h3 id="41-synchronized"><a class="markdownIt-Anchor" href="#41-synchronized"></a> 4.1 synchronized</h3>
<p>synchronized关键字的语义JMM（Java Main Memory）有两个规定，保证其实现内存可见性：<br>
- <strong>线程解锁前，必须把共享变量的最新值刷新到主内存中</strong><br>
- <strong>线程加锁前，将清空工作内存中共享变量的值，从主内存中重新取值</strong></p>
<h3 id="42-volatile"><a class="markdownIt-Anchor" href="#42-volatile"></a> 4.2 volatile</h3>
<ul>
<li>当对volatile变量执行写操作后，JMM会把工作内存中的最新变量值强制刷新到主内存</li>
<li>写操作会导致其他线程中的缓存无效<br>
这样，其他线程使用缓存时，发现本地工作内存中此变量无效，便从主内存中获取，这样获取到的变量便是最新的值，实现了线程的可见性。</li>
</ul>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>在线修改静态文件</title>
    <url>/%E5%9C%A8%E7%BA%BF%E4%BF%AE%E6%94%B9%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>项目运行时，如果需要修改某个css、js、html等文件的时候，需要自己连接到服务器然后修改，更有甚者需要连接vpn、堡垒机等等，特别烦！！！！于是弄了一个在线修改静态文件的工具，在此记录一下。</p>
<h4 id="1-引入pom"><a class="markdownIt-Anchor" href="#1-引入pom"></a> 1. 引入pom</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoyuge5201<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>static-file-modify-online<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-添加前后台代码"><a class="markdownIt-Anchor" href="#2-添加前后台代码"></a> 2. 添加前后台代码</h4>
<p>前台使用的是thymeleaf，根据自己项目的实际情况修改！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接: https://pan.baidu.com/s/1oW38vpj74yKOOtbu5xGCOQ  </span><br><span class="line">密码: tcmg</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>转换成小写字母</title>
    <url>/algoright-2/</url>
    <content><![CDATA[<p>实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入: &quot;Hello&quot;</span><br><span class="line">输出: &quot;hello&quot;</span><br><span class="line"></span><br><span class="line">示例2：</span><br><span class="line">输入: &quot;LOVELY&quot;</span><br><span class="line">输出: &quot;lovely&quot;</span><br></pre></td></tr></table></figure>
<h3 id="方法一-asccii码"><a class="markdownIt-Anchor" href="#方法一-asccii码"></a> 方法一： ASCCII码</h3>
<p><strong>解题思路：通过ascii码表操作字符串即可,a和A相差32；</strong></p>
<ul>
<li>a-z: 97 - 122</li>
<li>A-Z: 65 - 90</li>
<li>0-9: 48 - 57</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toLowerCase</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> ch : str.toCharArray()) &#123;</span><br><span class="line">        <span class="comment">// a-z：97-122  A-Z：65-90  0-9：48-57</span></span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            sb.append((<span class="keyword">char</span>)(ch + <span class="number">32</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sb.append(ch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toLowerCase</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] ch = str.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            ch[i] += <span class="number">32</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法二-位运算"><a class="markdownIt-Anchor" href="#方法二-位运算"></a> 方法二： 位运算</h3>
<p><strong>解题思路：</strong></p>
<ul>
<li>大写变小写、小写变大写：字符 ^= 32;</li>
<li>大写变小写、小写变小写：字符 |= 32;</li>
<li>大写变大写、小写变大写：字符 &amp;= 33;</li>
</ul>
<p>ASCII码表中大写的A是65，小写的a是97，它们的差是32<br>
65 | 32 转为二进制（按8位来算）可以得到 0100 0001 | 0010 0000 = 0110 0001 = 97 = a</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toLowerCase</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] ch = str.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        ch[i] |= <span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>mysqldumpslow分析慢查询日志</title>
    <url>/mysqldumpslow%E5%88%86%E6%9E%90%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>按照平均查询输出5行慢查询记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s at -t 5 /phpstudy/data/slowquery.log</span><br></pre></td></tr></table></figure>
<ul>
<li>-s   排序方式，可选值有c（记录次数）、t（查询时间）、l（锁定时间）、r（返回记录）、a（平均）</li>
<li>-t    显示的记录数Spawn failed解决方式</li>
<li>-g   后面跟正则表达式（如 left join），不区分大小写。</li>
<li>-r   正序排序，即从小到大排序。</li>
<li>-d  调试 debug</li>
<li>-v   查看版本</li>
</ul>
<p>按照平均查询时间排序且只显示含有left join的记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s at -g &#x27;left join&#x27; /phpstudy/data/slowquery.log</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql行列转置</title>
    <url>/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E7%BD%AE/</url>
    <content><![CDATA[<p>数据表：<br>
<img src="/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E7%BD%AE/01.png" alt="原始数据"></p>
<p>行转列结果为：<br>
<img src="/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E7%BD%AE/02.png" alt="转置后结果"><br>
数据库表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_score(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,  #名字</span><br><span class="line">    Subject <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>, #科目</span><br><span class="line">    Fraction <span class="keyword">double</span> <span class="keyword">default</span> <span class="number">0</span>  #分数</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_score`(name,Subject,Fraction) <span class="keyword">VALUES</span></span><br><span class="line">     (<span class="string">&#x27;王海&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="number">86</span>),</span><br><span class="line">     (<span class="string">&#x27;王海&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="number">83</span>),</span><br><span class="line">     (<span class="string">&#x27;王海&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="number">93</span>),</span><br><span class="line">     (<span class="string">&#x27;陶俊&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="number">88</span>),</span><br><span class="line">     (<span class="string">&#x27;陶俊&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="number">84</span>),</span><br><span class="line">     (<span class="string">&#x27;陶俊&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="number">94</span>),</span><br><span class="line">     (<span class="string">&#x27;刘可&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="number">80</span>),</span><br><span class="line">     (<span class="string">&#x27;刘可&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="number">86</span>),</span><br><span class="line">     (<span class="string">&#x27;刘可&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="number">88</span>),</span><br><span class="line">     (<span class="string">&#x27;李春&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="number">89</span>),</span><br><span class="line">     (<span class="string">&#x27;李春&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="number">80</span>),</span><br><span class="line">     (<span class="string">&#x27;李春&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="number">87</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li>方法一：使用if <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    name <span class="keyword">as</span> 名字 ,</span><br><span class="line">    <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;语文&#x27;</span>,Fraction,<span class="number">0</span>)) <span class="keyword">as</span> 语文,</span><br><span class="line">    <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;数学&#x27;</span>,Fraction,<span class="number">0</span>))<span class="keyword">as</span> 数学, </span><br><span class="line">    <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;英语&#x27;</span>,Fraction,<span class="number">0</span>))<span class="keyword">as</span> 英语,</span><br><span class="line">    round(<span class="built_in">AVG</span>(Fraction),<span class="number">2</span>) <span class="keyword">as</span> 平均分,</span><br><span class="line">    <span class="built_in">SUM</span>(Fraction) <span class="keyword">as</span> 总分</span><br><span class="line"><span class="keyword">from</span> t_score <span class="keyword">group</span> <span class="keyword">by</span> name</span><br><span class="line"><span class="comment">-- 如果不用求总分的话，不需要下面的union</span></span><br><span class="line"><span class="keyword">union</span>(</span><br><span class="line">    <span class="keyword">select</span> name <span class="keyword">as</span> 名字 , <span class="built_in">sum</span>(语文) Chinese,<span class="built_in">sum</span>(数学) Math,<span class="built_in">sum</span>(英语) English,round(<span class="built_in">AVG</span>(总分),<span class="number">2</span>)<span class="keyword">as</span> 平均分,<span class="built_in">sum</span>(总分) score  <span class="keyword">from</span>(</span><br><span class="line">        <span class="keyword">select</span> <span class="string">&#x27;TOTAL&#x27;</span> <span class="keyword">as</span> name,</span><br><span class="line">        <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;语文&#x27;</span>,Fraction,<span class="number">0</span>)) <span class="keyword">as</span> 语文,</span><br><span class="line">        <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;数学&#x27;</span>,Fraction,<span class="number">0</span>))<span class="keyword">as</span> 数学, </span><br><span class="line">        <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;英语&#x27;</span>,Fraction,<span class="number">0</span>))<span class="keyword">as</span> 英语,</span><br><span class="line">        <span class="built_in">SUM</span>(Fraction) <span class="keyword">as</span> 总分</span><br><span class="line">        <span class="keyword">from</span> t_score <span class="keyword">group</span> <span class="keyword">by</span> Subject </span><br><span class="line">    )t <span class="keyword">GROUP</span> <span class="keyword">BY</span> t.`name`</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li>方法二：使用case <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">as</span> name,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Subject <span class="operator">=</span> <span class="string">&#x27;语文&#x27;</span> <span class="keyword">then</span> Fraction <span class="keyword">end</span>) <span class="keyword">as</span> Chinese,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Subject <span class="operator">=</span> <span class="string">&#x27;数学&#x27;</span> <span class="keyword">then</span> Fraction <span class="keyword">end</span>) <span class="keyword">as</span> Math,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Subject <span class="operator">=</span> <span class="string">&#x27;英语&#x27;</span> <span class="keyword">then</span> Fraction <span class="keyword">end</span>) <span class="keyword">as</span> English,</span><br><span class="line"><span class="built_in">sum</span>(fraction)<span class="keyword">as</span> score</span><br><span class="line"><span class="keyword">from</span> t_score <span class="keyword">group</span> <span class="keyword">by</span> name</span><br><span class="line"><span class="comment">-- 如果不用求总分的话，不需要下面的union</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> name <span class="keyword">as</span> Name,<span class="built_in">sum</span>(Chinese) <span class="keyword">as</span> Chinese,<span class="built_in">sum</span>(Math) <span class="keyword">as</span> Math,<span class="built_in">sum</span>(English) <span class="keyword">as</span> English,<span class="built_in">sum</span>(score) <span class="keyword">as</span> score <span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="string">&#x27;TOTAL&#x27;</span> <span class="keyword">as</span> name,</span><br><span class="line">    <span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Subject <span class="operator">=</span> <span class="string">&#x27;语文&#x27;</span> <span class="keyword">then</span> Fraction <span class="keyword">end</span>) <span class="keyword">as</span> Chinese,</span><br><span class="line">    <span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Subject <span class="operator">=</span> <span class="string">&#x27;数学&#x27;</span> <span class="keyword">then</span> Fraction <span class="keyword">end</span>) <span class="keyword">as</span> Math,</span><br><span class="line">    <span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Subject <span class="operator">=</span> <span class="string">&#x27;英语&#x27;</span> <span class="keyword">then</span> Fraction <span class="keyword">end</span>) <span class="keyword">as</span> English,</span><br><span class="line">    <span class="built_in">sum</span>(fraction)<span class="keyword">as</span> score</span><br><span class="line">    <span class="keyword">from</span> t_score <span class="keyword">group</span> <span class="keyword">by</span> Subject,name)t <span class="keyword">GROUP</span> <span class="keyword">BY</span> t.`name`</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
</li>
<li>方法三：使用with rollup<br>
在group分组字段的基础上在进行统计数据； <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="comment">-- coalesce(name,&#x27;TOTAL&#x27;) name,</span></span><br><span class="line">    ifnull(name,<span class="string">&#x27;TOTAL&#x27;</span>) name,</span><br><span class="line">    <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;语文&#x27;</span>,Fraction,<span class="number">0</span>)) <span class="keyword">as</span> 语文,</span><br><span class="line">    <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;英语&#x27;</span>,Fraction,<span class="number">0</span>)) <span class="keyword">as</span> 英语,</span><br><span class="line">    <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;数学&#x27;</span>,Fraction,<span class="number">0</span>))<span class="keyword">as</span> 数学,</span><br><span class="line">    <span class="built_in">sum</span>(Fraction) 总分</span><br><span class="line"><span class="keyword">from</span> t_score <span class="keyword">group</span> <span class="keyword">by</span> name <span class="keyword">with</span> <span class="keyword">rollup</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>二分法查找题</title>
    <url>/algorithm-dinary-search/</url>
    <content><![CDATA[<h3 id="1-第一个错误的版本"><a class="markdownIt-Anchor" href="#1-第一个错误的版本"></a> 1. 第一个错误的版本</h3>
<h3 id="11-题目描述"><a class="markdownIt-Anchor" href="#11-题目描述"></a> 1.1 题目描述</h3>
<p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。<br>
假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。<br>
你可以通过调用bool isBadVersion(version)接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。<br>
示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 5, bad = 4</span><br><span class="line">输出：4</span><br><span class="line">解释：</span><br><span class="line">    调用 isBadVersion(3) -&gt; false </span><br><span class="line">    调用 isBadVersion(5) -&gt; true </span><br><span class="line">    调用 isBadVersion(4) -&gt; true</span><br><span class="line">所以，4 是第一个错误的版本</span><br></pre></td></tr></table></figure>
<h3 id="12-解题思路"><a class="markdownIt-Anchor" href="#12-解题思路"></a> 1.2 解题思路</h3>
<p>当一个版本为正确版本，则该版本之前的所有版本均为正确版本；当一个版本为错误版本，则该版本之后的所有版本均为错误版本。我们可以利用这个性质进行二分查找。</p>
<p>具体地，将左右边界分别初始化为 1和 n ，其中 n 是给定的版本数量。设定左右边界之后，每次我们都依据左右边界找到其中间的版本，检查其是否为正确版本。如果该版本为正确版本，那么第一个错误的版本必然位于该版本的右侧，我们缩紧左边界；否则第一个错误的版本必然位于该版本及该版本的左侧，我们缩紧右边界。<br>
这样我们每判断一次都可以缩紧一次边界，而每次缩紧时两边界距离将变为原来的一半，因此我们至多只需要缩紧 O(logn) 次。</p>
<h3 id="13-代码"><a class="markdownIt-Anchor" href="#13-代码"></a> 1.3 代码</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">1</span>, right = n;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;    <span class="comment">// 防止计算时溢出</span></span><br><span class="line">        <span class="keyword">if</span> (isBadVersion(mid))&#123;</span><br><span class="line">            <span class="comment">// 答案在区间 [left, mid] 中</span></span><br><span class="line">           right = mid; <span class="comment">//如果中间版本是错误的版本，那么它之后的都是错误的;</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 答案在区间 [mid+1, right] 中</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此时有 left == right,退出了while循环</span></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql添加/修改/删除字段</title>
    <url>/mysql-column/</url>
    <content><![CDATA[<h3 id="1-添加字段"><a class="markdownIt-Anchor" href="#1-添加字段"></a> 1. 添加字段</h3>
<h4 id="11-在末尾添加字段"><a class="markdownIt-Anchor" href="#11-在末尾添加字段"></a> 1.1 在末尾添加字段</h4>
<p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>
<p>语法格式的说明：</p>
<ul>
<li>&lt;表名&gt; 为数据表的名字；</li>
<li>&lt;字段名&gt; 为所要添加的字段的名字；</li>
<li>&lt;数据类型&gt; 为所要添加的字段能存储数据的数据类型；</li>
<li>[约束条件] 是可选的，用来对添加的字段进行约束。</li>
<li>这种语法格式默认在表的最后位置（最后一列的后面）添加新字段</li>
</ul>
<p>2）示例：在user表末尾添加字段phone</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> phone <span class="type">VARCHAR</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;电话号码&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="12-在开头添加字段"><a class="markdownIt-Anchor" href="#12-在开头添加字段"></a> 1.2 在开头添加字段</h4>
<p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [约束条件] <span class="keyword">FIRST</span>;</span><br></pre></td></tr></table></figure>
<p>FIRST 关键字一般放在语句的末尾<br>
2）示例：在user表开头添加字段user_id</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> user_id <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户主键&#x27;</span> <span class="keyword">FIRST</span>;</span><br></pre></td></tr></table></figure>
<h4 id="13-在中间添加字段"><a class="markdownIt-Anchor" href="#13-在中间添加字段"></a> 1.3 在中间添加字段</h4>
<p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [约束条件] AFTER <span class="operator">&lt;</span>已经存在的字段名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<p>AFTER 的作用是将新字段添加到某个已有字段后面。<br>
注意：只能在某个已有字段的后面添加新字段，不能在它的前面添加新字段</p>
<p>2）示例：在user表的user_id字段后添加username字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> username <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span> AFTER `user_id`;</span><br></pre></td></tr></table></figure>
<h3 id="2-修改字段"><a class="markdownIt-Anchor" href="#2-修改字段"></a> 2. 修改字段</h3>
<h4 id="21-修改字段属性"><a class="markdownIt-Anchor" href="#21-修改字段属性"></a> 2.1 修改字段属性</h4>
<p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> MODIFY <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>
<p>2）示例1：修改字段属性</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将email字段VARCHAR(50)修改成VARCHAR(200)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> MODIFY email <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;email@163.com&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>注意：修改时如果不带完整性约束条件，原有的约束条件将丢失，如果想保留修改时就得带上完整性约束条件</p>
<p>3）示例2： 将email移到phone后面</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> MODIFY email <span class="type">VARCHAR</span>(<span class="number">50</span>) AFTER `phone`;</span><br></pre></td></tr></table></figure>
<p>4）示例3：放置第一个，保留原完成性约束条件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>`MODIFY email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;test@163.com&#x27;</span> <span class="keyword">FIRST</span>;</span><br></pre></td></tr></table></figure>
<p>5）示例4：修改成大小写敏感，即查询区分大小写</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> MODIFY username <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="type">BINARY</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="22-修改字段名称和属性"><a class="markdownIt-Anchor" href="#22-修改字段名称和属性"></a> 2.2 修改字段名称和属性</h4>
<p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> CHANGE <span class="operator">&lt;</span>原字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>新字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>
<p>2）示例：将username字段修改成user_name</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> CHANGE username user_name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="23-添加-删除默认值"><a class="markdownIt-Anchor" href="#23-添加-删除默认值"></a> 2.3 添加、删除默认值</h4>
<p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加默认值</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="operator">&lt;</span>默认值<span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除默认值</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure>
<p>2）示例：给sex添加默认值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">ALTER</span> sex <span class="keyword">SET</span> <span class="keyword">DEFAULT</span>  <span class="string">&#x27;难&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>3）示例：删除sex默认值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ALTER</span> sex <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure>
<h4 id="24-添加-删除主键"><a class="markdownIt-Anchor" href="#24-添加-删除主键"></a> 2.4 添加、删除主键</h4>
<ol>
<li>语法：</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span>] <span class="keyword">PRIMARY</span> KEY (<span class="operator">&lt;</span>字段名称,...<span class="operator">&gt;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>
<p>2）示例：添加主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span>  KEY (user_id)</span><br></pre></td></tr></table></figure>
<p>3）示例：添加复合主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>  user_role <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (user_id, role_id);</span><br></pre></td></tr></table></figure>
<p>4）示例：删除主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>
<p>5）示例：删除带自增长属性的主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先用MODIFY删除自增长属性，注意MODIFY不能去掉主键属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test MODIFY id <span class="type">INT</span> UNSIGNED;</span><br><span class="line"><span class="comment">-- 再来删除主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>
<h4 id="25-添加-删除唯一索引"><a class="markdownIt-Anchor" href="#25-添加-删除唯一索引"></a> 2.5 添加、删除唯一索引</h4>
<p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加唯一性约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> [CONSTANT <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span>] <span class="keyword">UNIQUE</span> [INDEX <span class="operator">|</span> KEY] [索引名称](<span class="operator">&lt;</span>字段名称,...<span class="operator">&gt;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除唯一性约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">DROP</span> [INDEX <span class="operator">|</span> KEY] [索引名称];</span><br></pre></td></tr></table></figure>
<p>2）示例：为username添加唯一性约束，如果没有指定索引名称，系统会以字段名建立索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(username);</span><br></pre></td></tr></table></figure>
<p>3）示例：为username添加唯一性约束，并指定索引名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">UNION</span> KEY uni_username(username);</span><br></pre></td></tr></table></figure>
<p>4）示例：查看索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<p>5）示例：添加联合UNIQUE</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> INDEX uni_nickname_username(nickname, username);</span><br></pre></td></tr></table></figure>
<p>6）示例：删除索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">DROP</span> INDEX username;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">DROP</span> KEY uni_username;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">DROP</span> INDEX uni_nickname_username;</span><br></pre></td></tr></table></figure>
<h4 id="26-修改表的存储引擎"><a class="markdownIt-Anchor" href="#26-修改表的存储引擎"></a> 2.6 修改表的存储引擎</h4>
<p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> ENGINE<span class="operator">=</span><span class="operator">&lt;</span>存储引擎名称<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<p>2）示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> ENGINE<span class="operator">=</span>MyISAM;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> ENGINE<span class="operator">=</span>INNODB;</span><br></pre></td></tr></table></figure>
<h4 id="27-修改自增长值"><a class="markdownIt-Anchor" href="#27-修改自增长值"></a> 2.7 修改自增长值</h4>
<p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> AUTO_INCREMENT<span class="operator">=</span>[值];</span><br></pre></td></tr></table></figure>
<p>2）示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> AUTO_INCREMENT<span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure>
<p>博客原文链接：<a href="https://www.cnblogs.com/Jimc/p/12979319.html">https://www.cnblogs.com/Jimc/p/12979319.html</a><br>
如有侵权，请联系删除！</p>
]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>TIDB设置sql_mode</title>
    <url>/sql-model/</url>
    <content><![CDATA[<h3 id="1-使用命令查询当前sql_mode"><a class="markdownIt-Anchor" href="#1-使用命令查询当前sql_mode"></a> 1. 使用命令查询当前sql_mode</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@sql</span>_mode</span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@GLOBAL</span>.sql_mode</span><br></pre></td></tr></table></figure>
<p><img src="/sql-model/1.png" alt="sql_mode"></p>
<h5 id="sql_mode常用值"><a class="markdownIt-Anchor" href="#sql_mode常用值"></a> sql_mode常用值：</h5>
<ul>
<li>
<p>ONLY_FULL_GROUP_BY<br>
对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中</p>
</li>
<li>
<p>NO_AUTO_VALUE_ON_ZERO<br>
该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。</p>
</li>
<li>
<p>STRICT_TRANS_TABLES<br>
在该模式下，如果一个值不能插入到一个事务中，则中断当前的操作，对非事务表不做限制</p>
</li>
<li>
<p>NO_ZERO_IN_DATE<br>
在严格模式下，不允许日期和月份为零</p>
</li>
<li>
<p>NO_ZERO_DATE<br>
设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告</p>
</li>
<li>
<p>ERROR_FOR_DIVISION_BY_ZERO<br>
在insert或update过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时Mysql返回NULL</p>
</li>
<li>
<p>NO_AUTO_CREATE_USER<br>
禁止GRANT创建密码为空的用户</p>
</li>
<li>
<p>NO_ENGINE_SUBSTITUTION<br>
如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常</p>
</li>
<li>
<p>PIPES_AS_CONCAT<br>
将&quot;||&quot;视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样是，也和字符串的拼接函数Concat想类似</p>
</li>
<li>
<p>ANSI_QUOTES<br>
启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</p>
</li>
</ul>
<h3 id="2-临时设置新session仍然使用之前的sql_mode"><a class="markdownIt-Anchor" href="#2-临时设置新session仍然使用之前的sql_mode"></a> 2. 临时设置（新session仍然使用之前的sql_mode）</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> sql_mode<span class="operator">=</span>‘ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES’;</span><br></pre></td></tr></table></figure>
<h3 id="3-全局设置新session仍然使用修改后的sql_mode"><a class="markdownIt-Anchor" href="#3-全局设置新session仍然使用修改后的sql_mode"></a> 3. 全局设置（新session仍然使用修改后的sql_mode）</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @<span class="variable">@global</span>.sql_mode<span class="operator">=</span><span class="string">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE‘；</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>tidb</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装mysql</title>
    <url>/docker-mysql/</url>
    <content><![CDATA[<h5 id="1查看所有的镜像"><a class="markdownIt-Anchor" href="#1查看所有的镜像"></a> 1.查看所有的镜像</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>
<p><img src="/docker-mysql/1.png" alt></p>
<h5 id="2拉取最新版本的镜像"><a class="markdownIt-Anchor" href="#2拉取最新版本的镜像"></a> 2.拉取最新版本的镜像</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">或者指定版本</span></span><br><span class="line">docker pull mysql:8.0.16</span><br></pre></td></tr></table></figure>
<p><img src="/docker-mysql/2.png" alt></p>
<h5 id="3创建数据目录和配置文件"><a class="markdownIt-Anchor" href="#3创建数据目录和配置文件"></a> 3.创建数据目录和配置文件</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/mysql/conf /usr/mysql/data</span><br><span class="line"></span><br><span class="line">chmod -R 777 /usr/mysql/</span><br></pre></td></tr></table></figure>
<h5 id="4创建配置文件"><a class="markdownIt-Anchor" href="#4创建配置文件"></a> 4.创建配置文件</h5>
<p>在上面创建的配置文件目录/usr/mysql/conf下创建MySQL的配置文件my.cnf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch my.cnf;</span><br><span class="line"></span><br><span class="line">vim /usr/mysql/conf/my.cnf;</span><br></pre></td></tr></table></figure>
<p>添加以下内容到上述创建的配置文件中</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[client]</span></span><br><span class="line"><span class="comment">#socket = /usr/mysql/mysqld.sock</span></span><br><span class="line"><span class="meta">default-character-set</span> = <span class="string">utf8mb4</span></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment">#pid-file        = /var/run/mysqld/mysqld.pid</span></span><br><span class="line"><span class="comment">#socket          = /var/run/mysqld/mysqld.sock</span></span><br><span class="line"><span class="comment">#datadir         = /var/lib/mysql</span></span><br><span class="line"><span class="comment">#socket = /usr/mysql/mysqld.sock</span></span><br><span class="line"><span class="comment">#pid-file = /usr/mysql/mysqld.pid</span></span><br><span class="line"><span class="attr">datadir</span> = <span class="string">/usr/mysql/data</span></span><br><span class="line"><span class="attr">character_set_server</span> = <span class="string">utf8mb4</span></span><br><span class="line"><span class="attr">collation_server</span> = <span class="string">utf8mb4_bin</span></span><br><span class="line"><span class="meta">secure-file-priv</span>= <span class="string">NULL</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line"><span class="meta">symbolic-links</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># Custom config should go here</span></span><br><span class="line"><span class="comment">!includedir /etc/mysql/conf.d/</span></span><br></pre></td></tr></table></figure>
<h5 id="5启动创建容器"><a class="markdownIt-Anchor" href="#5启动创建容器"></a> 5.启动创建容器</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql</span><br></pre></td></tr></table></figure>
<p>参数解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">–name mysql5.7 容器别名</span><br><span class="line">-p 3307:3306 映射容器端口号和宿主机端口号（本机3307端口映射容器3306端口）</span><br><span class="line">-v /data/mysql/datadir:/var/lib/mysql 目录映射（挂载宿主机目录和 docker容器中的目录，前面是宿主机目录，后面是容器内部目录）</span><br><span class="line">-v /data/mysql/conf.d:/etc/mysql/conf.d 目录映射（mysql配置目录）</span><br><span class="line">-d 后台运行</span><br><span class="line">-e 环境参数，MYSQL_ROOT_PASSWORD设置root用户的密码</span><br></pre></td></tr></table></figure>
<p><img src="/docker-mysql/3.png" alt="启动创建容器"><br>
执行上述命令后，执行查询容器的命令就可以看到创建的mysql容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<p><img src="/docker-mysql/4.png" alt="启动创建容器"></p>
<h5 id="常见问题"><a class="markdownIt-Anchor" href="#常见问题"></a> 常见问题</h5>
<h6 id="1远程无法链接"><a class="markdownIt-Anchor" href="#1远程无法链接"></a> 1.远程无法链接</h6>
<p>上述虽然安装好了mysql，但是使用远程的Navicat连接时提示错误，不能正确连接mysql，此时需要修改按照下面说的步骤修改一下mysql的密码模式以及主机等内容才可以。<br>
修改mysql密码以及可访问主机</p>
<ol>
<li>进入容器内部 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure>
</li>
<li>连接mysql <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>
</li>
<li>使用mysql库 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure>
</li>
<li>修改访问主机以及密码等，设置为所有主机可访问 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">注意： mysql_native_password，mysql8.x版本必须使用这种模式，否则navicate无法正确连接</span></span><br></pre></td></tr></table></figure>
</li>
<li>刷新 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">exit;</span><br></pre></td></tr></table></figure>
</li>
<li>远程使用Navicat连接数据库<br>
<img src="/docker-mysql/5.png" alt="连接"></li>
</ol>
<h6 id="2docker启动mysql容器报错"><a class="markdownIt-Anchor" href="#2docker启动mysql容器报错"></a> 2.docker启动mysql容器报错</h6>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql</span><br></pre></td></tr></table></figure>
<p>启动时提示：Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: Running hook #0:: error running hook: signal: segmentation fault (core dumped), stdout: , stderr:: unknown</p>
<p><img src="/docker-mysql/6.png" alt><br>
解决方式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum upgrade</span><br></pre></td></tr></table></figure>
<p>或者可以试下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/mysql/conf/my.cnf</span><br><span class="line">touch /usr/mysql/conf/my.cnf</span><br><span class="line">vim my.cnf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">然后重新配置一下</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装</title>
    <url>/docker-01/</url>
    <content><![CDATA[<p>新的服务器没有安装docker，使用docker命令时提示：docker: command not found错误信息</p>
<h5 id="1-更新yum包"><a class="markdownIt-Anchor" href="#1-更新yum包"></a> 1. 更新yum包</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure>
<h5 id="2安装依赖软件包"><a class="markdownIt-Anchor" href="#2安装依赖软件包"></a> 2.安装依赖软件包</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>
<h5 id="3设置yum源"><a class="markdownIt-Anchor" href="#3设置yum源"></a> 3.设置yum源</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<h5 id="4安装docker"><a class="markdownIt-Anchor" href="#4安装docker"></a> 4.安装docker</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">默认安装最新的docker稳定版本。</span></span><br><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure>
<h5 id="5启动docker服务"><a class="markdownIt-Anchor" href="#5启动docker服务"></a> 5.启动docker服务</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<h5 id="6设置开机自启动"><a class="markdownIt-Anchor" href="#6设置开机自启动"></a> 6.设置开机自启动</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>
<h5 id="7-查看docker版本信息"><a class="markdownIt-Anchor" href="#7-查看docker版本信息"></a> 7. 查看docker版本信息</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>
<p><img src="/docker-01/1.png" alt="查看docker版本"><br>
至此，解决。</p>
<h5 id="8-停止所有容器"><a class="markdownIt-Anchor" href="#8-停止所有容器"></a> 8. 停止所有容器</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps -a | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装nginx</title>
    <url>/docker-nginx/</url>
    <content><![CDATA[<h5 id="1查看所有的镜像"><a class="markdownIt-Anchor" href="#1查看所有的镜像"></a> 1.查看所有的镜像</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure>
<p><img src="/docker-nginx/1.png" alt></p>
<h5 id="2拉取最新版本的镜像"><a class="markdownIt-Anchor" href="#2拉取最新版本的镜像"></a> 2.拉取最新版本的镜像</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">或者指定最新版本</span></span><br><span class="line">docker pull nginx:latest</span><br></pre></td></tr></table></figure>
<p><img src="/docker-nginx/2.png" alt></p>
<h5 id="3使用命令查看本地镜像确定nginx镜像已下载到本地"><a class="markdownIt-Anchor" href="#3使用命令查看本地镜像确定nginx镜像已下载到本地"></a> 3.使用命令查看本地镜像，确定nginx镜像已下载到本地</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p><img src="/docker-nginx/3.png" alt></p>
<h5 id="4-创建挂载目录"><a class="markdownIt-Anchor" href="#4-创建挂载目录"></a> 4. 创建挂载目录</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/nginx/&#123;conf,conf.d,html,logs&#125;</span><br></pre></td></tr></table></figure>
<h5 id="5-创建配置文件"><a class="markdownIt-Anchor" href="#5-创建配置文件"></a> 5. 创建配置文件</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch nginx.cnf</span><br></pre></td></tr></table></figure>
<h5 id="6-nginx详情配置请参考httpsxiaoyugework20211205nginx-02"><a class="markdownIt-Anchor" href="#6-nginx详情配置请参考httpsxiaoyugework20211205nginx-02"></a> 6. Nginx详情配置请参考：<a href="https://xiaoyuge.work/2021/12/05/nginx-02/">https://xiaoyuge.work/2021/12/05/nginx-02/</a></h5>
<h5 id="7-查看容器"><a class="markdownIt-Anchor" href="#7-查看容器"></a> 7. 查看容器</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker stop xxx  停止某个容器运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker rm xxx  删除容器</span></span><br></pre></td></tr></table></figure>
<p><img src="/docker-nginx/6.png" alt="查看容器"></p>
<h5 id="8启动容器挂载配置文件"><a class="markdownIt-Anchor" href="#8启动容器挂载配置文件"></a> 8.启动容器，挂载配置文件</h5>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mynginx -d -p 80:80 -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /data/nginx/logs:/var/log/nginx -d docker.io/nginx</span><br></pre></td></tr></table></figure>
<p>可以通过命令docker exec -it nginx-test bash进入容器内容修改配置</p>
<p><img src="/docker-nginx/4.png" alt></p>
<h5 id="9安装完毕访问地址-httplocalhost8080出现如下内容安装成功"><a class="markdownIt-Anchor" href="#9安装完毕访问地址-httplocalhost8080出现如下内容安装成功"></a> 9.安装完毕，访问地址 <a href="http://localhost:8080">http://localhost:8080</a>，出现如下内容，安装成功！！！</h5>
<p><img src="/docker-nginx/5.png" alt></p>
<h5 id="10域名解析配置"><a class="markdownIt-Anchor" href="#10域名解析配置"></a> 10.域名解析配置</h5>
<p>我买的是阿里云的服务器以及域名，上面操作后，忘记在阿里云控制台中去配置<br>
<img src="/docker-nginx/7.png" alt><br>
<img src="/docker-nginx/8.png" alt="域名解析"></p>
<h5 id="11配置多个二级域名"><a class="markdownIt-Anchor" href="#11配置多个二级域名"></a> 11.配置多个二级域名</h5>
<p>在第8步的时候将docker容器中的nginx配置映射到了目录/data/nginx/conf下面；<br>
修改nginx.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    #gzip  on;</span><br><span class="line">    </span><br><span class="line">    #引入conf.d下面所有的配置文件</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在conf.d目录下面创建了两个子域名反向代理配置文件,其他的域名代理相同，只要改server_name和proxy_pass代理端口，配置文件需以.conf结尾<br>
<img src="/docker-nginx/8.png" alt="域名解析"></p>
<ul>
<li>
<p>note.xiaoyuge520.vip.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">########   Nginx的main(全局配置)文件</span><br><span class="line">#指定nginx运行的用户及用户组,默认为nobody</span><br><span class="line">#user  nobody;</span><br><span class="line">#开启的线程数，一般跟逻辑CPU核数一致</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">#设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式</span><br><span class="line">#use epoll;</span><br><span class="line">    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">#######Nginx的Http服务器配置,Gzip配置</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #开启高效文件传输模式</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    ########Nginx的server虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #监听端口为 80</span><br><span class="line">        listen       80;</span><br><span class="line">        #设置主机域名</span><br><span class="line">        server_name  note.xiaoyuge520.vip;</span><br><span class="line">        #设置访问的语言编码</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        #设置虚拟主机的基本信息</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_set_header  Host  $http_host;</span><br><span class="line">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://47.101.130.163:8086/note; # 代理ip:端口</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>record.xiaoyuge520.vip.conf</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">#######Nginx的Http服务器配置,Gzip配置</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  record.xiaoyuge520.vip;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_set_header  Host  $http_host;</span><br><span class="line">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://47.101.130.163:8888/record; # 代理ip:端口</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>如果挂载之后容器运行正常却依然不能通过域名访问可尝试以下操作</strong></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看所有容器,获取nginx的container 名称</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">向名称为nginx的容器发送脚本命令, mynginx 为容器名称</span></span><br><span class="line">docker exec -it mynginx /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重新加载配置命令</span></span><br><span class="line">cd /etc/nginx/conf.d</span><br><span class="line">service nginx reload</span><br><span class="line"><span class="meta">#</span><span class="bash">检查配置文件路径是否正确</span></span><br></pre></td></tr></table></figure>
<p><strong>每一次更改配置文件都需要重启容器</strong></p>
<h2 id="-code11-"><a class="markdownIt-Anchor" href="#-code11-"></a> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重启nginx容器</span></span><br><span class="line">docker restart nginx </span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看容器状态</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果挂载失败，查看nginx容器<span class="built_in">log</span>,显示错误信息，根据错误信息 更改配置文件等</span></span><br><span class="line">docker logs -t nginx</span><br></pre></td></tr></table></figure></h2>
<p>以上配置完成之后能够通过域名访问网站，但是css样式却被nginx解析成text/plain，打开控制台可看到warn信息</p>
<p><strong>解决nginx将css文件解析为text/plain</strong></p>
<ul>
<li>
<p>方法一： ngin.conf中http添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include       /etc/nginx/mime.types;</span><br><span class="line">default_type  application/octet-stream;</span><br></pre></td></tr></table></figure>
<p>注：此办法并不能使我网站的css正确解析，因为在拷贝nginx镜像中的原配置文件时，就已经添加mime.types了。却依然不能正确解析。</p>
</li>
<li>
<p>方法二：解析成功，原因未知</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">将index.html中<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>去掉。</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>通过域名访问：成功！！</p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx基础篇（二）安装</title>
    <url>/nginx-02/</url>
    <content><![CDATA[<h2 id="1nginx安装"><a class="markdownIt-Anchor" href="#1nginx安装"></a> 1.Nginx安装</h2>
<ol>
<li>
<p>安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep <span class="string">&quot;软件或者包的名字&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep <span class="string">&quot;软件或者包的名字&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep <span class="string">&quot;软件名或者包名&quot;</span></span></span><br><span class="line">yum list installed | grep &quot;gcc&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/nginx-02/image-20201210100736952.png" alt="image-20201210103251475"></p>
</li>
<li>
<p>安装依赖包</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>下载并解压安装包</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//创建nginx存放文件夹</span><br><span class="line">cd /usr/local</span><br><span class="line"><span class="meta">#</span><span class="bash">下载tar包</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.23.2.tar.gz</span><br><span class="line">tar -xvf nginx-1.23.2.tar.gz</span><br><span class="line">mv nginx-1.23.2 nginx</span><br><span class="line"><span class="meta">#</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd nginx</span><br><span class="line">mkdir logs</span><br><span class="line">./configure  --prefix=/usr/local/nginx</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>测试是否安装成功</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx</span><br><span class="line">./sbin/nginx -t</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置nginx.conf</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">/usr/local/nginx/cong/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改如下</span></span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">  <span class="string">listen</span> <span class="number">80</span><span class="string">;</span></span><br><span class="line">  <span class="string">server_name</span> <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 注意设定 root路径是有dist的</span></span><br><span class="line">  <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">    <span class="string">root</span> <span class="string">/usr/local/webapp/dist;</span></span><br><span class="line">    <span class="string">index</span> <span class="string">/index.html;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#跨域 ip和port自行替换</span></span><br><span class="line">  <span class="string">location</span> <span class="string">/adminApi</span> &#123;</span><br><span class="line">    <span class="string">proxy_pass</span> <span class="string">http://ip:port;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动nginx</span></span><br><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>常见问题</p>
<ol>
<li>nginx启动提示：nginx: [emerg] bind() to 0.0.0.0:8080 failed (98: Address already in use)</li>
</ol>
<ul>
<li>修改端口  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#首先进入nginx/conf目录（根据自己的目录来写）</span><br><span class="line"># vi /usr/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">#修改nginx.conf，将8080端口修改为其他端口号</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更换端口之后，然后重启nginx就可以了</span><br><span class="line">server &#123;</span><br><span class="line">    listen       8888;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>取消占用端口号进程  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看被占用的端口</span></span><br><span class="line">netstat -nlp|grep :8080</span><br><span class="line">tcp      0     0 0.0.0.0:8888       0.0.0.0:*          LISTEN     24594/nginx: master</span><br><span class="line"><span class="meta">#</span><span class="bash">结束进程24594</span></span><br><span class="line">kill -9 24594</span><br><span class="line"><span class="meta">#</span><span class="bash">然后再重启nginx就可以了</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>常用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改配置后重新启动</span></span><br><span class="line">./nginx -s reload</span><br><span class="line"><span class="meta">#</span><span class="bash">如果出现：nginx: [error] open() ＂/usr/<span class="built_in">local</span>/nginx/logs/nginx.pid＂ failed</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">再次启动即可</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看nginx进程是否启动</span></span><br><span class="line">ps -ef|grep nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">平滑启动nginx</span></span><br><span class="line">kill -HUP</span><br><span class="line"><span class="meta">#</span><span class="bash">主进程号或进程号文件路径 或者使用</span></span><br><span class="line"></span><br><span class="line">/usr/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">判断Nginx配置是否正确命令如下：</span></span><br><span class="line">nginx -t -c /usr/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">或者使用</span></span><br><span class="line">/usr/nginx/sbin/nginx -t</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">nginx reload</span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload </span><br><span class="line">service nginx restart</span><br><span class="line"><span class="meta">#</span><span class="bash">检查 nginx.conf 配置文件是否有错</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -t</span><br><span class="line"><span class="meta">#</span><span class="bash">nginx启动命令:</span></span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">指定配置文件启动</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭命令:</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line"><span class="meta">#</span><span class="bash">重启命令:</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">./nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭</span></span><br><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure>
<p><img src="/nginx-02/image-20210606160947369.png" alt="image-20201210103251475"></p>
<p>启动后访问localhost 效果如下：<br>
<img src="/nginx-02/image-20201210103251475.png" alt="image-20201210103251475"></p>
</li>
</ol>
<h2 id="2nginx配置"><a class="markdownIt-Anchor" href="#2nginx配置"></a> 2.Nginx配置</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...... 全局块</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">true//events 块</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##数据库配置</span></span></span><br><span class="line">stream &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">       listen 3306;</span><br><span class="line">       proxy_pass db;    </span><br><span class="line">    &#125;</span><br><span class="line">    upstream db &#123;</span><br><span class="line">       server 192.168.18.130:3305;</span><br><span class="line">       server 192.168.18.129:3305;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http&#123;</span><br><span class="line">    ##http全局块</span><br><span class="line">true  server+&#123;</span><br><span class="line">truetruelocation +[]</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="21配置内容规则"><a class="markdownIt-Anchor" href="#21配置内容规则"></a> 2.1配置内容规则</h3>
<p>官网配置教程：<a href="https://nginx.org/en/docs/dirindex.html">https://nginx.org/en/docs/dirindex.html</a><br>
变量应用：<a href="https://nginx.org/en/docs/varindex.html">https://nginx.org/en/docs/varindex.html</a></p>
<ul>
<li>用#表示注释</li>
<li>每行配置的结尾需要加上分号</li>
<li>如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或者双引号行括住配置项值，否则ngin x会报语法错误</li>
<li>单位简写：
<ul>
<li>K或者k千字节（kilo byte, KB）</li>
<li>M或者m兆字节（megabyte MB）</li>
<li>ms(毫秒)，s(秒)， m(分)， h(小时) ， d (天)， w（周）， M（月，包含30天），y（年）</li>
</ul>
</li>
</ul>
<h3 id="22-详细配置内容"><a class="markdownIt-Anchor" href="#22-详细配置内容"></a> 2.2 详细配置内容</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">########   Nginx的main(全局配置)文件</span><br><span class="line">#指定nginx运行的用户及用户组,默认为nobody</span><br><span class="line">#user  nobody;</span><br><span class="line"></span><br><span class="line">#开启的线程数，一般跟逻辑CPU核数一致</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#定位全局错误日志文件，级别以notice显示，还有debug,info,warn,error,crit模式，debug输出最多，crir输出最少，根据实际环境而定</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#指定进程id的存储文件位置</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制</span><br><span class="line">#worker_rlimit_nofile 65535</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式</span><br><span class="line">    #use epoll;</span><br><span class="line"></span><br><span class="line">    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">###数据库的负载均衡</span><br><span class="line">stream &#123;</span><br><span class="line">  upstream mysql_nginx &#123;</span><br><span class="line">      hash $remote_addr consistent;</span><br><span class="line">      server 192.168.18.128:3306 weight=5 max_fails=3 fail_timeout=30s;</span><br><span class="line">      server 192.168.18.129:3306;</span><br><span class="line">      server 192.168.18.130:3306;</span><br><span class="line">      ##last_conn; #最小连接</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">      listen 3306; # 数据库服务器监听端口</span><br><span class="line">      proxy_connect_timeout 10s;</span><br><span class="line">      proxy_timeout 300s; # 设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。</span><br><span class="line">      proxy_pass mysql_nginx;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#######Nginx的Http服务器配置,Gzip配置</span><br><span class="line">http &#123;</span><br><span class="line">    #主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度，DNS主配置文件中的zonerfc1912,acl基本上都是用include语句。</span><br><span class="line">    include       mime.types;</span><br><span class="line"></span><br><span class="line">    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #下面代码为日志格式的设定，main为日志格式的名称，可自行设置，后面引用</span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #引用日志main， main是log-format的格式，在上面配置了；后面可以加上日志缓冲区大小，写满了就flush到磁盘中buffer = 1M;</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    #设置允许客户端请求的最大的单个文件字节数</span><br><span class="line">    #client_max_body_size 20M;</span><br><span class="line">    #指定来自客户端请求头的headebuffer大小</span><br><span class="line">    #client_header_buffer_size  32k;</span><br><span class="line">    #指定连接请求试图写入缓存文件的目录路径</span><br><span class="line">    #client_body_temp_path /dev/shm/client_body_temp;</span><br><span class="line">    #指定客户端请求中较大的消息头的缓存最大数量和大小，目前设置为4个32KB</span><br><span class="line">    #large client_header_buffers 4 32k;</span><br><span class="line"></span><br><span class="line">    #开启高效文件传输模式</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #开启防止网络阻塞</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    #开启防止网络阻塞</span><br><span class="line">    #tcp_nodelay    on;</span><br><span class="line"></span><br><span class="line">    #设置客户端连接保存活动的超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #设置客户端请求读取超时时间</span><br><span class="line">    #client_header_timeout 10;</span><br><span class="line">    #设置客户端请求主体读取超时时间</span><br><span class="line">    #client_body_timeout 10;</span><br><span class="line">    #用于设置相应客户端的超时时间</span><br><span class="line">    #send_timeout</span><br><span class="line"></span><br><span class="line">    ####HttpGZip模块配置</span><br><span class="line">    #httpGzip modules</span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    #gzip  on;</span><br><span class="line">    #设置允许压缩的页面最小字节数</span><br><span class="line">    #gzip_min_length 1k;</span><br><span class="line">    #申请4个单位为16K的内存作为压缩结果流缓存</span><br><span class="line">    #gzip_buffers 4 16k;</span><br><span class="line">    #设置识别http协议的版本，默认为1.1</span><br><span class="line">    #gzip_http_version 1.1;</span><br><span class="line">    #指定gzip压缩比，1-9数字越小，压缩比越小，速度越快</span><br><span class="line">    #gzip_comp_level 2;</span><br><span class="line">    #指定压缩的类型</span><br><span class="line">    #gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class="line">    #让前端的缓存服务器进过gzip压缩的页面</span><br><span class="line">    #gzip_vary on;</span><br><span class="line"></span><br><span class="line">    #########Nginx的server虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #监听端口为 80</span><br><span class="line">        listen       80;</span><br><span class="line"></span><br><span class="line">        #设置主机域名</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #设置访问的语言编码</span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        #设置虚拟主机的基本信息</span><br><span class="line">        location / &#123;</span><br><span class="line">            #设置虚拟主机的网站根目录</span><br><span class="line">            root   html;</span><br><span class="line"></span><br><span class="line">            #设置虚拟主机默认访问的网页</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="23-日志"><a class="markdownIt-Anchor" href="#23-日志"></a> 2.3 日志</h3>
<p>在nginx同级目录下logs文件夹</p>
<ul>
<li>access.log  正常日志</li>
<li>error.log 错误日期</li>
</ul>
<p>需要在nginx.conf中的http模块配置access_log</p>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx基础篇（三）实现虚拟主机</title>
    <url>/nginx-03/</url>
    <content><![CDATA[<h3 id="1-虚拟主机virtual-host"><a class="markdownIt-Anchor" href="#1-虚拟主机virtual-host"></a> 1. 虚拟主机Virtual Host</h3>
<p>一种在单一主机或主机群上，实现多网域服务的方法，可以运行多个网站或服务的技术，虚拟主机之间完全独立，并可由用户自行管理虚拟并非指不存在，而是指空间是由实体的服务器延伸而来，其硬件系统可以是基于服务器群，或者单个服务器</p>
<p>使用域名访问虚拟主机，虚拟主机会给一个文件路径，然后部署自己的内容；访问域名时就会访问改文件夹下的某 个资源</p>
<h3 id="2-使用nginx配置虚拟主机"><a class="markdownIt-Anchor" href="#2-使用nginx配置虚拟主机"></a> 2. 使用Nginx配置虚拟主机</h3>
<ol>
<li>
<p>在nginx下建立一个ygb的文件夹，里面新建一个index.html</p>
</li>
<li>
<p>在nginx.conf配置下http -&gt; server块内配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    #监听端口为 80</span><br><span class="line">    listen       80;</span><br><span class="line">    #设置主机域名</span><br><span class="line">    server_name  www.xiaoyuge.work;</span><br><span class="line">    #设置访问的语言编码</span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line">   </span><br><span class="line">    #    这个是域名反问的虚拟主机的文件路径</span><br><span class="line">    root  /usr/local/nginx/data/ygb</span><br><span class="line">    #设置虚拟主机的基本信息</span><br><span class="line">    location / &#123;</span><br><span class="line">        #设置虚拟主机默认访问的网页</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动,然后在浏览器访问域名www.xiaoyuge.work</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -c ./nginx.conf</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx基础篇（四）Nginx实现反向代理</title>
    <url>/nginx-04/</url>
    <content><![CDATA[<h3 id="1-正向代理和反向代理"><a class="markdownIt-Anchor" href="#1-正向代理和反向代理"></a> 1. 正向代理和反向代理</h3>
<ol>
<li>
<p>正向代理：<br>
正向代理类似一个跳板机，代理访问外部资源<br>
比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了<br>
<img src="/nginx-04/1.png" alt="正向代理"></p>
<p><strong>正向代理的用途</strong>：</p>
<p>（1）访问原来无法访问的资源，如google</p>
<p>（2） 可以做缓存，加速访问资源</p>
<p>（3）对客户端访问授权，上网进行认证</p>
<p>（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p>
<p><strong>正向代理即是客户端代理, 代理客户端, 服务端不知道实际发起请求的客户端</strong><br>
<img src="/nginx-04/3.png" alt="正反向代理"></p>
</li>
<li>
<p>反向代理：<br>
反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器<br>
<img src="/nginx-04/2.png" alt="反向代理"></p>
<p><strong>反向代理的作用</strong>：</p>
<p>（1）保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网</p>
<p>（2）负载均衡，通过反向代理服务器来优化网站的负载</p>
<p><strong>反向代理即是服务端代理, 代理服务端, 客户端不知道实际提供服务的服务端</strong></p>
</li>
</ol>
<h3 id="2-nginx配置反向代理"><a class="markdownIt-Anchor" href="#2-nginx配置反向代理"></a> 2. Nginx配置反向代理</h3>
<p>在http-&gt; server块中配置server_name</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    #监听端口为 80</span><br><span class="line">    listen       80;</span><br><span class="line">    #设置主机域名</span><br><span class="line">    server_name  http://192.168.44.99;</span><br><span class="line">    #设置虚拟主机的基本信息</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://192.168.44.1:9096;      ###最重要的配置，转发到目标地址， 也可以配置服务器组，然后upstream一个服务器组</span><br><span class="line">        proxy_method POST;   #设置转发请求的格式</span><br><span class="line">        #Nginx在header里面增加一个自定义字段 Host， 用于存放当前客户端IP地址</span><br><span class="line">        proxy_set_header  Host $host;</span><br><span class="line">        #获取客户端的真实IP地址设置到header中的字段名为X-Real-IP里面</span><br><span class="line">        proxy_set_header X-Real-IP  $remote_addr;</span><br><span class="line">        #获取所有转发请求的IP信息列表</span><br><span class="line">        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么访问http://192.168.44.99 ， nginx会将请求转发给目标服务器http://192.168.44.1:9096</p>
<h4 id="21-location-匹配规则"><a class="markdownIt-Anchor" href="#21-location-匹配规则"></a> 2.1 location 匹配规则</h4>
<p>匹配规则从上到下，匹配规则越宽松；</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>location=/uri</td>
<td>= 表示精确匹配，只有完全匹配才能生效</td>
</tr>
<tr>
<td>location ^~ /uri</td>
<td>^~ 开头对URL路径进行前缀匹配，并且在正则之前</td>
</tr>
<tr>
<td>location ~ pattern</td>
<td>开头表示区分大小写的正则匹配</td>
</tr>
<tr>
<td>location ~* pattern</td>
<td>开头表示不区分大小写的正则匹配</td>
</tr>
<tr>
<td>location /uri</td>
<td>不带任何修饰符，也表示前缀匹配，但是在正则匹配之后</td>
</tr>
<tr>
<td>location /</td>
<td>通用匹配，任何未匹配到其他location的请求都会匹配到，相当于switch中的default</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx基础篇（一）扫盲</title>
    <url>/nginx-md/</url>
    <content><![CDATA[<h3 id="1nginx发展史"><a class="markdownIt-Anchor" href="#1nginx发展史"></a> 1.Nginx发展史</h3>
<p>作者：logo Sysoev</p>
<ul>
<li>2000年地洞，c语言编写</li>
<li>2004年开源</li>
<li>2011年成立商业公司</li>
<li>2013 发布商业版本Nginx plus</li>
<li>2019.5月F5 Networks收购nginx</li>
<li>2019.12被Rambler集团起诉</li>
</ul>
<h3 id="2nginx与其他web服务器对比"><a class="markdownIt-Anchor" href="#2nginx与其他web服务器对比"></a> 2.Nginx与其他web服务器对比</h3>
<ol>
<li>Nginx与Apache HTTP server project区别<br>
用来响应用户请求的web服务器</li>
<li>Nginx 和tomcat区别<br>
Nginx是HTTP Server，主要是用于访问一些静态资源，可以用做代理服务器<br>
Tomcat是Application Server应用服务器，用来存放和运行程序；</li>
<li>HTTP Server 和Application Server区别与联系</li>
</ol>
<h3 id="3-http知识"><a class="markdownIt-Anchor" href="#3-http知识"></a> 3. HTTP知识</h3>
<h4 id="31-ip和端口"><a class="markdownIt-Anchor" href="#31-ip和端口"></a> 3.1 IP和端口</h4>
<p>120.77.38.160:80</p>
<p>0为A类，10为B类，110为C类，1110为D类，1111为E类。D类地址供组播使用，E类地址保留。</p>
<p><img src="/nginx-md/1.png" alt="img"></p>
<p><img src="/nginx-md/2.png" alt="img"></p>
<p>端口是：0～65535</p>
<h4 id="32-域名"><a class="markdownIt-Anchor" href="#32-域名"></a> 3.2 域名</h4>
<p>协议、子域名、顶级域名、域名类型、资源路径、参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#https 协议默认端口443 可以省略</span><br><span class="line">https://www.baidu.com:443</span><br><span class="line"></span><br><span class="line">#user：子域名， com为域名类型（cn中国， us美国...）； 3623252831 为资源路径</span><br><span class="line">https://user.qzone.qq.com/3623252831</span><br><span class="line"></span><br><span class="line">#？号后面为参数</span><br><span class="line">https://baike.baidu.com/item/测试/232323?fr=asdfasdf</span><br></pre></td></tr></table></figure>
<p><strong>域名(domainName)和IP的关系以及域名的组成</strong></p>
<p>域名：<a href="https://www.baidu.com:443/member/query?far=adsfad">https://www.baidu.com:443/member/query?far=adsfad</a></p>
<ul>
<li>http/ https: 协议</li>
<li>baidu: 顶级域名</li>
<li>Com： 域名类型</li>
<li>www: 子域名，可以有多级：<a href="http://user.qzone.qq.com/232323">user.qzone.qq.com/232323</a></li>
<li>far=asdfa: 参数</li>
<li>member/query: 资源路径<br>
DNS(domain name server)将域名转化为ip+port</li>
</ul>
<h5 id="33-http协议的特点"><a class="markdownIt-Anchor" href="#33-http协议的特点"></a> 3.3 HTTP协议的特点</h5>
<ul>
<li>简单快速</li>
<li>灵活</li>
<li>无连接（一次请求，连接关闭）</li>
<li>无状态（每次请求都和之前的请求无关）</li>
</ul>
<h5 id="34-http协议的请求格式"><a class="markdownIt-Anchor" href="#34-http协议的请求格式"></a> 3.4 HTTP协议的请求格式</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Request URL: https://prtas.videocc.net/v2/view?pid=1638687363047X1327470&amp;vid=8c8d9388d0b4c16f41ef557fba23dede_8&amp;uid=8c8d9388d0&amp;flow=0&amp;ts=1638688553584&amp;href=aHR0cHM6Ly9rZS5ndXBhb2VkdS5jbi9wbGF5LzI4OD9waGFzZUlkPTU&amp;duration=1278&amp;cts=789&amp;sign=fcf19468eff088e983796d5826268f2d&amp;sd=1190&amp;pd=788&amp;pn=HTML5&amp;pv=v1.15.0&amp;sid=ZDIzZGM4ODUtNDM2My00MTQ3LWJmYTktY2M3MDgwM2U0NDc5&amp;param1=&amp;param2=MTc2MjEyODQ5OTg&amp;param3=&amp;cataid=1591268435818</span><br><span class="line">Request Method: GET</span><br><span class="line">Status Code: 200 </span><br><span class="line">Remote Address: 221.231.81.238:443</span><br><span class="line">Referrer Policy: strict-origin-when-cross-origin</span><br></pre></td></tr></table></figure>
<ul>
<li>请求行</li>
<li>请求类型 Request Method
<ol>
<li>GET: 请求指定的页面细腻，并返回尸体主题</li>
<li>HEAD: 类似于GET请求，只不过返回的相应中没有具体的内容，用于获取报头</li>
<li>POST：想指定资源提交数据进行处理请求，数据被高喊在请求体中</li>
<li>PUT: 从客户端想服务器传送的数据取代指定的文档的内容</li>
<li>DELETE: 请求服务器删除指定的页面</li>
<li>CONNECT: HTTP/1.1协议中预留给能够将连接方式改为管道方式的代理服务器</li>
<li>OPTIONS: 允许客户端查看服务器的性能</li>
<li>TRACE: 回显服务器收到的请求，主要用于测试后诊断</li>
</ol>
</li>
<li>请求头</li>
<li>空行和请求数据</li>
</ul>
<h5 id="35-http协议的返回格式"><a class="markdownIt-Anchor" href="#35-http协议的返回格式"></a> 3.5 HTTP协议的返回格式</h5>
<p>状态行、小洗头、空行和响应正文</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200</span><br><span class="line">Server: nginx/1.20.1</span><br><span class="line">Date: Sun, 05 Dec 2021 07:24:45 GMT</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Access-Control-Allow-Origin: https://ke.gupaoedu.cn</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS,PATCH</span><br><span class="line">Access-Control-Allow-Headers: DNT,web-token,app-token,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,token,showerr</span><br><span class="line">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure>
<p><strong>Http格式响应状态码有哪些</strong></p>
<ul>
<li>1xx: informational(信息性状态码) 接受的请求正在处理</li>
<li>2xx: success(成功状态码)  请求正常处理完毕</li>
<li>3xx：redirection（重定向状态码）需要进行复检操作以完成请求</li>
<li>4xx：client error（客户端错误状态码） 服务器无法处理请求</li>
<li>5xx: server error（服务器错误错误状态码） 服务器处理请求出错</li>
</ul>
<h5 id="36-通用头字段common-header"><a class="markdownIt-Anchor" href="#36-通用头字段common-header"></a> 3.6 通用头字段Common Header</h5>
<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Cache-control</td>
<td>控制缓存的行为</td>
</tr>
<tr>
<td>Connection</td>
<td>控制不再转发给代理的收不字段、管理持久连接</td>
</tr>
<tr>
<td>Date</td>
<td>创建报文的日期时间</td>
</tr>
<tr>
<td>Pragma</td>
<td>报文指令</td>
</tr>
<tr>
<td>Trailer</td>
<td>报文末端的首部一览</td>
</tr>
<tr>
<td>Transfer-Encoding</td>
<td>指定报文主题的传输编码方式</td>
</tr>
<tr>
<td>Upgrade</td>
<td>升级为其他协议</td>
</tr>
<tr>
<td>Via</td>
<td>代理服务器的相关信息</td>
</tr>
<tr>
<td>Warning</td>
<td>错误通知</td>
</tr>
</tbody>
</table>
<h5 id="37-响应头字段response-header"><a class="markdownIt-Anchor" href="#37-响应头字段response-header"></a> 3.7 响应头字段Response Header</h5>
<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Accept-Ranges</td>
<td>是否接收字节范围请求</td>
</tr>
<tr>
<td>Age</td>
<td>推算资源创建经过的时间</td>
</tr>
<tr>
<td>ETag</td>
<td>资源的匹配信息</td>
</tr>
<tr>
<td>Location</td>
<td>另客户端重定向至指定的URI</td>
</tr>
<tr>
<td>Proxy-Authenticate</td>
<td>代理服务器对客户端的认证信息</td>
</tr>
<tr>
<td>Retry-After</td>
<td>对再次发起请求的时机要求</td>
</tr>
<tr>
<td>Vary</td>
<td>代理服务器缓存的管理信息</td>
</tr>
<tr>
<td>WWW-Authenticate</td>
<td>服务器对客户端的认证信息</td>
</tr>
</tbody>
</table>
<h5 id="38-实体头字段-entity-header"><a class="markdownIt-Anchor" href="#38-实体头字段-entity-header"></a> 3.8 实体头字段 Entity Header</h5>
<table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>Allow</td>
<td>资源科支持的http方法</td>
</tr>
<tr>
<td>Connect-Encoding</td>
<td>实体主体适用的编码格式</td>
</tr>
<tr>
<td>Content-Language</td>
<td>实体主体的自然语言</td>
</tr>
<tr>
<td>Content-length</td>
<td>实体主体的大小</td>
</tr>
<tr>
<td>Content-Location</td>
<td>替代敌营资源的URI</td>
</tr>
<tr>
<td>Content-MD5</td>
<td>实体主体的报文摘要</td>
</tr>
<tr>
<td>Content-Range</td>
<td>实体主体的位置范围</td>
</tr>
<tr>
<td>Content-Type</td>
<td>实体主体的媒体类型</td>
</tr>
<tr>
<td>Expires</td>
<td>实体主体过期的日期时间</td>
</tr>
<tr>
<td>Last-Modified</td>
<td>资源的最后修改日期时间</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>nginx</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Centos系统以及配置IP</title>
    <url>/Installing-CentOS-system/</url>
    <content><![CDATA[<h2 id="1-系统安装"><a class="markdownIt-Anchor" href="#1-系统安装"></a> 1. 系统安装</h2>
<ol>
<li>
<p>安装<br>
<img src="/Installing-CentOS-system/1.png" alt></p>
</li>
<li>
<p>选择语言<br>
<img src="/Installing-CentOS-system/2.png" alt></p>
</li>
<li>
<p>设置时区以及软件安装<br>
<img src="/Installing-CentOS-system/3.png" alt></p>
</li>
<li>
<p>选择GNOME桌面，开发工具。然后点击左上角的完成<br>
<img src="/Installing-CentOS-system/4.png" alt></p>
</li>
<li>
<p>配置分区，选址本地标准磁盘，并且在分区中勾选&quot;我要配置分区&quot;,“我想让额外空间可用”；初学者可以使用自动配置分区<br>
<img src="/Installing-CentOS-system/5.png" alt></p>
</li>
<li>
<p>开始安装<br>
<img src="/Installing-CentOS-system/6.png" alt></p>
</li>
<li>
<p>设置Root账户<br>
<img src="/Installing-CentOS-system/7.png" alt></p>
</li>
<li>
<p>等待安装成功,安装成功后会提示重启；<br>
<img src="/Installing-CentOS-system/8.png" alt></p>
</li>
</ol>
<h2 id="2-永久关闭防火墙"><a class="markdownIt-Anchor" href="#2-永久关闭防火墙"></a> 2. 永久关闭防火墙</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">一、下面是red hat/CentOs7关闭防火墙的命令!</span><br><span class="line"><span class="meta">#</span><span class="bash">1:查看防火状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line">service iptables status</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">2:暂时关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">service iptables stop</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">3:永久关闭防火墙</span></span><br><span class="line">systemctl disable firewalld</span><br><span class="line">chkconfig iptables off</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">4:重启防火墙</span></span><br><span class="line"></span><br><span class="line">systemctl enable firewalld</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure>
<h2 id="3-配置selinux"><a class="markdownIt-Anchor" href="#3-配置selinux"></a> 3. 配置SELinux</h2>
<p>SELinux是Linux 内核中提供的强制访问控制系统。selinux有disabled、permissive、enforcing 三种选择：</p>
<ul>
<li>disabled ：不启用控制系统。</li>
<li>permissive：开启控制系统，但是处于警告模式。即使你违反了策略的话它让你继续操作，但是把你的违反的内容记录下来。</li>
<li>Enforcing：开启控制系统，处于强制状态。一旦违反了策略，就无法继续操作下去</li>
</ul>
<p>使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/sysconfig/</span><br><span class="line">vim selinux</span><br></pre></td></tr></table></figure>
<p><img src="/Installing-CentOS-system/3-1.png" alt></p>
<h2 id="4修改ip配置文件"><a class="markdownIt-Anchor" href="#4修改ip配置文件"></a> 4.修改ip配置文件</h2>
<ol>
<li>
<p>进入文件目录</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts/   #进入配置文件</span><br></pre></td></tr></table></figure>
<p><img src="/Installing-CentOS-system/4-1.png" alt></p>
</li>
<li>
<p>写入配置信息并保存退出</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ifcfg-ens33 #编辑配置文件ifcfg-ens33</span><br></pre></td></tr></table></figure>
<p>如果要设置固定IP的话，常见设置属性有：BOOTPROTO、ONBOOT、IPADDR、NETMASK、GATEWAY</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以下为配置文件的内容</span></span><br><span class="line"><span class="string">TYPE=&quot;Ethernet&quot;</span>		<span class="comment">#网卡类型（通常是Ethemet以太网）</span></span><br><span class="line"><span class="string">PROXY_METHOD=&quot;none&quot;</span>	<span class="comment">#代理方式：为关闭状态</span></span><br><span class="line"><span class="string">BROWSER_ONLY=&quot;no&quot;</span>	<span class="comment">#只是浏览器：否</span></span><br><span class="line"><span class="string">BOOTPROTO=&quot;static&quot;</span>	<span class="comment">#网卡的引导协议【static：静态IP(指定静态后IP地址就固定了,不建议采用动态分配)  dhcp：动态IP   none：不指定，不指定容易出现各种各样的网络受限】</span></span><br><span class="line"><span class="string">DEFROUTE=&quot;yes&quot;</span>		<span class="comment">#默认路由</span></span><br><span class="line"><span class="string">IPV4_FAILURE_FATAL=&quot;no&quot;</span>		<span class="comment">#是否开启IPV4致命错误检测</span></span><br><span class="line"><span class="string">IPV6INIT=&quot;yes&quot;</span>		<span class="comment">#IPV6是否自动初始化：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class="line"><span class="string">IPV6_AUTOCONF=&quot;yes&quot;</span>	<span class="comment">#IPV6是否自动配置：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class="line"><span class="string">IPV6_DEFROUTE=&quot;yes&quot;</span>	<span class="comment">#IPV6是否可以为默认路由：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class="line"><span class="string">IPV6_FAILURE_FATAL=&quot;no&quot;</span>		<span class="comment">#是否开启IPV6致命错误检测</span></span><br><span class="line"><span class="string">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span>	<span class="comment">#IPV6地址生成模型</span></span><br><span class="line"><span class="string">NAME=&quot;ens33&quot;</span>		<span class="comment">#网卡物理设备名称</span></span><br><span class="line"><span class="string">UUID=&quot;ab60d501-535b-49f5-a76b-3336a4120f64&quot;</span> <span class="comment">#通用唯一识别码，每一个网卡都会有，不能重复，否则两台linux机器只有一台可上网,可不写</span></span><br><span class="line"><span class="string">DEVICE=&quot;ens33&quot;</span>		<span class="comment">#网卡设备名称，必须和‘NAME’值一样</span></span><br><span class="line"><span class="string">ONBOOT=&quot;yes&quot;</span>		<span class="comment">#是否开机启动(如果yes则开机后自动加载使用当前配置文件)，要想网卡开机就启动或通过 `systemctl restart network`控制网卡,必须设置为 `yes`</span></span><br><span class="line"><span class="string">IPADDR=192.168.1.111</span>		<span class="comment"># 本机IP 设置固定IP 对应上面的BOOTPROTO</span></span><br><span class="line"><span class="string">NETMASK=255.255.255.0</span>		<span class="comment">#子网掩码 ,可不写</span></span><br><span class="line"><span class="string">GATEWAY=192.168.137.2</span>		<span class="comment">#默认网关 ,可不写</span></span><br><span class="line"><span class="string">DNS1=8.8.8.8</span> <span class="comment"># 可不写</span></span><br><span class="line"><span class="string">DNS2=8.8.8.5</span> <span class="comment"># 可不写</span></span><br><span class="line"><span class="string">ZONE=public</span> <span class="comment"># 可不写</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>重启网络服务</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart  #重启网卡</span><br></pre></td></tr></table></figure>
<p><img src="/Installing-CentOS-system/4-2.png" alt></p>
</li>
<li>
<p>查看IP</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>
<p><img src="/Installing-CentOS-system/4-3.png" alt></p>
</li>
<li>
<p>重启系统</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中将List列表转换为字符串</title>
    <url>/list-to-string/</url>
    <content><![CDATA[<h3 id="1-tostring-方法"><a class="markdownIt-Anchor" href="#1-tostring-方法"></a> 1. toString() 方法</h3>
<p>List.toString()是最简单的，但它在开头和结尾添加方括号，每个字符串用逗号分隔符分隔。<br>
缺点是我们不能用另一个分隔符替换逗号，也不能去掉方括号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListToStringUsingToStringExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// creating a list with strings.</span></span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;One&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;Two&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;Three&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;Four&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;Five&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// converting List&lt;String&gt; to String using toString() method</span></span><br><span class="line">    String stringFromList = list.toString();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// priting the string</span></span><br><span class="line">    System.out.println(<span class="string">&quot;String : &quot;</span>+stringFromList);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：String : [One, Two, Three, Four, Five]</span></span><br></pre></td></tr></table></figure>
<h3 id="2-java-8-stringjoin"><a class="markdownIt-Anchor" href="#2-java-8-stringjoin"></a> 2. Java 8 String.join()</h3>
<p>java 8 String添加了一个特殊的方法String.join()以将集合转换为具有给定分隔符的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListToStringUsingString_JoinExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// creating a list with strings.</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;One&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Two&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Three&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Four&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Five&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// converting List&lt;String&gt; to String using toString() method</span></span><br><span class="line">        String stringFromList = String.join(<span class="string">&quot;~&quot;</span>, list);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// priting the string</span></span><br><span class="line">        System.out.println(<span class="string">&quot;String with tilde delimiter: &quot;</span>+stringFromList);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// delimiting with pipe | symbol.</span></span><br><span class="line">        String stringPipe = String.join(<span class="string">&quot;|&quot;</span>, list);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// printing</span></span><br><span class="line">        System.out.println(<span class="string">&quot;String with pipe delimiter : &quot;</span>+stringPipe);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//  String with tilde delimiter: One~Two~Three~Four~Five</span></span><br><span class="line"><span class="comment">//  String with pipe delimiter : One|Two|Three|Four|Five</span></span><br></pre></td></tr></table></figure>
<h3 id="3-collectorsjoining"><a class="markdownIt-Anchor" href="#3-collectorsjoining"></a> 3. Collectors.joining()</h3>
<p>Collectors.join()方法来自 java 8 stream api。Collctors.joining()方法将分隔符、前缀和后缀作为参数。此方法将列表转换为具有给定分隔符、前缀和后缀的字符串。</p>
<p>查看以下有关使用不同分隔符的 join() 方法的示例。但是，String.join() 方法不提供前缀和后缀选项。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListToStringUsingString_JoinExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// creating a list with strings.</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;One&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Two&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Three&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Four&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Five&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// using java 8 Collectors.joining with delimiter, prefix and suffix</span></span><br><span class="line">        String joiningString = list.stream().collect(Collectors.joining(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>));</span><br><span class="line">        <span class="comment">// printing</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Collectors.joining string : &quot;</span>+joiningString);</span><br><span class="line">        String joiningString3 = list.stream().collect(Collectors.joining(<span class="string">&quot;@&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="comment">// printing</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Collectors.joining string with @ separator : &quot;</span>+joiningString3);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//Collectors.joining string : &#123;One-Two-Three-Four-Five&#125;</span></span><br><span class="line"><span class="comment">//Collectors.joining string with @ separator : One@Two@Three@Four@Five</span></span><br></pre></td></tr></table></figure>
<h3 id="4-apache-commons-stringutilsjoin"><a class="markdownIt-Anchor" href="#4-apache-commons-stringutilsjoin"></a> 4. Apache Commons StringUtils.join()</h3>
<p>使用来自 apache commons 包的外部库。该库有一个方法StringUtils.join() ，它采用类似于 String.join() 方法的列表和分隔符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListToStringUsingStringUtils_JoinExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// creating a list with strings.</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;One&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Two&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Three&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Four&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Five&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// using java 8 Collectors.joining with delimiter, prefix and suffix</span></span><br><span class="line">        String joiningString = StringUtils.join(list, <span class="string">&quot;^&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// printing</span></span><br><span class="line">        System.out.println(<span class="string">&quot;StringUtils.join string with ^ delimiter : &quot;</span>+joiningString);</span><br><span class="line">        </span><br><span class="line">        String joiningString3 = StringUtils.join(list, <span class="string">&quot;$&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// printing</span></span><br><span class="line">        System.out.println(<span class="string">&quot;StringUtils.join string with @ separator : &quot;</span>+joiningString3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//  StringUtils.join string with ^ delimiter : One^Two^Three^Four^Five</span></span><br><span class="line"><span class="comment">//  StringUtils.join string with @ separator : One$Two$Three$Four$Five</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>linux关机命令</title>
    <url>/shutdown/</url>
    <content><![CDATA[<h3 id="1-shutdown命令"><a class="markdownIt-Anchor" href="#1-shutdown命令"></a> 1. shutdown命令</h3>
<p>shutdown会给系统计划一个时间关机。它可以被用于停止、关机、重启机器。<br>
你可以指定一个时间字符串（通常是 now或者用hh:mm 指定小时/分钟）作为第一个参数。</p>
<p>shutdown命令示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shutdown</span><br><span class="line"></span><br><span class="line">shutdown now  #立即关机</span><br><span class="line"></span><br><span class="line">shutdown 13:20  # 下午13：20关机</span><br><span class="line"></span><br><span class="line">shutdown -p now  ### 关闭机器</span><br><span class="line"></span><br><span class="line">shutdown -H now  ### 停止机器      </span><br><span class="line"></span><br><span class="line">shutdown -r09:35 ### 在 09:35am 重启机器</span><br><span class="line"></span><br><span class="line">shutdown -c  ## 取消关机</span><br></pre></td></tr></table></figure>
<h3 id="2-halt-命令"><a class="markdownIt-Anchor" href="#2-halt-命令"></a> 2. halt 命令</h3>
<p>halt通知硬件来停止所有的 CPU 功能，但是仍然保持通电。你可以用它使系统处于低层维护状态。<br>
注意在有些情况会它会完全关闭系统。</p>
<p>halt 命令示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">halt             ### 停止机器</span><br><span class="line"></span><br><span class="line">halt -p          ### 关闭机器</span><br><span class="line"></span><br><span class="line">halt --reboot    ### 重启机器</span><br></pre></td></tr></table></figure>
<h3 id="3poweroff-命令"><a class="markdownIt-Anchor" href="#3poweroff-命令"></a> 3.poweroff 命令</h3>
<p>poweroff会发送一个 ACPI 信号来通知系统关机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">poweroff           ### 关闭机器</span><br><span class="line"></span><br><span class="line">poweroff --halt    ### 停止机器</span><br><span class="line"></span><br><span class="line">poweroff --reboot  ### 重启机器</span><br></pre></td></tr></table></figure>
<h3 id="4reboot-命令"><a class="markdownIt-Anchor" href="#4reboot-命令"></a> 4.reboot 命令</h3>
<p>reboot 通知系统重启。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot           ### 重启机器</span><br><span class="line"></span><br><span class="line">reboot --halt    ### 停止机器</span><br><span class="line"></span><br><span class="line">reboot -p        ### 关闭机器</span><br></pre></td></tr></table></figure>
<h3 id="5-init-命令"><a class="markdownIt-Anchor" href="#5-init-命令"></a> 5. init 命令</h3>
<p>一. init是Linux系统操作中不可缺少的程序之一。<br>
所谓的init进程，它是一个由内核启动的用户级进程。<br>
内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。<br>
内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。</p>
<p>二. init一共分为7个级别，这7个级别的所代表的含义如下</p>
<p>0：停机或者关机（千万不能将initdefault设置为0）</p>
<p>1：单用户模式，只root用户进行维护</p>
<p>2：多用户模式，不能使用NFS(Net File System)</p>
<p>3：完全多用户模式（标准的运行级别）</p>
<p>4：安全模式</p>
<p>5：图形化（即图形界面）</p>
<p>6：重启（千万不要把initdefault设置为6）</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>shutdown</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的接口测试工具</title>
    <url>/swagger/</url>
    <content><![CDATA[<h2 id="1-swagger"><a class="markdownIt-Anchor" href="#1-swagger"></a> 1. Swagger</h2>
<p>Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。<br>
Swagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。</p>
<p>静态的swagger跟不上频繁变更的代码，容易出现以下问题</p>
<ul>
<li>
<p>“为什么改了这个没告诉我”</p>
</li>
<li>
<p>“实际功能和文档上说的不一样啊”</p>
</li>
</ul>
<p>这样会带来的问题是：</p>
<ol>
<li>Swagger，postman，MockJS只能完成软件研发流程中某个环节的功能，造成完成接口设计，文档编写，调试，测试验证等工作需要使用好几个工具；</li>
<li>更麻烦的是这些工具数据格式不互通，无法互相导入，造成用Swagger定义和编写完成接口后，在Postman，MockJS，Jmeter等工具还要再去手动填写一遍才能开始工作，增加了无意义的工作量。</li>
<li>沟通成本总是被忽略不计，但实际上不仅占据了很大时间，各种沟通不及时、沟通不到位还非常让人心累。</li>
<li>老板的需求来得急，老板的需求变得快，各种代码修改和变更难以及时通知和同步到团队成员手中。</li>
</ol>
<h2 id="2-常见的可视化restful风格的服务"><a class="markdownIt-Anchor" href="#2-常见的可视化restful风格的服务"></a> 2. 常见的可视化RestFul风格的服务</h2>
<ul>
<li>springfox-swagger2</li>
<li>springdoc</li>
<li>Apifox（接口测试工具，非集成在项目中postman加强升级版）</li>
</ul>
<h2 id="3-各个工具的使用以及风格"><a class="markdownIt-Anchor" href="#3-各个工具的使用以及风格"></a> 3. 各个工具的使用以及风格</h2>
<p>使用Springboot项目分别集成各个组件，看下具体的实现效果；</p>
<h3 id="31-springfox-swagger2"><a class="markdownIt-Anchor" href="#31-springfox-swagger2"></a> 3.1 springfox-swagger2</h3>
<ol>
<li>
<p>引入依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.10</span><span class="number">.5</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.0</span><span class="number">.8</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编写配置类</p>
<ul>
<li>
<p>SwaggerConfiguration类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String applicationName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;defaultApi&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">defaultApi2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置处理请求的包，我的controller类都在com.yugb.controller中</span></span><br><span class="line">        Predicate&lt;RequestHandler&gt; apiPackage = RequestHandlerSelectors.basePackage(<span class="string">&quot;com.yugb.controller&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Docket docket = <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(<span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                        .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                        .contact(<span class="keyword">new</span> Contact(<span class="string">&quot;xiaoyuge&quot;</span>,<span class="string">&quot;123&quot;</span>, <span class="string">&quot;12342qq.com&quot;</span>))</span><br><span class="line">                        .title(applicationName + <span class="string">&quot; 文档中心&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;&lt;div style=&#x27;font-size:15px;&#x27;&gt;&quot;</span> + applicationName + <span class="string">&quot; RESTful APIs&lt;/div&gt;&quot;</span>)</span><br><span class="line">                        .build())</span><br><span class="line">                <span class="comment">//分组名称</span></span><br><span class="line">                .groupName(<span class="string">&quot;2.X版本&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//这里指定Controller扫描包路径</span></span><br><span class="line">                .apis(apiPackage)</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>SwaggerWebMvcConfigurer 类</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerWebMvcConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>添加注解</p>
<p>我们接口文档的直接描述主要就是在Controller这一层，比如这个接口的功能，参数的名称，返回值的名称等。这些值我们都需要在Controller上通过给方法上，请求参数和返回参数上添加对应的注解，swagger才能帮我们生成相应的接口文档。</p>
<ul>
<li><strong>JavaBean</strong>: @ApiModel注解和 @@ApiModelProperty 注解定义了实体的名称和字段的名称  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;创建Swagger响应结果&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerResVO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;性别&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;啥啥&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String what;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
<ul>
<li><strong>controller</strong>: @Api注解和 @ApiOperation注解分别标注了接口组名和接口的名称 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/swagger&quot;)</span></span><br><span class="line"><span class="meta">@Api(value = &quot;用户接口&quot;, tags = &#123;&quot;用户接口&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增用户&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> SwaggerReqVO req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(&quot;getById&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据条件查询用户&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SwaggerResVO <span class="title">getById</span><span class="params">(<span class="meta">@RequestBody</span> SwaggerResVO req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SwaggerResVO();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="3">
<li>
<p>启动项目</p>
<p>访问 <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a> 查看springfox-swagger2的文档中心<br>
<img src="/swagger/1.png" alt="springfox-swagger2"></p>
<p>查看GET请求的界面<br>
<img src="/swagger/2.png" alt="springfox-swagger2"><br>
<img src="/swagger/3.png" alt="springfox-swagger2"></p>
</li>
<li>
<p>优缺点</p>
<ul>
<li>
<p>优点：界面美观，集成方便，不同类型的接口按照controller分组，<strong>可以导出所有的接口文档！！！！！</strong></p>
</li>
<li>
<p>缺点：暂时没有遇到</p>
</li>
</ul>
</li>
</ol>
<h3 id="32-springdoc"><a class="markdownIt-Anchor" href="#32-springdoc"></a> 3.2 springdoc</h3>
<ol>
<li>
<p>引入依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">1.5</span><span class="number">.8</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;springdoc-openapi-webmvc-core&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">1.5</span><span class="number">.8</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>配置yml /yaml /properties</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="attr">api-docs:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">groups:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/api-docs</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">disabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">swagger-ui:</span></span><br><span class="line">    <span class="attr">groups-order:</span> <span class="string">asc</span></span><br><span class="line">    <span class="comment"># 自定义的文档界面访问路径。默认访问路径是/swagger-ui.html</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/springdoc/docs.html</span></span><br><span class="line">  <span class="comment"># 布尔值。实现OpenApi规范的打印。</span></span><br><span class="line">  <span class="attr">writer-with-default-pretty-printer:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编写配置类</p>
<ul>
<li>
<p>SpringdocOpenapiConfiguration</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringdocOpenapiConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SwaggerProperties swaggerProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringdocOpenapiConfiguration</span><span class="params">(SwaggerProperties swaggerProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.swaggerProperties = swaggerProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OpenAPI <span class="title">springDocOpenAPI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//配置认证、请求头参数</span></span><br><span class="line">        Components components = <span class="keyword">new</span> Components();</span><br><span class="line"><span class="comment">//        Map&lt;String, Object&gt; myHeader2extensions = new HashMap&lt;&gt;(2);</span></span><br><span class="line"><span class="comment">//        myHeader2extensions.put(&quot;name&quot;, &quot;myHeader2&quot;);</span></span><br><span class="line"><span class="comment">//        components</span></span><br><span class="line"><span class="comment">//                .addSecuritySchemes(&quot;bearer-key&quot;, new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(&quot;bearer&quot;).bearerFormat(&quot;JWT&quot;))</span></span><br><span class="line"><span class="comment">//                .addSecuritySchemes(&quot;basicScheme&quot;, new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(&quot;basic&quot;))</span></span><br><span class="line"><span class="comment">//                .addHeaders(&quot;myHeader2&quot;, new Header().description(&quot;myHeader2 header&quot;).schema(new StringSchema()).extensions(myHeader2extensions))</span></span><br><span class="line"><span class="comment">//                .addParameters(&quot;myGlobalHeader&quot;, new HeaderParameter().required(true).name(&quot;My-Global-Header&quot;).description(&quot;My Global Header&quot;).schema(new StringSchema()).required(false))</span></span><br><span class="line"><span class="comment">//        ;</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 接口调试路径</span></span><br><span class="line">        Server tryServer = <span class="keyword">new</span> Server();</span><br><span class="line">        tryServer.setUrl(swaggerProperties.getTryHost());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OpenAPI()</span><br><span class="line">                .components(components)</span><br><span class="line">                .servers(Collections.singletonList(tryServer))</span><br><span class="line">                .info(<span class="keyword">new</span> Info()</span><br><span class="line">                        .title(swaggerProperties.getApplicationName() + <span class="string">&quot; Api Doc&quot;</span>)</span><br><span class="line">                        .description(swaggerProperties.getApplicationDescription())</span><br><span class="line">                        .version(<span class="string">&quot;Application Version: &quot;</span> + swaggerProperties.getApplicationVersion() + <span class="string">&quot;\n Spring Boot Version: &quot;</span> + SpringBootVersion.getVersion())</span><br><span class="line">                        .license(<span class="keyword">new</span> License().name(<span class="string">&quot;Apache 2.0&quot;</span>).url(<span class="string">&quot;https://www.apache.org/licenses/LICENSE-2.0.html&quot;</span>))</span><br><span class="line">                )</span><br><span class="line">                .externalDocs(<span class="keyword">new</span> ExternalDocumentation()</span><br><span class="line">                        .description(<span class="string">&quot;SpringDoc Full Documentation&quot;</span>)</span><br><span class="line">                        .url(<span class="string">&quot;https://springdoc.org/&quot;</span>)</span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加全局的请求头参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public OpenApiCustomiser customerGlobalHeaderOpenApiCustomiser() &#123;</span></span><br><span class="line"><span class="comment">//        return openApi -&gt; openApi.getPaths().values().stream().flatMap(pathItem -&gt; pathItem.readOperations().stream())</span></span><br><span class="line"><span class="comment">//                .forEach(operation -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                    operation.addParametersItem(new HeaderParameter().$ref(&quot;#/components/parameters/myGlobalHeader&quot;));</span></span><br><span class="line"><span class="comment">//                &#125;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用拦截器排除设置，所有拦截器都会自动加springdoc-opapi相关的资源排除信息，不用在应用程序自身拦截器定义的地方去添加，算是良心解耦实现。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field registrationsField = FieldUtils.getField(InterceptorRegistry.class, <span class="string">&quot;registrations&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">            List&lt;InterceptorRegistration&gt; registrations = (List&lt;InterceptorRegistration&gt;) ReflectionUtils.getField(registrationsField, registry);</span><br><span class="line">            <span class="keyword">if</span> (registrations != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (InterceptorRegistration interceptorRegistration : registrations) &#123;</span><br><span class="line">                    interceptorRegistration.excludePathPatterns(<span class="string">&quot;/springdoc**/**&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务器支持跨域</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .exposedHeaders(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;Access-Control-Max-Age&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;X-Frame-Options&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="keyword">false</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>SwaggerProperties</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;swagger&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerProperties</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 项目应用名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> String applicationName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目版本信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String applicationVersion;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目描述信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String applicationDescription;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口调试地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String tryHost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>编写接口方法</p>
<ul>
<li>在controller上添加@Tag注解</li>
<li>在接口方法上添加@Operation 注解</li>
<li>在接口参数添加@Parameter 或@Parameters 注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Tags(&#123;</span></span><br><span class="line"><span class="meta">  @Tag(name = &quot;ExpirationWarningController&quot;, description = &quot;设备寿命到期预警&quot;),</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpirationWarningController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需要使用@Operation竹节</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/getOne/&#123;id&#125;/&#123;type&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;按ID查询&quot;, description = &quot;按ID查询&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">getOne</span><span class="params">(<span class="meta">@Parameter(description = &quot;主键ID&quot;)</span> <span class="meta">@PathVariable</span> Integer id,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@Parameter(description = &quot;类型&quot;)</span> <span class="meta">@PathVariable</span> String type)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> ResponseResult.success(expirationWarningVO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;保存&quot;, description = &quot;保存&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> ExpirationWarning expirationWarning)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在springboot启动类上加上以下配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OpenAPIDefinition(</span></span><br><span class="line"><span class="meta">    info = @Info(</span></span><br><span class="line"><span class="meta">        title = &quot;测试springdoc&quot;,</span></span><br><span class="line"><span class="meta">        version = &quot;1.0&quot;</span></span><br><span class="line"><span class="meta">    ),</span></span><br><span class="line"><span class="meta">    externalDocs = @ExternalDocumentation(description = &quot;swagger-api参考文档&quot;,</span></span><br><span class="line"><span class="meta">        url = &quot;https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations&quot;</span></span><br><span class="line"><span class="meta">    ),</span></span><br><span class="line"><span class="meta">    servers = &#123;</span></span><br><span class="line"><span class="meta">        @Server(</span></span><br><span class="line"><span class="meta">            url = &quot;http://localhost:8123/app&quot;,</span></span><br><span class="line"><span class="meta">            description = &quot;本地地址&quot;</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">        @Server(</span></span><br><span class="line"><span class="meta">            url = &quot;http://www.xiaoyuge.vip/app&quot;,</span></span><br><span class="line"><span class="meta">            description = &quot;公网测试环境&quot;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResolutionApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ResolutionApplication.class, args);</span><br><span class="line">        logger.info(<span class="string">&quot;============= Start Success =============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>启动项目</p>
<p>访问 <a href="http://localhost:8123/app/springdoc/swagger-ui/index.html">http://localhost:8123/app/springdoc/swagger-ui/index.html</a> 查看springdox的文档中心<br>
<img src="/swagger/4.png" alt="springdoc"><br>
<img src="/swagger/5.png" alt="springdoc"></p>
</li>
<li>
<p>优缺点</p>
<ul>
<li>
<p>优点：不好说</p>
</li>
<li>
<p>缺点：界面没有按照每个controller分组，不直观！；</p>
</li>
</ul>
</li>
</ol>
<h3 id="33-apifox"><a class="markdownIt-Anchor" href="#33-apifox"></a> 3.3 Apifox</h3>
<p>一款研发全流程，接口全周期的生产力工具，这款软件真正完成了数据流的打通，在一个软件上就能实现<strong>接口设计–接口文档–接口调试–接口修改–接口mock–接口测试–接口自动化–接口迭代</strong>的工作流闭环；</p>
<h4 id="331-apifox上的协作流程"><a class="markdownIt-Anchor" href="#331-apifox上的协作流程"></a> 3.3.1 Apifox上的协作流程</h4>
<ol>
<li>后端在Apifox可视化接口设计界面上定义好项目各个接口及对应参数同时编写接口文档说明</li>
<li>前后端一起评审，修改完善接口并在同一界面顺手更新接口文档</li>
<li>后端使用接口调试功能调试接口</li>
<li>前端使用零配置高仿真mock功能对前端页面进行调试，无需手写mock规则</li>
<li>后端使用代码生成功能直接生成接口代码</li>
<li>测试在接口管理页面一键生成接口参数测试用例,并依据业务场景生成自动化测试用例，一键运行接口用例并生成接口测试报告并分享给相关人员。</li>
<li>前后端 都开发完，前端从Mock 数据切换到正式数据，进行联调，由于使用同一个接口数据源，且遵循了接口规范，联调顺利</li>
<li>由于bug修复或需求变更，接口发生了变化，后端修改提交后，前端和测试实时同步到了修改后的数据</li>
<li>项目经理通过权限设置给研发,产品,测试,外部合作人员分配编辑,只读等各种操作权限，维护了项目安全</li>
<li>项目经理通过各个接口的状态开发中,测试中,已发布来跟进项目的进度情况，把控项目风险。</li>
</ol>
<h4 id="332-apifox做的增速提效优化"><a class="markdownIt-Anchor" href="#332-apifox做的增速提效优化"></a> 3.3.2 Apifox做的增速提效优化</h4>
<ul>
<li>
<p>接口设计：从代码生成界面到可视化接口设计界面</p>
<p>Apifox 接口文档遵循 OpenApi 3.0 (原 Swagger)、JSON Schema 规范，可生成在线文档；零学习成本即可编写出符合RESTful风格的接口文档，新人上手快；所见即所得，不易出错<br>
<img src="/swagger/6.png" alt="Apifox"><br>
<img src="/swagger/7.png" alt="Apifox"></p>
</li>
<li>
<p>文档维护：从接口与文档分离到接口与文档合并</p>
<p>Apifox的接口设计界面提供了Markdown格式的文档说明区，修改完接口就如同commit代码时添加变更说明般<br>
<img src="/swagger/8.png" alt="Apifox"></p>
</li>
<li>
<p>数据复用：从各自为政到定义一次、多次复用</p>
<ul>
<li>
<p>接口数据复用：Swagger，Postman，MockJS，Jmeter等软件彼此之间数据不互通，数据格式不一致，接口导入非常耗时麻烦。<br>
而Apifox能身兼多职，包揽上述软件功能，在Apifox中定义一次接口，能被后端直接用来调试，前端直接用来mock界面，测试直接执行接口自动化。</p>
</li>
<li>
<p>数据模型复用：可复用的数据结构，定义接口返回数据结构及请求参数数据结构（仅 JSON 和 XML 模式）时可直接引用。</p>
</li>
</ul>
</li>
<li>
<p>同步更新，高效沟通:从沟通滞后到数据变更即时同步</p>
<p>Apifox为此提供了同步功能，一旦接口数据有更新发生，就会即时同步更新并通知到项目内所有成员。</p>
</li>
<li>
<p>Apihub</p>
<p>内置企业微信开放API，抖音开放API等第三方接口开放项目，接口可以直接在Apifox中调试，不需要到处找接口文档和手工填写接口</p>
</li>
</ul>
<h4 id="333-下载地址"><a class="markdownIt-Anchor" href="#333-下载地址"></a> 3.3.3 下载地址</h4>
<p>官网地址： <a href="http://www.apifox.cn/?utm_medium=WCSA&amp;utm_source=xxzsq">http://www.apifox.cn/?utm_medium=WCSA&amp;utm_source=xxzsq</a></p>
]]></content>
      <categories>
        <category>swagger</category>
      </categories>
      <tags>
        <tag>swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装RocketMQ以及常用命令</title>
    <url>/rocketmq-install/</url>
    <content><![CDATA[<h3 id="1前言"><a class="markdownIt-Anchor" href="#1前言"></a> 1.前言</h3>
<ol>
<li>nameserver默认端口：9876</li>
<li>rocketmq默认端口：10911</li>
<li>服务器IP：172.21.16.253</li>
<li>安装路径：/usr/local/tools</li>
</ol>
<h3 id="2-下载"><a class="markdownIt-Anchor" href="#2-下载"></a> 2. 下载</h3>
<p>RocketMQ官网链接：<a href="http://rocketmq.apache.org/">http://rocketmq.apache.org/</a> ,然后选择Lastest Release进入下载界面<br>
<img src="/rocketmq-install/1.png" alt><br>
<img src="/rocketmq-install/2.png" alt><br>
<img src="/rocketmq-install/0.png" alt><br>
右键复制链接地址，<code>wget</code>下载，或者下载后上传到Centos服务器上。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools</span><br><span class="line">wget https://dlcdn.apache.org/rocketmq/4.9.4/rocketmq-all-4.9.4-bin-release.zip</span><br></pre></td></tr></table></figure>
<h3 id="3-解压"><a class="markdownIt-Anchor" href="#3-解压"></a> 3. 解压</h3>
<p>解压二进制包，修改文件夹名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip rocketmq-all-4.9.4-bin-release.zip </span><br><span class="line">mv rocketmq-all-4.9.4-bin-release rocketmq</span><br></pre></td></tr></table></figure>
<p>如果提示<code>-bash: unzip: command not found</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装zip 和 unzip</span></span><br><span class="line">yum install zip</span><br><span class="line">yum install unzip</span><br></pre></td></tr></table></figure>
<p>创建数据存储目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/tools/rocketmq/store/broker-a /usr/local/tools/rocketmq/store/broker-a/consumequeue /usr/local/tools/rocketmq/store/broker-a/commitlog /usr/local/tools/rocketmq/store/broker-a/index /usr/local/tools/rocketmq/broker-a/logs </span><br></pre></td></tr></table></figure>
<h3 id="4-修改配置文件"><a class="markdownIt-Anchor" href="#4-修改配置文件"></a> 4. 修改配置文件</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/rocketmq/conf</span><br><span class="line">vim broker.conf</span><br></pre></td></tr></table></figure>
<p>增加内容</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10911</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">localhost:9876</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/abort</span></span><br></pre></td></tr></table></figure>
<p><img src="/rocketmq-install/3.png" alt></p>
<h3 id="5-启动"><a class="markdownIt-Anchor" href="#5-启动"></a> 5. 启动</h3>
<p>依次启动nameserver和broker ,这两个命令可以做成alias</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/rocketmq/bin</span><br><span class="line"></span><br><span class="line">nohup sh mqnamesrv &amp;</span><br><span class="line">nohup sh mqbroker -c /usr/local/tools/rocketmq/conf/broker.conf &amp;</span><br></pre></td></tr></table></figure>
<p>在虚拟机中有可能因为内存不够而启动失败<br>
<img src="/rocketmq-install/4.png" alt></p>
<ul>
<li>
<p>1）设置<code>bin</code>目录下的 <a href="http://runserver.sh">runserver.sh</a></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn512m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>2）设置<code>bin</code>目录下的 <a href="http://runbroker.sh">runbroker.sh</a></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m&quot;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>3）如果改了上面两个还不行，<a href="http://xn--bintools-w39lv9mo3yznw9pr780dmkbj53ud8xa.sh">那在修改bin目录下面的tools.sh</a></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=128m&quot;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="6-查看日志"><a class="markdownIt-Anchor" href="#6-查看日志"></a> 6. 查看日志</h3>
<p>启动成功后查看mq动态日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class="line">tail -f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></figure>
<p><img src="/rocketmq-install/5.png" alt></p>
<h3 id="7关闭服务"><a class="markdownIt-Anchor" href="#7关闭服务"></a> 7.关闭服务</h3>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/rocketmq/bin</span><br><span class="line"></span><br><span class="line">sh mqshutdown namesrv</span><br><span class="line">sh mqshutdown broker</span><br></pre></td></tr></table></figure>
<h3 id="8-常用命令"><a class="markdownIt-Anchor" href="#8-常用命令"></a> 8. 常用命令</h3>
<p>RocketMQ 提供有控制台及一系列控制台目录，用户管理员对主题、集群、broker等信息的管理。</p>
<p>进入rocketmq下的bin目录，可以看到该目录下有个mqadmin脚本<br>
<img src="/rocketmq-install/6.png" alt><br>
查看帮助</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh mqadmin help 命令名称</span><br></pre></td></tr></table></figure>
<p>例如，查看updateTopic的使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh mqadmin help updateTopic</span><br></pre></td></tr></table></figure>
<p>下面列举一些常用的命令。</p>
<h4 id="81-创建修改topic"><a class="markdownIt-Anchor" href="#81-创建修改topic"></a> 8.1 创建（修改）Topic</h4>
<ul>
<li>
<p>指令： updateTopic</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.topic.UpdateTopicSubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-b</td>
<td style="text-align:left">如果 -c为空，则必填</td>
<td style="text-align:left">broker地址，表示topic建在该broker</td>
</tr>
<tr>
<td style="text-align:left">-c</td>
<td style="text-align:left">如果 -b为空，则必填</td>
<td style="text-align:left">cluster名称，表示topic建在该集群（集群可通过clusterList查询）</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
<tr>
<td style="text-align:left">-p</td>
<td style="text-align:left">否</td>
<td style="text-align:left">指定新topic的权限限制( W</td>
</tr>
<tr>
<td style="text-align:left">-r</td>
<td style="text-align:left">否</td>
<td style="text-align:left">可读队列数（默认为8）</td>
</tr>
<tr>
<td style="text-align:left">-w</td>
<td style="text-align:left">否</td>
<td style="text-align:left">可写队列数（默认为8）</td>
</tr>
<tr>
<td style="text-align:left">-t</td>
<td style="text-align:left">是</td>
<td style="text-align:left">topic名称（名称只能使用字符 <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>+$ ）</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在集群DefaultCluster上创建主题ZTEExample，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin updateTopic –n 172.21.16.253:9876 –c DefaultCluster –t ZTEExample</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="82-删除topic"><a class="markdownIt-Anchor" href="#82-删除topic"></a> 8.2 删除Topic</h4>
<ul>
<li>
<p>指令： deleteTopic</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.topic.DeleteTopicSubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-c</td>
<td style="text-align:left">是</td>
<td style="text-align:left">cluster名称，表示删除某集群下的某个topic （集群可通过clusterList查询）</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
<tr>
<td style="text-align:left">-t</td>
<td style="text-align:left">是</td>
<td style="text-align:left">topic名称（名称只能使用字符 <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>+$ ）</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在集群DefaultCluster上删除主题ZTEExample，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin deleteTopic –n 172.21.16.253:9876 –c DefaultCluster –t ZTEExample</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="83-创建修改订阅组"><a class="markdownIt-Anchor" href="#83-创建修改订阅组"></a> 8.3 创建（修改）订阅组</h4>
<ul>
<li>
<p>指令： updateSubGroup</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.consumer.UpdateSubGroupSubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-b</td>
<td style="text-align:left">如果 -c为空，则必填</td>
<td style="text-align:left">broker地址，表示topic建在该broker</td>
</tr>
<tr>
<td style="text-align:left">-c</td>
<td style="text-align:left">如果 -b为空，则必填</td>
<td style="text-align:left">cluster名称，表示topic建在该集群（集群可通过clusterList查询）</td>
</tr>
<tr>
<td style="text-align:left">-d</td>
<td style="text-align:left">否</td>
<td style="text-align:left">是否容许广播方式消费</td>
</tr>
<tr>
<td style="text-align:left">-g</td>
<td style="text-align:left">是</td>
<td style="text-align:left">订阅组名</td>
</tr>
<tr>
<td style="text-align:left">-i</td>
<td style="text-align:left">否</td>
<td style="text-align:left">从哪个broker开始消费</td>
</tr>
<tr>
<td style="text-align:left">-m</td>
<td style="text-align:left">否</td>
<td style="text-align:left">是否容许从队列的最小位置开始消费，默认会设置为false</td>
</tr>
<tr>
<td style="text-align:left">-q</td>
<td style="text-align:left">否</td>
<td style="text-align:left">消费失败的消息放到一个重试队列，每个订阅组配置几个重试队列</td>
</tr>
<tr>
<td style="text-align:left">-r</td>
<td style="text-align:left">否</td>
<td style="text-align:left">重试消费最大次数，超过则投递到死信队列，不再投递，并报警</td>
</tr>
<tr>
<td style="text-align:left">-s</td>
<td style="text-align:left">否</td>
<td style="text-align:left">消费功能是否开启</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
<tr>
<td style="text-align:left">-w</td>
<td style="text-align:left">否</td>
<td style="text-align:left">发现消息堆积后，将Consumer的消费请求重定向到另外一台Slave机器</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h4 id="84-删除订阅组配置"><a class="markdownIt-Anchor" href="#84-删除订阅组配置"></a> 8.4 删除订阅组配置</h4>
<ul>
<li>
<p>指令： deleteSubGroup</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.consumer.DeleteSubscriptionGroupCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-b</td>
<td style="text-align:left">如果 -c为空，则必填</td>
<td style="text-align:left">broker地址，表示订阅组建在该broker</td>
</tr>
<tr>
<td style="text-align:left">-c</td>
<td style="text-align:left">如果 -b为空，则必填</td>
<td style="text-align:left">cluster名称，表示topic建在该集群（集群可通过clusterList查询）</td>
</tr>
<tr>
<td style="text-align:left">-g</td>
<td style="text-align:left">是</td>
<td style="text-align:left">订阅组名</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h4 id="85-更新broker配置文件"><a class="markdownIt-Anchor" href="#85-更新broker配置文件"></a> 8.5 更新broker配置文件</h4>
<ul>
<li>
<p>指令： updateBrokerConfig</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.broker.UpdateBrokerConfigSubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-b</td>
<td style="text-align:left">如果 -c为空，则必填</td>
<td style="text-align:left">broker地址，表示订阅组建在该broker</td>
</tr>
<tr>
<td style="text-align:left">-c</td>
<td style="text-align:left">如果 -b为空，则必填</td>
<td style="text-align:left">cluster名称，表示topic建在该集群（集群可通过clusterList查询）</td>
</tr>
<tr>
<td style="text-align:left">-k</td>
<td style="text-align:left">否</td>
<td style="text-align:left">是否容许广播方式消费</td>
</tr>
<tr>
<td style="text-align:left">-v</td>
<td style="text-align:left">是</td>
<td style="text-align:left">value值</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h4 id="86-查看topic-列表信息"><a class="markdownIt-Anchor" href="#86-查看topic-列表信息"></a> 8.6 查看topic 列表信息</h4>
<ul>
<li>
<p>指令： topicList</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.broker.UpdateBrokerConfigSubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> nameserve地址为172.21.16.253:9876;</span></span><br><span class="line">sh mqadmin topicList -n 172.21.16.253:9876</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="87-查看路由信息"><a class="markdownIt-Anchor" href="#87-查看路由信息"></a> 8.7 查看路由信息</h4>
<ul>
<li>
<p>指令： topicRoute</p>
</li>
<li>
<p>类路径： com.alibaba.rocketmq.tools.command.topic.TopicRouteSubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-t</td>
<td style="text-align:left">是</td>
<td style="text-align:left">topic名称</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  查看主题%DLQ%consumer1的路由，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin topicRoute -n 172.21.16.253:9876 -t %DLQ%consumer1</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="88-查看topic统计信息"><a class="markdownIt-Anchor" href="#88-查看topic统计信息"></a> 8.8 查看topic统计信息</h4>
<ul>
<li>
<p>指令： topicStatus</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.topic.TopicStatsSubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-t</td>
<td style="text-align:left">是</td>
<td style="text-align:left">topic名称</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看主题%DLQ%consumer1的统计信息，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin topicStatus -n 172.21.16.253:9876 -t %DLQ%consumer1</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="89-查看broker统计信息"><a class="markdownIt-Anchor" href="#89-查看broker统计信息"></a> 8.9 查看broker统计信息</h4>
<ul>
<li>
<p>指令： brokerStatus</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.broker.BrokerStatsSubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-b</td>
<td style="text-align:left">是</td>
<td style="text-align:left">broker地址</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看broker(crmdb)的统计信息，broker地址为172.21.16.253:10911,nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin brokerStatus  –n 172.21.16.253:9876 -b 172.21.16.253:10911</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="810-根据消息id查询消息"><a class="markdownIt-Anchor" href="#810-根据消息id查询消息"></a> 8.10 根据消息ID查询消息</h4>
<ul>
<li>
<p>指令： queryMsgById</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.message.QueryMsgByIdSubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-i</td>
<td style="text-align:left">是</td>
<td style="text-align:left">msgId</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查询msgId= C0A89F8000002A9F000000000000449A的消息，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin queryMsgById -n 172.21.16.253:9876 -i C0A89F8000002A9F000000000000449A</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="811-根据消息key查询消息"><a class="markdownIt-Anchor" href="#811-根据消息key查询消息"></a> 8.11 根据消息key查询消息</h4>
<ul>
<li>
<p>指令： queryMsgByKey</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.message.QueryMsgByKeySubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-f</td>
<td style="text-align:left">否</td>
<td style="text-align:left">被查询消息的截止时间</td>
</tr>
<tr>
<td style="text-align:left">-k</td>
<td style="text-align:left">是</td>
<td style="text-align:left">msgKey</td>
</tr>
<tr>
<td style="text-align:left">-t</td>
<td style="text-align:left">是</td>
<td style="text-align:left">Topic名称</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询Topic= TopicTest下key=i0的消息，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin queryMsgByKey -n 172.21.16.253:9876 -t TopicTest -k i0</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="812-根据offset查询消息"><a class="markdownIt-Anchor" href="#812-根据offset查询消息"></a> 8.12 根据Offset查询消息</h4>
<ul>
<li>
<p>指令： queryMsgByOffset</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.message.QueryMsgByOffsetSubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-b</td>
<td style="text-align:left">是</td>
<td style="text-align:left">Broker名称，表示订阅组建在该broker（这里需要注意填写的是broker的名称，不是broker的地址，broker名称可以在clusterList查到）</td>
</tr>
<tr>
<td style="text-align:left">-i</td>
<td style="text-align:left">是</td>
<td style="text-align:left">query队列id</td>
</tr>
<tr>
<td style="text-align:left">-o</td>
<td style="text-align:left">是</td>
<td style="text-align:left">offset值</td>
</tr>
<tr>
<td style="text-align:left">-t</td>
<td style="text-align:left">是</td>
<td style="text-align:left">Topic名称</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查询brokerName=broker-a，Topic= TopicTest的第1个队列下offset=0的消息，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin queryMsgByOffset -n 172.21.16.253:9876 -b broker-a -i 0 -t TopicTest -o 0</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="813-查询producer的网络连接"><a class="markdownIt-Anchor" href="#813-查询producer的网络连接"></a> 8.13 查询Producer的网络连接</h4>
<p>该命令只打印当前与cluster连接的producer网络连接信息</p>
<ul>
<li>
<p>指令： producerConnection</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.connection.ProducerConnectionSubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-g</td>
<td style="text-align:left">是</td>
<td style="text-align:left">生产者所属组名</td>
</tr>
<tr>
<td style="text-align:left">-t</td>
<td style="text-align:left">是</td>
<td style="text-align:left">topic名称</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询当前属于group（生产者组）=simple-producer-test的生产者到topic=ZTEExample的网络连接，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin producerConnection -n 172.21.16.253:9876 -g simple-producer-test -t ZTEExample</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="814-查询consumer的网络连接"><a class="markdownIt-Anchor" href="#814-查询consumer的网络连接"></a> 8.14 查询Consumer的网络连接</h4>
<p>该命令只打印当前与cluster连接的Consumer网络连接信息</p>
<ul>
<li>
<p>指令： consumerConnection</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.connection.ConsumerConnectionSubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-g</td>
<td style="text-align:left">是</td>
<td style="text-align:left">生产者所属组名</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  查询当前属于group（消费者组）=simple-consumer-test的消费者的网络连接，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin consumerConnection -n 172.21.16.253:9876 -g simple-consumer-test</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="815-查看订阅组消费状态"><a class="markdownIt-Anchor" href="#815-查看订阅组消费状态"></a> 8.15  查看订阅组消费状态</h4>
<ul>
<li>
<p>指令： consumerProgress</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.consumer.ConsumerProgressSubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-g</td>
<td style="text-align:left">是</td>
<td style="text-align:left">消费者所属组名</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">   查询当前属于group（消费者组）=simple-consumer-test的订阅状态，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin consumerProgress -n 172.21.16.253:9876 -g simple-consumer-test</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="816-查看集群消息"><a class="markdownIt-Anchor" href="#816-查看集群消息"></a> 8.16  查看集群消息</h4>
<ul>
<li>
<p>指令： clusterList</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.cluster.ClusterListSubCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-m</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印更多信息 (增加打印出如下信息 #InTotalYest,   #OutTotalYest, #InTotalToday ,#OutTotalToday)</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  查询当前集群状态，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin clusterList -n 172.21.16.253:9876   </span><br><span class="line">sh mqadmin clusterList -n 172.21.16.253:9876 –m</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="817-添加更新kv配置信息"><a class="markdownIt-Anchor" href="#817-添加更新kv配置信息"></a> 8.17  添加（更新）KV配置信息</h4>
<ul>
<li>
<p>指令： updateKvConfig</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.namesrv.UpdateKvConfigCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-k</td>
<td style="text-align:left">是</td>
<td style="text-align:left">key值</td>
</tr>
<tr>
<td style="text-align:left">-v</td>
<td style="text-align:left">是</td>
<td style="text-align:left">value值</td>
</tr>
<tr>
<td style="text-align:left">-s</td>
<td style="text-align:left">是</td>
<td style="text-align:left">Namespace值</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h4 id="818-删除kv配置信息"><a class="markdownIt-Anchor" href="#818-删除kv配置信息"></a> 8.18  删除KV配置信息</h4>
<ul>
<li>
<p>指令： deleteKvConfig</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.namesrv.DeleteKvConfigCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-k</td>
<td style="text-align:left">是</td>
<td style="text-align:left">key值</td>
</tr>
<tr>
<td style="text-align:left">-s</td>
<td style="text-align:left">是</td>
<td style="text-align:left">Namespace值</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h4 id="819-添加更新project-group配置信息"><a class="markdownIt-Anchor" href="#819-添加更新project-group配置信息"></a> 8.19  添加（更新）Project group配置信息</h4>
<ul>
<li>
<p>指令： updateProjectGroup</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.namesrv.UpdateProjectGroupCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-i</td>
<td style="text-align:left">是</td>
<td style="text-align:left">服务器ip</td>
</tr>
<tr>
<td style="text-align:left">-p</td>
<td style="text-align:left">是</td>
<td style="text-align:left">project group名</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h4 id="820-删除project-group配置信息"><a class="markdownIt-Anchor" href="#820-删除project-group配置信息"></a> 8.20  删除Project group配置信息</h4>
<ul>
<li>
<p>指令： deleteProjectGroup</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.namesrv.DeleteProjectGroupCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-i</td>
<td style="text-align:left">是</td>
<td style="text-align:left">服务器ip</td>
</tr>
<tr>
<td style="text-align:left">-p</td>
<td style="text-align:left">是</td>
<td style="text-align:left">project group名</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h4 id="821-取得project-group配置信息"><a class="markdownIt-Anchor" href="#821-取得project-group配置信息"></a> 8.21  取得Project group配置信息</h4>
<ul>
<li>
<p>指令： getProjectGroup</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.namesrv.GetProjectGroupCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-i</td>
<td style="text-align:left">是</td>
<td style="text-align:left">服务器ip</td>
</tr>
<tr>
<td style="text-align:left">-p</td>
<td style="text-align:left">是</td>
<td style="text-align:left">project group名</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h4 id="822-获取consumer消费进度"><a class="markdownIt-Anchor" href="#822-获取consumer消费进度"></a> 8.22  获取Consumer消费进度</h4>
<p>该命令只打印当前与cluster连接的consumer的消费进度</p>
<ul>
<li>
<p>指令： getConsumerStatus</p>
</li>
<li>
<p>类路径：com.alibaba.rocketmq.tools.command.offset.GetConsumerStatusCommand</p>
</li>
<li>
<p>参数</p>
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">是否必填</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">-g</td>
<td style="text-align:left">是</td>
<td style="text-align:left">消费者所属组名</td>
</tr>
<tr>
<td style="text-align:left">-t</td>
<td style="text-align:left">是</td>
<td style="text-align:left">查询主题</td>
</tr>
<tr>
<td style="text-align:left">-i</td>
<td style="text-align:left">否</td>
<td style="text-align:left">Consumer客户端ip</td>
</tr>
<tr>
<td style="text-align:left">-h</td>
<td style="text-align:left">否</td>
<td style="text-align:left">打印帮助</td>
</tr>
<tr>
<td style="text-align:left">-n</td>
<td style="text-align:left">是</td>
<td style="text-align:left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody>
</table>
</li>
<li>
<p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查询属于group（消费者组）=simple-consumer-test的消费者在Topic=ZTEExample上的消费状态，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin getConsumerStatus -n 172.21.16.253:9876 -g simple-consumer-test -t ZTEExample</span><br></pre></td></tr></table></figure></li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>a-zA-Z0-9_- <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>a-zA-Z0-9_- <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>rocketmq</tag>
      </tags>
  </entry>
  <entry>
    <title>LockSupport线程工具类</title>
    <url>/locksupport/</url>
    <content><![CDATA[<h3 id="1-概要"><a class="markdownIt-Anchor" href="#1-概要"></a> 1. 概要</h3>
<p>LockSupport位于java.util.concurrent（简称juc）包中，是一个编程工具类， 主要是为了阻塞和唤醒线程用的。所有的方法都是静态方法，可以让线程在任意位置阻塞，也可以在任意位置唤醒</p>
<p>主要的方法：</p>
<ul>
<li>park(阻塞线程)  和</li>
<li>unpark(启动唤醒线程)</li>
</ul>
<p>关于线程等待/唤醒的方法：</p>
<ul>
<li>方式1：使用Object中的wait()方法让线程等待，使用Object中的notify()方法唤醒线程</li>
<li>使用juc包中Condition的await()方法让线程等待，使用signal()方法唤醒线程</li>
</ul>
<h3 id="2-waitnotify"><a class="markdownIt-Anchor" href="#2-waitnotify"></a> 2. wait/notify</h3>
<ol>
<li>
<p>示例1</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: &quot;</span>+System.currentTimeMillis()+<span class="string">&quot; start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: &quot;</span>+System.currentTimeMillis()+<span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠5秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            lock.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t1: 1667620040963 start</span><br><span class="line">t1: 1667620045967 被唤醒</span><br></pre></td></tr></table></figure>
<p>t1 线程调用<code>lock.wait()</code>方法让t1线程等待，主线程休眠5s后，调用<code>lock.notify()</code>方法唤醒t1线程，然后输出信息，程序正常退出。</p>
</li>
<li>
<p>示例2</p>
<p>如果将上面代码块中的两个<code>synchronized</code>去掉，发现调用<code>wait()</code>方法和<code>notify()</code>方法都会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + System.currentTimeMillis() + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + System.currentTimeMillis() + <span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;thread1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠5秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        lock.notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thread1: 1667624638968 start</span><br><span class="line">Exception in thread &quot;thread1&quot; java.lang.IllegalMonitorStateException</span><br><span class="line">    at java.lang.Object.wait(Native Method)</span><br><span class="line">    at java.lang.Object.wait(Object.java:502)</span><br><span class="line">    at org.example.ObjectDemo.lambda$main$0(ObjectDemo.java:13)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalMonitorStateException</span><br><span class="line">    at java.lang.Object.notify(Native Method)</span><br><span class="line">    at org.example.ObjectDemo.main(ObjectDemo.java:27)</span><br></pre></td></tr></table></figure>
<p><strong>原因： Object类中的wait、notify、notifyAll用于线程等待和唤醒的方法，都必须在同步代码块中运行（必须使用关键字synchronized）</strong></p>
</li>
<li>
<p>示例3</p>
<p>唤醒方法在等待方法之前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: &quot;</span>+System.currentTimeMillis()+<span class="string">&quot; start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: &quot;</span>+System.currentTimeMillis()+<span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;thread1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠5秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            lock.notify();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;lock.notify 执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lock.notify 执行完毕</span><br><span class="line">thread1: 1667625571660 start</span><br></pre></td></tr></table></figure>
<p>输出上面2行之后，程序一直无法结束，t1线程调用<code>wait()</code>方法之前先调用了<code>notify()</code>方法，导致等待的线程无法被唤醒了<br>
<strong>唤醒方法在等待方法之前执行，线程无法被唤醒</strong>，将上面休眠1s的时间改成大于线程中休眠的时间即可；</p>
</li>
</ol>
<p>关于Object类中的用户线程等待和唤醒的方法，总结一下：</p>
<ol>
<li>
<p>wait()/notify()/notifyAll()方法都必须放在同步代码（必须在synchronized内部执行）中执行，需要先获取锁</p>
</li>
<li>
<p>线程唤醒的方法（notify、notifyAll）需要在等待的方法（wait）之后执行，等待中的线程才可能会被唤醒，否则无法唤醒</p>
</li>
</ol>
<h3 id="3-condition实现线程等待和唤醒"><a class="markdownIt-Anchor" href="#3-condition实现线程等待和唤醒"></a> 3. condition实现线程等待和唤醒</h3>
<ol>
<li>
<p>示例1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.await();  <span class="comment">//进入等待</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠5秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            condition.signal(); <span class="comment">//唤醒 t1线程</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t1:1667712939347 start</span><br><span class="line">t1:1667712944350 被唤醒</span><br></pre></td></tr></table></figure>
<p>t1 线程制动之后，调用<code>condition.await()</code>方法将线程处于等待中，主线程休眠5秒之后调用<code>condition.signal()</code>方法将t1线程唤醒；</p>
</li>
<li>
<p>示例2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.await();  <span class="comment">//进入等待</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠5秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        condition.signal(); <span class="comment">//唤醒 t1线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t1:1667713155895 start</span><br><span class="line">Exception in thread &quot;t1&quot; java.lang.IllegalMonitorStateException</span><br><span class="line">    at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:151)</span><br><span class="line">    at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1261)</span><br><span class="line">    at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:457)</span><br><span class="line">    at org.example.ConditionDemo.lambda$main$0(ConditionDemo.java:23)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalMonitorStateException</span><br><span class="line">    at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.signal(AbstractQueuedSynchronizer.java:1939)</span><br><span class="line">    at org.example.ConditionDemo.main(ConditionDemo.java:30)</span><br></pre></td></tr></table></figure>
<p>有异常发生， condition.await();和 condition.signal();都触发了 IllegalMonitorStateException异常。<br>
<strong>原因：调用condition中线程等待和唤醒的方法的前提是必须要先获取lock的锁。</strong></p>
</li>
<li>
<p>示例3</p>
<p>唤醒代码在等待之前执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;进入线程t1&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                lock.lock();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.await();  <span class="comment">//进入等待</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠5秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        lock.lock();</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           condition.signal(); <span class="comment">//唤醒 t1线程</span></span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">           lock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line">        System.out.println(System.currentTimeMillis() +<span class="string">&quot; condition.signal;执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入线程t1</span><br><span class="line">1667714134893 condition.signal;执行完毕</span><br><span class="line">t1:1667714138893 start</span><br></pre></td></tr></table></figure>
<p>输出上面2行之后，程序无法结束，代码结合输出可以看出signal()方法在await()方法之前执行的，最终t1线程无法被唤醒，导致程序无法结束。</p>
</li>
</ol>
<p>关于Condition中方法使用总结：</p>
<ul>
<li>
<p>使用Condition中的线程等待和唤醒方法之前，需要先获取锁。否者会报 IllegalMonitorStateException异常</p>
</li>
<li>
<p>signal()方法先于await()方法之前调用，线程无法被唤醒</p>
</li>
</ul>
<h4 id="object和condition的局限性"><a class="markdownIt-Anchor" href="#object和condition的局限性"></a> Object和Condition的局限性</h4>
<p>Object和Condition的局限性<br>
关于Object和Condtion中线程等待和唤醒的局限性，有以下几点：</p>
<ol>
<li>
<p>2种方式中的让线程等待和唤醒的方法能够执行的先决条件是：线程需要先获取锁</p>
</li>
<li>
<p>唤醒方法需要在等待方法之后调用，线程才能够被唤醒</p>
</li>
</ol>
<p>关于这2点，LockSupport都不需要，就能实现线程的等待和唤醒。下面我们来说一下LockSupport类。</p>
<h3 id="4-locksupport"><a class="markdownIt-Anchor" href="#4-locksupport"></a> 4. LockSupport</h3>
<p>LockSupport类可以阻塞当前线程以及唤醒指定被阻塞的线程，主要是通过<code>park()</code>和<code>unpark(thread)</code>方法来实现阻塞和唤醒线程操作的</p>
<blockquote>
<p>每个线程都有一个许可（permit），permit只有两个值 1 和 0（默认）</p>
<ol>
<li>当调用unpark(thread)方法，就会将thread线程的许可permit设置为1（多次调用结果一致）</li>
<li>当嗲用park()方法，如果当前线程的permit是1， 那么将permit 设置为0，并立即返回；如果当前park方法会被唤醒，然后会将permit再次设置为0，并返回；</li>
</ol>
<p>注意：因为permit默认是0，所以一开始调用park()方法，线程必定会被阻塞。调用unpark(thread)方法后，会自动唤醒thread线程，即park方法立即返回。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="keyword">package</span> java.util.concurrent.locks;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSupport</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LockSupport</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// Cannot be instantiated.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setBlocker</span><span class="params">(Thread t, Object arg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Even though volatile, hotspot doesn&#x27;t need a write barrier here.</span></span><br><span class="line">        UNSAFE.putObject(t, parkBlockerOffset, arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> thread the thread to unpark, or &#123;<span class="doctag">@code</span> null&#125;, in which case</span></span><br><span class="line"><span class="comment">     *        this operation has no effect</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unpark</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (thread != <span class="keyword">null</span>)</span><br><span class="line">            UNSAFE.unpark(thread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞当前线程</span></span><br><span class="line"><span class="comment">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blocker the synchronization object responsible for this</span></span><br><span class="line"><span class="comment">     *        thread parking</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">(Object blocker)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="comment">//setBlocker作用是记录t线程是被broker阻塞的</span></span><br><span class="line">        setBlocker(t, blocker);</span><br><span class="line">        <span class="comment">//UNSAFE是一个非常强大的类，他的的操作是基于底层的</span></span><br><span class="line">        UNSAFE.park(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">        setBlocker(t, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停当前线程，有超时时间</span></span><br><span class="line"><span class="comment">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blocker the synchronization object responsible for this</span></span><br><span class="line"><span class="comment">     *        thread parking</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nanos the maximum number of nanoseconds to wait</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkNanos</span><span class="params">(Object blocker, <span class="keyword">long</span> nanos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Thread t = Thread.currentThread();</span><br><span class="line">            setBlocker(t, blocker);</span><br><span class="line">            UNSAFE.park(<span class="keyword">false</span>, nanos);</span><br><span class="line">            setBlocker(t, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停当前线程，知道某个时间</span></span><br><span class="line"><span class="comment">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blocker the synchronization object responsible for this</span></span><br><span class="line"><span class="comment">     *        thread parking</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deadline the absolute time, in milliseconds from the Epoch,</span></span><br><span class="line"><span class="comment">     *        to wait until</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkUntil</span><span class="params">(Object blocker, <span class="keyword">long</span> deadline)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        setBlocker(t, blocker);</span><br><span class="line">        UNSAFE.park(<span class="keyword">true</span>, deadline);</span><br><span class="line">        setBlocker(t, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the blocker object supplied to the most recent</span></span><br><span class="line"><span class="comment">     * invocation of a park method that has not yet unblocked, or null</span></span><br><span class="line"><span class="comment">     * if not blocked.  The value returned is just a momentary</span></span><br><span class="line"><span class="comment">     * snapshot -- the thread may have since unblocked or blocked on a</span></span><br><span class="line"><span class="comment">     * different blocker object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the thread</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the blocker</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if argument is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBlocker</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> UNSAFE.getObjectVolatile(t, parkBlockerOffset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无期限暂停当前线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UNSAFE.park(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停当前线程，不过有超时时间限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkNanos</span><span class="params">(<span class="keyword">long</span> nanos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>)</span><br><span class="line">            UNSAFE.park(<span class="keyword">false</span>, nanos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停当前线程，知道某个时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deadline 暂停结束时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkUntil</span><span class="params">(<span class="keyword">long</span> deadline)</span> </span>&#123;</span><br><span class="line">        UNSAFE.park(<span class="keyword">true</span>, deadline);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the pseudo-randomly initialized or updated secondary seed.</span></span><br><span class="line"><span class="comment">     * Copied from ThreadLocalRandom due to package access restrictions.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">nextSecondarySeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="keyword">if</span> ((r = UNSAFE.getInt(t, SECONDARY)) != <span class="number">0</span>) &#123;</span><br><span class="line">            r ^= r &lt;&lt; <span class="number">13</span>;   <span class="comment">// xorshift</span></span><br><span class="line">            r ^= r &gt;&gt;&gt; <span class="number">17</span>;</span><br><span class="line">            r ^= r &lt;&lt; <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((r = java.util.concurrent.ThreadLocalRandom.current().nextInt()) == <span class="number">0</span>)</span><br><span class="line">            r = <span class="number">1</span>; <span class="comment">// avoid zero</span></span><br><span class="line">        UNSAFE.putInt(t, SECONDARY, r);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hotspot implementation via intrinsics API</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> parkBlockerOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SEED;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> PROBE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SECONDARY;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">            Class&lt;?&gt; tk = Thread.class;</span><br><span class="line">            parkBlockerOffset = UNSAFE.objectFieldOffset</span><br><span class="line">                (tk.getDeclaredField(<span class="string">&quot;parkBlocker&quot;</span>));</span><br><span class="line">            SEED = UNSAFE.objectFieldOffset</span><br><span class="line">                (tk.getDeclaredField(<span class="string">&quot;threadLocalRandomSeed&quot;</span>));</span><br><span class="line">            PROBE = UNSAFE.objectFieldOffset</span><br><span class="line">                (tk.getDeclaredField(<span class="string">&quot;threadLocalRandomProbe&quot;</span>));</span><br><span class="line">            SECONDARY = UNSAFE.objectFieldOffset</span><br><span class="line">                (tk.getDeclaredField(<span class="string">&quot;threadLocalRandomSecondarySeed&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="41-示例"><a class="markdownIt-Anchor" href="#41-示例"></a> 4.1 示例</h4>
<ol>
<li>
<p>示例一</p>
<p>主线程线程等待5秒之后，唤醒t1线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSupportDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">            LockSupport.park();<span class="comment">//阻塞当前线程</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠5秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        LockSupport.unpark(t1);</span><br><span class="line">        System.out.println(System.currentTimeMillis() + <span class="string">&quot; lock.unpart 执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t1:1667727256993 start</span><br><span class="line">1667727261994 lock.unpart 执行完毕</span><br><span class="line">t1:1667727261994 被唤醒</span><br></pre></td></tr></table></figure>
<p>t1 中调用<code>LockSupport.park()</code>方法让当前线程t1等待，主线程休眠5秒后，调用<code>LockSupport.unpart(t1)</code>将线程唤醒<br>
<code>LockSupport.park();</code>无参数，内部直接会让当前线程处于等待中；unpark方法传递了一个线程对象作为参数，表示将对应的线程唤醒。</p>
</li>
</ol>
<h4 id="43-先interrupt在park"><a class="markdownIt-Anchor" href="#43-先interrupt在park"></a> 4.3 先interrupt在park</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSupportTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;进入线程&quot;</span>);</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(<span class="string">&quot;运行结束&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;是否中断：&quot;</span>+Thread.currentThread().isInterrupted());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;线程启动了，但是在内部进行了park&quot;</span>);</span><br><span class="line">        thread.interrupt();</span><br><span class="line">        System.out.println(<span class="string">&quot;main 线程结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//       线程启动了，但是在内部进行了park</span></span><br><span class="line"><span class="comment">//       main 线程结束</span></span><br><span class="line"><span class="comment">//       Thread-0进入线程</span></span><br><span class="line"><span class="comment">//       运行结束</span></span><br></pre></td></tr></table></figure>
<h4 id="42-先park在interrupt"><a class="markdownIt-Anchor" href="#42-先park在interrupt"></a> 4.2 先park在interrupt</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;进入线程&quot;</span>);</span><br><span class="line">        LockSupport.park();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出：</span></span><br><span class="line"><span class="comment"> * 线程启动了，但是在内部进行了park</span></span><br><span class="line"><span class="comment"> * main 线程结束</span></span><br><span class="line"><span class="comment"> * Thread-0进入线程</span></span><br><span class="line"><span class="comment"> * 运行结束</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="5-线程等待和唤醒方式对比"><a class="markdownIt-Anchor" href="#5-线程等待和唤醒方式对比"></a> 5. 线程等待和唤醒方式对比</h3>
<ul>
<li>
<p>方式1：Object中的wait、notify、notifyAll方法</p>
</li>
<li>
<p>方式2：juc中Condition接口提供的await、signal、signalAll方法</p>
</li>
<li>
<p>方式3：juc中的LockSupport提供的park、unpark方法<br>
<img src="/locksupport/img.png" alt></p>
</li>
</ul>
<p>LockSupport是用来阻塞和环线线程的，wait/notify同样也是，那么两者的区别是什么？</p>
<ul>
<li>wait和notify都是Object中的方法，在调用这两个方法前必须获得锁对象，但是park不需要获取某个对象的锁就可以锁住线程</li>
<li>notify只能随机选择一个线程唤醒，无法唤醒指定的线程，unpark可以唤醒一个指定的线程</li>
</ul>
<h3 id="6-趣味题"><a class="markdownIt-Anchor" href="#6-趣味题"></a> 6. 趣味题</h3>
<p>用两个线程，一个输出字母，一个输出数字交替输出如：1A2B3C4D…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemoTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Thread t1 = <span class="keyword">null</span>, t2 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] a = <span class="string">&quot;1234567&quot;</span>.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] b = <span class="string">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">        t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> i : a) &#123;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">                LockSupport.unpark(t2);</span><br><span class="line">                LockSupport.park();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> i : b) &#123;</span><br><span class="line">                LockSupport.park();</span><br><span class="line">                System.out.print(i);</span><br><span class="line">                LockSupport.unpark(t1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：  1A2B3C4D5E6F7G</span></span><br></pre></td></tr></table></figure>
<p>使用自旋锁也可以实现上面的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CasTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义枚举，包含两个变量</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ReadyToRun</span></span>&#123;T1, T2&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> ReadyToRun r = ReadyToRun.T1;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] a = <span class="string">&quot;1234567&quot;</span>.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] b = <span class="string">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c : a)&#123;</span><br><span class="line">                <span class="comment">//当r不为T1时， 空转占着cpu等待，然后输出字符，将r的值设置为T2</span></span><br><span class="line">                <span class="keyword">while</span> (r != ReadyToRun.T1)&#123;&#125;</span><br><span class="line">                System.out.print(c+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                r = ReadyToRun.T2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c : b)&#123;</span><br><span class="line">                <span class="keyword">while</span> (r != ReadyToRun.T2)&#123;&#125;</span><br><span class="line">                System.out.print(c+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                r = ReadyToRun.T1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>mycat学习</title>
    <url>/mycat/</url>
    <content><![CDATA[<h1 id="mycat分库分表中间件"><a class="markdownIt-Anchor" href="#mycat分库分表中间件"></a> Mycat(分库分表中间件)</h1>
<h2 id="1-数据库优化策略"><a class="markdownIt-Anchor" href="#1-数据库优化策略"></a> 1. 数据库优化策略</h2>
<ol>
<li>重启：释放资源</li>
<li>SQL与索引</li>
<li>表与存储引擎（字段类型选择，长度设置，是否需要分表、分区）</li>
<li>数据库与应用架构（考虑使用缓存服务器，减轻是数据库压力；可以数据库分布式，读写分离，主从复制）</li>
<li>数据库与操作系统配置（修改mysql配置，使用单独服务器部署数据库）</li>
<li>硬件</li>
</ol>
<h2 id="2-数据库演化"><a class="markdownIt-Anchor" href="#2-数据库演化"></a> 2. 数据库演化</h2>
<p>根据业务需要、数据量变化，随之而来的数据库的变化</p>
<ol>
<li>
<p>数据库与应用部署在同一台服务器<br>
<img src="/mycat/image-20201104204430049.png" alt="mycat"></p>
</li>
<li>
<p>单体应用架构，单数据库（数据库服务器和应用服务器分离，但是业务系统越做越大）<br>
<img src="/mycat/image-20201104204624925.png" alt="mycat"></p>
</li>
<li>
<p>多应用单数据库（应用解耦）<br>
<img src="/mycat/image-20201104204933409.png" alt="mycat"></p>
</li>
<li>
<p>多应用 独立数据库<br>
<img src="/mycat/image-20201104205054233.png" alt="mycat"></p>
</li>
<li>
<p>但应用多数据库(分表)<br>
<img src="/mycat/image-20201104205319372.png" alt="mycat"></p>
</li>
</ol>
<h2 id="3-如何分库分表"><a class="markdownIt-Anchor" href="#3-如何分库分表"></a> 3. 如何分库分表</h2>
<p><img src="/mycat/image-20201104205653611.png" alt="mycat"></p>
<ul>
<li>
<p>垂直切分</p>
<ul>
<li>
<p>单库<br>
<img src="/mycat/image-20201104205756827.png" alt="mycat"></p>
</li>
<li>
<p>多库<br>
<img src="/mycat/image-20201104210008624.png" alt="mycat"></p>
</li>
</ul>
</li>
<li>
<p>水平切分</p>
<ul>
<li>
<p>按照月分表或者分成实时、历史表等<br>
<img src="/mycat/image-20201104210117373.png" alt="mycat"></p>
</li>
<li>
<p>分成多库<br>
<img src="/mycat/image-20201104210416994.png" alt="mycat"></p>
</li>
</ul>
</li>
</ul>
<h2 id="4-分库分表带来的问题"><a class="markdownIt-Anchor" href="#4-分库分表带来的问题"></a> 4. 分库分表带来的问题</h2>
<ol>
<li>
<p>跨库关联查询</p>
<ul>
<li>增加冗余字段（违反了第三范式：表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系）</li>
<li>跨数据库的同步（canal、Mq（最好）、ETL、kettle、ogg）(在某个库中同步其他数据库中表的数据，避免跨库关联查询)</li>
<li>全局表(广播表)：比如行政区划表，所有的系统都是一样的；</li>
<li>API</li>
</ul>
</li>
<li>
<p>分布式事务</p>
<ul>
<li>Local</li>
</ul>
</li>
<li>
<p>排序、翻页、函数计算</p>
<ul>
<li></li>
</ul>
</li>
<li>
<p>全局主键</p>
<ul>
<li>雪花算法leaf</li>
<li>redis(int 类型可以设置incby)</li>
<li>ZookKeeper</li>
<li>uuid(数据过长， 影响索引存储)</li>
</ul>
</li>
<li>
<p>多数据源连接（动态数据源）<br>
<img src="/mycat/image-20201104213343204.png" alt="mycat"></p>
</li>
</ol>
<h2 id="5-mycat分库分表中间件"><a class="markdownIt-Anchor" href="#5-mycat分库分表中间件"></a> 5. Mycat分库分表中间件</h2>
<p><strong>官网地址</strong>：<a href="http://www.mycat.org.cn/">http://www.mycat.org.cn/</a></p>
<p>从阿里cobar升级而来，完全实现了mysql协议，可以当作一个mysql数据库来使用，通过JDBC支持其他数据库实现分库分表，解决了<strong>多表join、分布式事务、全局序列号、翻页查询、函数计算</strong>的问题</p>
<ul>
<li>一个彻底开源的，面向企业应用开发的大数据库集群</li>
<li>支持事务、ACID、可以替代MySQL的加强版数据库</li>
<li>一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群</li>
<li>一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server</li>
<li>结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品</li>
<li>一个新颖的数据库中间件产品</li>
</ul>
<p>华为云的DDM其实也是根据mycat做的</p>
<h3 id="51-核心概念"><a class="markdownIt-Anchor" href="#51-核心概念"></a> 5.1 核心概念</h3>
<p><img src="/mycat/image-20201104215015366.png" alt="image-20201104215015366"></p>
<h3 id="52-mycat安装与配置"><a class="markdownIt-Anchor" href="#52-mycat安装与配置"></a> 5.2 Mycat安装与配置</h3>
<h4 id="521-mycat安装"><a class="markdownIt-Anchor" href="#521-mycat安装"></a> 5.2.1 Mycat安装</h4>
<p>从官网下载安装版本，解压到文件(官网建议安装在/usr/local/Mycat)后页面如下图所示：<br>
<img src="/mycat/image-20201127094703483.png" alt="image-20201127094703483"></p>
<p>目录解释如下：</p>
<ul>
<li>**bin：*<em>存放window版和linux版本除了提供封装成服务的版本之外，也提供了nowrap的shell脚本命令，方便选择和修改；Linux下运行:./mycat console， 首先要chmod + x</em>;(mycat支持的命令console、start、stop、restart、status、dump)</li>
<li>**conf：**server.xml是mycat服务器参数调整和用户授权的配置文件，schema.xml是逻辑库定义和表以及分片定义的配置文件，rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启mycat或者通过9066端口reload</li>
<li>**lib:**主要存放mycat依赖的一些jar文件</li>
<li><strong>logs:<strong>日志存放在mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug，方便排查问题；注意Linux下部署安装mysql，默认不忽略，需要手动到/etc/my.cnf下配置</strong>lower_case_table_names=1</strong>使Linux环境下MySQL忽略表明大小写，否则使用mycat的时候会提示找不到表的错误</li>
</ul>
<h4 id="522-服务启动与配置"><a class="markdownIt-Anchor" href="#522-服务启动与配置"></a> 5.2.2 服务启动与配置</h4>
<p>Mycat在Linux中部署启动时，首先需要在Linux系统的环境变量中配置MYCAT_HOE,操作方式如下：</p>
<ol>
<li>
<p>vi /etc/profile，在系统环境变量文件中增加MYCAT_HOME=/usr/lib/tools/mycat<br>
<img src="/mycat/image-20201127103212598.png" alt="image-20201127103212598"></p>
</li>
<li>
<p>执行 source/etc/profile命令，使环境变量生效。如果是多台Linux系统中组件Mycat集群，那需要在mycat Server所在的服务器配置对其他ip和主机名的映射，配置方式如下：<br>
<img src="/mycat/image-20201127104159580.png" alt="image-20201127104159580"></p>
<p>经过以上两个步骤的配置，就可以到/usr/lib/tools/mycat/bin目录下执行./mycat start启动mycat服务；使用mycat status查看mycat的运行状态；如下图<br>
<img src="/mycat/image-20201128135953635.png" alt="image-20201128135953635"></p>
</li>
</ol>
<h5 id="5221-安装遇到的问题"><a class="markdownIt-Anchor" href="#5221-安装遇到的问题"></a> 5.2.2.1 安装遇到的问题</h5>
<ol>
<li>
<p>schema TESTDB refered by user root is not exist!<img src="/mycat/image-20201215152125176.png" alt="image-20201215152125176"></p>
<p>解决方式：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在conf/server.xml文件中schemas中配置schema.xml文件中的schema的name值--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--user中的name为mycat服务的用户名--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--这个是mycat服务连接的密码--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>xiaoyuge<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="523日志分析"><a class="markdownIt-Anchor" href="#523日志分析"></a> 5.2.3日志分析</h4>
<p>mycat的日志文件配置为MYCAT_HOME/conf/log4j.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">log4j</span>:configuration <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ConsoleAppender&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;MM-dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件存放的目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;MYCAT_HOME&#125;/logs/mycat.log&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Append&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;MaxFileSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000KB&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;MaxBackupIndex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;MM/dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--level是日志级别，生产环境下加以将级别调整为info/ware，如果是研究测试，碰到异常设置为debug--&gt;</span></span><br><span class="line">truetrue<span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">truetrue<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ConsoleAppender&quot;</span> /&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="5231-warpper日志"><a class="markdownIt-Anchor" href="#5231-warpper日志"></a> 5.2.3.1 warpper日志</h5>
<p>目前mycat的启动时经过warpper封装成启动脚本，所以日志也会有其相关的日志文件：${MYCAT_HOME}/logs/warapper.log， 在启动的时候如果系统环境配置错误或缺少配置时，导致mycat无法启动，可以通过查看wrapper.log查看具体错误原因。</p>
<ol>
<li>
<p>正常启动</p>
 <figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">STATUS | wrapper | <span class="number">2015</span>/<span class="number">04</span>/<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">00</span> | --&gt; Wrapper Started as Daemon</span><br><span class="line">STATUS | wrapper | <span class="number">2015</span>/<span class="number">04</span>/<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">00</span> | Launching a JVM...</span><br><span class="line">INFO | jvm <span class="number">1</span> | <span class="number">2015</span>/<span class="number">04</span>/<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">01</span> | Wrapper (Version <span class="number">3</span><span class="variable">.2</span><span class="variable">.3</span>) http:<span class="comment">//wrapper.tanukisoftware.org</span></span><br><span class="line">INFO | jvm <span class="number">1</span> | <span class="number">2015</span>/<span class="number">04</span>/<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">01</span> | Copyright <span class="number">1999</span>-<span class="number">2006</span> Tanuki Software, Inc. AllRights Reserved.</span><br><span class="line">INFO | jvm <span class="number">1</span> | <span class="number">2015</span>/<span class="number">04</span>/<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">01</span> |</span><br><span class="line">INFO | jvm <span class="number">1</span> | <span class="number">2015</span>/<span class="number">04</span>/<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">01</span> | log4j <span class="number">2015</span>-<span class="number">04</span>-<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">01</span> [./conf/log4j<span class="variable">.xml</span>]load completed.</span><br><span class="line">INFO | jvm <span class="number">1</span> | <span class="number">2015</span>/<span class="number">04</span>/<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">02</span> | MyCAT Server startup successfully. see logs in logs/mycat<span class="variable">.log</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动异常</p>
 <figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">STATUS | wrapper | <span class="number">2015</span>/<span class="number">02</span>/<span class="number">14</span> <span class="number">01</span>:<span class="number">43</span>:<span class="number">44</span> | --&gt; Wrapper Started as Daemon</span><br><span class="line">STATUS | wrapper | <span class="number">2015</span>/<span class="number">02</span>/<span class="number">14</span> <span class="number">01</span>:<span class="number">43</span>:<span class="number">44</span> | Launching a JVM...</span><br><span class="line">INFO | jvm <span class="number">1</span> | <span class="number">2015</span>/<span class="number">02</span>/<span class="number">14</span> <span class="number">01</span>:<span class="number">43</span>:<span class="number">45</span> | Error: Exception thrown by the agent : java<span class="variable">.rmi</span><span class="variable">.server</span><span class="variable">.ExportException</span>:</span><br><span class="line">Port already in <span class="keyword">use</span>: <span class="number">1984</span>; nested exception is:</span><br><span class="line">INFO | jvm <span class="number">1</span> | <span class="number">2015</span>/<span class="number">02</span>/<span class="number">14</span> <span class="number">01</span>:<span class="number">43</span>:<span class="number">45</span> | java<span class="variable">.net</span><span class="variable">.BindException</span>: Address already in <span class="keyword">use</span></span><br><span class="line">ERROR | wrapper | <span class="number">2015</span>/<span class="number">02</span>/<span class="number">14</span> <span class="number">01</span>:<span class="number">43</span>:<span class="number">45</span> | JVM exited <span class="keyword">while</span> loading the application.</span><br><span class="line">    </span><br><span class="line"># 日志显示异常原因为 java<span class="variable">.net</span><span class="variable">.BindException</span>: Address already in <span class="keyword">use</span>,也就是端口占用，很有可能是原有服</span><br><span class="line">务未停止，或者 Mycat 默认端口被其他程序占用，正常启动成功后会有 mycat<span class="variable">.log</span> 日志，如果服务未启动成功不会有对应的日志。 也可以去修改 conf 文件夹里的 wrapper<span class="variable">.conf</span> 里的 wrapper<span class="variable">.java</span><span class="variable">.additional</span><span class="variable">.7</span>=-Dcom<span class="variable">.sun</span><span class="variable">.management</span><span class="variable">.jmxremote</span><span class="variable">.port</span>=<span class="number">1984</span>，server<span class="variable">.xml</span> 的&lt;<span class="keyword">property</span> name=<span class="string">&quot;serverPort&quot;</span>&gt;<span class="number">8066</span>&lt;/<span class="keyword">property</span>&gt;和</span><br><span class="line">&lt;<span class="keyword">property</span> name=<span class="string">&quot;managerPort&quot;</span>&gt;<span class="number">9066</span>&lt;/<span class="keyword">property</span>&gt;，这方法适</span><br><span class="line">合一台机器上两个 mycat 或者 <span class="number">1984</span>,<span class="number">8066</span>,<span class="number">9066</span> 端口被其它应用占用的情况</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h5 id="5232-mycat日志"><a class="markdownIt-Anchor" href="#5232-mycat日志"></a> 5.2.3.2 mycat日志</h5>
<h4 id="524-mycat防火墙设置"><a class="markdownIt-Anchor" href="#524-mycat防火墙设置"></a> 5.2.4 mycat防火墙设置</h4>
<p>白名单和SQL黑名单说明：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在 server.xml 中配置：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">firewall</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--ip 白名单列表，可以配置多个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">whitehost</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--ip 白名单 用户对应的可以访问的 ip 地址--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">host</span> <span class="attr">user</span>=<span class="string">&quot;mycat&quot;</span> <span class="attr">host</span>=<span class="string">&quot;127.0.0.1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">host</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">whitehost</span>&gt;</span></span><br><span class="line">     &lt;!-是否开启检查黑名单列表--&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">blacklist</span> <span class="attr">check</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--黑名单允许的 权限 后面为默认--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;selelctAllow&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">blacklist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">firewall</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>黑名单配置拦截明细如下：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">配置项</th>
<th style="text-align:center">缺省值</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">rollbackAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许执行 roll back 操作,如果把 selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow 都设置为 false，这就是一个只读数据源了。</td>
</tr>
<tr>
<td style="text-align:center">selectAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否运行执行SELECT语句</td>
</tr>
<tr>
<td style="text-align:center">selectAllColumnAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但 select * from (select id, name from t) a。这个选项是防御程序通过调用 select *获得数据表的结构信息</td>
</tr>
<tr>
<td style="text-align:center">selectIntoAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">SELECT 查询中是否允许 INTO 字句</td>
</tr>
<tr>
<td style="text-align:center">deleteAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许执行 DELETE 语句</td>
</tr>
<tr>
<td style="text-align:center">updateAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许执行 UPDATE 语句</td>
</tr>
<tr>
<td style="text-align:center">insertAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许执行 INSERT 语句</td>
</tr>
<tr>
<td style="text-align:center">replaceAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许执行 REPLACE 语句</td>
</tr>
<tr>
<td style="text-align:center">mergeAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许执行 MERGE 语句，这个只在 Oracle 中有用</td>
</tr>
<tr>
<td style="text-align:center">callAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许通过 jdbc 的 call 语法调用存储过程</td>
</tr>
<tr>
<td style="text-align:center">setAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许使用 SET 语法</td>
</tr>
<tr>
<td style="text-align:center">truncateAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">truncate 语句是危险，缺省打开，若需要自行关闭</td>
</tr>
<tr>
<td style="text-align:center">createTableAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许创建表</td>
</tr>
<tr>
<td style="text-align:center">alterTableAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许执行 Alter Table 语句</td>
</tr>
<tr>
<td style="text-align:center">dropTableAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许修改表</td>
</tr>
<tr>
<td style="text-align:center">commentAllow</td>
<td style="text-align:center">false</td>
<td style="text-align:center">是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别</td>
</tr>
<tr>
<td style="text-align:center">noneBaseStatementAllow</td>
<td style="text-align:center">false</td>
<td style="text-align:center">是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项 就能够屏蔽 DDL。</td>
</tr>
<tr>
<td style="text-align:center">multiStatementAllow</td>
<td style="text-align:center">false</td>
<td style="text-align:center">是否允许一次执行多条语句，缺省关闭</td>
</tr>
<tr>
<td style="text-align:center">useAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许执行 mysql 的 use 语句，缺省打开</td>
</tr>
<tr>
<td style="text-align:center">describeAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许执行 mysql 的 describe 语句，缺省打开</td>
</tr>
<tr>
<td style="text-align:center">showAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许执行 mysql 的 show 语句，缺省打开</td>
</tr>
<tr>
<td style="text-align:center">commitAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">是否允许执行 commit 操作</td>
</tr>
</tbody>
</table>
<p><strong>拦截配置=-永真条件：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">配置项</th>
<th style="text-align:center">缺省值</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">selectWhereAlwayTrueCheck</td>
<td style="text-align:center">true</td>
<td style="text-align:center">检查 SELECT 语句的 WHERE 子句是否是一个永真条件</td>
</tr>
<tr>
<td style="text-align:center">selectHavingAlwayTrueCheck</td>
<td style="text-align:center">true</td>
<td style="text-align:center">检查 SELECT 语句的 HAVING 子句是否是一个永真条件</td>
</tr>
<tr>
<td style="text-align:center">deleteWhereAlwayTrueCheck</td>
<td style="text-align:center">true</td>
<td style="text-align:center">检查 DELETE 语句的 WHERE 子句是否是一个永真条件</td>
</tr>
<tr>
<td style="text-align:center">deleteWhereNoneCheck</td>
<td style="text-align:center">false</td>
<td style="text-align:center">检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险</td>
</tr>
<tr>
<td style="text-align:center">updateWhereAlayTrueCheck</td>
<td style="text-align:center">true</td>
<td style="text-align:center">检查 UPDATE 语句的 WHERE 子句是否是一个永真条件</td>
</tr>
<tr>
<td style="text-align:center">updateWhereNoneCheck</td>
<td style="text-align:center">false</td>
<td style="text-align:center">检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险</td>
</tr>
<tr>
<td style="text-align:center">conditionAndAlwayTrueAllow</td>
<td style="text-align:center">false</td>
<td style="text-align:center">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件</td>
</tr>
<tr>
<td style="text-align:center">conditionAndAlwayFalseAllow</td>
<td style="text-align:center">false</td>
<td style="text-align:center">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件</td>
</tr>
<tr>
<td style="text-align:center">conditionLikeTrueAllow</td>
<td style="text-align:center">true</td>
<td style="text-align:center">检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件</td>
</tr>
</tbody>
</table>
<p><strong>其他拦截配置：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">配置项</th>
<th style="text-align:left">缺省值</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">selectIntoOutfileAllow</td>
<td style="text-align:left">false</td>
<td style="text-align:center">SELECT … INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的</td>
</tr>
<tr>
<td style="text-align:center">selectUnionCheck</td>
<td style="text-align:left">true</td>
<td style="text-align:center">检测 SELECT UNION</td>
</tr>
<tr>
<td style="text-align:center">selectMinusCheck</td>
<td style="text-align:left">true</td>
<td style="text-align:center">检测 SELECT MINUS</td>
</tr>
<tr>
<td style="text-align:center">selectExceptCheck</td>
<td style="text-align:left">true</td>
<td style="text-align:center">检测 SELECT EXCEPT</td>
</tr>
<tr>
<td style="text-align:center">selectIntersectCheck</td>
<td style="text-align:left">true</td>
<td style="text-align:center">检测 SELECT INTERSECT</td>
</tr>
<tr>
<td style="text-align:center">mustParameterized</td>
<td style="text-align:left">false</td>
<td style="text-align:center">是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL</td>
</tr>
<tr>
<td style="text-align:center">strictSyntaxCheck</td>
<td style="text-align:left">true</td>
<td style="text-align:center">是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的，SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者</td>
</tr>
<tr>
<td style="text-align:center">conditionOpXorAllow</td>
<td style="text-align:left">false</td>
<td style="text-align:center">查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。</td>
</tr>
<tr>
<td style="text-align:center">conditionOpBitwseAllow</td>
<td style="text-align:left">true</td>
<td style="text-align:center">查询条件中是否允许有&quot;&amp;&quot;、&quot;~&quot;、&quot;</td>
</tr>
<tr>
<td style="text-align:center">conditionDoubleConstAllow</td>
<td style="text-align:left">false</td>
<td style="text-align:center">查询条件中是否允许连续两个常量运算表达式</td>
</tr>
<tr>
<td style="text-align:center">minusAllow</td>
<td style="text-align:left">true</td>
<td style="text-align:center">是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句</td>
</tr>
<tr>
<td style="text-align:center">intersectAllow</td>
<td style="text-align:left">true</td>
<td style="text-align:center">是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句</td>
</tr>
<tr>
<td style="text-align:center">constArithmeticAllow</td>
<td style="text-align:left">true</td>
<td style="text-align:center">拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中&quot;3 - 1&quot;是常量运算表达式。</td>
</tr>
<tr>
<td style="text-align:center">limitZeroAllow</td>
<td style="text-align:left">false</td>
<td style="text-align:center">是否允许 limit 0 这样的语句</td>
</tr>
</tbody>
</table>
<p><strong>禁用对象检测配置：</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">配置项</th>
<th style="text-align:center">缺省值</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">tableCheck</td>
<td style="text-align:center">true</td>
<td style="text-align:center">检测是否使用了禁用的表</td>
</tr>
<tr>
<td style="text-align:center">schemaCheck</td>
<td style="text-align:center">true</td>
<td style="text-align:center">检测是否使用了禁用的 Schema</td>
</tr>
<tr>
<td style="text-align:center">functionCheck</td>
<td style="text-align:center">true</td>
<td style="text-align:center">检测是否使用了禁用的函数</td>
</tr>
<tr>
<td style="text-align:center">objectCheck</td>
<td style="text-align:center">true</td>
<td style="text-align:center">检测是否使用了“禁用对对象”</td>
</tr>
<tr>
<td style="text-align:center">variantCheck</td>
<td style="text-align:center">true</td>
<td style="text-align:center">检测是否使用了“禁用的变量”</td>
</tr>
<tr>
<td style="text-align:center">readOnlyTables</td>
<td style="text-align:center">空</td>
<td style="text-align:center">指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为&quot;被修改表&quot;出现</td>
</tr>
</tbody>
</table>
<h4 id="525-mycat配置文件"><a class="markdownIt-Anchor" href="#525-mycat配置文件"></a> 5.2.5 mycat配置文件</h4>
<h5 id="5251-schemaxml配置"><a class="markdownIt-Anchor" href="#5251-schemaxml配置"></a> 5.2.5.1 schema.xml配置</h5>
<p>schema.xml作为mycat中重要的配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。</p>
<h5 id="5252-scheme标签"><a class="markdownIt-Anchor" href="#5252-scheme标签"></a> 5.2.5.2 scheme标签</h5>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>schema标签用于定义mycat实例中的逻辑库，mycat可以由多个逻辑库，每个逻辑库都有自己的相关配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schema标签，所有的表配置，会属于同一个默认的逻辑库。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--逻辑库TESTDB--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;travelrecord&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--USERDB--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;USERDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;company&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn10,dn11,dn12&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	逻辑库的概念和MySQL数据库中的database概念相同，我们在查询这两个不同的逻辑库中表的时候需要切换到该逻辑库下才可以查询到所需要的表</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<p>在server.xml中可以配置不同的用户能够使用的schema</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 表级 DML 权限设置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;privileges check=&quot;false&quot;&gt;</span></span><br><span class="line"><span class="comment">                &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span></span><br><span class="line"><span class="comment">                        &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">                        &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">                &lt;/schema&gt;</span></span><br><span class="line"><span class="comment">        &lt;/privileges&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>user<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readOnly&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/mycat/image-20201129110838590.png" alt></p>
<p>schema标签的相关属性：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名</th>
<th style="text-align:center">值</th>
<th style="text-align:center">数量限制</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">dataNode</td>
<td style="text-align:center">任意string</td>
<td style="text-align:center">（0…1）</td>
</tr>
<tr>
<td style="text-align:center">checkSQLschema</td>
<td style="text-align:center">Boolean</td>
<td style="text-align:center">（1）</td>
</tr>
<tr>
<td style="text-align:center">sqlMaxLimit</td>
<td style="text-align:center">Integer</td>
<td style="text-align:center">（1）</td>
</tr>
</tbody>
</table>
<h6 id="52521-datanode"><a class="markdownIt-Anchor" href="#52521-datanode"></a> 5.2.5.2.1  dataNode</h6>
<p>该属性用于绑定逻辑库到某个具体的database上，1.3版本如果配置了dataNode,则不可以配置分片表，1.4可以配置默认分片，只需要配置需要分片的表即可，具体配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.3版本配置--&gt;</span><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;USERDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>&gt;</span>&lt;!—里面不能配置任何表--&gt;<span class="tag">&lt;/<span class="name">schema</span>&gt;</span><span class="comment">&lt;!--1.4版本配置--&gt;</span><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;USERDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span>&gt;</span>&lt;!—配置需要分片的表--&gt;	<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">“tuser”</span> <span class="attr">dataNode</span>=<span class="string">”dn1”/</span>&gt;</span><span class="tag">&lt;/<span class="name">schema</span>&gt;</span><span class="comment">&lt;!-- 	那么现在tuser就绑定到dn1所配置的具体database上，可以直接访问这个database，没有配置的表则会走默认的节点dn2，这里注意没有配置在分片里面的表工具查看无法显示，但是可以正常使用。--&gt;</span></span><br></pre></td></tr></table></figure>
<h6 id="52522-checksqlschema"><a class="markdownIt-Anchor" href="#52522-checksqlschema"></a> 5.2.5.2.2 checkSQLschema</h6>
<p>当改制设置为true时，我们执行“SELECT * FROM TESTDB.travelrecord；”则mycat会把语句修改为“SELECT * FROM travelrecord;”即把表示schema的字符去掉，避免发送到后端数据库执行报ERROR 1146：Table ‘testdb.travelrecord’ doest’t exist.不过，即使设置该值为 true ，如果语句所带的是并非是 schema 指定的名字，例如：<strong>select * from db1.travelrecord;</strong> 那么 MyCat 并不会删除 db1 这个字段，如果没有定义该库的话则会报错，所以在提供 SQL语句的最好是不带这个字段。</p>
<h6 id="52523-sqlmaxlimit"><a class="markdownIt-Anchor" href="#52523-sqlmaxlimit"></a> 5.2.5.2.3 sqlMaxLimit</h6>
<p>当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应的值。例如设置值为 100，执行**select * from TESTDB.travelrecord;<strong>的效果为和执行</strong>select * from TESTDB.travelrecord limit 100;**相同。</p>
<p>设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。</p>
<p>当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。</p>
<p>需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。</p>
<h3 id="52-分配规则"><a class="markdownIt-Anchor" href="#52-分配规则"></a> 5.2 分配规则</h3>
<p><img src="/mycat/image-20201104222632963.png" alt="image-20201104222632963"><br>
<img src="/mycat/image-20201104221336437.png" alt="image-20201104221336437"></p>
<ul>
<li>
<p>范围分片：根据某个字设置auto-sharding-long，如果这个primaryKey超出了范围会报错</p>
</li>
<li>
<p>取模分片：</p>
</li>
<li>
<p>ER分片（将父子表有关联的数据放在一个data-node里面）</p>
<p><img src="/mycat/image-20201104221659540.png" alt="image-20201104221659540"></p>
</li>
<li>
<p>全局表：所有dataNode存储相同的数据，查询的时候是随机查询某个表 type=global，查询的时候随机从某个datanode获取</p>
</li>
<li>
<p>非分片表：只在某个dataNode上存储,指定一个dataNode并且不写分片规则</p>
</li>
<li>
<p>单库分表：有个bug在实际数据库中必须要创建mycat中一摸一样的数据表，而且truncat的时候要现在dataNode先删除，才能删除的掉mycat的数据</p>
</li>
</ul>
<h3 id="53-全局id"><a class="markdownIt-Anchor" href="#53-全局id"></a> 5.3 全局ID</h3>
<p><img src="/mycat/image-20201104223246735.png" alt="image-20201104223246735"></p>
<ul>
<li>文件方式—0</li>
<li>数据库方式—1</li>
<li>本地时间戳----2</li>
<li>ZK方式----3</li>
</ul>
<h2 id="6-mycat分片策略详解"><a class="markdownIt-Anchor" href="#6-mycat分片策略详解"></a> 6. Mycat分片策略详解</h2>
<p>连续分片与离散分片</p>
<p><img src="/mycat/image-20201107201442912.png" alt="image-20201107201442912"></p>
<p><strong>连续分片</strong>：</p>
<ul>
<li>范围分片</li>
<li>日期/事件</li>
</ul>
<p>缺点：</p>
<ul>
<li>存在数据热点的可能性</li>
<li>并发访问能力受限于单一或少量DataNode（访问集中），并不能分摊数据库访问的压力</li>
</ul>
<p><strong>离散</strong>：</p>
<ul>
<li>
<p>取模（partioncount 的总数必须和分片总数相同）</p>
</li>
<li>
<p>枚举</p>
</li>
<li>
<p>一致性哈希(qs-murmur)</p>
</li>
<li>
<p>固定分片哈希</p>
<ul>
<li>
<p>partitionCount: 2, 1表示有三个分片必须和节点数量一致，否则会报错，前面两个一样长</p>
</li>
<li>
<p>partitionLength: 256, 512表示长度为256和512</p>
</li>
<li>
<p>综合在一起就是前面2个分片长度为256， 最后一个为512，结果如下图所示（注意partitionCount和partitionLength的数量一定要一致）</p>
</li>
<li>
<p><img src="/mycat/image-20201219103201836.png" alt="image-20201219103201836"></p>
<p><img src="/mycat/image-20201219102742172.png" alt="image-20201219102742172"></p>
</li>
</ul>
</li>
<li>
<p>取模范围(sharting-by-pattern)：先取模PartitionByPattern后分片</p>
</li>
<li>
<p>范围取模: PartitionByRangeMod(partition-rane-mod.txt)</p>
<ul>
<li>
<pre class="highlight"><code class="txt">0-2000=1		#范围在2000以内的在第一个节点（取模的结果还是本身）
2001-4000=2		#范围在2001到4000以内的再模2，结果为0在第一个节点，结果为1在第三个节点
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-   其他</span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line"></span><br><span class="line">-   并发访问能力增强（负载到不同的节点）</span><br><span class="line">-   范围条件查询性能提升（并行计算）</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line"></span><br><span class="line">-   数据扩容比较困难，设计到数据迁移问题</span><br><span class="line">-   数据库连接消耗比较多</span><br><span class="line"></span><br><span class="line">分片策略的选择：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>） 确定分片表</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>） 找出分片键</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>） 考虑容量、增速、业务用户</span><br><span class="line"></span><br><span class="line">如果在查询语句中没有携带分片建，那么mycat会将sql发布到所有的节点上</span><br><span class="line"></span><br><span class="line">## <span class="number">7.</span> Mycat扩缩容</span><br><span class="line"></span><br><span class="line">### <span class="number">7.1</span> 在线不停机扩缩容（双写）</span><br><span class="line"></span><br><span class="line">![image<span class="number">-20201107205855474</span>](./mycat/image<span class="number">-20201107205855474.</span>png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### <span class="number">7.2</span> 离线扩缩容</span><br><span class="line"></span><br><span class="line">#### <span class="number">7.2</span><span class="number">.1</span>Mysql Dump</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">mysqldump -uroot -p123456 -h127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span> -p3306 -c -t --skip-extended-insert 数据库名称 &gt; mysql<span class="number">.11</span><span class="number">.11</span>.sql</span><br></pre></td></tr></table></figure>

</code></pre>
</li>
</ul>
</li>
</ul>
<h4 id="722-mycat自带工具"><a class="markdownIt-Anchor" href="#722-mycat自带工具"></a> 7.2.2 Mycat自带工具</h4>
<ol>
<li>mycat所在环境安装mysql客户端程序</li>
<li>mycat的lib目录下添加mysql的jdbc驱动包（mysql-connector-java-5.7.1.jar）</li>
<li>对扩容缩容的表所有节点数据进行备份</li>
<li>复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml</li>
<li>修改newSchema.xml和newRule.xml配置文件为扩容缩容后的参数</li>
<li>在conf/migrateTable.properties配置文件中配置分片库和分片表如：imall=table_test1</li>
<li>dataMigrate.sh配置mysqldump路径</li>
<li>停止mycat服务</li>
<li>执行bin/dataMigrate.sh脚本（不能用openjdk）</li>
<li>替换schema.xml、rule.xml</li>
</ol>
<p><strong>注意事项：</strong></p>
<ul>
<li>保证分片表迁移数据前后路由规则一致（取模–&gt;取模）</li>
<li>保证分片表歉意数据前后分片字段一致</li>
<li>全局表将被忽略</li>
<li>不要将非分片表配置到migrateTables.properties文件中</li>
<li>暂时只支持分片表使用Mysql作为数据源的扩容缩容</li>
</ul>
<h2 id="8-mycat读写分离"><a class="markdownIt-Anchor" href="#8-mycat读写分离"></a> 8. Mycat读写分离</h2>
<h3 id="81-主从复制"><a class="markdownIt-Anchor" href="#81-主从复制"></a> 8.1 主从复制</h3>
<ol>
<li>数据备份回复</li>
<li>负载均衡（读写分离）</li>
<li>高可用HA</li>
</ol>
<h3 id="82-主从复制形式"><a class="markdownIt-Anchor" href="#82-主从复制形式"></a> 8.2 主从复制形式;</h3>
<p><img src="/mycat/image-20201107212552852.png" alt="image-20201107212552852"></p>
<h4 id="binlogbinary-log-二进制日志"><a class="markdownIt-Anchor" href="#binlogbinary-log-二进制日志"></a> binlog(Binary log 二进制日志)</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查看binglog: SHOW binlog events in &#x27;mysql-bin.000001&#x27;</span></span><br><span class="line"><span class="comment">--show variables like &#x27;max_blog_max&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="binlog配置"><a class="markdownIt-Anchor" href="#binlog配置"></a> binlog配置</h4>
<ul>
<li>STATEMENT: 记录每一天修改数据的sql语句（减少日志量，节约IO）</li>
<li>ROW: 记录哪条数据被修改了，修改成什么样子了（5.7以后默认）</li>
<li>MIXED: 结合两种方式，一般语句用STATEMENT,函数之类的使用ROW</li>
</ul>
<p><strong>binlog</strong>格式（mysql-bin.00001等）</p>
<p><strong>查看binlog</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> binlog events <span class="keyword">in</span> <span class="string">&#x27;mysql-bin.00001&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="主从复制原理"><a class="markdownIt-Anchor" href="#主从复制原理"></a> 主从复制原理</h3>
<p>SQL Thread是单线程的， 这也是所有的主从复制延迟的原因，那么relay log接受master节点的sql语句主要是用于缓冲</p>
<p><img src="/mycat/image-20201107213638624.png" alt="image-20201107213638624"></p>
<h3 id="mycat读写分离配置"><a class="markdownIt-Anchor" href="#mycat读写分离配置"></a> mycat读写分离配置</h3>
<p><img src="/mycat/image-20201107213859155.png" alt="image-20201107213859155"></p>
<h3 id="85-mycat注解hint"><a class="markdownIt-Anchor" href="#85-mycat注解hint"></a> 8.5 Mycat注解（hint）</h3>
<p>注解用法：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">/*!mycat:sql=注解sql语句*/真正执行的SQL</span><br><span class="line"></span><br><span class="line">比如说在mycat上创建表无法创建成功，可以使用注解</span><br><span class="line">/*!mycat:sql=select * from table<span class="built_in">_</span>1 where id = 1*/create table test2(id int);</span><br><span class="line">主要注解sql可以确认mycat可以路由到子结点上，就可以执行后面的真正执行的sql语句</span><br></pre></td></tr></table></figure>
<p>注解用途：</p>
<ul>
<li>跨库关联查询</li>
<li>DDL或存储过程</li>
<li>自定义分片</li>
<li>读写分离</li>
</ul>
<h3 id="分布式事务"><a class="markdownIt-Anchor" href="#分布式事务"></a> 分布式事务</h3>
<p>基于XA协议的两阶段提交</p>
<p><img src="/mycat/image-20201107215437139.png" alt="image-20201107215437139"></p>
<h4 id="xa角色"><a class="markdownIt-Anchor" href="#xa角色"></a> XA角色</h4>
<p><img src="/mycat/image-20201107215605251.png" alt="image-20201107215605251"></p>
<h4 id="xa实现"><a class="markdownIt-Anchor" href="#xa实现"></a> XA实现</h4>
<p><img src="/mycat/image-20201107220049532.png" alt="image-20201107220049532"></p>
<h2 id="9-mycat核心流程"><a class="markdownIt-Anchor" href="#9-mycat核心流程"></a> 9. Mycat核心流程</h2>
<h3 id="91-架构图"><a class="markdownIt-Anchor" href="#91-架构图"></a> 9.1 架构图</h3>
<p><img src="/mycat/image-20201220170713526.png" alt="image-20201220170713526"></p>
<h3 id="92-启动流程"><a class="markdownIt-Anchor" href="#92-启动流程"></a> 9.2 启动流程</h3>
<ol>
<li>MycatServer启动，解析配置文件，包括服务器、分片规则等</li>
<li>创建工作线程，建立前端连接和后端连接</li>
</ol>
<h3 id="93-执行sql流程"><a class="markdownIt-Anchor" href="#93-执行sql流程"></a> 9.3 执行SQL流程</h3>
<ol>
<li>前端连接接收mysql命令</li>
<li>解析MySQL，mycat用的是Druid的DruidParser</li>
<li>获取路由</li>
<li>改写MySQL，例如两个条件在两个节点上，则变成两条单独的sql</li>
<li>与后端数据库建立连接</li>
<li>发送sql语句到MySQL执行</li>
<li>获取返回结果</li>
<li>处理返回结果，例如排序、计算等等</li>
<li>返回给客户端</li>
</ol>
<h2 id="mycat高可用"><a class="markdownIt-Anchor" href="#mycat高可用"></a> Mycat高可用</h2>
<p><img src="/mycat/image-20201220172406074.png" alt="image-20201220172406074"></p>
]]></content>
      <categories>
        <category>中间件</category>
      </categories>
      <tags>
        <tag>mycat</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程的生命周期状态</title>
    <url>/thread-status/</url>
    <content><![CDATA[<h2 id="1-java线程分类"><a class="markdownIt-Anchor" href="#1-java线程分类"></a> 1. Java线程分类</h2>
<p>在Java中线程分别对应不同的状态，从创建线程的 NEW 到销毁时的 TERMINATED状态， 我们从Thread类中的内部枚举类State中可以看到线程的6种状态；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread which has not yet started.</span></span><br><span class="line"><span class="comment">     * 尚未启动的线程的线程状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NEW,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a runnable thread.  A thread in the runnable state is executing in the Java virtual machine but it may</span></span><br><span class="line"><span class="comment">     * be waiting for other resources from the operating system such as processor.</span></span><br><span class="line"><span class="comment">     * 可运行线程的线程状态。处于可运行状态的线程正在Java虚拟机中执行，但它可能正在等待来自操作系统的其他资源，例如处理器。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNNABLE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread blocked waiting for a monitor lock. A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .</span></span><br><span class="line"><span class="comment">     * 等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BLOCKED,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:</span></span><br><span class="line"><span class="comment">     * 1.Object.wait() with no timeout </span></span><br><span class="line"><span class="comment">     * 2.Thread.join() with no timeout </span></span><br><span class="line"><span class="comment">     * 3.LockSupport.park()</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * A thread in the waiting state is waiting for another thread to perform a particular action.</span></span><br><span class="line"><span class="comment">     * For example, a thread that has called Object.wait() on an object is waiting for another thread to call</span></span><br><span class="line"><span class="comment">     * Object.notify or Object.notifyAll() on that object. A thread that has called Thread.join()</span></span><br><span class="line"><span class="comment">     * is waiting for a specified thread to terminate.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread with a specified waiting time. A thread is in the timed waiting state due to calling one of</span></span><br><span class="line"><span class="comment">     * the following methods with a specified positive waiting time:</span></span><br><span class="line"><span class="comment">     * 1.Thread.sleep()</span></span><br><span class="line"><span class="comment">     * 2.Object.wait() with timeout</span></span><br><span class="line"><span class="comment">     * 3.Thread.join() with timeout</span></span><br><span class="line"><span class="comment">     * 4.LockSupport.parkNanos()</span></span><br><span class="line"><span class="comment">     * 5.LockSupport.parkUntil()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TIMED_WAITING,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a terminated thread. The thread has completed execution.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="11-状态1-new"><a class="markdownIt-Anchor" href="#11-状态1-new"></a> 1.1 状态1： NEW</h3>
<p>当线程被创建出来还没有被调用 start()时候的状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方描述：Thread state for a thread which has not yet started.</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>);</span><br><span class="line">        System.out.println(thread.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出： NEW</span></span><br></pre></td></tr></table></figure>
<h3 id="12-状态2-runnable"><a class="markdownIt-Anchor" href="#12-状态2-runnable"></a> 1.2 状态2： RUNNABLE</h3>
<p>当线程被调用start()，且处于等待操作系统分配资源（如CPU）、等待IO连接、正在运行状态，即表示Running状态和Ready状态。<br>
注：调用了start()不一定会立即改变状态，还有一些准备工作，这个时候线程状态是不确定的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方描述：</span><br><span class="line">Thread state for a runnable thread.  A thread in the runnable state is executing in the Java virtual machine but it may</span><br><span class="line">be waiting for other resources from the operating system such as processor.</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(thread.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出： RUNNABLE</span></span><br></pre></td></tr></table></figure>
<h3 id="13-状态3-blocked"><a class="markdownIt-Anchor" href="#13-状态3-blocked"></a> 1.3 状态3： BLOCKED</h3>
<p>等待监视器锁而被阻塞的线程的状态。当进入synchronized块/方法 或者在调用wait()被唤醒/超时之后重新进入synchronized块/方法，但是锁被其他线程占有，这个时候被操作系统挂起，状态为<strong>阻塞状态 BLOCKED</strong>。</p>
<p><strong>阻塞状态的线程，即使调用interrupt()方法也不会改变其状态</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方描述：</span><br><span class="line">Thread state for a thread blocked waiting for a monitor lock. </span><br><span class="line">A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .</span><br><span class="line">译文：等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。</span><br></pre></td></tr></table></figure>
<p>阻塞(BLOCKED)：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：</p>
<ul>
<li>等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。</li>
<li>同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。</li>
<li>其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockedState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String lock = <span class="string">&quot;锁&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    <span class="comment">//死循环导致thread1一直持有lock对象锁</span></span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//休眠1秒，让thread1先启动</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread2&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123; <span class="comment">//@1</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;thread2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread2.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class="line">        System.out.println(<span class="string">&quot;thread2.state:&quot;</span> + thread2.getState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//while (true) 死循环导致thread1持有lock对象锁一直没有释放，而thread2也想获取lock对象锁，但是锁一直被thread1持有着，导致thread2被阻塞在@1处，</span></span><br><span class="line">        <span class="comment">//此时thread2就处于BLOCKED状态</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出： thread1.state:RUNNABLE</span></span><br><span class="line"><span class="comment">//      thread2.state:BLOCKED</span></span><br></pre></td></tr></table></figure>
<p>查看2个线程的堆栈信息，包括：线程状态、线程目前执行到哪段代码等</p>
<ol>
<li>
<p>jps命令查看需要打印线程栈的进程号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>
<p><img src="/thread-status/02.png" alt></p>
</li>
<li>
<p>jstack命令生成java虚拟机当前时刻的线程快照</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jstack 46622  #找到BlockedState线程的</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;thread2&quot; #13 prio=5 os_prio=31 tid=0x00007f81c387e800 nid=0xa703 waiting for monitor entry [0x000070000bbbd000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">      at org.example.thread.BlockedState$2.run(BlockedState.java:26)</span><br><span class="line">         - waiting to lock &lt;0x0000000715916c40&gt; (a java.lang.String)</span><br><span class="line"></span><br><span class="line">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007f81b3d9b800 nid=0x5503 runnable [0x000070000b9b7000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">      at org.example.thread.BlockedState$1.run(BlockedState.java:14)</span><br><span class="line">          - locked &lt;0x0000000715916c40&gt; (a java.lang.String)</span><br></pre></td></tr></table></figure>
<p>输出内容释义：</p>
<ul>
<li>thread1：线程名称</li>
<li>#11：当前线程ID，从 main线程开始，JVM 根据线程创建的顺序为线程编号</li>
<li>prio：是 priority 优先级的缩写，表明了当前线程的优先级，取值范围【1～10】，默认为 5，在虚拟机进行线程调度的时候会参考该优先级为线程分配计算资源，数值越小优先级越高，一般不设置直接使用默认的优先级。</li>
<li>os_prio：线程对应系统的优先级</li>
<li>nid： 本地线程编号， NativeID的缩写，对应JVM虚拟机中线程映射在操作系统中的线程编号，可以通过 top 命令查看进程对应的线程情况进行相关映射</li>
</ul>
</li>
</ol>
<h3 id="14-状态4-waiting"><a class="markdownIt-Anchor" href="#14-状态4-waiting"></a> 1.4 状态4： WAITING</h3>
<p>无条件等待，当线程调用wait()/join()/LockSupport.park()不加超时时间的方法之后所处的状态，如果没有被唤醒或等待的线程没有结束，那么将一直等待，当前状态的线程不会被分配CPU资源和持有锁。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方描述：</span><br><span class="line"></span><br><span class="line">Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:</span><br><span class="line">1.Object.wait with no timeout </span><br><span class="line">2.Thread.join with no timeout </span><br><span class="line">3.LockSupport.park</span><br><span class="line"></span><br><span class="line">A thread in the waiting state is waiting for another thread to perform a particular action.</span><br><span class="line">For example, a thread that has called Object.wait() on an object is waiting for another thread to call</span><br><span class="line">Object.notify or Object.notifyAll() on that object. A thread that has called Thread.join()</span><br><span class="line">is waiting for a specified thread to terminate.</span><br></pre></td></tr></table></figure>
<h4 id="方式一objectwait"><a class="markdownIt-Anchor" href="#方式一objectwait"></a> 方式一：Object.wait()</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (WaitingState.class)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        WaitingState.class.wait();</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//模拟休眠1秒，让thread1运行到wait方法处</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread.state:&quot;</span>+thread1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出： thread1.state:WAITING</span></span><br></pre></td></tr></table></figure>
<p>打印线程thread1堆栈信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007fc57b877800 nid=0x5503 in Object.wait() [0x0000700011529000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">true  at java.lang.Object.wait(Native Method)</span><br><span class="line">true    - waiting on &lt;0x0000000715916c40&gt; (a java.lang.Class for org.example.thread.WaitingState)</span><br><span class="line">true  at java.lang.Object.wait(Object.java:502)</span><br><span class="line">true  at org.example.thread.WaitingState$1.run(WaitingState.java:12)</span><br><span class="line">true    - locked &lt;0x0000000715916c40&gt; (a java.lang.Class for org.example.thread.WaitingState)</span><br></pre></td></tr></table></figure>
<h4 id="方式二threadjoin"><a class="markdownIt-Anchor" href="#方式二threadjoin"></a> 方式二：Thread.join()</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//join方法会让当前主线程等待thread1结束</span></span><br><span class="line">        thread1.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码导致主线程处于WAITING状态，下面是主线程堆栈信息，第二行显示主线程处于WAITING状态，第五行表示因为调用了Thread.join导致线程WAITING</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;main&quot; #1 prio=5 os_prio=31 tid=0x00007fea7b01b800 nid=0xe03 in Object.wait() [0x0000700008b43000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">trueat java.lang.Object.wait(Native Method)</span><br><span class="line">true  - waiting on &lt;0x000000071591c4c8&gt; (a org.example.thread.WaitingState$1)</span><br><span class="line">trueat java.lang.Thread.join(Thread.java:1252)</span><br><span class="line">true  - locked &lt;0x000000071591c4c8&gt; (a org.example.thread.WaitingState$1)</span><br><span class="line">trueat java.lang.Thread.join(Thread.java:1326)</span><br><span class="line">trueat org.example.thread.WaitingState.main(WaitingState.java:17)</span><br></pre></td></tr></table></figure>
<h4 id="方式三locksupportpark"><a class="markdownIt-Anchor" href="#方式三locksupportpark"></a> 方式三：LockSupport.park()</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                LockSupport.park();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread.state:&quot;</span>+thread1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出： thread.state:WAITING</span></span><br></pre></td></tr></table></figure>
<p>打印线程thread1的堆栈信息如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007f7baf82d000 nid=0x5503 waiting on condition [0x000070000b2b9000]</span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">trueat sun.misc.Unsafe.park(Native Method)</span><br><span class="line">trueat java.util.concurrent.locks.LockSupport.park(LockSupport.java:304)</span><br><span class="line">trueat org.example.thread.WaitingState$1.run(WaitingState.java:11)</span><br></pre></td></tr></table></figure>
<h3 id="15-状态5-timed_waiting"><a class="markdownIt-Anchor" href="#15-状态5-timed_waiting"></a> 1.5 状态5： TIMED_WAITING</h3>
<p>有条件的等待，区别于上面的WAITING(无条件等待)，当线程调用以下方法之后所处的状态，在指定的时间没有被唤醒或者等待线程没有结束，会被系统自动唤醒，正常退出。</p>
<ul>
<li>sleep(睡眠时间)</li>
<li>wait(等待时间)</li>
<li>join(等待时间)</li>
<li>LockSupport.parkNanos(等待时间)</li>
<li>LockSupport.parkUntil(等待时间)</li>
</ul>
<p>TIMED_WAITING： 有期限的等待</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方描述：</span><br><span class="line">Thread state for a waiting thread with a specified waiting time. </span><br><span class="line">A thread is in the timed waiting state due to calling one of the following methods with a specified positive waiting time:</span><br><span class="line">1.Thread.sleep</span><br><span class="line">2.Object.wait with timeout</span><br><span class="line">3.Thread.join with timeout</span><br><span class="line">4.LockSupport.parkNanos</span><br><span class="line">5.LockSupport.parkUntil</span><br></pre></td></tr></table></figure>
<h4 id="方式一threadsleepseconds"><a class="markdownIt-Anchor" href="#方式一threadsleepseconds"></a> 方式一：Thread.sleep(seconds)</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeWaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//休眠500秒 = 500000毫秒</span></span><br><span class="line">                    Thread.sleep(<span class="number">500</span> * <span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//模拟休眠1秒，让thread1运行到sleep方法处</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出： thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>
<p>打印线程thread1的堆栈信息，可以看出是线程sleep方法(第三行)导致线程等待</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007fddf71ae800 nid=0x5503 waiting on condition [0x000070000b11c000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class="line">trueat java.lang.Thread.sleep(Native Method)</span><br><span class="line">trueat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br></pre></td></tr></table></figure>
<h4 id="方式二objectwaitseconds"><a class="markdownIt-Anchor" href="#方式二objectwaitseconds"></a> 方式二：Object.wait(seconds)</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeWaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (TimeWaitingState.class) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        TimeWaitingState.class.wait(<span class="number">500</span> * <span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//模拟休眠1秒，让thread1运行到sleep方法处</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出； thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>
<p>打印线程 thread1 堆栈信息，从堆栈信息第三行中可以看出是线程 wait 方法导致线程等待的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007f80a0129800 nid=0x5503 in Object.wait() [0x000070000856b000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (on object monitor)</span><br><span class="line">trueat java.lang.Object.wait(Native Method)</span><br><span class="line">true- waiting on &lt;0x0000000715916d28&gt; (a java.lang.Class for org.example.thread.TimeWaitingState)</span><br><span class="line">trueat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br><span class="line">true- locked &lt;0x0000000715916d28&gt; (a java.lang.Class for org.example.thread.TimeWaitingState)</span><br></pre></td></tr></table></figure>
<h4 id="方式三threadjoinseconds"><a class="markdownIt-Anchor" href="#方式三threadjoinseconds"></a> 方式三：Thread.join(seconds)</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeWaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//Thread.join 会让当前主线程等待thread1结束，需要等待500s</span></span><br><span class="line">        thread1.join(<span class="number">500</span> * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Thread.join 会让当前主线程等待thread1结束，所以我们查看主线程堆栈信息:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;main&quot; #1 prio=5 os_prio=31 tid=0x00007fa6d7009000 nid=0xd03 in Object.wait() [0x000070000feb9000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (on object monitor)</span><br><span class="line">trueat java.lang.Object.wait(Native Method)</span><br><span class="line">true- waiting on &lt;0x000000071591c138&gt; (a org.example.thread.TimeWaitingState$1)</span><br><span class="line">trueat java.lang.Thread.join(Thread.java:1260)</span><br><span class="line">true- locked &lt;0x000000071591c138&gt; (a org.example.thread.TimeWaitingState$1)</span><br><span class="line">trueat org.example.thread.TimeWaitingState.main(TimeWaitingState.java:14)</span><br></pre></td></tr></table></figure>
<h4 id="方式四locksupportparknanosseconds"><a class="markdownIt-Anchor" href="#方式四locksupportparknanosseconds"></a> 方式四：LockSupport.parkNanos(seconds)</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeWaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//等待500秒</span></span><br><span class="line">                LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(<span class="number">500</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//模拟休眠1秒，让thread1运行到parkNanos方法处</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出： thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>
<p>线程 thread1 堆栈信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007fb71b07a000 nid=0x5503 waiting on condition [0x0000700001da8000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (parking)</span><br><span class="line">trueat sun.misc.Unsafe.park(Native Method)</span><br><span class="line">trueat java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:338)</span><br><span class="line">trueat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br></pre></td></tr></table></figure>
<h4 id="方式五locksupportparkuntilseconds"><a class="markdownIt-Anchor" href="#方式五locksupportparkuntilseconds"></a> 方式五：LockSupport.parkUntil(seconds)</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeWaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//等待500秒</span></span><br><span class="line">                LockSupport.parkUntil(System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(<span class="number">500</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//模拟休眠1秒，让thread1运行到parkNanos方法处</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出： thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>
<p>线程 thread1 堆栈信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007ff41d076000 nid=0x5503 waiting on condition [0x00007000094df000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (parking)</span><br><span class="line">trueat sun.misc.Unsafe.park(Native Method)</span><br><span class="line">trueat java.util.concurrent.locks.LockSupport.parkUntil(LockSupport.java:372)</span><br><span class="line">trueat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br></pre></td></tr></table></figure>
<h3 id="16-状态6-terminated"><a class="markdownIt-Anchor" href="#16-状态6-terminated"></a> 1.6 状态6： TERMINATED</h3>
<p>执行完了 run()方法。其实这只是 Java 语言级别的一种状态，在操作系统内部可能已经注销了相应的线程，或者将它复用给其他需要使用线程的请求，而在 Java 语言级别只是通过 Java 代码看到的线程状态而已</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方描述：</span><br><span class="line">Thread state for a terminated thread. The thread has completed execution.</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminatedState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//休眠1秒，等待thread1执行完毕</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread1 state:&quot;</span> + thread1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：Thread[thread1,5,main]</span></span><br><span class="line"><span class="comment">//     thread1 state:TERMINATED</span></span><br></pre></td></tr></table></figure>
<h2 id="2状态转化"><a class="markdownIt-Anchor" href="#2状态转化"></a> 2.状态转化</h2>
<p><img src="/thread-status/03.png" alt="线程的状态"><br>
<img src="/thread-status/01.jpg" alt="线程的状态"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习</title>
    <url>/vue/</url>
    <content><![CDATA[<p>Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。</p>
<h3 id="1-export"><a class="markdownIt-Anchor" href="#1-export"></a> 1. export</h3>
<hr>
<p>用于规定模块的对外接口，export输出变量和方法、类</p>
<ul>
<li>
<p>变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简写--优先使用</span></span><br><span class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果想为输入的变量重新命名， 可以使用AS 关键字重新命名</span></span><br><span class="line"><span class="keyword">import</span> &#123; buildMenus <span class="keyword">as</span> buildMenus&#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/menu&#x27;</span>;</span><br><span class="line"><span class="comment">//import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-export-default"><a class="markdownIt-Anchor" href="#2-export-default"></a> 2. export default</h3>
<p>为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码是一个模块文件export-default.js。默认输出1个函数；</p>
<p>与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">&#x27;./export-default&#x27;</span>;</span><br><span class="line">customName(); <span class="comment">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>
<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>export-default.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>
<p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// modules.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;add <span class="keyword">as</span> <span class="keyword">default</span>&#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="comment">// export default add;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> foo &#125; <span class="keyword">from</span> <span class="string">&#x27;modules&#x27;</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="comment">// import foo from &#x27;modules&#x27;;</span></span><br></pre></td></tr></table></figure>
<p>正是因为<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。</p>
<p><strong>总结：</strong></p>
<ul>
<li>
<p>export命令对外接口是有名称的且<code>import</code>命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时<code>import</code>命令后面，不使用大括号。</p>
</li>
<li>
<p><code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应<code>export default</code>命令。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//menu.js</span></span><br><span class="line"><span class="comment">//get请求获取所有的菜单信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">buildMenus</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;api/menus/build&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//post 请求保存数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;api/menus&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//delete 请求删除数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;api/menus/&#x27;</span> + id,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//put请求修改数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;api/menus&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; buildMenus &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/menu&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h3 id="3-const-var-let"><a class="markdownIt-Anchor" href="#3-const-var-let"></a> 3. Const、var、let</h3>
<p>ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。</p>
<p>ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 通过var定义的变量可以跨块作用域访问到。</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// console.log(b); // 报错，</span></span><br><span class="line"><span class="comment">// 可见，通过var定义的变量不能跨函数作用域访问到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 4   (循环结束i已经是4，所以此处i为4)</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// if语句和for语句中用var定义的变量可以在外面访问到，</span></span><br><span class="line"><span class="comment">// 可见，if语句和for语句属于块作用域，不属于函数作用域</span></span><br></pre></td></tr></table></figure>
<p>三者的区别：</p>
<ol>
<li>var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。</li>
<li>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</li>
<li>const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 块作用域</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">const</span> c = <span class="number">3</span>;</span><br><span class="line">  <span class="comment">// c = 4; // 报错</span></span><br><span class="line">  <span class="keyword">var</span> aa;</span><br><span class="line">  <span class="keyword">let</span> bb;</span><br><span class="line">  <span class="comment">// const cc; // 报错</span></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line">  <span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br><span class="line">  <span class="built_in">console</span>.log(aa); <span class="comment">// undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(bb); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// console.log(b); // 报错</span></span><br><span class="line"><span class="comment">// console.log(c); // 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数作用域</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">let</span> e = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">const</span> f = <span class="number">7</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(d); <span class="comment">// 5</span></span><br><span class="line">  <span class="built_in">console</span>.log(e); <span class="comment">// 6  </span></span><br><span class="line">  <span class="built_in">console</span>.log(f); <span class="comment">// 7 </span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// console.log(d); // 报错</span></span><br><span class="line"><span class="comment">// console.log(e); // 报错</span></span><br><span class="line"><span class="comment">// console.log(f); // 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意：<strong>const定义的对象属性是否可以改变</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span> : <span class="string">&#x27;jiuke&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span> : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">person.name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name)<span class="comment">//person对象的name属性确实被修改了</span></span><br></pre></td></tr></table></figure>
<p>因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。</p>
<p>然后我们试着修改一下指针，让person指向一个新对象，果然报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">   <span class="attr">name</span> : <span class="string">&#x27;jiuke&#x27;</span>,</span><br><span class="line">   <span class="attr">sex</span> : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">person = &#123;</span><br><span class="line">   <span class="attr">name</span> : <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">   <span class="attr">sex</span> : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//报错</span></span><br></pre></td></tr></table></figure>
<h3 id="4-promise"><a class="markdownIt-Anchor" href="#4-promise"></a> 4. promise</h3>
<p>promise用途：异步编程的一种解决方案。</p>
<p>优点：比传统的解决方案——回调函数和事件——更合理和更强大。</p>
<p>三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基本用法：</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(value);<span class="comment">//表示异步操作成功</span></span><br><span class="line">    reject(error);<span class="comment">//表示异步操作失败</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//promise常用的几个方法</span></span><br><span class="line"><span class="comment">//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。</span></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;&#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 异步状态为失败时调用。</span></span><br><span class="line">promise.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。</span></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;&#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 不管状态如何都会执行的操作。</span></span><br><span class="line">promise.finally(<span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="5-生命周期"><a class="markdownIt-Anchor" href="#5-生命周期"></a> 5. 生命周期</h3>
<img src="https://cn.vuejs.org/images/lifecycle.png" alt="img" style="zoom:50%;">
<h3 id="6-模版语法"><a class="markdownIt-Anchor" href="#6-模版语法"></a> 6. 模版语法</h3>
<h4 id="v-once"><a class="markdownIt-Anchor" href="#v-once"></a> v-once</h4>
<p>执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="v-html"><a class="markdownIt-Anchor" href="#v-html"></a> v-html</h4>
<p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var rawHtml = &quot;<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是个使用v-htmls<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="attribute"><a class="markdownIt-Anchor" href="#attribute"></a> <a href="https://cn.vuejs.org/v2/guide/syntax.html#Attribute">Attribute</a></h4>
<p>Mustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href="https://cn.vuejs.org/v2/api/#v-bind"><code>v-bind</code> 指令</a>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <span class="tag">&lt;<span class="name">button</span>&gt;</span> 元素中</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="三元表达式"><a class="markdownIt-Anchor" href="#三元表达式"></a> 三元表达式</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。</span><br><span class="line"><span class="comment">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7-指令directives"><a class="markdownIt-Anchor" href="#7-指令directives"></a> 7. 指令Directives</h3>
<p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <span class="tag">&lt;<span class="name">p</span>&gt;</span> 元素。</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h4>
<p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="动态参数"><a class="markdownIt-Anchor" href="#动态参数"></a> 动态参数</h4>
<p>2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>] = <span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用</span></span><br><span class="line"><span class="comment">如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href</span></span><br><span class="line"><span class="comment">---&gt;</span></span><br></pre></td></tr></table></figure>
<p>绑定处理函数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;dosomething&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>对动态参数的值的约束</p>
<p>动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>
</li>
<li>
<p>对动态参数表达式的约束</p>
<p>动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p>
</li>
</ul>
<h4 id="修饰符"><a class="markdownIt-Anchor" href="#修饰符"></a> 修饰符</h4>
<p>修饰符（modifier）是以半角句号<code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如<code>.prevent</code>修饰符告诉v-on指令对触发的事件调用event.preventDefault();</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span> = <span class="string">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="缩写"><a class="markdownIt-Anchor" href="#缩写"></a> 缩写</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">event</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><code>:</code> 与 <code>@</code> 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。</p>
<h3 id="8-计算属性"><a class="markdownIt-Anchor" href="#8-计算属性"></a> 8. 计算属性</h3>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p>
<p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong></p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 计算属性的 getter</span></span><br><span class="line">    <span class="attr">reversedMessage</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//页面显示：</span></span><br><span class="line"><span class="comment">//Original message: &quot;Hello&quot;</span></span><br><span class="line"><span class="comment">//Computed reversed message: &quot;olleH&quot;</span></span><br></pre></td></tr></table></figure>
<p>声明了一个计算属性<code>reversedMessage</code>；我们提供的函数将用作property <code>vm.reversedMessage</code>的getter函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(vm.reversedMessage) <span class="comment">// olleH</span></span><br><span class="line">vm.message = <span class="string">&#x27;Goodbye&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(vm.reversedMessage) <span class="comment">// =&gt; &#x27;eybdooG&#x27;</span></span><br></pre></td></tr></table></figure>
<p>你可以打开浏览器的控制台，自行修改例子中的 vm。<code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p>
<p>你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code>，因此当 <code>vm.message</code> 发生改变时，所有依赖 <code>vm.reversedMessage</code> 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。</p>
<h4 id="计算属性-vs-方法"><a class="markdownIt-Anchor" href="#计算属性-vs-方法"></a> 计算属性 VS 方法</h4>
<p>使用表达式中调用方法同样可以达到上面的结果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在组件中</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="attr">reversedMessage</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
<p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  now: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Date.now()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p>
<p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p>
<h4 id="计算属性-vs-侦听属性"><a class="markdownIt-Anchor" href="#计算属性-vs-侦听属性"></a> 计算属性 VS 侦听属性</h4>
<p>侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;<strong>通常更好的做法是使用计算属性而不是命令式的watch回调</strong>；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">    <span class="attr">fullName</span>: <span class="string">&#x27;Foo Bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//侦听属性watch </span></span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.fullName = val + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//计算属性</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">fullName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="计算属性的setter"><a class="markdownIt-Anchor" href="#计算属性的setter"></a> 计算属性的setter</h4>
<p>计算属性默认只有getter，自己可以提供一个setter</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  <span class="attr">fullName</span>: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      <span class="built_in">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="built_in">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>现在再运行 <code>vm.fullName = 'John Doe'</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p>
<h3 id="9-侦听器"><a class="markdownIt-Anchor" href="#9-侦听器"></a> 9. 侦听器</h3>
<p>当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;watch-example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Ask a yes/no question:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;question&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class="line">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> watchExampleVM = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">el</span>: <span class="string">&#x27;#watch-example&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">question</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">answer</span>: <span class="string">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 如果 `question` 发生改变，这个函数就会运行</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">question</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newQuestion, oldQuestion</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.answer = <span class="string">&#x27;Waiting for you to stop typing...&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.debouncedGetAnswer()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 请参考：https://lodash.com/docs#debounce</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.debouncedGetAnswer = _.debounce(<span class="built_in">this</span>.getAnswer, <span class="number">500</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">getAnswer</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (<span class="built_in">this</span>.question.indexOf(<span class="string">&#x27;?&#x27;</span>) === -<span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.answer = <span class="string">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.answer = <span class="string">&#x27;Thinking...&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">var</span> vm = <span class="built_in">this</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      axios.get(<span class="string">&#x27;https://yesno.wtf/api&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          vm.answer = _.capitalize(response.data.answer)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//异常捕获</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          vm.answer = <span class="string">&#x27;Error! Could not reach the API. &#x27;</span> + error</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>使用 <code>watch</code> 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的</p>
<h3 id="10-class与style绑定"><a class="markdownIt-Anchor" href="#10-class与style绑定"></a> 10. class与style绑定</h3>
<p>将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组</p>
<h4 id="101-绑定html-class"><a class="markdownIt-Anchor" href="#101-绑定html-class"></a> 10.1 绑定html class</h4>
<h5 id="1011对象语法"><a class="markdownIt-Anchor" href="#1011对象语法"></a> 10.1.1对象语法</h5>
<p>方式一：内联</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;static&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//data</span><br><span class="line">data: &#123;</span><br><span class="line">  isActive: true,</span><br><span class="line">  hasError: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式二：绑定的数据对象不必内联定义在模板里</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//vue data</span><br><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: true,</span><br><span class="line">    &#x27;text-danger&#x27;: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方式三：绑定一个返回对象的计算属性（常用）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//vue data</span><br><span class="line">data: &#123;</span><br><span class="line">  isActive: true,</span><br><span class="line">  error: null</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  classObject: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      active: this.isActive &amp;&amp; !this.error,</span><br><span class="line">      &#x27;text-danger&#x27;: this.error &amp;&amp; this.error.type === &#x27;fatal&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="1012-数组语法"><a class="markdownIt-Anchor" href="#1012-数组语法"></a> 10.1.2 数组语法</h5>
]]></content>
      <categories>
        <category>架构师笔记</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>深入Tomcat源码学习</title>
    <url>/tomcat/</url>
    <content><![CDATA[<h2 id="1-tomcat简介"><a class="markdownIt-Anchor" href="#1-tomcat简介"></a> 1. Tomcat简介</h2>
<p>Apache是web服务器，Tomcat是应用服务器，apache tomcat只是一个servlet容器，是Apache的扩展；Apache和Tomcat都可以做为独立的web服务器来运行，但是Apache不能解释java程序（jsp,servlet）。</p>
<p>两者都是一种容器，只不过发布的东西不同：Apache是html容器，功能像IIS一样；Tomcat是jsp/servlet容器，用于发布jsp及java的，类似的有IBM的websphere、BEA的Weblogic，sun的JRun等等。</p>
<p>打个比方：Apache是一辆卡车，上面可以装一些东西如html等。但是不能装水，要装水必须要有容器（桶），Tomcat就是一个桶（装像Java这样的水），而这个桶也可以不放在卡车上。</p>
<p>官网地址： <a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p>
<h3 id="11-网络架构图"><a class="markdownIt-Anchor" href="#11-网络架构图"></a> 1.1 网络架构图</h3>
<p><img src="/tomcat/wangluojiagou.jpg" alt="wangluojiagou"></p>
<h3 id="12-web监听端口"><a class="markdownIt-Anchor" href="#12-web监听端口"></a> 1.2  web监听端口</h3>
<p>DefaultServletSocketFactory.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServerSocket <span class="title">createSocket</span> <span class="params">(<span class="keyword">int</span> port, <span class="keyword">int</span> backlog,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  InetAddress ifAddress)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServerSocket (port, backlog, ifAddress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="13-servlet容器"><a class="markdownIt-Anchor" href="#13-servlet容器"></a> 1.3 Servlet容器</h3>
<ul>
<li>
<p>找到<code>Tomcat</code>源码中对应一个web项目的类 <code>Context.class</code></p>
</li>
<li>
<p>找到<code>Tomcat</code>源码 —&gt;<code>web.xml</code>文件对应的类</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/app&quot;</span> <span class="attr">doBase</span>=<span class="string">&quot;E:\\app&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/app1&quot;</span> <span class="attr">doBase</span>=<span class="string">&quot;E:\\app1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>既然这段配置能够代表一个web项目在磁盘的访问路径，Context标签就是代表一个web项目</p>
<p>在tomcat官网中（<a href="https://tomcat.apache.org/tomcat-8.0-doc/architecture/overview.html%EF%BC%89%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E7%9B%B8%E5%BA%94%E7%9A%84%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E">https://tomcat.apache.org/tomcat-8.0-doc/architecture/overview.html）可以看到相应的文档说明</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A Context represents a web application. A Host may contain multiple contexts, each with a unique path. The Context interface may be implemented to create custom Contexts, but this is rarely the case because the StandardContext provides significant additional functionality.</span><br><span class="line"></span><br><span class="line">//大致意思：一个Context文表示web应用程序。一个主机可以包含多个Context，每个Context都有一个唯一的路径。上下文接口可以用来创建自定义Context，但这种情况很少发生，因为StandardContext提供了重要的附加功能。</span><br></pre></td></tr></table></figure>
<p>那么在<code>StandardContext</code>中是如何加载这些项目的？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">loadOnStartup</span><span class="params">(Container children[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Collect &quot;load on startup&quot; servlets that need to be initialized</span></span><br><span class="line">        TreeMap&lt;Integer, ArrayList&lt;Wrapper&gt;&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">            Wrapper wrapper = (Wrapper) children[i];</span><br><span class="line">            <span class="keyword">int</span> loadOnStartup = wrapper.getLoadOnStartup();</span><br><span class="line">            <span class="keyword">if</span> (loadOnStartup &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            Integer key = Integer.valueOf(loadOnStartup);</span><br><span class="line">            ArrayList&lt;Wrapper&gt; list = map.get(key);</span><br><span class="line">            <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">                list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                map.put(key, list);</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(wrapper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load the collected &quot;load on startup&quot; servlets</span></span><br><span class="line">        <span class="keyword">for</span> (ArrayList&lt;Wrapper&gt; list : map.values()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Wrapper wrapper : list) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wrapper.load();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">                    getLogger().error(sm.getString(<span class="string">&quot;standardWrapper.loadException&quot;</span>,</span><br><span class="line">                                      getName()), StandardWrapper.getRootCause(e));</span><br><span class="line">                    <span class="comment">// <span class="doctag">NOTE:</span> load errors (including a servlet that throws</span></span><br><span class="line">                    <span class="comment">// UnavailableException from tht init() method) are NOT</span></span><br><span class="line">                    <span class="comment">// fatal to application startup, excepted if failDeploymentIfServletLoadedOnStartupFails is specified</span></span><br><span class="line">                    <span class="keyword">if</span>(getComputedFailCtxIfServletStartFails()) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>那这些Wrapper是否就是Servlet ?</p>
<p>WebXml.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringManager sm = StringManager.getManager(Constants.PACKAGE_NAME);</span><br></pre></td></tr></table></figure>
<p>Contants</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEB_XML_LOCATION = <span class="string">&quot;/WEB-INF/web.xml&quot;</span>;</span><br></pre></td></tr></table></figure>
<p>ContextConfig</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureContext</span><span class="params">(WebXml webxml)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// As far as possible, process in alphabetical order so it is easy to</span></span><br><span class="line">        <span class="comment">// check everything is present</span></span><br><span class="line">        <span class="comment">// Some validation depends on correct public ID</span></span><br><span class="line">        context.setPublicId(webxml.getPublicId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Everything else in order</span></span><br><span class="line">        context.setEffectiveMajorVersion(webxml.getMajorVersion());</span><br><span class="line">        context.setEffectiveMinorVersion(webxml.getMinorVersion());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : webxml.getContextParams().entrySet()) &#123;</span><br><span class="line">            context.addParameter(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        context.setDenyUncoveredHttpMethods(</span><br><span class="line">                webxml.getDenyUncoveredHttpMethods());</span><br><span class="line">        context.setDisplayName(webxml.getDisplayName());</span><br><span class="line">        context.setDistributable(webxml.isDistributable());</span><br><span class="line">        <span class="keyword">for</span> (ContextLocalEjb ejbLocalRef : webxml.getEjbLocalRefs().values()) &#123;</span><br><span class="line">            context.getNamingResources().addLocalEjb(ejbLocalRef);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ContextEjb ejbRef : webxml.getEjbRefs().values()) &#123;</span><br><span class="line">            context.getNamingResources().addEjb(ejbRef);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ContextEnvironment environment : webxml.getEnvEntries().values()) &#123;</span><br><span class="line">            context.getNamingResources().addEnvironment(environment);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ErrorPage errorPage : webxml.getErrorPages().values()) &#123;</span><br><span class="line">            context.addErrorPage(errorPage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (FilterDef filter : webxml.getFilters().values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (filter.getAsyncSupported() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                filter.setAsyncSupported(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            context.addFilterDef(filter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (FilterMap filterMap : webxml.getFilterMappings()) &#123;</span><br><span class="line">            context.addFilterMap(filterMap);</span><br><span class="line">        &#125;</span><br><span class="line">        context.setJspConfigDescriptor(webxml.getJspConfigDescriptor());</span><br><span class="line">        <span class="keyword">for</span> (String listener : webxml.getListeners()) &#123;</span><br><span class="line">            context.addApplicationListener(listener);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">                webxml.getLocaleEncodingMappings().entrySet()) &#123;</span><br><span class="line">            context.addLocaleEncodingMappingParameter(entry.getKey(),</span><br><span class="line">                    entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Prevents IAE</span></span><br><span class="line">        <span class="keyword">if</span> (webxml.getLoginConfig() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            context.setLoginConfig(webxml.getLoginConfig());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (MessageDestinationRef mdr :</span><br><span class="line">                webxml.getMessageDestinationRefs().values()) &#123;</span><br><span class="line">            context.getNamingResources().addMessageDestinationRef(mdr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// messageDestinations were ignored in Tomcat 6, so ignore here</span></span><br><span class="line"></span><br><span class="line">        context.setIgnoreAnnotations(webxml.isMetadataComplete());</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">                webxml.getMimeMappings().entrySet()) &#123;</span><br><span class="line">            context.addMimeMapping(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Name is just used for ordering</span></span><br><span class="line">        <span class="keyword">for</span> (ContextResourceEnvRef resource :</span><br><span class="line">                webxml.getResourceEnvRefs().values()) &#123;</span><br><span class="line">            context.getNamingResources().addResourceEnvRef(resource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ContextResource resource : webxml.getResourceRefs().values()) &#123;</span><br><span class="line">            context.getNamingResources().addResource(resource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> allAuthenticatedUsersIsAppRole =</span><br><span class="line">                webxml.getSecurityRoles().contains(</span><br><span class="line">                        SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS);</span><br><span class="line">        <span class="keyword">for</span> (SecurityConstraint constraint : webxml.getSecurityConstraints()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allAuthenticatedUsersIsAppRole) &#123;</span><br><span class="line">                constraint.treatAllAuthenticatedUsersAsApplicationRole();</span><br><span class="line">            &#125;</span><br><span class="line">            context.addConstraint(constraint);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String role : webxml.getSecurityRoles()) &#123;</span><br><span class="line">            context.addSecurityRole(role);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ContextService service : webxml.getServiceRefs().values()) &#123;</span><br><span class="line">            context.getNamingResources().addService(service);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123;</span><br><span class="line">            Wrapper wrapper = context.createWrapper();</span><br><span class="line">            <span class="comment">// Description is ignored</span></span><br><span class="line">            <span class="comment">// Display name is ignored</span></span><br><span class="line">            <span class="comment">// Icons are ignored</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// jsp-file gets passed to the JSP Servlet as an init-param</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (servlet.getLoadOnStartup() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (servlet.getEnabled() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                wrapper.setEnabled(servlet.getEnabled().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setName(servlet.getServletName());</span><br><span class="line">            Map&lt;String,String&gt; params = servlet.getParameterMap();</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                wrapper.addInitParameter(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setRunAs(servlet.getRunAs());</span><br><span class="line">            Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();</span><br><span class="line">            <span class="keyword">for</span> (SecurityRoleRef roleRef : roleRefs) &#123;</span><br><span class="line">                wrapper.addSecurityReference(</span><br><span class="line">                        roleRef.getName(), roleRef.getLink());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setServletClass(servlet.getServletClass());</span><br><span class="line">            MultipartDef multipartdef = servlet.getMultipartDef();</span><br><span class="line">            <span class="keyword">if</span> (multipartdef != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (multipartdef.getMaxFileSize() != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        multipartdef.getMaxRequestSize()!= <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        multipartdef.getFileSizeThreshold() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    wrapper.setMultipartConfigElement(<span class="keyword">new</span> MultipartConfigElement(</span><br><span class="line">                            multipartdef.getLocation(),</span><br><span class="line">                            Long.parseLong(multipartdef.getMaxFileSize()),</span><br><span class="line">                            Long.parseLong(multipartdef.getMaxRequestSize()),</span><br><span class="line">                            Integer.parseInt(</span><br><span class="line">                                    multipartdef.getFileSizeThreshold())));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    wrapper.setMultipartConfigElement(<span class="keyword">new</span> MultipartConfigElement(</span><br><span class="line">                            multipartdef.getLocation()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (servlet.getAsyncSupported() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                wrapper.setAsyncSupported(</span><br><span class="line">                        servlet.getAsyncSupported().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setOverridable(servlet.isOverridable());</span><br><span class="line">            context.addChild(wrapper);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">                webxml.getServletMappings().entrySet()) &#123;</span><br><span class="line">            context.addServletMapping(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        SessionConfig sessionConfig = webxml.getSessionConfig();</span><br><span class="line">        <span class="keyword">if</span> (sessionConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sessionConfig.getSessionTimeout() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                context.setSessionTimeout(</span><br><span class="line">                        sessionConfig.getSessionTimeout().intValue());</span><br><span class="line">            &#125;</span><br><span class="line">            SessionCookieConfig scc =</span><br><span class="line">                context.getServletContext().getSessionCookieConfig();</span><br><span class="line">            scc.setName(sessionConfig.getCookieName());</span><br><span class="line">            scc.setDomain(sessionConfig.getCookieDomain());</span><br><span class="line">            scc.setPath(sessionConfig.getCookiePath());</span><br><span class="line">            scc.setComment(sessionConfig.getCookieComment());</span><br><span class="line">            <span class="keyword">if</span> (sessionConfig.getCookieHttpOnly() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                scc.setHttpOnly(sessionConfig.getCookieHttpOnly().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sessionConfig.getCookieSecure() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                scc.setSecure(sessionConfig.getCookieSecure().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sessionConfig.getCookieMaxAge() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                scc.setMaxAge(sessionConfig.getCookieMaxAge().intValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sessionConfig.getSessionTrackingModes().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                context.getServletContext().setSessionTrackingModes(</span><br><span class="line">                        sessionConfig.getSessionTrackingModes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Context doesn&#x27;t use version directly</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String welcomeFile : webxml.getWelcomeFiles()) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * The following will result in a welcome file of &quot;&quot; so don&#x27;t add</span></span><br><span class="line"><span class="comment">             * that to the context</span></span><br><span class="line"><span class="comment">             * &lt;welcome-file-list&gt;</span></span><br><span class="line"><span class="comment">             *   &lt;welcome-file/&gt;</span></span><br><span class="line"><span class="comment">             * &lt;/welcome-file-list&gt;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (welcomeFile != <span class="keyword">null</span> &amp;&amp; welcomeFile.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                context.addWelcomeFile(welcomeFile);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do this last as it depends on servlets</span></span><br><span class="line">        <span class="keyword">for</span> (JspPropertyGroup jspPropertyGroup :</span><br><span class="line">                webxml.getJspPropertyGroups()) &#123;</span><br><span class="line">            String jspServletName = context.findServletMapping(<span class="string">&quot;*.jsp&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (jspServletName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                jspServletName = <span class="string">&quot;jsp&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (context.findChild(jspServletName) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String urlPattern : jspPropertyGroup.getUrlPatterns()) &#123;</span><br><span class="line">                    context.addServletMapping(urlPattern, jspServletName, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(log.isDebugEnabled()) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String urlPattern : jspPropertyGroup.getUrlPatterns()) &#123;</span><br><span class="line">                        log.debug(<span class="string">&quot;Skiping &quot;</span> + urlPattern + <span class="string">&quot; , no servlet &quot;</span> +</span><br><span class="line">                                jspServletName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">                webxml.getPostConstructMethods().entrySet()) &#123;</span><br><span class="line">            context.addPostConstructMethod(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">            webxml.getPreDestroyMethods().entrySet()) &#123;</span><br><span class="line">            context.addPreDestroyMethod(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2-tomcat核心架构"><a class="markdownIt-Anchor" href="#2-tomcat核心架构"></a> 2. Tomcat核心架构</h2>
<p>每一层级对应的都是<code>xml</code>文件中的标签，以及源码中的实体类，其中有多层的图形表示可以存在多个</p>
<p><img src="/tomcat/tomcat5.png" alt="tomcat5"></p>
<p>Tips: 亿图不充钱限制了组件个数，Context只画了一个！</p>
<h3 id="22-tomcat组件"><a class="markdownIt-Anchor" href="#22-tomcat组件"></a> 2.2 Tomcat组件</h3>
<p><code>XML</code>配置文件结构如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span>                       <span class="comment">&lt;!--顶层类元素：一个配置文件中只能有一个&lt;Server&gt;元素，可包含多个Service。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Service</span>&gt;</span>                  <span class="comment">&lt;!--顶层类元素：本身不是容器，可包含一个Engine，多个Connector。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span>/&gt;</span>           <span class="comment">&lt;!--连接器类元素：代表通信接口。--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">Engine</span>&gt;</span>   		   <span class="comment">&lt;!--容器类元素：为特定的Service组件处理所有客户请求，可包含多个Host。--&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">Host</span>&gt;</span>    	   <span class="comment">&lt;!--容器类元素：为特定的虚拟主机处理所有客户请求，可包含多个Context。--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">Context</span>&gt;</span>      <span class="comment">&lt;!--容器类元素：为特定的Web应用处理所有客户请求。--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="221-server"><a class="markdownIt-Anchor" href="#221-server"></a> 2.2.1 Server</h4>
<p>代表整个<code>Tomcat</code>实例，在JVM中式单例的，它还负责管理包含<code>Service</code>组件的声明周期，下图式对<code>Server</code>组件的一个简单描述：</p>
<p><img src="/tomcat/tomcat_server.gif" alt="tomcat_server"></p>
<ul>
<li>可以在<code>Server.xml</code>文件对<code>server</code>组件进行配置</li>
<li>配置属性有：name, shutdown, port, command, class name等</li>
<li>shutdown port默认为8005</li>
<li>shutdown command 默认为SHUTDOWN; 处于安全，只能从同一台服务器发出SHUTDOWN命令</li>
<li>提供JNDI的实现，可以放任意对象（如DataSource, 环境变量等）；</li>
</ul>
<h4 id="222-service"><a class="markdownIt-Anchor" href="#222-service"></a> 2.2.2 Service</h4>
<p><code>Service</code>组件代表的式一组请求处理主键，一个<code>Server</code>实例可以包含多个<code>Service</code>实例，每个<code>Service</code>实例与一组<code>Connector</code>实例和单个Engine实例相关联( Service 是 Server 内部的中间组件，它将一个或多个 Connector 绑定到一个Engine 上。)</p>
<p><img src="/tomcat/tomcat_service.gif" alt="tomcat_service"></p>
<p>单<code>Service</code>实例一般够用了，如果需要针对不同的<code>IP</code>或者<code>port</code>使用不同的<code>Service</code>组件来处理，则可以使用多<code>Service</code>实例</p>
<h4 id="223-connector"><a class="markdownIt-Anchor" href="#223-connector"></a> 2.2.3 Connector</h4>
<p><code>Connector</code>组件把Engine从不同的通信协议中隔离出来，如<code>HTTP</code>, <code>HTTPS</code>, <code>AJP</code>等；</p>
<p>可以配置<code>Tomcat</code>的工作模式: <code>Standalone</code> &amp;  <code>Conjunction</code></p>
<ul>
<li>
<p>Standalone模式：tomcat可以配置HTTP/HTTPS的connector，它既要处理静态内容，也要委托Engine处理动态内容</p>
<p><img src="/tomcat/tomcat_connector_standalone.gif" alt="tomcat_connector_standalone"></p>
</li>
<li>
<p>Conjunction模式：客户端是Apache或者是IIS之类的WEB Server； 当Web Server决定将请求转交给Tomcat处理时，它通过AJP协议与Tomcat交互；AJP是基于二进制流的比HTTP更高效一些；</p>
</li>
</ul>
<p>关于<code>Connector</code>的几个重要点：</p>
<ul>
<li>监听的IP和port</li>
<li>处理请求的最大线程数，如果所有的线程都忙，则会丢弃新的请求</li>
<li>所有的Connector接收到请求后，转化成统一的模式，再交给唯一的Engine处理；Engine负责处理请i去并产生响应；</li>
<li>Connector将Engine产生的响应按照合适的协议发送到客户端</li>
</ul>
<p><strong>常见Connector</strong>：</p>
<ul>
<li>http/1.1</li>
<li>http/2</li>
<li>ajp(apache jserv protocol)  专用于tomcat前端是apache反向代理的情况下</li>
</ul>
<p><code>Tomcat</code>既作为web服务器（解析http协议，响应客户端，静态；非处理动态（委托）），也作为应用程序服务器：请求来自于浏览器。<br>
<code>Tomcat</code>应该考虑工作情形并为相应情形下的请求分别定义好需要的连接器才能正确接收来自于客户端的请求。<br>
此处暂先介绍HTTP/1.1连接器的属性设置。ajp后文再做介绍。<br>
HTTP连接器表示支持HTTP/1.1协议的组件。设置了该连接器就表示catalina启用它的独立web服务功能，当然，肯定也提供它必须的servlets和jsp执行功能。在一个service中可以配置一个或多个连接器，每个连接器都可以将请求转发给它们相关联的engine以处理请求、创建响应。<br>
每个流入的请求都需要一个独立的线程来接收。当并发请求数量超出maxThreads指定的值时，多出的请求将被堆叠在套接字（socket）中，直到超出acceptCount指定的值。超出accpetCount的请求将以&quot;connection refused&quot;错误进行拒绝。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--HTTP连接器的属性实在太多，详细配置方法见官方手册。通常定义HTTP连接器时必须定义的属性只有&quot;port&quot;。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	address：指定连接器监听的地址，默认为所有地址，即0.0.0.0。</span></span><br><span class="line"><span class="comment">	maxThreads：支持的最大并发连接数，默认为200；如果引用了executor创建的共享线程池，则该属性被忽略。</span></span><br><span class="line"><span class="comment">	acceptCount：设置等待队列的最大长度；通常在tomcat所有处理线程均处于繁忙状态时，新发来的请求将被放置于等待队列中；</span></span><br><span class="line"><span class="comment">	maxConnections：允许建立的最大连接数。acceptCount和maxThreads是接受连接的最大线程数。存在一种情况，maxConnections小于acceptCount时，超出maxConnections的连接请求将被接收，但不会与之建立连接。</span></span><br><span class="line"><span class="comment">	port：监听的端口，默认为0，此时表示随机选一个端口，通常都应该显式指定监听端口。</span></span><br><span class="line"><span class="comment">	protocol：连接器使用的协议，用于处理对应的请求。默认为HTTP/1.1，此时它会自动在基于Java NIO或APR/native连接器之间进行切换。定义AJP协议时通常为AJP/1.3。</span></span><br><span class="line"><span class="comment">	redirectPort：如果某连接器支持的协议是HTTP，当接收客户端发来的HTTPS请求时，则转发至此属性定义的端口。</span></span><br><span class="line"><span class="comment">	connectionTimeout：等待客户端发送请求的超时时间，单位为毫秒，默认为60000，即1分钟；注意，这时候连接已经建立。</span></span><br><span class="line"><span class="comment">	keepAliveTimeout：长连接状态的超时时间。超出该值时，长连接将关闭。</span></span><br><span class="line"><span class="comment">		enableLookups：是否通过request.getRemoteHost()进行DNS查询以获取客户端的主机名；默认为true，应设置为false防止反解客户端主机；</span></span><br><span class="line"><span class="comment">compression：是否压缩数据。默认为off。设置为on时表示只压缩text文本，设置为force时表示压缩所有内容。应该在压缩和sendfile之间做个权衡。</span></span><br><span class="line"><span class="comment">	useSendfile：该属性为NIO（非阻塞IO）的属性，表示是否启用sendfile的功能。默认为true，启用该属性将会禁止compression属性。</span></span><br><span class="line"><span class="comment">当协议指定为HTTP/1.1时，默认会自动在NIO/APR协议处理方式上进行按需切换。如要显式指定协议，方式如下： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11AprProtocol&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    其中NIO是C/C++的非阻塞IO复用模型在JAVA中的IO实现，NIO2即AIO是异步NIO，即异步非阻塞IO：</span></span><br><span class="line"><span class="comment">    NioProtocol ：non blocking Java NIO connector</span></span><br><span class="line"><span class="comment">    Nio2Protocol：non blocking Java NIO2 connector</span></span><br><span class="line"><span class="comment">    AprProtocol ：the APR/native connector </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<p>多个属性的SSL连接服务器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8443&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">minSpareThreads</span>=<span class="string">&quot;25&quot;</span> <span class="attr">maxSpareThreads</span>=<span class="string">&quot;75&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">enableLookups</span>=<span class="string">&quot;false&quot;</span> <span class="attr">acceptCount</span>=<span class="string">&quot;100&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">scheme</span>=<span class="string">&quot;https&quot;</span> <span class="attr">secure</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">clientAuth</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sslProtocol</span>=<span class="string">&quot;TLS&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="224-engine"><a class="markdownIt-Anchor" href="#224-engine"></a> 2.2.4 Engine</h4>
<p>​	其实就是Servlet Engine；一个service组件只能包含一个Engine组件；但是一个Engine可以包含多个Host组件；它接受代表请求和相应的对象，然后将工作委托给相应的host组件进行处理；如果没有找到对应的host组件，则委托给default host来处理；</p>
<p>​	Engine代表服务请求处理管道；由于Server可能有多个 Connector 连接器， Engine 负责接收并处理来自这些 Connector 的所有请求，并将响应返回给对应的 Connector，最终返回给客户端。</p>
<p>​	Engine是service组件中用来分析协议的引擎机器，它从一个或多个connector上接收请求，并将请求交给对应的虚拟主机进行处理，最后返回完整的响应数据给connector，通过connector将响应数据返回给客户端。<br>
只有一个engine元素必须嵌套在每个service中，且engine必须在其所需要关联的connector之后，这样在engine前面的connector都可以被此engine关联，而在engine后面的connector则被忽略，因为一个service中只允许有一个engine。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Standalone&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span> <span class="attr">jvmRoute</span>=<span class="string">&quot;TomcatA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">常用的engine属性有：</span></span><br><span class="line"><span class="comment">	className：实现engine的类，该类必须实现org.apache.catalina.Engine接口。不给定该属性时将采用默认的标准类org.apache.catalina.core.StandardEngine。</span></span><br><span class="line"><span class="comment">	defaultHost：指定处理请求的默认虚拟主机。在Engine中定义的多个虚拟主机的主机名称中至少有一个跟defaultHost定义的主机名称同名。</span></span><br><span class="line"><span class="comment">	name：Engine组件的名称，用于记录日志和错误信息，无关紧要的属性，可随意给定。</span></span><br><span class="line"><span class="comment">	jvmRoute(session+标识符，记录在服务端)：在启用session粘性时指定使用哪种负载均衡的标识符。所有的tomcat server实例中该标识符必须唯一，它会追加在session标识符的尾部，因此能让前端代理总是将特定的session转发至同一个tomcat实例上。(Session与cookie功能效果相同。Session与Cookie的区别在于Session是记录在服务端的,而Cookie是记录在客户端的。 )</span></span><br><span class="line"><span class="comment">注意: jvmRoute同样可以使用jvmRoute的系统属性来设置。如果此处设置了jvmRoute，则覆盖jvmRoute系统属性。关于jvmRoute的使用，在后面tomcat ajp负载均衡的文章中介绍。</span></span><br><span class="line"><span class="comment">engine是容器中的顶级子容器，其内可以嵌套一个或多个Host作为虚拟主机，且至少一个host要和engine中的默认虚拟主机名称对应。除了host，还可以嵌套releam和valve组件。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="225-host"><a class="markdownIt-Anchor" href="#225-host"></a> 2.2.5 Host</h4>
<p>​	Host容器用来定义虚拟主机。engine从connector接收到请求进行分析后，会将相关的属性参数传递给对应的(筛选方式是从请求首部的host字段和虚拟主机名称进行匹配)虚拟host进行处理。如果没有合适的虚拟主机，则传递给默认虚拟主机。因此每个容器中必须至少定义一个虚拟主机，且必须有一个虚拟主机和engine容器中定义的默认虚拟主机名称相同;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span> <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Alias</span>&gt;</span>www.a.com<span class="tag">&lt;/<span class="name">Alias</span>&gt;</span> <span class="comment">&lt;!--Alias为Host指定的主机名定义主机别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	常用属性说明：</span></span><br><span class="line"><span class="comment">    className：实现host容器的类，该类必须实现org.apache.catalina.Host接口。不给定该属性时将采用默认的标准类org.apache.catalina.core.StandardHost。</span></span><br><span class="line"><span class="comment">    name：虚拟主机的主机名，忽略大小写(初始化时会自动转换为小写)。可以使用前缀星号通配符，如&quot;*.a.com&quot;。使用了星号前缀的虚拟主机的匹配优先级低于精确名称的虚拟主机。</span></span><br><span class="line"><span class="comment">    appBase：此Host的webapps目录，即webapp部署在此虚拟主机上时的存放目录。包括非归档的web应用程序目录和归档后的WAR文件的目录。使用相对路径时基于$CATALINA_BASE。</span></span><br><span class="line"><span class="comment">    xmlBase：部署在此虚拟主机上的context xml目录。</span></span><br><span class="line"><span class="comment">    startStopThreads：启动context容器时的并行线程数。如果使用了自动部署功能，则再次部署或更新时使用相同的线程池。</span></span><br><span class="line"><span class="comment">    autoDeploy：在Tomcat处于运行状态时放置于appBase目录中的应用程序文件是否自动进行deploy或自动更新部署状态。这等于同时开启了deployOnStartup属性和reload/redeploy webapp的功能。触发自动更新时将默认重载该webapp。默认为true。</span></span><br><span class="line"><span class="comment">    unpackWars：在执行此webapps时是否先对归档格式的WAR文件解压再运行，设置为false时则直接执行WAR文件；默认为true。设置为false时会损耗性能。</span></span><br><span class="line"><span class="comment">    workDir：该虚拟主机的工作目录。每个webapp都有自己的临时IO目录，默认该工作目录为$CATALINA_BASE/work。</span></span><br><span class="line"><span class="comment">    大多数时候都只需设置虚拟主机名称name和appBase属性即可，其余采用默认，默认时会自动部署webapp</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<p>两个重要点：</p>
<ul>
<li>domain name: 每个host必须要有一个唯一的domain name; 浏览器发过来的请求里包含有该domain name; domain name在Engine里必须是唯一的</li>
<li>app base folder: 发布到该host里的应用的目录名；可以是相对CATALINE_BASE的相对路径，也可以是文件系统的绝对路径</li>
</ul>
<p>当host获得一个针对特定host请求时，将会在该Host环境下把请求匹配到对应的Context上；然后把请求交给这个Context来处理</p>
<h4 id="226-context"><a class="markdownIt-Anchor" href="#226-context"></a> 2.2.6 Context</h4>
<p>​	一个Context对应一个web application； 它由多个servlet组成；在创建context时，将根据conf/web.xml和webapps/${context path}/WEB-INFO/web.xml加载servlet并创建映射表</p>
<p><img src="/tomcat/tomcat_context.gif" alt="tomcat_context"></p>
<ul>
<li>Document Base: 存放war或解压后的context的地方</li>
<li>Context Path：唯一标志一个context;当没有匹配任何一个context时，默认的context将会处理该请求；默认的context的context path为空</li>
<li>Automatic reload: 一旦监测到context有修改，则会自动重启context，只用于开发模式；</li>
</ul>
<h4 id="227-wrapper"><a class="markdownIt-Anchor" href="#227-wrapper"></a> 2.2.7 Wrapper</h4>
<p>​	Wrapper是context的子元素，代表了一个Servlet（或一个jsp被编译后的servlet）；它负责加载servlet、实例化servlet、以及触发生命周期方法的调用，如init()、service()、destory()；另外wrapper也负责调用与servlet相关的Filter。</p>
<p><img src="/tomcat/tomcat_wrapper.gif" alt="tomcat_context"></p>
<h4 id="228-嵌套组件"><a class="markdownIt-Anchor" href="#228-嵌套组件"></a> 2.2.8  嵌套组件</h4>
<ol>
<li>
<p><strong>Excutor</strong>: 执行器，供 Connector 使用的线程池，可配置多个</p>
<p>cnnector自建，executer共享<br>
执行器定义tomcat各组件之间共享的线程池。在以前，每个connector都会独自创建自己的线程池，但现在，可以定义一个线程池，各组件都可以共享该线程池，不过主要是为各connector之间提供共享。注意，executor创建的是共享线程池，如果某个connector不引用executor创建的线程池，那么该connector仍会根据自己指定的属性创建它们自己的线程池。<br>
连接器必须要实现org.apache.catalina.Executor接口（server的classname，必须实现的接口）。它是一个嵌套在service组件中的元素，为了挑选所使用的connector，该元素还必须定义在connector元素之前。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Executor</span> <span class="attr">name</span>=<span class="string">&quot;tomcatThreadPool&quot;</span> <span class="attr">namePrefix</span>=<span class="string">&quot;catalina-exec-&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">minSpareThreads</span>=<span class="string">&quot;4&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	className（默认）：用于实现此组件的java类的名称，这个类必须实现接口org.apache.catalina.Executor。不			给定该属性时将采用默认的标准类org.apache.catalina.core.StandardThreadExecutor；</span></span><br><span class="line"><span class="comment">	name：该线程池的名称，其他组件需要使用该名称引用该线程池。 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment">标准类的属性包括：</span></span><br><span class="line"><span class="comment">threadPriority：线程优先级，默认值为5。</span></span><br><span class="line"><span class="comment">daemon：线程是否以daemon的方式运行，默认值为true。</span></span><br><span class="line"><span class="comment">namePrefix：执行器创建每个线程时的名称前缀，最终线程的名称为:namePrefix+threadNumber。</span></span><br><span class="line"><span class="comment">maxThreads：线程池激活的最大线程数量。默认值为200。</span></span><br><span class="line"><span class="comment">minSpareThreads：线程池中最少空闲的线程数量。默认值为25。</span></span><br><span class="line"><span class="comment">maxIdleTime：在空闲线程关闭前的毫秒数。除非激活的线程数量小于或等于minSpareThreads的值，否则会有空闲线程的出现。默认值为60000ms，即空闲线程需要保留1分钟的空闲时间才被杀掉。</span></span><br><span class="line"><span class="comment">maxQueueSize：可执行任务的最大队列数，达到队列上限时的连接请求将被拒绝。</span></span><br><span class="line"><span class="comment">prestartminSpareThreads：在启动executor时是否立即创建minSpareThreads个线程数，默认为false，即在需要时才创建线程。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>connector中指定所使用的线程</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">&quot;tomcatThreadPool&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>Manager</strong>： 会话管理器：用于实现http会话管理的功能。</p>
</li>
<li>
<p><strong>Loader</strong>： 类加载器</p>
</li>
<li>
<p><strong>Valve</strong>： 阀门，Tomcat组件层面的过滤器</p>
</li>
<li>
<p><strong>Resource</strong>：资源路径：配置 web 程序的资源信息，如数据库连接信息。</p>
</li>
<li>
<p><strong>Realm</strong>：领域：用于用户的认证和授权。</p>
</li>
<li>
<p><strong>Listener</strong>：监听器：监听已注册组件的生命周期。</p>
</li>
<li>
<p><strong>Cluster</strong>： 集群：专用于配置 Tomcat 集群的元素。</p>
</li>
</ol>
<h4 id="228-container"><a class="markdownIt-Anchor" href="#228-container"></a> 2.2.8 container</h4>
<p>​	container不是tomcat的组件，它是一个概念，统称；包含Engine、host、context、wrapper</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Container(容器:包括以下所有组件)</span><br><span class="line"><span class="comment">----Engine（分发用户请求）</span></span><br><span class="line"><span class="comment">--------Host（主机）</span></span><br><span class="line"><span class="comment">----------------Context（应用）</span></span><br><span class="line"><span class="comment">--------------------Wrapper（Servlet）</span></span><br></pre></td></tr></table></figure>
<h4 id="229-serverxml"><a class="markdownIt-Anchor" href="#229-serverxml"></a> 2.2.9 Server.xml</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.startup.VersionLoggerListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> <span class="attr">SSLEngine</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">&quot;UserDatabase&quot;</span> <span class="attr">auth</span>=<span class="string">&quot;Container&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">description</span>=<span class="string">&quot;User database that can be updated and saved&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">factory</span>=<span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">pathname</span>=<span class="string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="22-tomcat请求处理过程"><a class="markdownIt-Anchor" href="#22-tomcat请求处理过程"></a> 2.2 Tomcat请求处理过程</h3>
<p>接收到用户HTTP请求： <a href="http://localhost:8080/app/login/auth1">http://localhost:8080/app/login/auth1</a></p>
<ul>
<li>请求被发送到本机端后8080，被在那里侦听的coyote HTTP/1.1 Connector获得</li>
<li>Connector把该请求交给它所在得service得Engine来处理，并等待engine得回应</li>
<li>Engine获得请求localhost/app/login/auth1，匹配它所拥有得所有虚拟主机host</li>
<li>Engine获得请求到名为localhost得host（即使匹配不到也把请求交给该host处理，因为该host被定义为该Engine得默认主机）</li>
<li>名字为localhost的host主机获的请求/app/login/auth1，匹配它所拥有的所有context</li>
<li>host匹配到路径为/app的context(如果匹配不到就把该请求交给路径名为“” 的context去处理)</li>
<li>path=“/app”的context获得请求/login/auth1，在它的mapping table中寻找对应的servlet</li>
<li>Context匹配到URL PATTERN为/auth1的servlet，对应于servlet类</li>
<li>构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用Servlet的doGet或者doPost方法</li>
<li>Context把执行完了的HttpServletResponse对象发回给host</li>
<li>Host把HttpServletResponse对象返回给Engine</li>
<li>Engine把HttpServletResponse对象返回给Connnector</li>
<li>Connector把HttpServletResponse对象返回给客户brower</li>
</ul>
<h2 id="3-servlet规范"><a class="markdownIt-Anchor" href="#3-servlet规范"></a> 3. Servlet规范</h2>
<p>Java想要进行Web服务功能提供</p>
<ul>
<li>
<p>当Http服务器接收请求后，如何知道调用哪些java类来处理请求呢？</p>
<p>有些类可能就是用来封装变量的，有些类才是用来处理请求的。为了识别出那些具有处理请求的类，定义了一个接口，这个接口就叫Servlet接口，如果想要让业务类具备处理请求的能力，都必须实现这个接口，实现了接口的业务类叫做Servlet。</p>
</li>
<li>
<p>对于特定的请求，Http服务器如何知道由哪个Servlet来处理？Servlet又是由谁来实例化呢</p>
<p>于是又有了Servlet容器。Http服务器把请求交给Servlet容器去处理，Servlet容器会将请求转发到具体的Servlet,如果这个Servlet还没创建，就加载并实例化这个Servlet，然后调用这个Servlet的接口方法。</p>
</li>
</ul>
<p>Http服务器不直接调用业务类，而是把请求交给容器来处理，容器通过Servlet接口调用业务类。因此Servlet接口和Servlet容器的出现，使Http服务器和业务类解耦。</p>
<p>Servlet规范：Servlet接口 + Servlet容器。</p>
<p>Tomcat按照Servlet规范的要求实现了Servlet容器，同时它也具有Http服务器的功能。（如果我们要实现新的业务功能，只需要实现一个Servlet，然后把它注册到Tomcat(Servlet容器)中，剩下的事情由Tomcat帮我们来处理）。</p>
<p><img src="/tomcat/tomcat.png" alt="tomcat"></p>
<h3 id="31-servlet接口定义了五个方法"><a class="markdownIt-Anchor" href="#31-servlet接口定义了五个方法"></a> 3.1 Servlet接口定义了五个方法</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res）<span class="keyword">throws</span> ServletException, IOException;</span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    String getServletInfo()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>init(ServletConfig config)：</li>
</ul>
<p>和生命周期有关的方法，Servlet容器在加载Servlet类的时候会调用init方法。可能会在init方法里初始化一些资源。比如Springmvc中的DispatcherServlet,在init方法中创建了自己的spring容器。</p>
<ul>
<li>
<p>ServletConfig getServletConfig()：</p>
<p>ServletConfig就是封装Servlet的初始化参数。可以在web.xml给Servlet配置参数，然后在程序中通过getServletConfig方法拿到这些参数。</p>
</li>
<li>
<p>service(ServletRequest req, ServletResponse res)</p>
<p>业务类在这个方法里实现处理逻辑。ServletRequest用来封装请求信息，ServletResponse用来封装响应信息。本质上这两个类是对通信协议的封装。Http协议中的请求和响应就是对应了HttpServletRequest和HttpServletResponse这两个类。我们可以通过HttpServletRequest来获取所有请求相关的信息，包括请求路径，Cookie，Http头，请求参数等。</p>
</li>
<li>
<p>String getServletInfo()</p>
</li>
<li>
<p>destroy()： 和生命周期有关的方法，Servlet容器在卸载Servlet类的时候会调用destory方法。在destory方法里释放这些资源。</p>
</li>
</ul>
<h2 id="4-servlet容器"><a class="markdownIt-Anchor" href="#4-servlet容器"></a> 4. Servlet容器</h2>
<h3 id="41-servlet容器工作流程"><a class="markdownIt-Anchor" href="#41-servlet容器工作流程"></a> 4.1 Servlet容器工作流程</h3>
<p>​	当客户请求某一个资源时，Http服务器会用一个ServletRequest对象把客户的请求信息封装起来，然后调用Servlet容器的service方法，Servlet容器拿到请求后，根据请求的URL和Servlet的映射关系，找到相应的Servlet，如果Servlet还没有被加载，就用反射机制创建这个Servlet，并调用Servlet的init方法来完成初始化，接着调用Servlet的service方法来处理请求，把ServletResponse对象返回给Http服务器，Http服务器会把响应发送给客户端。</p>
<p><img src="/tomcat/tomcat2.png" alt="."></p>
<h3 id="42-web应用"><a class="markdownIt-Anchor" href="#42-web应用"></a> 4.2 Web应用</h3>
<h4 id="421-servlet注册"><a class="markdownIt-Anchor" href="#421-servlet注册"></a> 4.2.1 Servlet注册</h4>
<ul>
<li>
<p>Servlet容器负责实例化和调用Servlet，那么Servlet是怎么注册到Servlet容器的呢？</p>
<p>我们一般以Web应用程序的方式来部署Servlet的。根据Servlet规范，Web应用程序有一定的目录结构：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| -  MyWebApp</span><br><span class="line">      | -  WEB-INF/web.xml        -- 配置文件，用来配置 Servlet 等</span><br><span class="line">      | -  WEB-INF/lib/           -- 存放 Web 应用所需各种 JAR 包</span><br><span class="line">      | -  WEB-INF/classes/       -- 存放你的应用类，比如 Servlet 类</span><br><span class="line">      | -  META-INF/              -- 目录存放工程的一些信息</span><br></pre></td></tr></table></figure>
<p>在这个目录下分别放置了Servlet的类文件，配置文件，静态资源文件，Servlet容器通过读取配置文件，就可以找到并加载Servlet。</p>
<h4 id="422-servletcontext"><a class="markdownIt-Anchor" href="#422-servletcontext"></a> 4.2.2 ServletContext</h4>
<p>Servlet规范中定义了ServletContext这个接口来对应一个Web应用</p>
<p>Web应用部署好以后，Servlet容器在启动时会加载Web应用，并为每个Web应用创建唯一的ServletContext对象。你可以把ServletContext看成是一个全局对象，一个Web应用可能有多个Servlet，这些Servlet可以通过全局的ServletContext来共享数据，这些数据包括Web应用的初始化参数，Web应用目录下的文件资源等。因为ServletContext持有所有Servlet实例，还可以通过它来实现Servlet请求的转发。</p>
<h4 id="423-扩展机制filter和listener"><a class="markdownIt-Anchor" href="#423-扩展机制filter和listener"></a> 4.2.3 扩展机制：Filter和Listener</h4>
<ul>
<li>
<p><strong>Filter</strong>：过滤器，这个接口允许对请求和响应做一些统一的定制化处理，比如可以根据请求的频率来限制访问，根据国家地区的不同来修改响应的内容。</p>
<p>过滤器原理：Web应用部署完以后，Servlet容器需要实例化Filter并把Filter链接成一个FilterChain。当请求进来时，获取第一个Filter并调用doFilter方法，	doFilter方法负责调用　FilterChain的下一个Filter。</p>
</li>
<li>
<p><strong>Listener</strong>：监听器，当Web应用在Servlet容器中运行时，Servlet容器内部会不断发生各种事件，比如Web应用的启动和停止，用户请求到达等。Servlet容器提供了一些默认的监听器来监听这些事件，当事件发生时，Servlet容器会负责调用监听器的方法。自定义监听器需要把监听器配置在web.xml中。比如：Spring就实现了自己的监听器，用来监听ServletContext的启动事件，目的是当Servlet容器启动时，创建并初始化全局的Spring容器。</p>
</li>
</ul>
<h2 id="5-各种容器"><a class="markdownIt-Anchor" href="#5-各种容器"></a> 5. 各种容器</h2>
<ol>
<li>
<p>Tomcat在启动时给每个Web应用创建一个全局的上下文环境，这个上下文就是ServletContext，为后面的Spring容器提供宿主环境。</p>
</li>
<li>
<p>Tomcat在启动过程中触发容器初始化事件，Spring的ContextLoaderListener会监听到这个事件，它的contextInitialized方法会被调用，然后Spring会初始化全局的Spring根容器，这个就是Spring的Ioc容器，Ioc容器初始化完毕后，Spring将其存储到ServletContext中，便于以后获取。</p>
</li>
<li>
<p>Tomcat启动时还会扫描Servlet，一个Web应用中的Servlet可以有多个，以SpringMvc中的DispatcherServet为例，这个Servlet实际上是一个标准的前端控制器，用来转发，匹配，处理每个Servlet请求。</p>
</li>
<li>
<p>Servlet一般会延迟加载，当第一个请求到达时，Tomcat发现DispatcherServet还没有被实例化，就调用DispatcherServet的init方法，DispatcherServet在初始化的时候会建立自己的容器，叫做SpringMvc容器，用来持有SpringMvc相关的Bean。同时，SpringMvc还会通过ServletContext拿到Spring根容器，并把Spring根容器设置为SpringMvc容器的父容器，Spring容器可以访问父容器中的Bean，但是父容器不能访问子容器中的Bean（Spring容器不能访问SpringMvc容器里的Bean —&gt;Controller里可以访问Service对象，但是在Service里不可以访问Controller对象）。</p>
</li>
</ol>
<p><img src="/tomcat/tomcat3.png" alt="tomcat3"></p>
<p>web容器中有servlet容器，spring项目部署后存在spring容器和springmvc容器。其中spring控制service层和dao层的bean对象。springmvc容器控制controller层bean对象。servlet容器控制servlet对象。项目启动是，首先 servlet初始化，初始化过程中通过web.xml中spring的配置加载spring配置，初始化spring容器和springmvc容器。待容器加载完成。servlet初始化完成，则完成启动。<br>
HTTP请求到达web容器后，会到达Servlet容器，容器通过分发器分发到具体的spring的Controller层。执行业务操作后返回结果。</p>
]]></content>
      <categories>
        <category>tomcat</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>分库分表之 ShardingSphere-JDBC</title>
    <url>/sharding-jdbc/</url>
    <content><![CDATA[<h2 id="1-动态数据源解决方案"><a class="markdownIt-Anchor" href="#1-动态数据源解决方案"></a> 1. 动态数据源解决方案</h2>
<p>随着业务数据量逐渐增大，带来存储的瓶颈以及查询瓶颈，我们可以将数据存放到多个数据服务中，以达到减轻数据库压力，缩短数据库操作时间；<br>
目前关于动态数据源的解决方案大致包含以下5种，今天主要是学习一下Sharding-jdbc；<br>
<img src="/sharding-jdbc/0.png" alt></p>
<p>关于Mycat请查看 <a href="https://xiaoyuge.work/mycat/">mycat学习</a> 这篇博客。</p>
<h2 id="2-shardingsphere简介"><a class="markdownIt-Anchor" href="#2-shardingsphere简介"></a> 2. ShardingSphere简介</h2>
<ol>
<li>2018年5月，<code>sharding-jdbc</code>更名为<code>ShardingSphere</code></li>
<li>2018年11月，<code>Sharding-sphere</code>正式进入Apache基金会孵化器</li>
<li>2020年4月，从Apache孵化器毕业，成为Apache顶级项目<code>Apache ShardingSphere</code></li>
</ol>
<p><code>ShardingSphere</code>目前的定位已远超过人们熟知的<code>分库分表</code>的功能了，其拥有自己的⼀套开源的分布式数据库中间件解决⽅案组成的⽣态圈（<strong>ShardingSphere-JDBC</strong>、<strong>ShardingSphere-Proxy</strong>，<strong>ShardingSphere-sidecar</strong>（计划中））<br>
他们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如Java同构、异构语言、容器、云原生等各种多样化的应用场景</p>
<p>官网地址：<a href="https://shardingsphere.apache.org/document/current/cn/overview/">https://shardingsphere.apache.org/document/current/cn/overview/</a></p>
<h3 id="21-apache-shardingsphere"><a class="markdownIt-Anchor" href="#21-apache-shardingsphere"></a> 2.1 Apache ShardingSphere</h3>
<ol>
<li>官方定义：<code>Apache ShardingSphere</code> 是一套开源的分布式数据库增强计算引擎，其通过可插拔架构构建基于数据库之上的生态系统，实现包括数据分片、弹性伸缩、加密脱敏等功能为代表的增强能力</li>
<li>定位Apache ShardingSphere 产品定位为<code>Database Plus</code>，旨在构建异构数据库上层的标准和生态。 它关注如何充分合理地利用数据库的计算和存储能力，而并非实现一个全新的数据库<br>
<img src="/sharding-jdbc/1.png" alt></li>
</ol>
<h3 id="22-shardingsphere-jdbc"><a class="markdownIt-Anchor" href="#22-shardingsphere-jdbc"></a> 2.2 ShardingSphere-JDBC</h3>
<p>定位于轻量级Java框架，在Java的jdbc层提供的额外服务， <code>ShardingSphere-jdbc</code>的主要功能在客户端尽心数据分片和读写分离，通过sharding-jdbc,应用可以使用jdbc访问已经读写分离的多个数据源，而不用关心数据库数量和数据的分布；</p>
<p><em>可以理解为增强版JDBC驱动，完全兼容JDBC和各种ORM框架</em></p>
<ol>
<li>使用于任何给予Java的ORM框架，如：<code>JPA</code>、<code>hibernate</code>、<code>mybatis</code>、<code>Spring JDBC Template</code>或直接使用JDBC</li>
<li>基于任何第三方的数据库连接池，如：<code>DBCP</code>、<code>C3P0</code>、<code>BoneCP</code>、<code>Druid</code>、<code>HikariCP</code>等</li>
<li>支持任意实现JDBC规范的数据库，如<code>Mysql</code>、<code>Oracle</code>、<code>SQLServer</code>、<code>PostgreSQL</code><br>
<img src="/sharding-jdbc/2.png" alt></li>
</ol>
<p>源码：<a href="https://github.com/apache/shardingsphere/tree/master/shardingsphere-jdbc">https://github.com/apache/shardingsphere/tree/master/shardingsphere-jdbc</a></p>
<h3 id="23-shardingsphere-proxy"><a class="markdownIt-Anchor" href="#23-shardingsphere-proxy"></a> 2.3 ShardingSphere-Proxy</h3>
<p>定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前提供 MySQL 和 PostgreSQL（兼容 openGauss 等基于 PostgreSQL 的数据库）版本，它可以使用任何兼容 MySQL/PostgreSQL 协议的访问客户端（如：MySQL Command Client, MySQL Workbench, Navicat 等）操作数据，对 DBA 更加友好</p>
<ol>
<li>向应用程序完全透明，可直接当做 MySQL/PostgreSQL 使用；</li>
<li>适用于任何兼容 MySQL/PostgreSQL 协议的的客户端。</li>
</ol>
<p><img src="/sharding-jdbc/3.png" alt></p>
<p>源码：<a href="https://github.com/apache/shardingsphere/tree/master/shardingsphere-proxy">https://github.com/apache/shardingsphere/tree/master/shardingsphere-proxy</a></p>
<h3 id="24-shardingsphere-sidecartodo"><a class="markdownIt-Anchor" href="#24-shardingsphere-sidecartodo"></a> 2.4 ShardingSphere-sidecar（TODO）</h3>
<p>定位为 Kubernetes 的云原生数据库代理，以 Sidecar 的形式代理所有对数据库的访问。 通过无中心、零侵入的方案提供与数据库交互的啮合层，即 Database Mesh，又可称数据库网格。<br>
<img src="/sharding-jdbc/4.png" alt></p>
<h2 id="3-分片的核心概念"><a class="markdownIt-Anchor" href="#3-分片的核心概念"></a> 3. 分片的核心概念</h2>
<ol>
<li>
<p>主要概念<br>
由原来的一个数据库(表)拆分为真实存在的三个数据库(表)<br>
<img src="/sharding-jdbc/5.png" alt><br>
逻辑表会在 SQL 解析和路由时被替换成真实的表名，分片键就是拆分的逻辑；sharding-jdbc可以选择多个分片键；</p>
</li>
<li>
<p>动态表</p>
<p>表名会变化，比如订单表，按照月份进行分表<br>
<img src="/sharding-jdbc/6.png" alt></p>
</li>
<li>
<p>绑定表</p>
<p>与Mycat的ER表对应，存在关联关系的两张表，他们的分片规则必须相同<br>
<img src="/sharding-jdbc/7.png" alt></p>
</li>
<li>
<p>广播表</p>
<p>与Mycat的全局表对应，所有节点的数据内容一致<br>
<img src="/sharding-jdbc/8.png" alt></p>
</li>
</ol>
<h2 id="4-sharding-jdbc-demo演示"><a class="markdownIt-Anchor" href="#4-sharding-jdbc-demo演示"></a> 4. Sharding-JDBC Demo演示</h2>
<p><code>Apache ShardingSphere-JDBC</code> 可以通过 <strong>Java</strong>，<strong>YAML</strong>，<strong>Spring 命名空间</strong> 和 <strong>Spring Boot Starter</strong> 这 4 种方式进行配置，开发者可根据场景选择适合的配置方式。</p>
<p>目前仅支持<code>Java</code>语言且java JRE 8或更高版本</p>
<p>下面使用SSM框架来集成<code>shardingsphere-jdbc</code>，操作数据库，由于资源有限，在一个数据库<code>instance</code>里面创建两个数据库db0、db1来模拟分库分表；</p>
<ol>
<li>
<p>创建数据库<code>db0</code>,<code>db1</code>，以及创建下面的数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_info` (</span><br><span class="line">     `user_id` <span class="type">bigint</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `user_name` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `account` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `password` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (`user_id`)</span><br><span class="line"> ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- 订单表</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order` (</span><br><span class="line">     `order_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (`order_id`)</span><br><span class="line"> ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 订单明细表</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order_item` (</span><br><span class="line">     `item_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `order_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (`item_id`)</span><br><span class="line"> ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- 参数配置表</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_config` (</span><br><span class="line">     `config_id` <span class="type">int</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">     `para_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `para_value` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `para_desc` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (`config_id`)</span><br><span class="line"> ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">truncate</span> <span class="keyword">table</span> user_info;</span><br><span class="line"> <span class="keyword">truncate</span> <span class="keyword">table</span> t_order;</span><br><span class="line"> <span class="keyword">truncate</span> <span class="keyword">table</span> t_order_item;</span><br><span class="line"> <span class="keyword">truncate</span> <span class="keyword">table</span> t_config;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><span id="index1">创建项目并引入依赖</span></p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shardingsphere/shardingsphere-jdbc-core --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>使用<code>mybatisPlus</code>逆向工程生成<code>entity</code>、<code>mapper</code>、<code>service</code>等相关代码，这里就不贴业务代码了。</p>
</li>
<li>
<p>编辑<code>application.yml</code></p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis-config.xml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span>    <span class="comment">#打印sql语句</span></span><br><span class="line">    <span class="attr">datasource:</span>     <span class="comment">#数据源配置</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">db0,db1</span></span><br><span class="line">      <span class="attr">db0:</span>    <span class="comment">#数据源1</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db1?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">xiaoyuge</span></span><br><span class="line">      <span class="attr">db1:</span>   <span class="comment">#数据源2</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db1?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">xiaoyuge</span></span><br><span class="line">    <span class="attr">sharding:</span>     <span class="comment">#分片</span></span><br><span class="line">      <span class="attr">default-database-strategy:</span>    <span class="comment">#数据库分片策略</span></span><br><span class="line">        <span class="attr">inline:</span></span><br><span class="line">          <span class="attr">sharding-column:</span> <span class="string">user_id</span>    <span class="comment">#分片键</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">db$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span>    <span class="comment">#分片算法</span></span><br><span class="line">      <span class="attr">tables:</span>     <span class="comment">#表分片策略</span></span><br><span class="line">        <span class="attr">user_info:</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">db$-&gt;&#123;0..1&#125;.user_info</span>      <span class="comment">#真实存储数据的节点，可以使用行内表达式,$-&gt;&#123;&#125; 是标准语法</span></span><br><span class="line">          <span class="attr">databaseStrategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">shardingColumn:</span> <span class="string">user_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">db$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span>  <span class="comment">#分片算法</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">user_id</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span>     <span class="comment">#主键策略：SNOWFLAKE 、 UUID，如果设置了主键策略，那么插入的时候就不用指定主键的值</span></span><br><span class="line">        <span class="attr">t_order:</span></span><br><span class="line">          <span class="attr">databaseStrategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">shardingColumn:</span> <span class="string">order_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">db$&#123;order_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment">#分片算法</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">db$-&gt;&#123;0..1&#125;.t_order</span></span><br><span class="line">        <span class="attr">t_order_item:</span></span><br><span class="line">          <span class="attr">databaseStrategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">shardingColumn:</span> <span class="string">order_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">db$&#123;order_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span>   <span class="comment">#分片算法</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">db$-&gt;&#123;0..1&#125;.t_order_item</span></span><br><span class="line">      <span class="string">binding-tables[0]:</span> <span class="string">t_order,t_order_item</span>    <span class="comment">#绑定表配置</span></span><br><span class="line">      <span class="attr">broadcast-tables:</span> <span class="string">t_config</span>      <span class="comment">#广播表配置</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>测试简单分库user_info</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ygb.entity.UserInfo;</span><br><span class="line"><span class="keyword">import</span> com.ygb.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.ygb.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserShardingTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//随机生成100条数据,插入到数据库中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">            userInfo.setAccount(<span class="string">&quot;account&quot;</span> + i);</span><br><span class="line">            userInfo.setPassword(<span class="string">&quot;password&quot;</span> + i);</span><br><span class="line">            userInfo.setUserName(<span class="string">&quot;name&quot;</span> + i);</span><br><span class="line">            userInfo.setUserId(i);</span><br><span class="line">            userService.insert(userInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserInfo userInfo1 = userService.getUserInfoByUserId(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------userInfo1:&quot;</span> + userInfo1);</span><br><span class="line"></span><br><span class="line">        UserInfo userInfo2 = userService.getUserInfoByUserId(<span class="number">2L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------userInfo2:&quot;</span> + userInfo2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>执行 <code>insert</code>方法后，结果如下图所示:<br>
<img src="/sharding-jdbc/9.png" alt></p>
<p>根据上面<code>yaml</code>配置<code>user_info</code>表按照分片键(<code>sharding-column</code>)<code>user_id</code>取模分片到不同数据库;<code>user_id</code> % 2 为偶数落下<code>db0</code>, 奇数落在<code>db1</code></p>
</li>
<li>
<p>执行 <code>select</code> 方法，查询user_id为1 的数据，可以看到逻辑sql语句以及真实的sql语句路由到哪个节点上。<br>
<img src="/sharding-jdbc/10.png" alt><br>
同理，查询user_id 为 2 的数据，根据表的分库规则，user_id % 2 == 0数据落在db0节点上；</p>
</li>
</ol>
</li>
<li>
<p>测试绑定表t_order,t_order_item</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//订单表</span></span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setOrderId(i);</span><br><span class="line">        order.setUserId(i);</span><br><span class="line">        orderService.insert(order);</span><br><span class="line">        <span class="comment">//订单明细表</span></span><br><span class="line">        OrderItem orderItem = <span class="keyword">new</span> OrderItem();</span><br><span class="line">        orderItem.setItemId(i);</span><br><span class="line">        orderItem.setOrderId(i);</span><br><span class="line">        orderItem.setUserId(i);</span><br><span class="line">        orderItemService.insert(orderItem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行<code>insert</code>方法后，数据库表结果如下图所示：<br>
<img src="/sharding-jdbc/11.png" alt><br>
<code>t_order</code>表和<code>t_order_item</code> 使用相同的分片规则<code>db$&#123;order_id % 2&#125;</code>,相同的<code>order_id</code>分布在同一个节点上；</p>
</li>
<li>
<p>测试广播表t_config</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.setConfigId(i);</span><br><span class="line">        config.setParaName(<span class="string">&quot;name&quot;</span>+i);</span><br><span class="line">        config.setParaValue(<span class="string">&quot;value&quot;</span>+i);</span><br><span class="line">        config.setParaDesc(<span class="string">&quot;desc&quot;</span>+i);</span><br><span class="line">        configService.insert(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行<code>insert</code>方法后，查看执行日志，可以看到它向<code>db0</code>、<code>db1</code>两个节点分别发送了插入语句；<br>
<img src="/sharding-jdbc/12.png" alt><br>
<img src="/sharding-jdbc/13.png" alt></p>
</li>
</ol>
<h2 id="5-shardingsphere分库分表原理剖析"><a class="markdownIt-Anchor" href="#5-shardingsphere分库分表原理剖析"></a> 5. ShardingSphere分库分表原理剖析</h2>
<p>基于上面的测试代码来分析ShardingSphere分库分表原理；</p>
<h3 id="51-shardingsphere-jdbc工作流程"><a class="markdownIt-Anchor" href="#51-shardingsphere-jdbc工作流程"></a> 5.1 ShardingSphere-JDBC工作流程</h3>
<figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">SQL 解析(解析引擎) =&gt; 执行器优化 =&gt; SQL 路由(路由引擎) =&gt; SQL 改写(改写引擎) =&gt; SQL 执行(执行引擎) =&gt; 结果归并(归并引擎)</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>SQL解析</p>
<p><code>SQL</code> 解析主要是词法和语法的解析。目前常见的 <code>SQL</code> 解析器主要有<code>fdb</code>，<code>jsqlparser</code> 和 <code>Druid</code>。<code>Sharding-JDBC1.4.x</code>之前的版本使用<code>Druid</code>作为<code>SQL</code>解析器。从 1.5.x 版本 开始，<code>Sharding-JDBC</code>采用完全自研的<code>SQL</code>解析引擎</p>
</li>
<li>
<p>SQL 路由<br>
<img src="/sharding-jdbc/21.png" alt><br>
SQL 路由是根据分片规则配置以及解析上下文中的分片条件，将 SQL 定位至真正的 数据源。它又分为直接路由、标准路由和笛卡尔积路由</p>
<ul>
<li>
<p>直接路由: 使用 Hint 方式。</p>
</li>
<li>
<p>标准路由：Binding 表是指使用同样的分片键和分片规则的一组表，也就是说任何情况下， Binding 表的分片结果应与主表一致。例如：order 表和 order_item 表，都根据 order_id 分片，结果应是 order_1 与 order_item_1 成对出现。这样的关联查询和单表查询复杂度 和性能相当。如果分片条件不是等于，而是 BETWEEN 或 IN，则路由结果不一定落入单 库（表），因此一条逻辑 SQL 最终可能拆分为多条 SQL 语句。</p>
</li>
<li>
<p>笛卡尔积路由：笛卡尔积查询最为复杂，因为无法根据 Binding 关系定位分片规则的一致性，所以 非 Binding 表的关联查询需要拆解为笛卡尔积组合执行。查询性能较低，而且数据库连 接数较高，需谨慎使用。</p>
</li>
</ul>
</li>
<li>
<p>SQL改写</p>
<p>将逻辑表名称改成真实表名称，优化分页查询等</p>
</li>
<li>
<p>SQL执行</p>
<p>因为可能链接到多个真实数据源， Sharding -JDBC 将采用多线程并发执行 SQL</p>
</li>
<li>
<p>SQL归并</p>
<p>如数据的组装、分页、排序等等。</p>
</li>
</ol>
<p>下面我跟着源码学习一下完整的执行过程。</p>
<h3 id="52-配置加载过程"><a class="markdownIt-Anchor" href="#52-配置加载过程"></a> 5.2 配置加载过程</h3>
<p>首先由于我们引入sharding-jdbc-spring-boot-starter依赖，在依赖包中可以看到shardingSphere支持springboot,那么它肯定会有一个类似于SpringBoot自动装配类 <code>SpringBootConfiguration</code>这样的配置类；</p>
<p>查看一下源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring boot starter configuration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;org.apache.shardingsphere.spring.boot.converter&quot;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;</span></span><br><span class="line"><span class="meta">        SpringBootShardingRuleConfigurationProperties.class,</span></span><br><span class="line"><span class="meta">        SpringBootMasterSlaveRuleConfigurationProperties.class, SpringBootEncryptRuleConfigurationProperties.class,</span></span><br><span class="line"><span class="meta">        SpringBootPropertiesConfigurationProperties.class, SpringBootShadowRuleConfigurationProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.shardingsphere&quot;, name = &quot;enabled&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore(DataSourceAutoConfiguration.class)</span> </span><br><span class="line"><span class="comment">//@AutoConfigureBefore自动装配在DataSourceAutoConfiguration装配类之前完成，也就是说Shardingsphere创建得数据源就是全局得数据源，项目只要涉及到对数据库得任何操作都会经过ShardingDataSource得这一层处理</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootConfiguration</span> <span class="keyword">implements</span> <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将之前配置得规则映射到此配置文件中，为创建数据源得过程提供配置信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpringBootShardingRuleConfigurationProperties shardingRule;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpringBootMasterSlaveRuleConfigurationProperties masterSlaveRule;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpringBootEncryptRuleConfigurationProperties encryptRule;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpringBootShadowRuleConfigurationProperties shadowRule;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpringBootPropertiesConfigurationProperties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象存放得是配置得所有数据源映射信息，为后面获取数据库连接以及数据分片提供基础能力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, DataSource&gt; dataSourceMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String jndiName = <span class="string">&quot;jndi-name&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上面的测试代码基于分片的 策略配置，所以只有 ShardingRuleCondition 才满足装配条件。</span></span><br><span class="line"><span class="comment">     * ShardingDataSourceFactory工厂类来创建 ShardingDataSource数据源，</span></span><br><span class="line"><span class="comment">     * Get sharding data source bean.</span></span><br><span class="line"><span class="comment">     * 条件注入不同的数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> data source bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException SQL exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional(ShardingRuleCondition.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">shardingDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//配置转换过程，</span></span><br><span class="line">        <span class="keyword">return</span> ShardingDataSourceFactory.createDataSource(dataSourceMap, <span class="keyword">new</span> ShardingRuleConfigurationYamlSwapper().swap(shardingRule), props.getProps());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get master-slave data source bean.</span></span><br><span class="line"><span class="comment">     * 条件注入不同的数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> data source bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException SQL exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional(MasterSlaveRuleCondition.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">masterSlaveDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MasterSlaveDataSourceFactory.createDataSource(dataSourceMap, <span class="keyword">new</span> MasterSlaveRuleConfigurationYamlSwapper().swap(masterSlaveRule), props.getProps());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get encrypt data source bean.</span></span><br><span class="line"><span class="comment">     *条件注入不同的数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> data source bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException SQL exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional(EncryptRuleCondition.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">encryptDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EncryptDataSourceFactory.createDataSource(dataSourceMap.values().iterator().next(), <span class="keyword">new</span> EncryptRuleConfigurationYamlSwapper().swap(encryptRule), props.getProps());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get shadow data source bean.</span></span><br><span class="line"><span class="comment">     * 条件注入不同的数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> data source bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException SQL exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional(ShadowRuleCondition.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">shadowDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ShadowDataSourceFactory.createDataSource(dataSourceMap, <span class="keyword">new</span> ShadowRuleConfigurationYamlSwapper().swap(shadowRule), props.getProps());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create sharding transaction type scanner</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> sharding transaction type scanner</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShardingTransactionTypeScanner <span class="title">shardingTransactionTypeScanner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShardingTransactionTypeScanner();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(<span class="keyword">final</span> Environment environment)</span> </span>&#123;</span><br><span class="line">        String prefix = <span class="string">&quot;spring.shardingsphere.datasource.&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (String each : getDataSourceNames(environment, prefix)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//遍历环境变量，将数据源保存到 dataSourceMap</span></span><br><span class="line">                dataSourceMap.put(each, getDataSource(environment, prefix, each));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> ReflectiveOperationException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ShardingSphereException(<span class="string">&quot;Can&#x27;t find datasource type!&quot;</span>, ex);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> NamingException namingEx) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ShardingSphereException(<span class="string">&quot;Can&#x27;t find JNDI datasource!&quot;</span>, namingEx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//----------------------------省略------------------------------</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p><code>ShardingDataSourceFactory</code>工厂类创建ShardingDataSource数据源</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShardingDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractDataSourceAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ShardingRuntimeContext runtimeContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//初始化路由装饰器（路由引擎，SPI方式）</span></span><br><span class="line">        NewInstanceServiceLoader.register(RouteDecorator.class);</span><br><span class="line">        <span class="comment">//创建SQL改写上下文装饰器（改写引擎，SPI方式）</span></span><br><span class="line">        NewInstanceServiceLoader.register(SQLRewriteContextDecorator.class);</span><br><span class="line">        <span class="comment">// 创建结果处理引擎（归并引擎，用于对查询结果合并处理，同上）</span></span><br><span class="line">        NewInstanceServiceLoader.register(ResultProcessEngine.class);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShardingDataSource</span><span class="params">(Map&lt;String, DataSource&gt; dataSourceMap, ShardingRule shardingRule, Properties props)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dataSourceMap);</span><br><span class="line">        <span class="keyword">this</span>.checkDataSourceType(dataSourceMap);</span><br><span class="line">        <span class="comment">//创建运行时上下文（全局分片运行时上下文，用于保存分片所需得相关配置）</span></span><br><span class="line">        <span class="keyword">this</span>.runtimeContext = <span class="keyword">new</span> ShardingRuntimeContext(dataSourceMap, shardingRule, props, <span class="keyword">this</span>.getDatabaseType());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//----------------------------省略------------------------------</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>ShardingRule配置规则解析类<br>
配置转换过程。会将分表规则、分库规则、分表算法、分库算法等都解析到对应得 ShardingRuleConfiguration 通用分片配置类中</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ShardingRuleConfiguration <span class="title">swap</span><span class="params">(YamlShardingRuleConfiguration yamlConfiguration)</span> </span>&#123;</span><br><span class="line">   ShardingRuleConfiguration result = <span class="keyword">new</span> ShardingRuleConfiguration();</span><br><span class="line">   Iterator var3 = yamlConfiguration.getTables().entrySet().iterator();</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">while</span>(var3.hasNext()) &#123;</span><br><span class="line">       <span class="comment">//将我们配置得分库、分表策略、分库算法、分表算法解析到TableRuleConfiguration中，每一张表都会对应一个配置类</span></span><br><span class="line">       Entry&lt;String, YamlTableRuleConfiguration&gt; entry = (Entry)var3.next();</span><br><span class="line">       YamlTableRuleConfiguration tableRuleConfig = (YamlTableRuleConfiguration)entry.getValue();</span><br><span class="line">       tableRuleConfig.setLogicTable((String)entry.getKey());</span><br><span class="line">       result.getTableRuleConfigs().add(<span class="keyword">this</span>.tableRuleConfigurationYamlSwapper.swap(tableRuleConfig));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   result.setDefaultDataSourceName(yamlConfiguration.getDefaultDataSourceName());</span><br><span class="line">   <span class="comment">//绑定表</span></span><br><span class="line">   result.getBindingTableGroups().addAll(yamlConfiguration.getBindingTables());</span><br><span class="line">   <span class="comment">//广播表</span></span><br><span class="line">   result.getBroadcastTables().addAll(yamlConfiguration.getBroadcastTables());</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">null</span> != yamlConfiguration.getDefaultDatabaseStrategy()) &#123;</span><br><span class="line">       result.setDefaultDatabaseShardingStrategyConfig(<span class="keyword">this</span>.shardingStrategyConfigurationYamlSwapper.swap(yamlConfiguration.getDefaultDatabaseStrategy()));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">null</span> != yamlConfiguration.getDefaultTableStrategy()) &#123;</span><br><span class="line">       result.setDefaultTableShardingStrategyConfig(<span class="keyword">this</span>.shardingStrategyConfigurationYamlSwapper.swap(yamlConfiguration.getDefaultTableStrategy()));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">null</span> != yamlConfiguration.getDefaultKeyGenerator()) &#123;</span><br><span class="line">       result.setDefaultKeyGeneratorConfig(<span class="keyword">this</span>.keyGeneratorConfigurationYamlSwapper.swap(yamlConfiguration.getDefaultKeyGenerator()));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   Collection&lt;MasterSlaveRuleConfiguration&gt; masterSlaveRuleConfigs = <span class="keyword">new</span> LinkedList();</span><br><span class="line">   Iterator var9 = yamlConfiguration.getMasterSlaveRules().entrySet().iterator();</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">while</span>(var9.hasNext()) &#123;</span><br><span class="line">       Entry&lt;String, YamlMasterSlaveRuleConfiguration&gt; entry = (Entry)var9.next();</span><br><span class="line">       YamlMasterSlaveRuleConfiguration each = (YamlMasterSlaveRuleConfiguration)entry.getValue();</span><br><span class="line">       each.setName((String)entry.getKey());</span><br><span class="line">       masterSlaveRuleConfigs.add(<span class="keyword">this</span>.masterSlaveRuleConfigurationYamlSwapper.swap((YamlMasterSlaveRuleConfiguration)entry.getValue()));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   result.setMasterSlaveRuleConfigs(masterSlaveRuleConfigs);</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">null</span> != yamlConfiguration.getEncryptRule()) &#123;</span><br><span class="line">       result.setEncryptRuleConfig(<span class="keyword">this</span>.encryptRuleConfigurationYamlSwapper.swap(yamlConfiguration.getEncryptRule()));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SpringBootConfiguration -&gt; ShardingDataSourceFactory -&gt; ShardingRule -&gt; ShardingDataSource -&gt; ShardingRuntimeContext</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="53-分片运行时上下文创建过程"><a class="markdownIt-Anchor" href="#53-分片运行时上下文创建过程"></a> 5.3 分片运行时上下文创建过程</h3>
<p>创建数据源的时候会在构造器中将运行时上下文<code>ShardingRuntimeContext</code>一同创建出来，ShardingRuntimeContext得构造器如下图</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ShardingRuntimeContext</span> <span class="keyword">extends</span> <span class="title">MultipleDataSourcesRuntimeContext</span>&lt;<span class="title">ShardingRule</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CachedDatabaseMetaData cachedDatabaseMetaData;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ShardingTransactionManagerEngine shardingTransactionManagerEngine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShardingRuntimeContext</span><span class="params">(Map&lt;String, DataSource&gt; dataSourceMap, ShardingRule shardingRule, Properties props, DatabaseType databaseType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dataSourceMap, shardingRule, props, databaseType);</span><br><span class="line">        <span class="keyword">this</span>.cachedDatabaseMetaData = <span class="keyword">this</span>.createCachedDatabaseMetaData(dataSourceMap);</span><br><span class="line">        <span class="keyword">this</span>.shardingTransactionManagerEngine = <span class="keyword">new</span> ShardingTransactionManagerEngine();</span><br><span class="line">        <span class="keyword">this</span>.shardingTransactionManagerEngine.init(databaseType, dataSourceMap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//----------------- 省略------------</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类关系图如下：<br>
<img src="/sharding-jdbc/14.png" alt><br>
发现运行时上下文进行了抽象，分片运行时上下文继承了<code>MultipleDataSourcesRuntimeContext</code> 多数据源运行时上下文，而多数据源运行时上下文又继承了 <code>AbstractRuntimeContext</code> 抽象上下文。而创建 <code>ShardingRuntimeContext</code> 分片运行时上下文得时候会同时将分片规则保存在抽象类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRuntimeContext</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BaseRule</span>&gt; <span class="keyword">implements</span> <span class="title">RuntimeContext</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T rule;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigurationProperties properties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DatabaseType databaseType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorEngine executorEngine;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SQLParserEngine sqlParserEngine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractRuntimeContext</span><span class="params">(T rule, Properties props, DatabaseType databaseType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rule = rule;   <span class="comment">//1. 缓存整个分片规则，为后续的分片操作提供依据</span></span><br><span class="line">        <span class="keyword">this</span>.properties = <span class="keyword">new</span> ConfigurationProperties(<span class="keyword">null</span> == props ? <span class="keyword">new</span> Properties() : props);</span><br><span class="line">        <span class="keyword">this</span>.databaseType = databaseType;   <span class="comment">//2. 缓存数据库类型，用于后续执行的时候加载对应的数据库元数据</span></span><br><span class="line">        <span class="comment">//3.创建执行引擎，根据当前执行连接是否持有事物来决定是否异步执行，根据配置的executor.size 参数决定创建多少个线程的线程池，默认不配置得话，使用 cachepool，配置了就使用固定线程数得线程池</span></span><br><span class="line">        <span class="keyword">this</span>.executorEngine = <span class="keyword">new</span> ExecutorEngine((Integer)<span class="keyword">this</span>.properties.getValue(ConfigurationPropertyKey.EXECUTOR_SIZE));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解析引擎，用于解析SQL为抽象语法树，解析过程分为词法解析和语法解析。从3.0之后解析会全面替换为 ANTLR</span></span><br><span class="line">        <span class="keyword">this</span>.sqlParserEngine = SQLParserEngineFactory.getSQLParserEngine(DatabaseTypes.getTrunkDatabaseTypeName(databaseType));</span><br><span class="line">        ConfigurationLogger.log(rule.getRuleConfiguration());</span><br><span class="line">        ConfigurationLogger.log(props);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//----------------- 省略------------</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">S<span class="function"><span class="title">hardingRuntimeContext</span>-&gt;</span> M<span class="function"><span class="title">ultipleDataSourcesRuntimeContext</span> -&gt;</span> A<span class="function"><span class="title">bstractRuntimeContext</span>-&gt;</span> E<span class="function"><span class="title">xecutorEngine</span>-&gt;</span> SQLParserEngine</span><br></pre></td></tr></table></figure>
<h3 id="54-分片处理过程"><a class="markdownIt-Anchor" href="#54-分片处理过程"></a> 5.4 分片处理过程</h3>
<p>由于测试代码使用的是<code>Mybatis</code>层，这里只是对<code>Mybatis</code>处理流程进行分析。</p>
<p>当一个查询<code>sql</code>执行时，首先经过Mybatis层</p>
<ol>
<li>
<p>调用<code>org.apache.ibatis.executor.BaseExecutor # queryFromDatabase</code>方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">queryFromDatabase</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.localCache.putObject(key, ExecutionPlaceholder.EXECUTION_PLACEHOLDER);</span><br><span class="line">    List list;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        list = <span class="keyword">this</span>.doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.localCache.removeObject(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.localCache.putObject(key, list);</span><br><span class="line">    <span class="keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class="line">        <span class="keyword">this</span>.localOutputParameterCache.putObject(key, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>通过模板抽象方法<code>org.apache.ibatis.executor.BaseExecutor#doQuery</code>查找具体实现（如果没有特殊配置，此处是SimpleExecutor）,并且将查询结果放入一级缓存中。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    List var9;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Configuration configuration = ms.getConfiguration();</span><br><span class="line">        StatementHandler handler = configuration.newStatementHandler(<span class="keyword">this</span>.wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">        stmt = <span class="keyword">this</span>.prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">        var9 = handler.query(stmt, resultHandler);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.closeStatement(stmt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> var9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>在<code>org.apache.ibatis.executor.SimpleExecutor#doQuery</code>方法中会创建一个<code>Statement</code>，而此实例就是<code>ShardingPreparedStatement</code><br>
<img src="/sharding-jdbc/16.png" alt></p>
</li>
<li>
<p>经过Mybatis预编译SQL处理器，然后在<code>org.apache.ibatis.executor.statement.PreparedStatementHandler#query</code>方法中执行了<code>PreparedStatement</code>的<code>execute</code>方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    PreparedStatement ps = (PreparedStatement)statement;</span><br><span class="line">    ps.execute();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.resultSetHandler.handleResultSets(ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><span id="initPreparedStatementExecutor">在前面知道此处</span>的<code>PreparedStatement</code>是<code>ShardingPreparedStatement</code>，所以这里调用的是<code>ShardingPreparedStatement</code>的<code>execute</code>方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> var1;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1. 首先清理本地 PreparedStatementExecutor 中缓存的sql相关信息（创建执行单元的时候会将sql相关信息缓存到本地）</span></span><br><span class="line">        <span class="keyword">this</span>.clearPrevious();</span><br><span class="line">        <span class="comment">//2. ② 然后执行prepare方法，此方法中有两个很关键的操作：</span></span><br><span class="line">        <span class="keyword">this</span>.prepare();</span><br><span class="line">        <span class="keyword">this</span>.initPreparedStatementExecutor();</span><br><span class="line">        var1 = <span class="keyword">this</span>.preparedStatementExecutor.execute();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.clearBatch();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/sharding-jdbc/17.png" alt></p>
<ol>
<li>
<p><code>this.prepare()</code>执行路由策略和SQL改写策略（这两步是分片的核心，另外也都是可供使用者扩展的）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ExecutionContext <span class="title">prepare</span><span class="params">(String sql, List&lt;Object&gt; parameters)</span> </span>&#123;</span><br><span class="line">    List&lt;Object&gt; clonedParameters = <span class="keyword">this</span>.cloneParameters(parameters);</span><br><span class="line">    RouteContext routeContext = <span class="keyword">this</span>.executeRoute(sql, clonedParameters);</span><br><span class="line">    ExecutionContext result = <span class="keyword">new</span> ExecutionContext(routeContext.getSqlStatementContext());</span><br><span class="line">    result.getExecutionUnits().addAll(<span class="keyword">this</span>.executeRewrite(sql, clonedParameters, routeContext));</span><br><span class="line">    <span class="keyword">if</span> ((Boolean)<span class="keyword">this</span>.properties.getValue(ConfigurationPropertyKey.SQL_SHOW)) &#123;</span><br><span class="line">        SQLLogger.logSQL(sql, (Boolean)<span class="keyword">this</span>.properties.getValue(ConfigurationPropertyKey.SQL_SIMPLE), result.getSqlStatementContext(), result.getExecutionUnits());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><code>org.apache.shardingsphere.underlying.pluggble.prepare.BasePrepareEngine#executeRoute</code>方法，注册路由装饰器。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> RouteContext <span class="title">executeRoute</span><span class="params">(String sql, List&lt;Object&gt; clonedParameters)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.registerRouteDecorator();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.route(<span class="keyword">this</span>.router, sql, clonedParameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>获取已经注册的<code>RouteDecorator</code>类实例，过滤掉泛型是BaseRule类型的（ShardingRule是其子类，所以重新的时候覆写 getType方法时，一定要是BaseRule类型的）</li>
<li>实例化路由装饰器</li>
<li>调用模板方法 route，最终会调用到<code>DataNodeRouter</code>的 <code>executeRoute</code> 方法  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> RouteContext <span class="title">executeRoute</span><span class="params">(String sql, List&lt;Object&gt; parameters, <span class="keyword">boolean</span> useCache)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//1. 解析引擎： 通过 SQLParserEngine 解析SQL（并且此处默认是会将解析后的语句缓存起来，也就证实了前面会什么会先清理缓存），然后通过调用parse0方法解析SQL并缓存</span></span><br><span class="line">     RouteContext result = <span class="keyword">this</span>.createRouteContext(sql, parameters, useCache);</span><br><span class="line"></span><br><span class="line">     Entry entry;</span><br><span class="line">     <span class="comment">//2. 循环执行注册了的路由装饰器</span></span><br><span class="line">     <span class="keyword">for</span>(Iterator var5 = <span class="keyword">this</span>.decorators.entrySet().iterator();</span><br><span class="line">          var5.hasNext(); result = ((RouteDecorator)entry.getValue()).decorate(result, <span class="keyword">this</span>.metaData, (BaseRule)entry.getKey(), <span class="keyword">this</span>.properties)) &#123;</span><br><span class="line">         entry = (Entry)var5.next();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ol>
</li>
<li>
<p>然后开始分片路由装饰器<code>org.apache.shardingsphere.sharding.route.engine.ShardingRouteDecorator#decorate</code><br>
<img src="/sharding-jdbc/18.png" alt><br>
① 获取分片条件：根据不同的语句创建不同的 条件解析引擎来构造分片条件（获取的分片条件用于在执行路由判断时决定使用哪种分片策略）<br>
② 通过工厂创建出 ShardingRouteEngine 实例，一般情况下 会创建出来 ShardingStandardRoutingEngine（没有配置什么骚操作的情况下），然后调用 标准路由执行引擎的 路由方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> RouteResult <span class="title">route</span><span class="params">(ShardingRule shardingRule)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.isDMLForModify(<span class="keyword">this</span>.sqlStatementContext) &amp;&amp; <span class="number">1</span> != ((TableAvailable)<span class="keyword">this</span>.sqlStatementContext).getAllTables().size()) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ShardingSphereException(<span class="string">&quot;Cannot support Multiple-Table for &#x27;%s&#x27;.&quot;</span>, <span class="keyword">new</span> Object[]&#123;<span class="keyword">this</span>.sqlStatementContext.getSqlStatement()&#125;);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;                </span><br><span class="line">         <span class="comment">//根据路由节点生成路由结果 RouteResult</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.generateRouteResult(<span class="keyword">this</span>.getDataNodes(shardingRule, shardingRule.getTableRule(<span class="keyword">this</span>.logicTableName)));</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取数据节点：此处获取的就是真实的SQL路由情况（比如：ds0.table_0），</span></span><br><span class="line"><span class="comment">  * 首先判断是否使用直接路由(强制路由)，若使用则走强制路由的分片算法去计算分片；然后再判断是否根据分片条件去路由，</span></span><br><span class="line"><span class="comment">  * 若有的话，则根据配置的分片算法（内联）根据分片值计算出来具体分到哪个库哪张表；若都没有的话，则直接走混合路由的处理逻辑</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> Collection&lt;DataNode&gt; <span class="title">getDataNodes</span><span class="params">(ShardingRule shardingRule, TableRule tableRule)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.isRoutingByHint(shardingRule, tableRule)) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.routeByHint(shardingRule, tableRule);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.isRoutingByShardingConditions(shardingRule, tableRule) ? <span class="keyword">this</span>.routeByShardingConditions(shardingRule, tableRule) : <span class="keyword">this</span>.routeByMixedConditions(shardingRule, tableRule);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>找到了路由节点</p>
</li>
<li>
<p><a href="#initPreparedStatementExecutor">前面一直在讲prepare方法</a> 回到<code>ShardingPreparedStatement#execute</code>方法中，调用<code>initPreparedStatementExecutor()</code> 初始化<code>PreparedStatementExecutor</code>实例 并将解析出来的执行上下文中的相关SQL语句组设置到缓存中,然后调用执行器的执行方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处会获取到需要执行的SQL集合，主要是通过maxConnectionsSizePerQuery每次执行时最大连接数来判断sql执行单元应该分成几组，maxConnectionsSizePerQuery的值默认是1。则表示，</span></span><br><span class="line"><span class="comment">// 如果真实的sql有10条，那么每组拆分10条，总共拆分成1组，</span></span><br><span class="line"><span class="comment">// 此时会判断 maxConnectionsSizePerQuery 是否大于10，小于的话则会选择当前批次执行的是连接限制模式（只允许占用一个库的一个连接），相反则是内存限制模式，不会限制创建的连接数</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPreparedStatementExecutor</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.preparedStatementExecutor.init(<span class="keyword">this</span>.executionContext);</span><br><span class="line">     <span class="keyword">this</span>.setParametersForStatements();</span><br><span class="line">     <span class="keyword">this</span>.replayMethodForStatements();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><a href="#initPreparedStatementExecutor">ShardingPreparedStatement#executeQuery方法中</a>最后调用执行器的执行方法<code>this.preparedStatementExecutor.execute()</code></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取sql执行回调类（真正操作数据库）</span></span><br><span class="line">    <span class="keyword">boolean</span> isExceptionThrown = ExecutorExceptionHandler.isExceptionThrown();</span><br><span class="line">    <span class="comment">//2. 调用 executeCallback方法，此方法继承自父类AbstractStatementExecutor</span></span><br><span class="line">    SQLExecuteCallback&lt;Boolean&gt; executeCallback = SQLExecuteCallbackFactory.getPreparedSQLExecuteCallback(<span class="keyword">this</span>.getDatabaseType(), isExceptionThrown);</span><br><span class="line">    List&lt;Boolean&gt; result = <span class="keyword">this</span>.executeCallback(executeCallback);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span> != result &amp;&amp; !result.isEmpty() &amp;&amp; <span class="keyword">null</span> != result.get(<span class="number">0</span>) ? (Boolean)result.get(<span class="number">0</span>) : <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>进入父类<code>org.apache.shardingsphere.shardingjdbc.executor.AbstractStatementExecutor#executeCallback</code>，SQL执行模板<code>SQLExecuteTemplate</code>类通过委派其成员<code>ExecutorEngine</code>执行引擎来执行真正的操作</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">executeCallback</span><span class="params">(SQLExecuteCallback&lt;T&gt; executeCallback)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    List&lt;T&gt; result = <span class="keyword">this</span>.sqlExecuteTemplate.execute(<span class="keyword">this</span>.inputGroups, executeCallback);</span><br><span class="line">    <span class="keyword">this</span>.refreshMetaDataIfNeeded(<span class="keyword">this</span>.connection.getRuntimeContext(), <span class="keyword">this</span>.sqlStatementContext);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行引擎对拆分的SQL执行单元执行处理，如图：<br>
<img src="/sharding-jdbc/21.png" alt><br>
① 并发执行（是否是并发执行通过 是否持有事务来判断的，例如 本地事务但是你修改为非自动提交事务，那么此时就是持有事务状态，则此时就是同步执行语句）</p>
<p>② 迭代出SQL执行组的第一个，其余的SQL异步执行</p>
<p>③ 同步执行第一个SQL执行组（方便与后面的执行组进行合并起来）</p>
<p>④ 通过其内置的线程池来异步执行SQL</p>
<p>此时一条查询语句到这里就执行完了，接下来我们接着分析对查询结果进行处理的操作</p>
</li>
<li>
<p>回到Mybatis中，最后对查询的结果集进行处理( resultSetHandler.<E> handleResultSets(ps)，此处是org.apache.ibatis.executor.resultset.DefaultResultSetHandler结果集处理器 ),如下：</E></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">handleResultSets</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ErrorContext.instance().activity(<span class="string">&quot;handling results&quot;</span>).object(<span class="keyword">this</span>.mappedStatement.getId());</span><br><span class="line">    List&lt;Object&gt; multipleResults = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">int</span> resultSetCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//1. 首先调用getFirstResultSet去获取第一个结果集，此处的 Statement 实例是 ShardingPreparedStatement</span></span><br><span class="line">    ResultSetWrapper rsw = <span class="keyword">this</span>.getFirstResultSet(stmt);</span><br><span class="line">    List&lt;ResultMap&gt; resultMaps = <span class="keyword">this</span>.mappedStatement.getResultMaps();</span><br><span class="line">    <span class="keyword">int</span> resultMapCount = resultMaps.size();</span><br><span class="line">    <span class="keyword">this</span>.validateResultMapsCount(rsw, resultMapCount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(rsw != <span class="keyword">null</span> &amp;&amp; resultMapCount &gt; resultSetCount) &#123;</span><br><span class="line">        ResultMap resultMap = (ResultMap)resultMaps.get(resultSetCount);</span><br><span class="line">        <span class="keyword">this</span>.handleResultSet(rsw, resultMap, multipleResults, (ResultMapping)<span class="keyword">null</span>);</span><br><span class="line">        rsw = <span class="keyword">this</span>.getNextResultSet(stmt);</span><br><span class="line">        <span class="keyword">this</span>.cleanUpAfterHandlingResultSet();</span><br><span class="line">        ++resultSetCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String[] resultSets = <span class="keyword">this</span>.mappedStatement.getResultSets();</span><br><span class="line">    <span class="keyword">if</span> (resultSets != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(rsw != <span class="keyword">null</span> &amp;&amp; resultSetCount &lt; resultSets.length) &#123;</span><br><span class="line">            ResultMapping parentMapping = (ResultMapping)<span class="keyword">this</span>.nextResultMaps.get(resultSets[resultSetCount]);</span><br><span class="line">            <span class="keyword">if</span> (parentMapping != <span class="keyword">null</span>) &#123;</span><br><span class="line">                String nestedResultMapId = parentMapping.getNestedResultMapId();</span><br><span class="line">                ResultMap resultMap = <span class="keyword">this</span>.configuration.getResultMap(nestedResultMapId);</span><br><span class="line">                <span class="keyword">this</span>.handleResultSet(rsw, resultMap, (List)<span class="keyword">null</span>, parentMapping);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rsw = <span class="keyword">this</span>.getNextResultSet(stmt);</span><br><span class="line">            <span class="keyword">this</span>.cleanUpAfterHandlingResultSet();</span><br><span class="line">            ++resultSetCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.collapseSingleResultList(multipleResults);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里的Statement ShardingPreparedStatement</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ResultSetWrapper <span class="title">getFirstResultSet</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ResultSet rs = stmt.getResultSet();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(rs == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stmt.getMoreResults()) &#123;</span><br><span class="line">            rs = stmt.getResultSet();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stmt.getUpdateCount() == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rs != <span class="keyword">null</span> ? <span class="keyword">new</span> ResultSetWrapper(rs, <span class="keyword">this</span>.configuration) : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用了<code>getResultSet()</code>方法；</p>
</li>
<li>
<p>进入到<code>org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.ShardingPreparedStatement# getResultSet</code><br>
将查询返回的结果集进行合并处理，Shardingsphere 的归并引擎功能上划分：遍历归并、排序归并（SQL中存在ORDER BY语句）、分组归并（SQL中有GroupBy子句）、聚合归并（含有聚合函数）、分页归并（含有Limit关键字）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResultSet <span class="title">getResultSet</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != <span class="keyword">this</span>.currentResultSet) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.currentResultSet;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.executionContext.getSqlStatementContext() <span class="keyword">instanceof</span> SelectStatementContext || <span class="keyword">this</span>.executionContext.getSqlStatementContext().getSqlStatement() <span class="keyword">instanceof</span> DALStatement) &#123;</span><br><span class="line">            List&lt;ResultSet&gt; resultSets = <span class="keyword">this</span>.getResultSets();          <span class="comment">// ① </span></span><br><span class="line">            MergedResult mergedResult = <span class="keyword">this</span>.mergeQuery(<span class="keyword">this</span>.getQueryResults(resultSets));      <span class="comment">// ② </span></span><br><span class="line">            <span class="keyword">this</span>.currentResultSet = <span class="keyword">new</span> ShardingResultSet(resultSets, mergedResult, <span class="keyword">this</span>, <span class="keyword">this</span>.executionContext);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.currentResultSet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>① 获取所有Statement对应的结果集，此处是拿到真正数据源所对应的Statement实例，比如：我现在的数据源是 HikariDateSource，那么拿到的就是 HikariProxyPreparedStatement</p>
<p>② 执行合并逻辑：首先将结果集封装成流式查询结果对象StreamQueryResult，接着创建合并引擎<code>org.apache.shardingsphere.underlying.pluggble.merge.MergeEngine#merge</code>，然后调用合并引擎的合并方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> MergedResult <span class="title">merge</span><span class="params">(List&lt;QueryResult&gt; queryResults, SQLStatementContext sqlStatementContext)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.registerMergeDecorator();  <span class="comment">// ③ </span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.merger.process(queryResults, sqlStatementContext);  <span class="comment">// ④ </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>③ 实例化合并引擎处理器ResultProcessEngine</p>
<p>④ 调用MergeEntry的 process 方法，委派来进行合并逻辑。<br>
<img src="/sharding-jdbc/24.png" alt><br>
⑤ ⑥ 中，判断若是<code>ResultMergerEngine</code>类型的合并引擎，则调用其merge方法执行真正的合并逻辑<br>
<img src="/sharding-jdbc/25.png" alt><br>
显然满足类型判断，则此处会调用ShardingResultMergerEngine#newInstance 方法来实例化真正用于合并数据流的引擎</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResultMerger <span class="title">newInstance</span><span class="params">(DatabaseType databaseType, ShardingRule shardingRule, ConfigurationProperties properties, SQLStatementContext sqlStatementContext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sqlStatementContext <span class="keyword">instanceof</span> SelectStatementContext) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShardingDQLResultMerger(databaseType);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (ResultMerger)(sqlStatementContext.getSqlStatement() <span class="keyword">instanceof</span> DALStatement ? <span class="keyword">new</span> ShardingDALResultMerger(shardingRule) : <span class="keyword">new</span> TransparentResultMerger());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然此处是查询语句，那么最终用于合并的引擎就是 ShardingDQLResultMerger，然后执行其merge方法<br>
<img src="/sharding-jdbc/26.png" alt><br>
⑦ 中判断sql中包含哪些关键字，然后创建对应的合并结果，如果条件都不满足，那么默认会使用 遍历流式归并方式合并数据。假设 我们此处SQL中带有 order by关键字，那么创建得合并结果对象就是OrderByStreamMergedResult<br>
⑧ 对创建出来的排序合并结果进行装饰操作（就是判断有没有别的关键字，例如：Limit，如果有就会创建LimitDecoratorMergedResult 装饰器对象，在之前的排序合并基础上又多一个 Limit功能），再回到 ShardingPreparedStatement中，会创建一个 ShardingResultSet对象设置到当前的成员变量currentResultSet中，并返回。 此时如果是批量的场景，返回的结果集中实际上已经包含了所有的结果集（前面存放在OrderByStreamMergedResult的 orderByValuesQueue 队列中）</p>
<p>排序归并流程：<br>
<img src="/sharding-jdbc/27.png" alt><br>
调用合并结果的 next方法时会执行如图<br>
<img src="/sharding-jdbc/28.png" alt><br>
最后流程又回到Mybatis 结果集处理上了，将结果返回给请求调用方</p>
</li>
</ol>
<h2 id="6-分片策略"><a class="markdownIt-Anchor" href="#6-分片策略"></a> 6. 分片策略</h2>
<p><strong>策略包括了算法，算法是策略的一个属性。</strong></p>
<p>Sharding-JDBC 中的分片策略有两个维度：分库（数据源分片）策略和分表策略；（mycat只支持要么分库或者要么分表）</p>
<p>跟 Mycat 不一样，Sharding-JDBC 没有提供内置的分片算法，而是通过实现接口<code>ShardingStrategy</code>， 让开发者自行实现，这样可以根据业务实际情况灵活地实现分片。</p>
<h3 id="61-行表达式分片策略-inlineshardingstrategy"><a class="markdownIt-Anchor" href="#61-行表达式分片策略-inlineshardingstrategy"></a> 6.1 行表达式分片策略 InlineShardingStrategy</h3>
<ul>
<li>算法：行内表达式 $-&gt;{}</li>
<li>文档路径：<a href="https://shardingsphere.apache.org/document/current/cn/features/sharding/concept/inline-expression/">https://shardingsphere.apache.org/document/current/cn/features/sharding/concept/inline-expression/</a></li>
</ul>
<p>只支持单分片键，提供对<code>=</code>和<code>IN</code> 操作的支持。行内表达式的配置比较简单。</p>
<p>例如：</p>
<ul>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>b</mi><mi>e</mi><mi>g</mi><mi>i</mi><mi>n</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi>e</mi><mi>n</mi><mi>d</mi></mrow><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">范</mi><mi mathvariant="normal">围</mi><mi mathvariant="normal">区</mi><mi mathvariant="normal">间</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">如</mi><mi mathvariant="normal">：</mi><mi>d</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">{begin..end}   表示范围区间，如：db</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord">.</span><span class="mord">.</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">d</span></span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">范</span><span class="mord cjk_fallback">围</span><span class="mord cjk_fallback">区</span><span class="mord cjk_fallback">间</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">：</span><span class="mord mathdefault">d</span><span class="mord mathdefault">b</span></span></span></span>-&gt;{0…1}表示db0, db1</p>
</li>
<li>
<p><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mo stretchy="false">[</mo><mi>u</mi><mi>n</mi><mi>i</mi><mi>t</mi><mn>1</mn><mo separator="true">,</mo><mi>u</mi><mi>n</mi><mi>i</mi><mi>t</mi><mn>2</mn><mo separator="true">,</mo><mi>u</mi><mi>n</mi><mi>i</mi><msub><mi>t</mi><mi>x</mi></msub><mo stretchy="false">]</mo></mrow><mi mathvariant="normal">表</mi><mi mathvariant="normal">示</mi><mi mathvariant="normal">枚</mi><mi mathvariant="normal">举</mi><mi mathvariant="normal">值</mi><mi mathvariant="normal">，</mi><mi mathvariant="normal">如</mi><mi mathvariant="normal">：</mi></mrow><annotation encoding="application/x-tex">{[unit1, unit2, unit_x]}   表示枚举值，如 ：</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">[</span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault">n</span><span class="mord mathdefault">i</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">]</span></span><span class="mord cjk_fallback">表</span><span class="mord cjk_fallback">示</span><span class="mord cjk_fallback">枚</span><span class="mord cjk_fallback">举</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">：</span></span></span></span>{[‘db0’, ‘db1’]}</p>
</li>
<li>
<p>t_user_$-&gt;{u_id % 8} 表示 t_user 表根据 u_id 模 8，而分成 8 张表，表名称为 t_user_0 到 t_user_7。</p>
</li>
</ul>
<p>行表达式中如果出现连续多个<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mrow><mi>e</mi><mi>x</mi><mi>p</mi><mi>r</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>i</mi><mi>o</mi><mi>n</mi></mrow><mi mathvariant="normal">或</mi></mrow><annotation encoding="application/x-tex">{ expression }或</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">p</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">e</span><span class="mord mathdefault">s</span><span class="mord mathdefault">s</span><span class="mord mathdefault">i</span><span class="mord mathdefault">o</span><span class="mord mathdefault">n</span></span><span class="mord cjk_fallback">或</span></span></span></span>-&gt;{ expression }表达式，整个表达式最终的结果将会根据每个子表达式的结果进行笛卡尔组合。 例如，以下行表达式： <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mrow><msup><mo stretchy="false">[</mo><mo mathvariant="normal">′</mo></msup><mi>d</mi><mi>b</mi><msup><mn>1</mn><mo mathvariant="normal">′</mo></msup><msup><mo separator="true">,</mo><mo mathvariant="normal">′</mo></msup><mi>d</mi><mi>b</mi><msup><mn>2</mn><mo mathvariant="normal">′</mo></msup><mo stretchy="false">]</mo></mrow><mi>t</mi></msub><mi>a</mi><mi>b</mi><mi>l</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">{[&#x27;db1&#x27;, &#x27;db2&#x27;]}_table</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0515919999999999em;vertical-align:-0.29969999999999997em;"></span><span class="mord"><span class="mord"><span class="mopen"><span class="mopen">[</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mord mathdefault">b</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct"><span class="mpunct">,</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">b</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">]</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.13085599999999997em;"><span style="top:-2.4003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29969999999999997em;"><span></span></span></span></span></span></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">e</span></span></span></span>{1…3} 最终会解析为： db1_table1, db1_table2, db1_table3, db2_table1, db2_table2, db2_table3</p>
<h3 id="62-标准分片策略-standardshardingstrategy"><a class="markdownIt-Anchor" href="#62-标准分片策略-standardshardingstrategy"></a> 6.2 标准分片策略 StandardShardingStrategy</h3>
<p>标准分片策略只支持但分片键，提供了两个分片算法，分别对应了<code>IN</code>、<code>BETWEEN</code> 和 <code>=</code>；如果要是用标准分片策略，必须要实现<code>PreciseShardingAlgorithm</code>,用来处理<code>=</code>和<code>IN</code>的分片<br>
<code>RangeShardingAlgorithm</code>是可选的，如果没有实现，SQL语句会发送到所有节点上执行。</p>
<ul>
<li>算法：范围分片<code>RangeShardingAlgorithm</code> 和 精确分片<code>PreciseShardingAlgorithm</code>两种算法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义分库策略</span></span><br><span class="line"><span class="comment"> * 数据库分库的策略，根据分片键，返回数据库名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBShardAlgo</span> <span class="keyword">implements</span> <span class="title">PreciseShardingAlgorithm</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSharding</span><span class="params">(Collection&lt;String&gt; collection, PreciseShardingValue&lt;Long&gt; preciseShardingValue)</span> </span>&#123;</span><br><span class="line">        String db_name=<span class="string">&quot;ds&quot;</span>;</span><br><span class="line">        Long num= preciseShardingValue.getValue()%<span class="number">2</span>;</span><br><span class="line">        db_name=db_name + num;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------db_name:&quot;</span> + db_name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String each : collection) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ds:&quot;</span> + each);</span><br><span class="line">            <span class="keyword">if</span> (each.equals(db_name)) &#123;</span><br><span class="line">                <span class="keyword">return</span> each;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义分表策略</span></span><br><span class="line"><span class="comment"> * 等值查询使用的分片算法，包括in</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TblPreShardAlgo</span> <span class="keyword">implements</span> <span class="title">PreciseShardingAlgorithm</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, PreciseShardingValue&lt;Long&gt; shardingColumn)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不分表</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-availableTargetNames:&quot;</span> + availableTargetNames);</span><br><span class="line">        <span class="keyword">for</span> (String tbname : availableTargetNames) &#123;</span><br><span class="line">            <span class="comment">//如果这里要分表可以根据  shardingColumn.getValue() % 2</span></span><br><span class="line">            <span class="comment">//也可以根据月份分表，user_info_202201这种，只需要在这里拼接表名即可</span></span><br><span class="line">            System.out.println(shardingColumn.getValue() % <span class="number">2</span>+<span class="string">&quot;-------&quot;</span>+ tbname);</span><br><span class="line">            <span class="keyword">return</span> tbname;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么在配置文件中只需要指定分配规则</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">##为了缩减篇幅，这里改成properties的格式</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.t_order.databaseStrategy.standard.shardingColumn</span>=<span class="string">order_id</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.t_order.databaseStrategy.standard.precise-algorithm-class-name</span>=<span class="string">com.ygb.config.TblPreShardAlgo</span></span><br></pre></td></tr></table></figure>
<p><img src="/sharding-jdbc/19.png" alt></p>
<p>范围分片：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 范围查询所使用的分片算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TblRangeShardAlgo</span> <span class="keyword">implements</span> <span class="title">RangeShardingAlgorithm</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">doSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, RangeShardingValue&lt;Long&gt; rangeShardingValue)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;范围-*-*-*-*-*-*-*-*-*-*-*---------------&quot;</span>+availableTargetNames);</span><br><span class="line">        System.out.println(<span class="string">&quot;范围-*-*-*-*-*-*-*-*-*-*-*---------------&quot;</span>+rangeShardingValue);</span><br><span class="line">        Collection&lt;String&gt; collect = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        Range&lt;Long&gt; valueRange = rangeShardingValue.getValueRange();</span><br><span class="line">        <span class="keyword">for</span> (Long i = valueRange.lowerEndpoint(); i &lt;= valueRange.upperEndpoint(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String each : availableTargetNames) &#123;</span><br><span class="line">                <span class="keyword">if</span> (each.endsWith(i % availableTargetNames.size() + <span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                    collect.add(each);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> collect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看数据库<code>db0</code>、<code>db1</code>，可以看到只有<code>db0</code>有数据；</p>
<h3 id="63-复合分片策略-complexshardingstrategy"><a class="markdownIt-Anchor" href="#63-复合分片策略-complexshardingstrategy"></a> 6.3 复合分片策略 ComplexShardingStrategy</h3>
<p>复合分片策略支持多分片键</p>
<ul>
<li>算法：ComplexKeysShardingAlgorithm</li>
<li>场景：根据日期和ID两个字段分片，每个月3张表，先根据日期，然后在根据ID取模分片</li>
</ul>
<h3 id="64-hint分片策略-hintshardingstrategy"><a class="markdownIt-Anchor" href="#64-hint分片策略-hintshardingstrategy"></a> 6.4 Hint分片策略 HintShardingStrategy</h3>
<p>通过 Hint 而非 SQL 解析的方式分片的策略</p>
<ul>
<li>算法：HintShardingAlgorithm</li>
</ul>
<h3 id="65-不分片策略-noneshardingstrategy"><a class="markdownIt-Anchor" href="#65-不分片策略-noneshardingstrategy"></a> 6.5 不分片策略 NoneShardingStrategy</h3>
<p>只在一个节点存储</p>
<ul>
<li>算法：无</li>
</ul>
<p><img src="/sharding-jdbc/20.png" alt></p>
<h2 id="与mycat对比"><a class="markdownIt-Anchor" href="#与mycat对比"></a> 与Mycat对比</h2>
<table>
<thead>
<tr>
<th style="text-align:left"></th>
<th style="text-align:center">ShardingSphere-JDBC</th>
<th style="text-align:center">Mycat</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">工作层面</td>
<td style="text-align:center">JDBC协议</td>
<td style="text-align:center">Mysql协议/JDBC协议</td>
</tr>
<tr>
<td style="text-align:left">运行方式</td>
<td style="text-align:center">Jar包，客户端</td>
<td style="text-align:center">独立服务，服务端</td>
</tr>
<tr>
<td style="text-align:left">开发方式</td>
<td style="text-align:center">代码/配置改动</td>
<td style="text-align:center">连接地址修改（数据源）</td>
</tr>
<tr>
<td style="text-align:left">运维方式</td>
<td style="text-align:center">无</td>
<td style="text-align:center">管理独立服务，运维成本高</td>
</tr>
<tr>
<td style="text-align:left">性能</td>
<td style="text-align:center">多线程并发操作，性能高</td>
<td style="text-align:center">独立服务+网络开销，存在性能损失风险</td>
</tr>
<tr>
<td style="text-align:left">功能范围</td>
<td style="text-align:center">协议层面</td>
<td style="text-align:center">包括分布式事务、数据迁移等</td>
</tr>
<tr>
<td style="text-align:left">适用操作</td>
<td style="text-align:center">OLTP</td>
<td style="text-align:center">OLTP+OLAP</td>
</tr>
<tr>
<td style="text-align:left">支持数据库</td>
<td style="text-align:center">基于JDBC协议的数据库</td>
<td style="text-align:center">MySQL 和其他支持 JDBC 协议的数据库</td>
</tr>
<tr>
<td style="text-align:left">支持语言</td>
<td style="text-align:center">Java</td>
<td style="text-align:center">支持 JDBC 协议的语言</td>
</tr>
</tbody>
</table>
<p>从易用性和功能完善的角度来说，<code>Mycat</code> 似乎比 <code>Sharding-JDBC</code> 要好，因为有现成 的分片规则，也提供了4种<code>ID</code>生成方式，通过注解可以支持高级功能，比如跨库关联查询。</p>
<p>建议：小型项目可以用 <code>Sharding-JDBC</code>。大型项目，可以用 <code>Mycat</code>。</p>
]]></content>
      <categories>
        <category>ShardingSphere-jdbc</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>接口设计看这一篇就够了</title>
    <url>/special-interface/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">
<h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2>
<p><strong>1. <a href="#content1">接口幂等性</a><br>
2. <a href="#token">SpringBoot 防重Token令牌方案</a><br>
3. <a href="#interfaceSafe">接口数据安全方案</a><br>
4. <a href="#interfacePerformance">接口性能优化方案</a><br>
5. <a href="#interfaceDefine">接口设计的锦囊</a></strong></p>
<h2 id="span-classtit-h2-idcontent11-接口幂等性span"><a class="markdownIt-Anchor" href="#span-classtit-h2-idcontent11-接口幂等性span"></a> <span class="tit-h2" id="content1">1. 接口幂等性</span></h2>
<h3 id="11-幂等性描述"><a class="markdownIt-Anchor" href="#11-幂等性描述"></a> 1.1 幂等性描述</h3>
<blockquote>
<p>幂等是一个数据和计算机学概念，在数学中某一元运算为幂等时，作用多次和作用一次的结果相同</p>
</blockquote>
<p>在数学中，幂等用函数表达式就是：<strong>f(x) = f(f(x))</strong></p>
<h3 id="12-接口幂等性"><a class="markdownIt-Anchor" href="#12-接口幂等性"></a> 1.2 接口幂等性</h3>
<blockquote>
<p>在HTTP/1.1中，对幂等性进行类定义，它描述一次和多次请求某个资源对资源本身应该具有同样的结果（网络超时等问题除外），<br>
即多次调用方法或者接口不会改变业务状态，可以保证重复调用的结果和单次调用的结果一致。</p>
</blockquote>
<p><strong>幂等性指的是作用于结果而非资源本身。例如，HTTP GET方法可能会每次得到不同的返回内容，但并不影响资源。</strong></p>
<h3 id="13-为什么需要实现幂等性"><a class="markdownIt-Anchor" href="#13-为什么需要实现幂等性"></a> 1.3 为什么需要实现幂等性</h3>
<p>在接口调用时一般情况下都能正常返回信息不会出现重复提交，不过出现以下几种情况会有问题，如：</p>
<ul>
<li>
<p>前端重复提交表单：比如用户注册时，因网络波动没有及时对用户做出提交成功响应，致使用户认为没有提交成功，然后多次进行提交操作，这时就会发生重复提交请求</p>
</li>
<li>
<p>用户恶意刷单：比如用户投票，如果用户针对一个内容重复提交投票，接口接收到用户重复提交的投票信息，影响实际的计算结果</p>
</li>
<li>
<p>接口超时重复提交：如果存在超时重试机制，尤其是第三方调用接口时，为了防止网络波动超时等造成的请求失败，都会添加重试机制，导致一个请求多次提交</p>
</li>
<li>
<p>消息进行重复消费：当使用MQ消息中间件时，如果发生消息中间件出现错误为即使提交消费消息，导致发生重复消费；</p>
</li>
</ul>
<p>使用幂等性最大的优势在于使接口保证任何幂等性操作，避免因重试等造成系统未知问题。</p>
<p><img src="/special-interface/5.gif" alt></p>
<h3 id="14-幂等性对系统的影响"><a class="markdownIt-Anchor" href="#14-幂等性对系统的影响"></a> 1.4 幂等性对系统的影响</h3>
<p>幂等性是为了简化客户端逻辑处理，能防止重复提交等操作，但也额外增加了服务端业务逻辑复杂性，主要是</p>
<ul>
<li>
<p>把并行执行的功能改成了串行，降低了执行效率</p>
</li>
<li>
<p>增加了额外控制幂等的业务代码，使原本的业务功能复杂化</p>
</li>
</ul>
<p>所以我们需要根据实际的业务场景来考虑是否引入幂等性</p>
<h3 id="15-restful-api-接口的幂等性"><a class="markdownIt-Anchor" href="#15-restful-api-接口的幂等性"></a> 1.5 Restful API 接口的幂等性</h3>
<p>现在流行的Restful 推荐的几种HTTP方法中幂等性如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>是否幂等</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>HEAD</td>
<td>是</td>
<td>Head不含有呈现数据，仅时HTTP头信息，head方法常用来做探活使用</td>
</tr>
<tr>
<td>GET</td>
<td>是</td>
<td>Get 方法用于获取资源。其一般不会也不应当对系统资源进行改变，所以是幂等的</td>
</tr>
<tr>
<td>POST</td>
<td>否</td>
<td>Post 方法一般用于创建新的资源。其每次执行都会新增数据，所以不是幂等的</td>
</tr>
<tr>
<td>PUT</td>
<td>-</td>
<td>Put 方法一般用于更新资源。该操作则分情况来判断是不是满足幂等，更新操作中直接根据某个值进行更新，也能保持幂等。不过执行累加操作的更新是非幂等</td>
</tr>
<tr>
<td>DELETE</td>
<td>-</td>
<td>Delete 方法一般用于删除资源。该操作则分情况来判断是不是满足幂等，当根据唯一值进行删除时，删除同一个数据多次执行效果一样。不过需要注意，带查询条件的删除则就不一定满足幂等了。例如在根据条件删除一批数据后，这时候新增加了一条数据也满足条件，然后又执行了一次删除，那么将会导致新增加的这条满足条件数据也被删除。</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>是</td>
<td>主要用于获取当前URL所支持的方法，也是有点像查询</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>是</td>
<td>主要用于获取当前URL所支持的方法，也是有点像查询</td>
</tr>
</tbody>
</table>
<h3 id="16-如何设计幂等"><a class="markdownIt-Anchor" href="#16-如何设计幂等"></a> 1.6 如何设计幂等</h3>
<p>幂等意味着一条请求的唯一性，无论上面哪个方，都需要一个<strong>全局ID</strong>去标记这个请求是独一无二的。</p>
<ol>
<li>数据库唯一索引控制幂等，那唯一索引是唯一的</li>
<li>数据库主键控制幂等， 那么主键是唯一的</li>
</ol>
<h4 id="全局唯一id"><a class="markdownIt-Anchor" href="#全局唯一id"></a> 全局唯一ID</h4>
<p>下面Demo<a href="#token"><strong>防重Token令牌方案</strong></a>使用的是<strong>UUID</strong>，但是UUID的缺点比较明显，字符串占用的空间比较大，生成的ID过于随机，可读性差，而且没有递增。<br>
我们还可以使用<code>Snowflake雪花算法</code> 生成唯一ID</p>
<blockquote>
<p>雪花算法是一种生成分布式全局ID的算法，生成的ID称为<code>Snowflakes IDs</code></p>
</blockquote>
<p>一个SnowflakesID有64位：</p>
<ul>
<li>第1位： Java中long的最高位是付好位，正数为0，负数是1，一般生成的ID都是正数，所以默认为0</li>
<li>第2-42位：时间戳，表示了自选定的时期依赖的毫秒数</li>
<li>第43-52位：计算机ID，防止冲突</li>
<li>第53-64位：每台及其上生成ID的序列号，这允许在同一毫秒内创建多个Snowflake ID</li>
</ul>
<p><img src="/special-interface/6.png" alt="雪花算法"><br>
全局唯一ID还可以使用百度的<code>Uidgenerator</code>、美团的<code>leaf</code></p>
<h4 id="幂等设计的基本流程"><a class="markdownIt-Anchor" href="#幂等设计的基本流程"></a> 幂等设计的基本流程</h4>
<p>幂等处理的过程，其实就是过滤以下已经收到的请求，然后判断请求是否之前收到过，把请求存储起来，收到请求时，先查下存储记录，记录存在就返回上次的结果，不存在就处理请求。<br>
<img src="/special-interface/7.png" alt="幂等设计的基本流程"></p>
<h3 id="17-实现幂等的方案"><a class="markdownIt-Anchor" href="#17-实现幂等的方案"></a> 1.7 实现幂等的方案</h3>
<h4 id="方案1数据库唯一主键"><a class="markdownIt-Anchor" href="#方案1数据库唯一主键"></a>   方案1：数据库唯一主键</h4>
<ul>
<li>
<p>描述</p>
<blockquote>
<p>利用数据库主键唯一约束的特性，依赖来说唯一主键比较适用于插入时的幂等性，其能保证一张表只能存在一条带该唯一主键的记录</p>
<p>使用数据库唯一主键完成幂等性时需要注意的是，该主键一般来说并不是使用数据库自增主键，而是使用分布式ID作为主键，这样才能保证在分布式环境下ID的全局一致性</p>
</blockquote>
</li>
<li>
<p>使用操作</p>
<ul>
<li>插入</li>
<li>删除</li>
</ul>
</li>
<li>
<p>使用限制</p>
<ol>
<li>需要生成全局唯一主键ID</li>
</ol>
</li>
<li>
<p>主要流程</p>
<p><img src="/special-interface/1.png" alt><br>
分布式ID服务可以使用<strong>Snowflake算法</strong>、<strong>数据库号段模式</strong>、<strong>Redis自增</strong>等方式生成；</p>
</li>
</ul>
<h4 id="方案2数据库乐观锁"><a class="markdownIt-Anchor" href="#方案2数据库乐观锁"></a>   方案2：数据库乐观锁</h4>
<blockquote>
<p>乐观锁：在操作数据时，非常乐观，认为别人不再同时在修改数据，因此乐观锁不会上锁，只是在执行更新的时候判断以下，在此期间是否别人修改了数据</p>
</blockquote>
<ul>
<li>
<p>描述</p>
<blockquote>
<p>一般只适用于更新操作的过程，在表中增加version版本字段，每次对该表的这条数据更新时，都会带上上次更新后的version值</p>
</blockquote>
</li>
<li>
<p>使用操作</p>
<ul>
<li>更新</li>
</ul>
</li>
<li>
<p>使用限制</p>
<ol>
<li>需要在业务表中添加额外字段</li>
</ol>
</li>
<li>
<p>主要流程</p>
<p><img src="/special-interface/2.png" alt></p>
<ul>
<li>
<p>更新数据前，先查下数据，查出版本号为<code>version = 5</code></p>
</li>
<li>
<p>然后使用<code>version=5</code> 和 <code>order_id=1010101</code>一起作为条件去更新</p>
</li>
</ul>
<p><strong>为什么版本号建议自增呢？</strong></p>
<blockquote>
<p>因为乐观锁存在ABA的问题，如果version版本一直是自增就不会出现ABA的情况了。</p>
</blockquote>
<blockquote>
<p>ABA问题：一个线程先读取共享内存数据值A，随后因某种原因，线程暂时挂起，同时另一个线程临时将共享内存数据值先改为B，随后又改回为A。随后挂起线程恢复，并通过CAS比较，最终比较结果将会无变化。这样会通过检查，这就是ABA问题。 在CAS比较前会读取原始数据，随后进行原子CAS操作。这个间隙之间由于并发操作，最终可能会带来问题<br>
相当于是只关心共享变量的起始值和结束值，而不关心过程中共享变量是否被其他线程动过。</p>
</blockquote>
</li>
</ul>
<h4 id="方案3防重token令牌"><a class="markdownIt-Anchor" href="#方案3防重token令牌"></a>   方案3：防重Token令牌</h4>
<ul>
<li>
<p>描述</p>
<blockquote>
<p>针对客户端连续点击或者调用方的超时重试等情况，例如提交订单，此种操作就可以用 Token 的机制实现防止重复提交。简单的说就是调用方在调用接口的时候先向后端请求一个全局 ID（Token），请求的时候携带这个全局 ID 一起请求（Token 最好将其放到 Headers 中），后端需要对这个 Token 作为 Key，用户信息作为 Value 到 Redis 中进行键值内容校验，如果 Key 存在且 Value 匹配就执行删除命令，然后正常执行后面的业务逻辑。如果不存在对应的 Key 或 Value 不匹配就返回重复执行的错误信息，这样来保证幂等操作</p>
</blockquote>
</li>
<li>
<p>使用操作</p>
<ul>
<li>更新</li>
<li>插入</li>
</ul>
</li>
<li>
<p>使用限制</p>
<ol>
<li>
<p>需要生成全局唯一 Token串</p>
</li>
<li>
<p>需要使用Redis进行数据校验</p>
</li>
</ol>
</li>
<li>
<p>主要流程</p>
<p><img src="/special-interface/3.png" alt><br>
Token可以是一个序列号，也可以是分布式ID或者UUID串</p>
<ul>
<li>验证成功：说明存在该token，是第一次调用接口，可以执行后面的业务代码，同时在redis中删除该token</li>
<li>验证失败：说明存在该token，是重复调用接口，不可以执行后面的业务代码；</li>
</ul>
<blockquote>
<p>注意，在并发情况下，执行 Redis 查找数据与删除需要保证原子性，否则很可能在并发下无法保证幂等性。其实现方法可以使用分布式锁或者使用 Lua 表达式来注销查询与删除操作。</p>
</blockquote>
</li>
</ul>
<h4 id="方案4下游传递唯一序列号"><a class="markdownIt-Anchor" href="#方案4下游传递唯一序列号"></a>   方案4：下游传递唯一序列号</h4>
<ul>
<li>
<p>描述</p>
<p>所谓请求序列号，其实就是每次向服务端请求时候附带一个短时间内唯一不重复的序列号，该序列号可以是一个有序 ID，也可以是一个订单号，一般由下游生成，在调用上游服务端接口时附加该序列号和用于认证的 ID。 当上游服务器收到请求信息后拿取该 序列号 和下游 认证ID 进行组合，形成用于操作 Redis 的 Key，然后到 Redis 中查询是否存在对应的 Key 的键值对，根据其结果：</p>
<ul>
<li>如果存在，就说明已经对该下游的该序列号的请求进行了业务处理，这时可以直接响应重复请求的错误信息。</li>
<li>如果不存在，就以该 Key 作为 Redis 的键，以下游关键信息作为存储的值（例如下游商传递的一些业务逻辑信息），将该键值对存储到 Redis 中 ，然后再正常执行对应的业务逻辑即可。</li>
</ul>
</li>
<li>
<p>使用操作</p>
<ul>
<li>更新</li>
<li>插入</li>
<li>删除</li>
</ul>
</li>
<li>
<p>使用限制</p>
<ol>
<li>需要第三方传递唯一序列号</li>
<li>需要使用Redis进行数据校验</li>
</ol>
</li>
<li>
<p>主要流程</p>
<p><img src="/special-interface/4.png" alt></p>
<p>① 下游服务生成分布式 ID 作为序列号，然后执行请求调用上游接口，并附带“唯一序列号”与请求的“认证凭据ID”。<br>
② 上游服务进行安全效验，检测下游传递的参数中是否存在“序列号”和“凭据ID”。<br>
③ 上游服务到 Redis 中检测是否存在对应的“序列号”与“认证ID”组成的 Key，如果存在就抛出重复执行的异常信息，然后响应下游对应的错误信息。如果不存在就以该“序列号”和“认证ID”组合作为 Key，以下游关键信息作为 Value，进而存储到 Redis 中，然后正常执行接来来的业务逻辑。</p>
<blockquote>
<p>上面步骤中插入数据到 Redis 一定要设置过期时间。这样能保证在这个时间范围内，如果重复调用接口，则能够进行判断识别。如果不设置过期时间，很可能导致数据无限量的存入 Redis，致使 Redis 不能正常工作。</p>
</blockquote>
</li>
</ul>
<h4 id="方案5状态机幂等"><a class="markdownIt-Anchor" href="#方案5状态机幂等"></a>   方案5：状态机幂等</h4>
<ul>
<li>
<p>描述<br>
很多业务表都是有状态的，比如转账流水表就会有<code>0-待处理，1-处理中，2-成功，3失败</code>，转账流水更新时，都会涉及流水状态更新，即涉及状态机。<br>
比如转账成功后，把处理中的流水更新为<strong>成功</strong>状态</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update trans_flow <span class="keyword">set</span> status <span class="operator">=</span> <span class="number">2</span> <span class="keyword">where</span> biz_seq<span class="operator">=</span><span class="string">&#x27;123&#x27;</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>主要流程<br>
<img src="/special-interface/8.png" alt></p>
<ul>
<li>第1次请求来时，bizSeq流水号是 666，该流水的状态是处理中，值是 1，要更新为2-成功的状态，所以该update语句可以正常更新数据，sql执行结果的影响行数是1，流水状态最后变成了2。</li>
<li>第2请求也过来了，如果它的流水号还是 666，因为该流水状态已经2-成功的状态了，所以更新结果是0，不会再处理业务逻辑，接口直接返回。</li>
</ul>
</li>
<li>
<p>伪代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Rsp idempotentTransfer（Request req）&#123;</span><br><span class="line">    String bizSeq = req.getBizSeq();</span><br><span class="line">    <span class="keyword">int</span> rows= <span class="string">&quot;update transfr_flow set status=2 where biz_seq=#&#123;bizSeq&#125; and status=1;&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(rows==<span class="number">1</span>)&#123;</span><br><span class="line">        log.info(“更新成功,可以处理该请求”);</span><br><span class="line">        <span class="comment">//其他业务逻辑处理</span></span><br><span class="line">        <span class="keyword">return</span> rsp;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rows==<span class="number">0</span>)&#123;</span><br><span class="line">        log.info(“更新不成功，不处理该请求”);</span><br><span class="line">        <span class="comment">//不处理，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> rsp;</span><br><span class="line">    &#125;</span><br><span class="line">    log.warn(<span class="string">&quot;数据异常&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> rsp：</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="方案6悲观锁"><a class="markdownIt-Anchor" href="#方案6悲观锁"></a>   方案6：悲观锁</h4>
<blockquote>
<p>悲观锁：通俗的讲，就是每次去操作数据时，都会觉得别人中途会修改，所以每次拿到数据的时候都会上锁；官方点讲就是：共享资源每次只给一个线程使用，其他线程阻塞，用完后再把资源转为其他线程。</p>
</blockquote>
<ul>
<li>
<p>业务场景</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">假设先查处订单，如果查到的时处理中状态，就处理完业务，然后更新订单状态为完成，如果查到订单状态不是处理中状态，则直接返回</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>伪代码</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;  # <span class="number">1.</span>开始事务</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">order</span> <span class="keyword">where</span> order_id<span class="operator">=</span><span class="string">&#x27;666&#x27;</span> <span class="comment">--  查询订单，判断状态</span></span><br><span class="line"><span class="comment">-- 0-待处理，1-处理中，2-成功，3失败</span></span><br><span class="line">if（status <span class="operator">!=</span> 处理中）&#123;</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span>非处理中状态，直接返回；</span><br><span class="line">   <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">## 处理业务逻辑</span><br><span class="line">update <span class="keyword">order</span> <span class="keyword">set</span> status<span class="operator">=</span><span class="string">&#x27;完成&#x27;</span> <span class="keyword">where</span> order_id<span class="operator">=</span><span class="string">&#x27;666&#x27;</span> # 更新完成</span><br><span class="line"><span class="keyword">commit</span>; <span class="comment">--  5.提交事务</span></span><br></pre></td></tr></table></figure>
<p>这种场景时非原子操作的，在高并发环境下，可能会造成一个业务被执行两次的问题</p>
<blockquote>
<p>当一个请求A在执行时，而另一个请求B也开始状态判断的操作，因为请求A还未来得及更改状态，所以请求B也能执行成功，这就导致一个业务被执行了两次。</p>
</blockquote>
<p>可以使用数据库悲观锁（select … for update）来解决这个问题</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;  <span class="comment">--  1.开始事务</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">order</span> <span class="keyword">where</span> order_id<span class="operator">=</span><span class="string">&#x27;666&#x27;</span> <span class="keyword">for</span> update <span class="comment">-- 查询订单，判断状态,锁住这条记录</span></span><br><span class="line"><span class="comment">-- 0-待处理，1-处理中，2-成功，3失败</span></span><br><span class="line">if（status <span class="operator">!=</span> 处理中）&#123;</span><br><span class="line">    <span class="comment">-- 非处理中状态，直接返回；</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">## 处理业务逻辑</span><br><span class="line">update <span class="keyword">order</span> <span class="keyword">set</span> status<span class="operator">=</span><span class="string">&#x27;完成&#x27;</span> <span class="keyword">where</span> order_id<span class="operator">=</span><span class="string">&#x27;666&#x27;</span> <span class="comment">-- 更新完成</span></span><br><span class="line"><span class="keyword">commit</span>; <span class="comment">--  5.提交事务</span></span><br></pre></td></tr></table></figure>
<ul>
<li>这里面<code>order_id</code>需要时索引或主键，如果不是索引或主键，会锁表；相关内容可以查看博客《 <a href="https://xiaoyuge.work/select-for-update/">select … for update表锁还是行锁</a> 》</li>
<li>悲观锁在统一事务操作过程中，锁住了一行数据，别的请求只能等待，<strong>如果当前事务耗时比较长，就很影响接口性能，所以一般不建议使用悲观锁来做幂等</strong></li>
</ul>
</li>
</ul>
<h4 id="方案7分布式锁"><a class="markdownIt-Anchor" href="#方案7分布式锁"></a>   方案7：分布式锁</h4>
<ul>
<li>
<p>描述</p>
<p>分布式锁实现幂等性的逻辑就是：请求过来时，先去尝试获取分布式锁，如果获得成功就执行业务逻辑，反之获取失败的话，就舍弃请求直接返回成功</p>
</li>
<li>
<p>主要流程<br>
<img src="/special-interface/9.png" alt></p>
<ul>
<li>分布式锁可以使用redis、zookeeper; redis可能会好一点，轻量级</li>
<li>redis分布式锁，可以使用命令<code>set ex px nx + 唯一流水号</code>实现，分布式锁的key 必须为业务的唯一标识</li>
<li>Redis执行设置key的动作时，需要设置过期时间，太长会占存储空间，太短拦截不了重复请求</li>
</ul>
</li>
</ul>
<h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4>
<ol>
<li>对于下单等存在唯一主键的可以使用&quot;唯一主键方案&quot;的方式实现</li>
<li>对于更新订单状态等相关的更新场景操作，可以使用&quot;乐观锁方案&quot;</li>
<li>对于上下游这种，下游请求上游，上游服务可以使用&quot;下游传递唯一序列号方案&quot;更为合理</li>
<li>类似于前端重复提交、重复下单、没有唯一ID号的场景，可以通过token与Redis配置的&quot;防重Token方案&quot;更为快捷</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:center">方案</th>
<th style="text-align:center">适用方法</th>
<th style="text-align:right">复杂度</th>
<th style="text-align:center">缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">数据库唯一主键</td>
<td style="text-align:center">插入、删除</td>
<td style="text-align:right">简单</td>
<td style="text-align:center">只能用于存在唯一主键的场景</td>
</tr>
<tr>
<td style="text-align:center">数据库乐观锁</td>
<td style="text-align:center">更新</td>
<td style="text-align:right">简单</td>
<td style="text-align:center">只能用于更新操作，表中需要添加额外字段</td>
</tr>
<tr>
<td style="text-align:center">请求序列号</td>
<td style="text-align:center">插入、删除、更新</td>
<td style="text-align:right">简单</td>
<td style="text-align:center">1. 需要保证下游生成唯一序列号；<br> 2. 需要Redis存储序列号</td>
</tr>
<tr>
<td style="text-align:center">防重Token令牌</td>
<td style="text-align:center">插入、更新、删除</td>
<td style="text-align:right">适中</td>
<td style="text-align:center">需要Redis存储序列号</td>
</tr>
<tr>
<td style="text-align:center">悲观锁</td>
<td style="text-align:center">更新、删除</td>
<td style="text-align:right">适中</td>
<td style="text-align:center">如果当前事务耗时比较长，就很影响接口性能</td>
</tr>
</tbody>
</table>
<h2 id="span-classtit-h2-idtoken2-springboot-防重token令牌方案span"><a class="markdownIt-Anchor" href="#span-classtit-h2-idtoken2-springboot-防重token令牌方案span"></a> <span class="tit-h2" id="token">2. SpringBoot 防重Token令牌方案</span></h2>
<p>该方案能保证在不同请求动作下的幂等性，实现逻辑可以看上面写的”防重Token令牌”方案;</p>
<h3 id="21-引入相关依赖"><a class="markdownIt-Anchor" href="#21-引入相关依赖"></a> 2.1 引入相关依赖</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>idempotent-token<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>idempotent-token<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="22-配置文件"><a class="markdownIt-Anchor" href="#22-配置文件"></a> 2.2 配置文件</h3>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置redis连接参数</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">ssl:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">1000</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>
<h3 id="23-token获取验证接口"><a class="markdownIt-Anchor" href="#23-token获取验证接口"></a> 2.3 Token获取/验证接口</h3>
<p>创建用于操作Token相关的Service类，包含创建token以及验证方法，其中：</p>
<ul>
<li>
<p>Token创建： 使用UUID工具创建token串，设置<code>IDEMPOTENT_TOKEN_PREFIX:+token</code>串作为key,以用户信息作为value，存入Redis;</p>
</li>
<li>
<p>Token验证：接口Token串参数，加上前缀生成key，再传入用户信息value,使用Lua表达式（Lua表达式能保证命令执行的原子性）进行查找对应的key和value，执行完成后验证命令的返回结果，如果不为空且非0则验证成功，反之则失败;</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenUtilService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis 的token键前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IDEMPOTENT_TOKEN_PREFIX = <span class="string">&quot;IDEMPOTENT_TOKEN:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建token存入redis， 并返回token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 用于辅助验证的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateToken</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        String token = UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//拼接redis key</span></span><br><span class="line">        String key = IDEMPOTENT_TOKEN_PREFIX + token;</span><br><span class="line">        <span class="comment">//存储到redis 中，设置过期时间为5分钟</span></span><br><span class="line">        redisTemplate.opsForValue().set(key, value, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证token的正确性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 辅助验证信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 验证结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateToken</span><span class="params">(String token, String value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置Lua脚本，其中KEY[1] 是key, KEYS[2] 是value； 如果根据key获取到的值是value,那么删除key否则返回0</span></span><br><span class="line">        String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == KEYS[2] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">        RedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(script, Long.class);</span><br><span class="line">        <span class="comment">//拼接key</span></span><br><span class="line">        String key = IDEMPOTENT_TOKEN_PREFIX + token;</span><br><span class="line">        <span class="comment">//执行lua脚本，传递数组参数[key, value]</span></span><br><span class="line">        Long result = redisTemplate.execute(redisScript, Arrays.asList(key, value));</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; result != <span class="number">0L</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;验证token= &#123;&#125;,key=&#123;&#125;, value=&#123;&#125;成功&quot;</span>, token, key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="24-创建controller"><a class="markdownIt-Anchor" href="#24-创建controller"></a> 2.4 创建Controller</h3>
<p>创建用于测试的 Controller 类，里面有获取 Token 与测试接口幂等性的接口，内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TokenUtilService tokenUtilService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/token&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取用户信息</span></span><br><span class="line">        String username = <span class="string">&quot;xiaoyuge&quot;</span>;</span><br><span class="line">        <span class="comment">//使用用户信息作为辅助验证</span></span><br><span class="line">        <span class="comment">//获取token并返回</span></span><br><span class="line">        <span class="keyword">return</span> tokenUtilService.generateToken(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口幂等性测试接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 执行结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testIdempotence</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;token&quot;)</span> String token)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取用户信息，和上面保持一样的业务逻辑</span></span><br><span class="line">        String username = <span class="string">&quot;xiaoyuge&quot;</span>;</span><br><span class="line">        <span class="comment">//根据token和用户相关信息到redis验证是否存在对应的信息</span></span><br><span class="line">        <span class="keyword">boolean</span> result = tokenUtilService.validateToken(token, username);</span><br><span class="line">        <span class="keyword">return</span> result ? <span class="string">&quot;正常调用&quot;</span>:<span class="string">&quot;重复调用&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="25-创建springboot启动类"><a class="markdownIt-Anchor" href="#25-创建springboot启动类"></a> 2.5 创建Springboot启动类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdempotentApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(IdempotentApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="26-创建测试类"><a class="markdownIt-Anchor" href="#26-创建测试类"></a> 2.6 创建测试类</h3>
<p>测试多次访问同一个接口，是否只有第一次执行成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdempotentTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext webApplicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interfaceIdempotenceTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//初始化MockMvc</span></span><br><span class="line">        MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br><span class="line">        <span class="comment">//调用获取 token 接口</span></span><br><span class="line">        String token = mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">&quot;/token&quot;</span>)</span><br><span class="line">                .accept(MediaType.TEXT_HTML))</span><br><span class="line">                .andReturn()</span><br><span class="line">                .getResponse().getContentAsString();</span><br><span class="line">        log.info(<span class="string">&quot;获取的token串：&#123;&#125;&quot;</span>, token);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;第&#123;&#125;次调用接口&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">            String result = mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">&quot;/test&quot;</span>)</span><br><span class="line">                    .header(<span class="string">&quot;token&quot;</span>, token)</span><br><span class="line">                    .accept(MediaType.TEXT_HTML))</span><br><span class="line">                    .andReturn().getResponse().getContentAsString();</span><br><span class="line">            log.info(<span class="string">&quot;调用结果:&#123;&#125;&quot;</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用结果返回如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[main] org.example.IdempotentTest : 获取的token串：ed965e9e-42ce-4865-a1fd-25d13ad5544b</span><br><span class="line">[main] org.example.IdempotentTest : 第1次调用接口</span><br><span class="line">[main] org.example.IdempotentTest : 调用结果:正常调用</span><br><span class="line">[main] org.example.IdempotentTest : 第2次调用接口</span><br><span class="line">[main] org.example.IdempotentTest : 调用结果:重复调用</span><br><span class="line">[main] org.example.IdempotentTest : 第3次调用接口</span><br><span class="line">[main] org.example.IdempotentTest : 调用结果:重复调用</span><br><span class="line">[main] org.example.IdempotentTest : 第4次调用接口</span><br><span class="line">[main] org.example.IdempotentTest : 调用结果:重复调用</span><br><span class="line">[main] org.example.IdempotentTest : 第5次调用接口</span><br><span class="line">[main] org.example.IdempotentTest : 调用结果:重复调用</span><br></pre></td></tr></table></figure>
<h2 id="span-classtit-h2-idinterfacesafe3-接口数据安全方案span"><a class="markdownIt-Anchor" href="#span-classtit-h2-idinterfacesafe3-接口数据安全方案span"></a> <span class="tit-h2" id="interfaceSafe">3. 接口数据安全方案</span></h2>
<h3 id="31-数据加密防止报文明文传输"><a class="markdownIt-Anchor" href="#31-数据加密防止报文明文传输"></a> 3.1 数据加密，防止报文明文传输</h3>
<p>数据在网络传输过程中，很容易被抓包，如果使用的时http协议，因为他是明文传输的，用户的数据很容易被别人获取，所以需要对数据加密。</p>
<h4 id="311-加密方式"><a class="markdownIt-Anchor" href="#311-加密方式"></a> 3.1.1 加密方式</h4>
<p>常见搭的实现方式，就是对<strong>关键字段</strong>加密，比如<strong>登陆接口对密码加密</strong>。一般采用的是：对称加密算法（AES<br>
来加解密，或者哈希算法（MD5）</p>
<blockquote>
<p>对称加密：加密和揭秘使用相同的密钥的加密算法<br>
<img src="/special-interface/10.png" alt="对称加密"><br>
非对称加密：非对称加密算法需要两个密钥（公开密钥和私有密钥）。公钥与私钥是成对存在的，如果用公钥对数据进行加密，只有对应的私钥才能解密。<br>
<img src="/special-interface/11.png" alt="非对称加密"><br>
更安全的做法，就是用非对称加密算法（RSA、SM2），公钥加密、私钥解密。</p>
</blockquote>
<h4 id="312-https安全协议"><a class="markdownIt-Anchor" href="#312-https安全协议"></a> 3.1.2 HTTPS安全协议</h4>
<p>如果想对所有字段都加密的话，一般都推荐使用<strong>HTTPS协议</strong>，<code>https</code>就是在<code>http</code>和<code>tcp</code>之间添加一层加密层SSL。<br>
<img src="/special-interface/12.png" alt="HTTPS请求流程"></p>
<ol>
<li>客户端发起Https请求，连接到服务器的443端口。</li>
<li>服务器必须要有一套数字证书（证书内容有公钥、证书颁发机构、失效日期等）。</li>
<li>服务器将自己的数字证书发送给客户端（公钥在证书里面，私钥由服务器持有）。</li>
<li>客户端收到数字证书之后，会验证证书的合法性。如果证书验证通过，就会生成一个随机的对称密钥，用证书的公钥加密。</li>
<li>客户端将公钥加密后的密钥发送到服务器。</li>
<li>服务器接收到客户端发来的密文密钥之后，用自己之前保留的私钥对其进行非对称解密，解密之后就得到客户端的密钥，然后用客户端密钥对返回数据进行对称加密，酱紫传输的数据都是密文啦。</li>
<li>服务器将加密后的密文返回到客户端。</li>
<li>客户端收到后，用自己的密钥对其进行对称解密，得到服务器返回的数据。</li>
</ol>
<p>基本的日常业务，数据传输加密这块的话，用https就可以，如果安全性要求较高的，比如登陆注册这些，需要传输密码的，密码就可以使用RSA等非对称加密算法，对密码加密。如果你的业务，安全性要求很高，你可以模拟https这个流程，对报文，再做一次加解密。</p>
<h3 id="32-数据加签验签"><a class="markdownIt-Anchor" href="#32-数据加签验签"></a> 3.2 数据加签验签</h3>
<p>数据报文加签验签，就是<strong>保证数据传输安全的常用手段</strong>，它可以<strong>保证数据在传输过程中不给篡改</strong>。</p>
<h4 id="321-什么是加签验签"><a class="markdownIt-Anchor" href="#321-什么是加签验签"></a> 3.2.1 什么是加签验签</h4>
<ul>
<li>数据加签：用Hash算法（md5、SHA-256）把原始请求参数生成报文摘要，然后用私钥对这个摘要加密，就得到这个报文对应的数字签名sign（这个过程就是加签）。通常来说，请求方会把数字签名和报文原文一并发送给接收方<br>
<img src="/special-interface/13.png" alt="数据加签"></li>
<li>验签：接收防拿到原始报文和数字签名sign后，用同一个hash算法（比如都用MD5）从报文中生成摘要A，然后用对方提供的公钥对数字签名进行解密，得到摘要B，对比A和B是否相同，就可以知道报文是否被篡改过。<br>
<img src="/special-interface/14.png" alt="验签"></li>
</ul>
<p><em>通俗一点讲：就是把请求参数，按照一定规则，利用hash算法+加密算法生成一个唯一标签sign。验签的话，就是把请求参数按照相同的规则处理，再用相同的hash算法，和对应的密钥解密处理，以对比这个签名是否一致。</em></p>
<h4 id="322-有了https为什么还要加签验签"><a class="markdownIt-Anchor" href="#322-有了https为什么还要加签验签"></a> 3.2.2 有了Https，为什么还要加签验签</h4>
<p>加签验签主要是防止数据在传输过程中被篡改，那如果都用了Https协议加密数据了，为啥还需要加签验签？</p>
<blockquote>
<p>数据在传输过程中被加密了，理论上，即使被抓包，数据也不会被篡改，但是HTTPS不是绝对的安全，另外Https加密的部分只是在外网，然后很对服务是内网相互跳转的，捡钱也可以保证在这里不被中间人篡改；</p>
</blockquote>
<h3 id="33-token-授权认证机制"><a class="markdownIt-Anchor" href="#33-token-授权认证机制"></a> 3.3 token 授权认证机制</h3>
<p>日常开发中，我们的网站或者App都是需要用户登录的，那么如果是非登录接口，如何确保安全，如何确认用户身份？可以使用<strong>token授权机制</strong></p>
<blockquote>
<p>用户在客户端输入用户名和密码，点击登录后，服务器会校验密码，然后返回客户端一个token，并将token 以键值对的形式存放在缓存中（一般为Redis）后续用户访问需要授权的模块的操作时，都携带这个token，服务器接收到请求后，先对token验证，如果token存在，才表名时合法请求</p>
</blockquote>
<p>这个其实用过jwt的同学应该都会清楚这个流程。</p>
<h4 id="331-token授权认证方案"><a class="markdownIt-Anchor" href="#331-token授权认证方案"></a> 3.3.1 token授权认证方案</h4>
<p><img src="/special-interface/15.png" alt="token 授权认证机制"></p>
<ol>
<li>用户输入用户名和密码，发起登录请求</li>
<li>服务端校验密码，如果校验通过，生成全局唯一token</li>
<li>将token存在redis中，key是token, value为用户ID，设置一个过期时间</li>
<li>将token返回给客户端</li>
<li>用户发起其他业务请求时，需要携带这个token</li>
<li>后台服务统一拦截接口请求，进行token有效性验证，并从中获取用户信息，供后续业务逻辑使用，如果token不存在，请求无效。</li>
</ol>
<h4 id="332-如何保证token的安全token被劫持呢"><a class="markdownIt-Anchor" href="#332-如何保证token的安全token被劫持呢"></a> 3.3.2 如何保证token的安全？token被劫持呢？</h4>
<p>比如说，如果我拿到了token，是不是就可以调用服务端的任何接口？可以从下面几方面考虑</p>
<ul>
<li>token设置合理的有效期</li>
<li>使用https协议</li>
<li>token可以再次加密</li>
<li>如果访问的时敏感信息，单纯的加token是不够的，通常还会设置白名单</li>
</ul>
<h3 id="34-时间戳timestamp超时机制"><a class="markdownIt-Anchor" href="#34-时间戳timestamp超时机制"></a> 3.4 时间戳timestamp超时机制</h3>
<p>数据是很容易抓包，假设我们使用了<code>https</code>和加签，即使中间人抓到了数据报文，他也看不到真实数据，但是也要避免那种使用抓取的数据包进行恶意请求（如DOS攻击），以搞垮系统</p>
<p>这里我们可以引入<strong>时间戳超时机制</strong>，来保证接口安全。用户每次请求都带上当前时间的时间戳<code>timestamp</code>，服务器收到<code>timestamp</code>后，解密，验签通过后，与服务器当前时间进行比对，如果时间大于一定的时间（比如5分钟），则任务该请求无效。</p>
<h3 id="35-timestampnonce方案防止重放攻击"><a class="markdownIt-Anchor" href="#35-timestampnonce方案防止重放攻击"></a> 3.5 timestamp+nonce方案防止重放攻击</h3>
<p>时间戳超时机制也是有漏洞的，如果是在时间差内，黑客进行重放攻击，那么就可以使用<code>timestamp + nonce</code>方案了</p>
<p><code>nonce</code>指唯一的随机字符串，用来标识每个被清明的请求，我们可以将每次请求的<code>nonce</code>参数存储到一个<code>set</code>集合中，或者使用json格式存储到数据库或缓存中，每次处理http请求是，首先判断请求的<code>nonce</code>参数是否在该集合中，如果存在则认为非法请求。<br>
然而对于服务器而言， 永久保存<code>nonce</code>的代价非常大，可以通过timestamp来优化，因为timestamp参数对于超过5min的请求，都认为非法请求，所以我们只需要存储5min内的<code>nonce</code>参数集合即可。</p>
<h3 id="36-限流机制"><a class="markdownIt-Anchor" href="#36-限流机制"></a> 3.6 限流机制</h3>
<p>如果用户本来就是真实用户，他恶意频繁调用接口，那么这个时候就需要接入<strong>限流</strong>了。</p>
<p>常用的限流算法有： <strong>令牌桶</strong>和<strong>漏桶算法</strong></p>
<p>可以使用Guava的<code>RateLimiter</code>单机版限流，也可以使用Redis分布式限流，还可以使用阿里开源组件<code>sentinel</code>限流。比如：一分钟可以接受多少次请求</p>
<h3 id="37-黑名单机制"><a class="markdownIt-Anchor" href="#37-黑名单机制"></a> 3.7 黑名单机制</h3>
<p>如果发现了真实用户恶意请求,你可以搞个黑名单机制，把该用户拉黑。一般情况，会有些竞争对手，或者不坏好意的用户，想搞你的系统的。所以，为了保证安全，一般我们的业务系统，需要有个黑名单机制。对于黑名单发起的请求，直接返回错误码好了</p>
<h3 id="38-白名单机制"><a class="markdownIt-Anchor" href="#38-白名单机制"></a> 3.8 白名单机制</h3>
<p>有了黑名单机制，也可以搞个白名单机制啦。第三方需要接入我们的系统时，是需要提前申请网络白名单的。申请个IP网络白名单，只有白名单里面的请求，才可以访问我们的系统。</p>
<h3 id="39-数据脱敏掩码"><a class="markdownIt-Anchor" href="#39-数据脱敏掩码"></a> 3.9 数据脱敏掩码</h3>
<p>对于密码，或者手机号、身份证这些敏感信息，一般都需要脱敏掩码再展示的，如果是密码，还需要加密再保存到数据库。</p>
<p>对于手机号、身份证信息这些，日常开发中，在日志排查时，看到的都应该是掩码的。目的就是尽量不泄漏这些用户信息，虽然能看日志的只是开发和运维，但是还是需要防一下，做掩码处理。</p>
<p>对于密码保存到数据库，我们肯定不能直接明文保存。最简单的也需要MD5处理一下再保存，Spring Security中的 <code>BCryptPasswordEncoder</code>也可以，它的底层是采用<code>SHA-256 +随机盐+密钥对密码</code>进行加密，而SHA和MD系列是一样的，都是hash摘要类的算法。</p>
<h3 id="310-数据参数合法性校验"><a class="markdownIt-Anchor" href="#310-数据参数合法性校验"></a> 3.10 数据参数合法性校验</h3>
<p>接口数据的安全性保证，还需要我们的系统，有个数据合法性校验，简单来说就是参数校验，比如身份证长度，手机号长度，是否是数字等等。</p>
<h2 id="span-classtit-h2-idinterfaceperformance4-接口性能优化方案span"><a class="markdownIt-Anchor" href="#span-classtit-h2-idinterfaceperformance4-接口性能优化方案span"></a> <span class="tit-h2" id="interfacePerformance">4. 接口性能优化方案</span></h2>
<h3 id="41-本地缓存"><a class="markdownIt-Anchor" href="#41-本地缓存"></a> 4.1 本地缓存</h3>
<blockquote>
<p>本地缓存，最大的优点是应用和cache是在同一个进程内部，请求缓存非常快，没有过多的网络开销等，在单应用不要集群支持或者集群情况下各节点无需互相通知的场景使用本地缓存比较合适。</p>
<p>缺点；缓存和应用程序耦合，多个应用程序无法直接共享缓存，各应用或集群的各个节点都需要维护自己的缓存，对内存是一种浪费。</p>
</blockquote>
<p>常用的本地缓存框架有<code>Guava</code>、<code>Caffeine</code>等，引入jar包即可直接使用</p>
<h4 id="适用场景"><a class="markdownIt-Anchor" href="#适用场景"></a> 适用场景</h4>
<ol>
<li>对缓存内容实效性要求不高，能够接收一定的延迟，可以设置较短过期时间，被动失效更新保持数据的新鲜度</li>
<li>缓存的内容不会改变，比如：订单号与Uid的映射关系，一旦创建就不会发生改变</li>
</ol>
<h4 id="注意问题"><a class="markdownIt-Anchor" href="#注意问题"></a> 注意问题</h4>
<ul>
<li>内存cache数据条目上限，避免内存占用过多导致应用瘫痪</li>
<li>内存中的数据一处策略</li>
<li>实际开发中最好采用成熟的开源框架，避免踩坑</li>
</ul>
<h3 id="42-分布式缓存"><a class="markdownIt-Anchor" href="#42-分布式缓存"></a> 4.2 分布式缓存</h3>
<p>分布式缓存借助分布式概念，集群化部署、独立运维、荣康无上限。虽然会有网络传输损耗，但1~2ms的延迟相较其他的可以忽略。</p>
<p>优秀的分布式缓存系统有大家所熟知的 <code>Memcached</code> 、<code>Redis</code>。对比关系型数据库和缓存存储，其在读和写性能上的差距可谓天壤之别，<code>Redis</code>单节点已经可以做到 8W+ QPS。设计方案时尽量把读写压力从数据库转移到缓存上，有效保护脆弱的关系型数据库。</p>
<h4 id="注意问题-2"><a class="markdownIt-Anchor" href="#注意问题-2"></a> 注意问题</h4>
<ul>
<li>缓存的命中率，如果太低无法起到抗压的作用，压力还是压到了下游的存储层</li>
<li>缓存的空间大小，这个要根据具体业务场景来评估，防止空间不足，导致一些热点数据被置换出去</li>
<li>缓存数据的一致性</li>
<li>缓存的快速扩容问题</li>
<li>缓存的接口平均RT，最大RT，最小RT</li>
<li>缓存的QPS</li>
<li>网络出口流量</li>
<li>客户端连接数</li>
</ul>
<h3 id="43-并行化"><a class="markdownIt-Anchor" href="#43-并行化"></a> 4.3 并行化</h3>
<p>梳理业务流程，画出时序图，分清楚哪些是串行？哪些是并行？充分利用多核 CPU 的并行化处理能力</p>
<p>如下图所示，存在上下文依赖的采用串行处理，否则采用并行处理<br>
<img src="/special-interface/16.png" alt="并行化"></p>
<p>JDK 的 <code>CompletableFuture</code>  提供了非常丰富的API，大约有50种 处理串行、并行、组合以及处理错误的方法，可以满足我们的场景需求。</p>
<h3 id="44-异步化"><a class="markdownIt-Anchor" href="#44-异步化"></a> 4.4 异步化</h3>
<p>一个接口的 RT 响应时间是由内部业务逻辑的复杂度决定的，执行的流程约简单，那接口的耗费时间就越少。<br>
所以，普遍做法就是将接口内部的非核心逻辑剥离出来，异步化来执行。</p>
<p>下图是一个电商的创建订单接口，创建订单记录并插入数据库是我们的核心诉求，至于后续的用户通知，如：给用户发个短信等，如果失败，并不影响主流程的完成。<br>
我们会将这些操作从主流程中剥离出来。<br>
<img src="/special-interface/17.png" alt="异步化"></p>
<h3 id="45-池化"><a class="markdownIt-Anchor" href="#45-池化"></a> 4.5 池化</h3>
<p>TCP 三次握手非常耗费性能，所以我们引入了 Keep-Alive 长连接，避免频繁的创建、销毁连接。</p>
<p>池化技术也是类似道理，将很多能重复使用的对象缓存起来，放到一个池子里，用的时候去申请一个实例对象 ，用完后再放回池子里。</p>
<p>池化技术的核心是资源的“预分配”和“循环使用”，常见的池化技术的使用有：线程池、内存池、数据库连接池、HttpClient 连接池等</p>
<blockquote>
<p>连接池的几个重要参数：最小连接数、空闲连接数、最大连接数<br>
比如创建一个线程池：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> ThreadPoolExecutor(<span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>, TimeUnit.MINUTES,</span><br><span class="line">    <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>),</span><br><span class="line">    <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">&quot;data-thread-%d&quot;</span>).build(),</span><br><span class="line">    (r, executor) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (r <span class="keyword">instanceof</span> BaseRunnable) &#123;</span><br><span class="line">            ((BaseRunnable) r).rejectedExecute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<h3 id="46-分库分表"><a class="markdownIt-Anchor" href="#46-分库分表"></a> 4.6 分库分表</h3>
<p>MySQL的底层 innodb 存储引擎采用 B+ 树结构，三层结构支持千万级的数据存储。</p>
<p>当然，现在互联网的用户基数非常大，这么大的用户量，单表通常很难支撑业务需求，将一个大表水平拆分成多张结构一样的物理表，可以极大缓解存储、访问压力。<br>
<img src="/special-interface/18.png" alt="分库分表"><br>
分库分表主要有两个方向：<strong>垂直</strong>和<strong>水平</strong>。</p>
<p>说实话垂直方向（即业务方向）更简单。</p>
<p>在水平方向（即数据方向）上，分库和分表的作用，其实是有区别的，不能混为一谈。</p>
<ul>
<li>分库：是为了解决数据库连接资源不足问题，和磁盘IO的性能瓶颈问题。</li>
<li>分表：是为了解决单表数据量太大，sql语句查询数据时，即使走了索引也非常耗时问题。此外还可以解决消耗cpu资源问题。</li>
<li>分库分表：可以解决 数据库连接资源不足、磁盘IO的性能瓶颈、检索数据耗时 和 消耗cpu资源等问题。<br>
如果在有些业务场景中，用户并发量很大，但是需要保存的数据量很少，这时可以只分库，不分表。</li>
</ul>
<p>如果在有些业务场景中，用户并发量不大，但是需要保存的数量很多，这时可以只分表，不分库。</p>
<p>如果在有些业务场景中，用户并发量大，并且需要保存的数量也很多时，可以分库分表。</p>
<h3 id="47-sql-优化"><a class="markdownIt-Anchor" href="#47-sql-优化"></a> 4.7 SQL 优化</h3>
<p>虽然有了分库分表，从存储维度可以减少很大压力，但「富不过三代」，我们还是要学会精打细算，就比如所有的数据库操作都是通过 SQL 来执行。<br>
一个不好的SQL会对接口性能产生很大影响。</p>
<p>比如：</p>
<ul>
<li>搞了个深度翻页，每次数据库引擎都要预查非常多的数据</li>
<li>索引缺失，走了全表扫描</li>
<li>一条 SQL 一次查询 几万条数据<br>
<img src="/special-interface/20.png" alt></li>
</ul>
<h3 id="48-预先计算"><a class="markdownIt-Anchor" href="#48-预先计算"></a> 4.8 预先计算</h3>
<p>有很多业务的计算逻辑比较复杂，比如页面要展示一个网站的 PV、微信的拼手气红包等</p>
<p>如果在用户访问接口的瞬间触发计算逻辑，而这些逻辑计算的耗时通常比较长，很难满足用户的实时性要求。<br>
一般我们都是提前计算，然后将算好的数据预热到缓存中，接口访问时，只需要读缓存即可</p>
<h3 id="49-事务相关"><a class="markdownIt-Anchor" href="#49-事务相关"></a> 4.9 事务相关</h3>
<ol>
<li>
<p>很多业务逻辑有事务要求，针对多个表的写操作要保证事务特性。<br>
但事务本身又特别耗费性能，为了能尽快结束，不长时间占用数据库连接资源，我们一般要减少事务的范围。<br>
将很多查询逻辑放到事务外部处理。</p>
</li>
<li>
<p>另外在事务内部，一般不要进行远程的 RPC 接口访问，一般占用的时间比较长</p>
</li>
<li>
<p>@Transactional注解这种声明式事务的方式提供事务功能，容易造成大事务，引发其他的问题<br>
<img src="/special-interface/22.png" alt><br>
从图中能够看出，大事务问题可能会造成接口超时，对接口的性能有直接的影响。</p>
<p><strong>优化大事务:</strong></p>
<ul>
<li>少用@Transactional注解</li>
<li>将查询(select)方法放到事务外</li>
<li>事务中避免远程调用</li>
<li>事务中避免一次性处理太多数据</li>
<li>有些功能可以非事务执行</li>
<li>有些功能可以异步处理</li>
</ul>
</li>
</ol>
<h3 id="410-海量数据处理"><a class="markdownIt-Anchor" href="#410-海量数据处理"></a> 4.10 海量数据处理</h3>
<p>如果数据量过大，除了采用关系型数据库的分库分表外，我们还可以采用 NoSQL；如：MongoDB、Hbase、Elasticsearch、TiDB<br>
NoSQL 采用分区架构，对数据海量存储能较好的支持，但是事务方面可能没那么友好。</p>
<p>每一个 NoSQL 框架都有自己的特色，有支持 搜索的、有列式存储、有文档存储，大家可以根据自己的业务场景选择合适的框架。</p>
<h3 id="411-批量读写"><a class="markdownIt-Anchor" href="#411-批量读写"></a> 4.11 批量读写</h3>
<p>当下的计算机CPU处理速度还是很多的，而 IO 一般是个瓶颈，如：磁盘IO、网络IO。<br>
有这么一个场景，查询 100 个人的账户余额？<br>
有两个设计方案：</p>
<ol>
<li>方案一：开单次查询接口，调用方内部循环调用 100 次</li>
<li>方案二：服务提供方开一个批量查询接口，调用方只需查询 1 次 (更优)</li>
</ol>
<p>数据库的写操作也是一样道理，为了提高性能，我们一般都是采用批量更新。</p>
<h3 id="412-锁的粒度"><a class="markdownIt-Anchor" href="#412-锁的粒度"></a> 4.12 锁的粒度</h3>
<p>并发业务，为了防止数据的并发更新对数据的正确性产生干扰，我们通常是采用 加锁 ，涉及独享资源每次只能是一个线程来处理。<br>
问题点在于，锁是成对出现的，有加锁就是释放锁<br>
对于非竞争资源，我们没有必要圈在锁内部，会严重影响系统的并发能力。<br>
控制锁的范围是我们要考虑的重点。</p>
<h4 id="4121-synchronized"><a class="markdownIt-Anchor" href="#4121-synchronized"></a> 4.12.1 synchronized</h4>
<p>在java中提供了<code>synchronized</code>关键字给我们的代码加锁。 通常有两种写法：<code>在方法上加锁</code> 和<code>在代码块上加锁</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//上传文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="title">doSave</span><span class="params">(String fileUrl)</span> </span>&#123;</span><br><span class="line">    mkdir();    <span class="comment">//创建文件夹</span></span><br><span class="line">    uploadFile(fileUrl);    <span class="comment">//上传</span></span><br><span class="line">    sendMessage(fileUrl);   <span class="comment">//发送信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里加锁的目的是为了防止并发的情况下，创建了相同的目录，第二次会创建失败，影响业务功能。</p>
<p>但这种直接在方法上加锁，锁的粒度有点粗。因为<code>doSave</code>方法中的上传文件和发消息方法，是不需要加锁的。只有创建目录方法，才需要加锁。</p>
<p>我们都知道文件上传操作是非常耗时的，如果将整个方法加锁，那么需要等到整个方法执行完之后才能释放锁。显然，这会导致该方法的性能很差，变得得不偿失。</p>
<p>我们可以改成在代码块上加锁了，具体代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSave</span><span class="params">(String path,String fileUrl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!exists(path)) &#123;</span><br><span class="line">          mkdir(path);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    uploadFile(fileUrl);</span><br><span class="line">    sendMessage(fileUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>样改造之后，锁的粒度一下子变小了，只有并发创建目录功能才加了锁。而创建目录是一个非常快的操作，即使加锁对接口的性能影响也不大。<br>
最重要的是，其他的上传文件和发送消息功能，任然可以并发执行。</p>
<p>当然，这种做在单机版的服务中，是没有问题的。但现在部署的生产环境，为了保证服务的稳定性，一般情况下，同一个服务会被部署在多个节点中。如果哪天挂了一个节点，其他的节点服务任然可用。<br>
多节点部署避免了因为某个节点挂了，导致服务不可用的情况。同时也能分摊整个系统的流量，避免系统压力过大。</p>
<p>同时它也带来了新的问题：<code>synchronized</code>只能保证一个节点加锁是有效的，但如果有多个节点如何加锁呢?</p>
<p>这就需要使用：分布式锁了。目前主流的分布式锁包括：<strong>redis分布式锁</strong>、<strong>zookeeper分布式锁</strong> 和 <strong>数据库分布式锁</strong></p>
<h4 id="4122-redis分布式锁"><a class="markdownIt-Anchor" href="#4122-redis分布式锁"></a> 4.12.2 Redis分布式锁</h4>
<p>在分布式系统中，由于redis分布式锁相对于更简单和高效，成为了分布式锁的首先，被我们用到了很多实际业务场景当中。</p>
<p>使用redis分布式锁的伪代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSave</span><span class="params">(String path,String fileUrl)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    String result = jedis.set(lockKey, requestId, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, expireTime);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;OK&quot;</span>.equals(result)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!exists(path)) &#123;</span><br><span class="line">         mkdir(path);</span><br><span class="line">         uploadFile(fileUrl);</span><br><span class="line">         sendMessage(fileUrl);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">      unlock(lockKey,requestId);</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跟之前使用synchronized关键字加锁时一样，这里锁的范围也太大了，换句话说就是锁的粒度太粗，这样会导致整个方法的执行效率很低。<br>
其实只有创建目录的时候，才需要加分布式锁，其余代码根本不用加锁。</p>
<p>于是，我们需要优化一下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSave</span><span class="params">(String path,String fileUrl)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">this</span>.tryLock()) &#123;</span><br><span class="line">      mkdir(path);</span><br><span class="line">   &#125;</span><br><span class="line">   uploadFile(fileUrl);</span><br><span class="line">   sendMessage(fileUrl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    String result = jedis.set(lockKey, requestId, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, expireTime);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;OK&quot;</span>.equals(result)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">      unlock(lockKey,requestId);</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码将加锁的范围缩小了，只有创建目录时才加了锁。这样看似简单的优化之后，接口性能能提升很多。说不定，会有意外的惊喜喔。哈哈哈。</p>
<p>redis分布式锁虽说好用，但它在使用时，有很多注意的细节，隐藏了很多坑。以后遇到了再记录下来。</p>
<h4 id="4123-数据库分布式锁"><a class="markdownIt-Anchor" href="#4123-数据库分布式锁"></a> 4.12.3 数据库分布式锁</h4>
<p>mysql数据库中主要有三种锁：</p>
<ul>
<li>表锁：加锁快，不会出现死锁。但锁定粒度大，发生锁冲突的概率最高，并发度最低。</li>
<li>行锁：加锁慢，会出现死锁。但锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</li>
<li>间隙锁：开销和加锁时间界于表锁和行锁之间。它会出现死锁，锁定粒度界于表锁和行锁之间，并发度一般。<br>
并发度越高，意味着接口性能越好。</li>
</ul>
<p>所以数据库锁的优化方向是：</p>
<p><strong>优先使用行锁，其次使用间隙锁，再其次使用表锁。</strong></p>
<h3 id="413-上下文传递"><a class="markdownIt-Anchor" href="#413-上下文传递"></a> 4.13 上下文传递</h3>
<p>当需要一个数据时，如果没有调 RPC 接口去查，比如想用户信息这种通用型接口<br>
因为前面要用，肯定已经查过。但是我们知道方法的调用都是以栈帧的形式来传递，随着一个方法执行完毕而出栈，方法内部的局部变量也就被回收了。<br>
后面如果又要用到这个信息，只能重新去查。<br>
如果能定义一个Context 上下文对象，将一些中间信息存储并传递下来，会大大减轻后面流程的再次查询压力。</p>
<h3 id="414-空间大小"><a class="markdownIt-Anchor" href="#414-空间大小"></a> 4.14 空间大小</h3>
<p>创建集合<code>List&lt;String&gt; lists = Lists.newArrayList();</code>如果说，要往里面插入 1000000  个元素，有没有更好的方式？</p>
<ol>
<li>
<p>方式一<br>
<img src="/special-interface/19.png" alt><br>
结果：1000000 次插入 List，花费时间：154</p>
</li>
<li>
<p>方式二<br>
<img src="/special-interface/20.png" alt><br>
结果：1000000 次插入 List，花费时间：134</p>
</li>
</ol>
<p>如果我们预先知道集合要存储多少元素，初始化集合时尽量指定大小，尤其是容量较大的集合。<br>
ArrayList 初始大小是 10，超过阈值会按 1.5 倍大小扩容，涉及老集合到新集合的数据拷贝，浪费性能。</p>
<h3 id="415-查询优化"><a class="markdownIt-Anchor" href="#415-查询优化"></a> 4.15 查询优化</h3>
<p>避免一次从 DB 中查询大量的数据到内存中，可能会导致内存不足，建议采用分批、分页查询</p>
<h2 id="span-classtit-h2-idinterfacedefine5-接口设计的锦囊span"><a class="markdownIt-Anchor" href="#span-classtit-h2-idinterfacedefine5-接口设计的锦囊span"></a> <span class="tit-h2" id="interfaceDefine">5. 接口设计的锦囊</span></h2>
<p>别说话，先看图：<br>
<img src="/special-interface/28.png" alt></p>
<h3 id="51-批量思想批量操作数据库"><a class="markdownIt-Anchor" href="#51-批量思想批量操作数据库"></a> 5.1 批量思想：批量操作数据库</h3>
<p>打个比喻:假如你需要搬一万块砖到楼顶,你有一个电梯,电梯一次可以放适量的砖（最多放500）,<br>
你可以选择一次运送一块砖,也可以一次运送500,你觉得哪种方式更方便，时间消耗更少?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//优化前</span></span><br><span class="line"><span class="comment">//for循环单笔入库</span></span><br><span class="line"><span class="keyword">for</span>(TransDetail detail:transDetailList)&#123;</span><br><span class="line">   insert(detail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//优化后</span></span><br><span class="line">batchInsert(transDetailList);</span><br></pre></td></tr></table></figure>
<h3 id="52-异步思想耗时操作考虑放到异步执行"><a class="markdownIt-Anchor" href="#52-异步思想耗时操作考虑放到异步执行"></a> 5.2 异步思想：耗时操作，考虑放到异步执行</h3>
<p>耗时操作，考虑用异步处理，这样可以降低接口耗时。 假设一个转账接口，匹配联行号，是同步执行的，但是它的操作耗时有点长，优化前的流程：<br>
<img src="/special-interface/29.png" alt></p>
<p>为了降低接口耗时，更快返回，你可以把<strong>匹配联行号移到异步处理</strong>，优化后：<br>
<img src="/special-interface/30.png" alt></p>
<ul>
<li>除了转账这个例子，日常工作中还有很多这种例子。比如：用户注册成功后，短信邮件通知，也是可以异步处理的~</li>
<li>至于异步的实现方式，你可以用线程池，也可以用消息队列实现。</li>
</ul>
<h3 id="53-空间换时间思想恰当使用缓存"><a class="markdownIt-Anchor" href="#53-空间换时间思想恰当使用缓存"></a> 5.3 空间换时间思想：恰当使用缓存。</h3>
<p>在适当的业务场景，恰当地使用缓存，是可以大大提高接口性能的。缓存其实就是一种空间换时间的思想，就是你把要查的数据，提前放好到缓存里面，需要时，直接查缓存，而避免去查数据库或者计算的过程。</p>
<p>这里的缓存包括：<code>Redis缓存</code>，<code>JVM本地缓存</code>，<code>memcached</code>，或者<code>Map</code>等等。我举个我工作中，一次使用缓存优化的设计吧，比较简单，但是思路很有借鉴的意义。</p>
<blockquote>
<p>那是一次转账接口的优化，老代码，每次转账，都会根据客户账号，查询数据库，计算匹配联行号。<br>
<img src="/special-interface/31.png" alt></p>
</blockquote>
<p>优化前：每次都查数据库，都计算匹配，比较耗时，所以使用缓存进行优化</p>
<h3 id="54-预取思想提前初始化到缓存"><a class="markdownIt-Anchor" href="#54-预取思想提前初始化到缓存"></a> 5.4 预取思想：提前初始化到缓存</h3>
<p>预取思想很容易理解，就是<strong>提前把要计算查询的数据，初始化到缓存</strong>。如果你在未来某个时间需要用到某个经过复杂计算的数据，才实时去计算的话，可能耗时比较大。这时候，我们可以采取预取思想，<strong>提前把将来可能需要的数据计算好，放到缓存中，等需要的时候，去缓存取就行</strong>。这将大幅度提高接口性能。</p>
<h3 id="55-池化思想预分配与循环使用"><a class="markdownIt-Anchor" href="#55-池化思想预分配与循环使用"></a> 5.5 池化思想：预分配与循环使用</h3>
<blockquote>
<p>线程池可以帮我们管理线程，避免增加创建线程和销毁线程的资源损耗。</p>
</blockquote>
<p>如果你每次需要用到线程，都去创建，就会有增加一定的耗时，而线程池可以重复利用线程，避免不必要的耗时。池化技术不仅仅指线程池，很多场景都有池化思想的体现，它的本质就是预分配与循环使用。</p>
<p>比如TCP三次握手，大家都很熟悉吧，它为了减少性能损耗，引入了Keep-Alive长连接，避免频繁的创建和销毁连接。当然，类似的例子还有很多，如数据库连接池、HttpClient连接池。</p>
<p>我们写代码的过程中，学会池化思想，最直接相关的就是使用线程池而不是去new一个线程。</p>
<h3 id="56-事件回调思想拒绝阻塞等待"><a class="markdownIt-Anchor" href="#56-事件回调思想拒绝阻塞等待"></a> 5.6 事件回调思想：拒绝阻塞等待</h3>
<p>如果你调用一个系统B的接口，但是它处理业务逻辑，耗时需要10s甚至更多。然后你是一直阻塞等待，直到系统B的下游接口返回，再继续你的下一步操作吗？这样显然不合理。</p>
<p>我们参考IO多路复用模型。即我们不用阻塞等待系统B的接口，而是先去做别的操作。等系统B的接口处理完，通过事件回调通知，我们接口收到通知再进行对应的业务操作即可。</p>
<h3 id="57-远程调用由串行改为并行"><a class="markdownIt-Anchor" href="#57-远程调用由串行改为并行"></a> 5.7 远程调用由串行改为并行</h3>
<p>假设我们设计一个APP首页的接口，它需要查用户信息、需要查banner信息、需要查弹窗信息等等。如果是串行一个一个查，比如查用户信息200ms，查banner信息100ms、查弹窗信息50ms，那一共就耗时350ms了，如果还查其他信息，那耗时就更大了。<br>
<img src="/special-interface/32.png" alt><br>
其实我们可以改为并行调用，即查用户信息、查banner信息、查弹窗信息，可以同时并行发起。<br>
<img src="/special-interface/33.png" alt></p>
<h3 id="58-锁粒度避免过粗"><a class="markdownIt-Anchor" href="#58-锁粒度避免过粗"></a> 5.8 锁粒度避免过粗</h3>
<p>在高并发场景，为了防止超卖等情况，我们经常需要加锁来保护共享资源。但是，如果加锁的粒度过粗，是很影响接口性能的。</p>
<p>什么是加锁粒度呢？</p>
<blockquote>
<p>其实就是就是你要锁住的范围是多大。比如你在家上卫生间，你只要锁住卫生间就可以了吧，不需要将整个家都锁起来不让家人进门吧，卫生间就是你的加锁粒度。</p>
</blockquote>
<p>不管你是<code>synchronized</code>加锁还是<code>redis</code>分布式锁，只需要在共享临界资源加锁即可，不涉及共享资源的，就不必要加锁。这就好像你上卫生间，不用把整个家都锁住，锁住卫生间门就可以了。</p>
<p>比如，在业务代码中，有一个<code>ArrayList</code>因为涉及到多线程操作，所以需要加锁操作，假设刚好又有一段比较耗时的操作（代码中的slowNotShare方法）不涉及线程安全问题。反例加锁，就是一锅端，全锁住:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不涉及共享资源的慢方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">slowNotShare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误的加锁方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wrong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">    IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10000</span>).parallel().forEach(i -&gt; &#123;</span><br><span class="line">        <span class="comment">//加锁粒度太粗了，slowNotShare其实不涉及共享资源</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            slowNotShare();</span><br><span class="line">            data.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    log.info(<span class="string">&quot;cosume time:&#123;&#125;&quot;</span>, System.currentTimeMillis() - beginTime);</span><br><span class="line">    <span class="keyword">return</span> data.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">right</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">    IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10000</span>).parallel().forEach(i -&gt; &#123;</span><br><span class="line">        slowNotShare();<span class="comment">//可以不加锁</span></span><br><span class="line">        <span class="comment">//只对List这部分加锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (data) &#123;</span><br><span class="line">            data.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    log.info(<span class="string">&quot;cosume time:&#123;&#125;&quot;</span>, System.currentTimeMillis() - beginTime);</span><br><span class="line">    <span class="keyword">return</span> data.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="59-切换存储方式文件中转暂存数据"><a class="markdownIt-Anchor" href="#59-切换存储方式文件中转暂存数据"></a> 5.9 切换存储方式：文件中转暂存数据</h3>
<p>如果数据太大，落地数据库实在是慢的话，<strong>就可以考虑先用文件的方式暂存</strong>。<strong>先保存文件，再异步下载文件，慢慢保存到数据库</strong>。</p>
<blockquote>
<p>之前开发了一个转账接口。如果是并发开启，10个并发度，每个批次1000笔转账明细数据，数据库插入会特别耗时，大概6秒左右；这个跟我们公司的数据库同步机制有关，并发情况下，因为优先保证同步，所以并行的插入变成串行啦，就很耗时。</p>
</blockquote>
<p>优化前，1000笔明细转账数据，先落地DB数据库，返回处理中给用户，再异步转账。如图：<br>
<img src="/special-interface/34.png" alt><br>
记得当时压测的时候，高并发情况，这1000笔明细入库，耗时都比较大。所以我转换了一下思路，把批量的明细转账记录保存的文件服务器，然后记录一笔转账总记录到数据库即可。接着异步再把明细下载下来，进行转账和明细入库。最后优化后，性能提升了十几倍。</p>
<p>优化后，流程图如下：<br>
<img src="/special-interface/35.png" alt><br>
如果你的接口耗时瓶颈就在<strong>数据库插入操作这里</strong>，用来批量操作等，还是效果还不理想，就可以考虑用文件或者MQ等暂存。有时候批量数据放到文件，会比插入数据库效率更高。</p>
<h3 id="510-索引"><a class="markdownIt-Anchor" href="#510-索引"></a> 5.10 索引</h3>
<p>提到接口优化，很多小伙伴都会想到添加索引。没错，添加索引是成本最小的优化，而且一般优化效果都很不错。</p>
<p>索引优化这块的话，一般从这几个维度去思考：</p>
<ul>
<li>你的SQL加索引了没？</li>
<li>你的索引是否真的生效？</li>
<li>你的索引建立是否合理？</li>
</ul>
<h4 id="5101-没加索引"><a class="markdownIt-Anchor" href="#5101-没加索引"></a> 5.10.1 没加索引</h4>
<p><code>explain</code>先看执行计划</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info <span class="keyword">where</span> userId <span class="keyword">like</span> <span class="string">&#x27;%123&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>你也可以通过命令<code>show create table</code>，整张表的索引情况。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> user_info;</span><br></pre></td></tr></table></figure>
<p>如果某个表忘记添加某个索引，可以通过<code>alter table add index</code>命令添加索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user_info <span class="keyword">add</span> index idx_name (name);</span><br></pre></td></tr></table></figure>
<p>一般就是：SQL的where条件的字段，或者是order by 、group by后面的字段需需要添加索引。</p>
<h4 id="5102-索引不生效"><a class="markdownIt-Anchor" href="#5102-索引不生效"></a> 5.10.2 索引不生效</h4>
<p>有时候，即使你添加了索引，但是索引会失效的<br>
<img src="/special-interface/36.png" alt></p>
<h4 id="5103-索引设计不合理"><a class="markdownIt-Anchor" href="#5103-索引设计不合理"></a> 5.10.3 索引设计不合理</h4>
<p>我们的索引不是越多越好，需要合理设计。比如：</p>
<ul>
<li>删除冗余和重复索引。</li>
<li>索引一般不能超过5个</li>
<li>索引不适合建在有大量重复数据的字段上、如性别字段</li>
<li>适当使用覆盖索引</li>
<li>如果需要使用force index强制走某个索引，那就需要思考你的索引设计是否真的合理了</li>
</ul>
<h3 id="511-优化sql"><a class="markdownIt-Anchor" href="#511-优化sql"></a> 5.11 优化SQL</h3>
<p>除了索引优化，其实SQL还有很多其他有优化的空间。比如这些：<br>
<img src="/special-interface/37.png" alt></p>
<h3 id="512-避免大事务问题"><a class="markdownIt-Anchor" href="#512-避免大事务问题"></a> 5.12 避免大事务问题</h3>
<p>为了保证数据库数据的一致性，在涉及到多个数据库修改操作时，我们经常需要用到事务。而使用spring声明式事务，又非常简单，只需要用一个注解就行@Transactional，如下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    <span class="comment">//保存用户信息</span></span><br><span class="line">    userDao.save(user);</span><br><span class="line">    passCertDao.updateFlag(user.getPassId());</span><br><span class="line">    <span class="keyword">return</span> user.getUserId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这块代码主要逻辑就是创建个用户，然后更新一个通行证<code>pass</code>的标记。如果现在新增一个需求，创建完用户，调用远程接口发送一个<code>email</code>消息通知，很多小伙伴会这么写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    <span class="comment">//保存用户信息</span></span><br><span class="line">    userDao.save(user);</span><br><span class="line">    passCertDao.updateFlag(user.getPassId());</span><br><span class="line">    sendEmailRpc(user.getEmail());</span><br><span class="line">    <span class="keyword">return</span> user.getUserId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样实现可能会有坑，事务中嵌套<code>RPC</code>远程调用，即事务嵌套了一些非DB操作。如果这些非<code>DB</code>操作耗时比较大的话，可能会出现<strong>大事务问题</strong>。</p>
<blockquote>
<p>所谓大事务问题就是，就是运行时间长的事务。由于事务一致不提交，就会导致数据库连接被占用，即并发场景下，数据库连接池被占满，影响到别的请求访问数据库，影响别的接口性能。</p>
</blockquote>
<p>大事务引发的问题主要有：接口超时、死锁、主从延迟等等。因此，为了优化接口，我们要规避大事务问题。我们可以通过这些方案来规避大事务：</p>
<ul>
<li>RPC远程调用不要放到事务里面</li>
<li>一些查询相关的操作，尽量放到事务之外</li>
<li>事务中避免处理太多数据</li>
</ul>
<h3 id="513-深分页问题"><a class="markdownIt-Anchor" href="#513-深分页问题"></a> 5.13 深分页问题</h3>
<p>深分页问题，为什么会慢？我们看下这个SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,balance <span class="keyword">from</span> account <span class="keyword">where</span> create_time<span class="operator">&gt;</span> <span class="string">&#x27;2020-09-19&#x27;</span> limit <span class="number">100000</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>limit 100000,10意味着会扫描100010行，丢弃掉前100000行，最后返回10行。即使create_time，也会回表很多次。<br>
我们可以通过标签记录法和延迟关联法来优化深分页问题， 其他优化方案可以查看博客 <a href="http://xiaoyuge.work/limit-offset/">破解LIMIT和OFFSET分页性能瓶颈</a>。</p>
<h3 id="514-优化程序结构"><a class="markdownIt-Anchor" href="#514-优化程序结构"></a> 5.14 优化程序结构</h3>
<p>优化程序逻辑、程序代码，是可以节省耗时的。比如，你的程序创建多不必要的对象、或者程序逻辑混乱，多次重复查数据库、又或者你的实现逻辑算法不是最高效的，等等。</p>
<p>我举个简单的例子：复杂的逻辑条件，有时候调整一下顺序，就能让你的程序更加高效。</p>
<blockquote>
<p>假设业务需求是这样：如果用户是会员，第一次登陆时，需要发一条感谢短信。如果没有经过思考，代码直接这样写了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(isUserVip &amp;&amp; isFirstLogin)&#123;</span><br><span class="line">    sendSmsMsg();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设有5个请求过来，isUserVip判断通过的有3个请求，isFirstLogin通过的只有1个请求。那么以上代码，isUserVip执行的次数为5次，isFirstLogin执行的次数也是3次，如下：<br>
<img src="/special-interface/38.png" alt><br>
如果调整一下isUserVip和isFirstLogin的顺序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(isFirstLogin &amp;&amp; isUserVip )&#123;</span><br><span class="line">    sendMsg();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/special-interface/39.png" alt></p>
<h3 id="515-压缩传输内容"><a class="markdownIt-Anchor" href="#515-压缩传输内容"></a> 5.15 压缩传输内容</h3>
<p>压缩传输内容，传输报文变得更小，因此传输会更快啦。10M带宽，传输10k的报文，一般比传输1M的会快呀。</p>
<blockquote>
<p>比如视频网站：如果不对视频做任何压缩编码，因为带宽又是有限的。巨大的数据量在网络传输的耗时会比编码压缩后，慢好多倍。</p>
</blockquote>
<h3 id="516-海量数据处理考虑nosql"><a class="markdownIt-Anchor" href="#516-海量数据处理考虑nosql"></a> 5.16 海量数据处理，考虑NoSQL</h3>
<p>之前看过几个慢SQL，都是跟深分页问题有关的。发现用来标签记录法和延迟关联法，效果不是很明显，原因是要统计和模糊搜索，并且统计的数据是真的大。最后跟组长对齐方案，就把数据同步到Elasticsearch，然后这些模糊搜索需求，都走Elasticsearch去查询了。</p>
<p>我想表达的就是，如果数据量过大，一定要用关系型数据库存储的话，就可以分库分表。但是有时候，我们也可以使用NoSQL，如Elasticsearch、Hbase等。</p>
<h3 id="517-线程池设计要合理"><a class="markdownIt-Anchor" href="#517-线程池设计要合理"></a> 5.17 线程池设计要合理</h3>
<p>我们使用线程池，就是让任务并行处理，更高效地完成任务。但是有时候，如果线程池设计不合理，接口执行效率则不太理想。</p>
<p>一般我们需要关注线程池的这几个参数：核心线程、最大线程数量、阻塞队列。</p>
<ul>
<li>如果核心线程过小，则达不到很好的并行效果。</li>
<li>如果阻塞队列不合理，不仅仅是阻塞的问题，甚至可能会OOM</li>
<li>如果线程池不区分业务隔离，有可能核心业务被边缘业务拖垮</li>
</ul>
<h3 id="518-机器问题-fullgc-线程打满-太多io资源没关闭等等"><a class="markdownIt-Anchor" href="#518-机器问题-fullgc-线程打满-太多io资源没关闭等等"></a> 5.18 机器问题 （fullGC、线程打满、太多IO资源没关闭等等）</h3>
<p>有时候，我们的接口慢，就是机器处理问题。主要有fullGC、线程打满、太多IO资源没关闭等等。</p>
<ul>
<li>之前排查过一个fullGC问题：运营小姐姐导出60多万的excel的时候，说卡死了，接着我们就收到监控告警。后面排查得出，我们老代码是Apache POI生成的excel，导出excel数据量很大时，当时JVM内存吃紧会直接Full GC了。</li>
<li>如果线程打满了，也会导致接口都在等待了。所以。如果是高并发场景，我们需要接入限流，把多余的请求拒绝掉。</li>
<li>如果IO资源没关闭，也会导致耗时增加。这个大家可以看下，平时你的电脑一直打开很多很多文件，是不是会觉得很卡。</li>
</ul>
<p>记录这篇博客花了好几天的时间，主要是筛选一些同类型的博客，然后整理一下，在这过程中也自己也是受益良多，也更加系统性的了解、熟悉接口方面的知识。这篇博客主要是借鉴于<strong>捡田螺的小男孩</strong> <a href="https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&amp;mid=2247495355&amp;idx=1&amp;sn=20a4b5594a5d307b36fd374002d7e29b&amp;chksm=ceba1210f9cd9b06329a4f6c1c5f6595956643696bf8d89110b6d4b6efc0dde1e5049ee8948c&amp;scene=126&amp;&amp;sessionid=1669128030#rd">设计好接口的36个锦囊</a> 以及 <a href="https://mp.weixin.qq.com/s/cd-EuL1Psn_nDQp2djJFBA">18种接口优化总结</a>；</p>
]]></content>
      <categories>
        <category>interface</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
</search>
