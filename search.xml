<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>断网了，还能ping通127.0.0.1吗</title>
    <url>/interview-1/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>网通不通， 你<code>ping</code>一下就知道了，如果把<code>127.0.0.1</code>换成<code>0.0.0.0</code>或则<code>localhost</code>会怎样呢？这几个IP有什么区别？<br><img src="/interview-1/index/1.png"></p>
<p>话不多说，拔掉网线，断开WI-FI，然后在控制台<code>ping 127.0.0.1</code><br><img src="/interview-1/index/2.png"><br>说明，断网了还是能够<code>ping</code> 通<code>127.0.0.1</code>的。</p>
<h3 id="2-什么是127-0-0-1"><a href="#2-什么是127-0-0-1" class="headerlink" title="2. 什么是127.0.0.1"></a>2. 什么是127.0.0.1</h3><p>首先，这个是<code>IPV4</code>地址，<code>IPV4</code>地址有 32 位， 一个字节8位，共4个字节</p>
<p>其中<strong>127开头的都属于回环地址</strong>，也是<code>IPV4</code>的特殊地址，人为规定的。而<code>127.0.0.1</code>是众多回环地址中的一个，之所以不是<code>127.0.0.2</code>，是因为源码就是这么定义的，没什么道理。<br><img src="/interview-1/index/3.png"><br><code>IPV4</code>的地址是32位，2的32次方，大概是40+亿。这点数量不够用，目前IP已经用完，所以就有了<code>IPV6</code>，<code>IPV6</code>地址是128位的也就是2的128次方≈10的38次方</p>
<ul>
<li>IPV4以8位一组，每组之间用 . 号隔开。</li>
<li>IPV6就以16位为一组，每组之间用 : 号隔开。如果全是0，那么可以省略不写。</li>
</ul>
<p><img src="/interview-1/index/4.png"></p>
<p><code>IPV4</code>的回环地址是<code>127.0.0.1</code>, 在<code>IPV6</code>下，表达式为：<code>::1</code>,<strong>中间把连续的0给省略了，之所以不是7个冒号，而是2个冒号，是因为IPV6地址只允许出现一次两个连续的冒号</strong>。</p>
<blockquote>
<p>在IPV4下用 ping 127.0.0.1 命令, 在IPV6下用Ping :: 1命令</p>
</blockquote>
<h3 id="3-什么是ping"><a href="#3-什么是ping" class="headerlink" title="3. 什么是ping"></a>3. 什么是ping</h3><blockquote>
<p>ping 是应用层命令，ping作为一个小软件，它的功能是尝试发送一个小小的消息到目标机器上，判断目标机器是否可达，也就是判断目标机器网络是否可以联通。</p>
</blockquote>
<p>ping应用的底层用户的是网络层<code>ICMP协议</code><br><img src="/interview-1/index/5.png"></p>
<p>虽然<code>ICMP</code>协议和<code>IP</code>协议都属于网络层协议，但其实<code>ICMP</code>也是利用了<code>IP</code>协议进行消息的传输</p>
<p>简单的理解为 ping 某个IP 就是往某个IP地址发个消息</p>
<h3 id="4-TCP发数据和ping的区别"><a href="#4-TCP发数据和ping的区别" class="headerlink" title="4. TCP发数据和ping的区别"></a>4. TCP发数据和ping的区别</h3><p>一般情况下，我们会使用TCP进行网络数据传输，那么可以看下它和ping的区别。<br><img src="/interview-1/index/6.png"><br>ping 和其他应用软件都属于应用层。</p>
<p>那么我们横向对比一下，比如说聊天软件，如果用的是TCP的方式去发送消息，那么就得先知道往哪发，Linux里万物皆文件，那么你要发消息的目的地，也就是个文件，这里就需要使用socket。</p>
<ol>
<li><p>在TCP传输中创建socket的方式是<code>socket(AF_INET, SOCK_STREAM, 0)</code></p>
<ul>
<li><code>AF_INET</code>: 表示将使用IPV4里<code>host:port</code>的方式去解析你输入的网络地址</li>
<li><code>SOCK_STREAM</code>: 指使用面向字节流的TCP协议，工作在传输层。</li>
</ul>
</li>
<li><p>创建好<code>socket</code>之后，就可以把要传输的数据写到这个文件里，调用socket的<code>sendto</code>接口的过程中进程会从用户态进入到内核态，最后会调用到<code>socket_sendmsg</code>方法。</p>
</li>
<li><p>进入传输层，带上<code>TCP</code>头，网络层带上<code>IP</code>头，数据链路层带上<code>MAC</code>头等一系列操作后，进入网卡的发送队列<code>ringbuffer</code>， 顺着网卡就发出去了。</p>
</li>
</ol>
<p>再回到<code>ping</code>，整个过程基本跟TCP发数据类似，差异的地方主要在于：</p>
<ol>
<li><p>创建socket的时候用的是<code>socket(AF_INET,SOCK_RAW,IPPROTO_ICMP)</code>，<code>SOCK_RAW</code>是原始套接字，工作在网络层，所以构建ICMP网络层协议的数据，是再合适不过了。</p>
</li>
<li><p>ping 在进入内核态最后也是调用的<code>sock_sengmsg</code>方法，计入到网络层后加上ICMP和IP头，数据链路层加上MAC头，也是顺着网卡发出</p>
</li>
</ol>
<p>因此，本质上ping 和普通应用发消息在程序流上没有太大的差别。</p>
<p>这也解释了为什么当你发现怀疑网络有问题的时候，别人第一时间是问你能ping通吗？因为可以简单理解为ping就是自己组了个数据包，让系统按着其他软件发送数据的路径往外发一遍，能通的话说明其他软件发的数据也能通</p>
<h3 id="5-卫生棉断网了还能ping通127-0-0-1"><a href="#5-卫生棉断网了还能ping通127-0-0-1" class="headerlink" title="5. 卫生棉断网了还能ping通127.0.0.1"></a>5. 卫生棉断网了还能ping通127.0.0.1</h3><p>前面提到，有网的情况下，ping最后是通过网卡将数据发出去的，那么在断网的情况下，网卡已经不工作了，ping回环地址却一切正常，可以看下这种情况下的工作原理。<br><img src="/interview-1/index/7.png"></p>
<p>从应用层到出书层再到网络层，这段路径跟ping外网的时候几乎是一样的，到了网络层，系统会根据目的IP，在路由表中获取对应的路由信息，这其中就包括选择哪个网卡把消息发送出去。</p>
<ul>
<li><p>当发现目标IP是外网IP时，会从”真网卡”发出</p>
</li>
<li><p>当发现目标IP是回环地址时，会选择本地网卡</p>
</li>
</ul>
<p>本地网卡会把数据推到一个叫<code>input_pkt_queue</code>的链表中，这个链表是所有网卡共享的，上面挂着发给本机的各种消息，消息被发送到这个链表后，会在触发一个<strong>软中断</strong>。</p>
<p>专门处理软中断的工具人<code>ksoftirqd</code>(内核线程)，它在收到软中断后就会立即去链表将消息取出，然后顺着数据链路层、网络层等层层往上传递最后给到应用程序。</p>
<p>ping 回环地址和通过TCP等各种协议发送数据到回环地址都是走这条路径。整条路径从发到收，都没有经过”真网卡”。之所以127.0.0.1叫本地回环地址，可以理解为，消息发出到这个地址上的话，就不会出网络，在本机打个转就又回来了。所以断网，依然能 ping 通 127.0.0.1。</p>
<h3 id="6-ping回环地址和ping本机地址有什么区别"><a href="#6-ping回环地址和ping本机地址有什么区别" class="headerlink" title="6. ping回环地址和ping本机地址有什么区别"></a>6. ping回环地址和ping本机地址有什么区别</h3><p>查看本机地址和回环地址<br><img src="/interview-1/index/8.png"></p>
<ul>
<li>lo0 : 表示本地回环接口对应的地址，也就是回环地址</li>
<li>en0 : 表示本地第一块网卡，对应的地址是<code>192.168.1.100</code>，也叫做本地IP</li>
</ul>
<p>之前一直人为ping 本地IP的话会通过”真网卡”出去，然后遇到第一个路由器，再发回到本机。</p>
<p>为了验证这个说法，可以进行抓包。</p>
<ol>
<li><p>ping 127.0.0.1</p>
<p> <img src="/interview-1/index/9.png"></p>
</li>
<li><p>ping 本机IP</p>
<p><img src="/interview-1/index/10.png"></p>
</li>
</ol>
<p>可以看到 <code>ping</code> 本机IP 跟 <code>ping</code> 回环地址一样，相关的网络数据，都是走的<code>lo0</code>，本地回环接口。</p>
<p>只要走了本地回环接口，那数据都不会发送到网络中，在本机网络协议栈中兜一圈，就发回来了。因此<strong>ping回环地址和ping本机地址没有区别</strong>。</p>
<h3 id="7-127-0-0-1和localhost以及0-0-0-0区别"><a href="#7-127-0-0-1和localhost以及0-0-0-0区别" class="headerlink" title="7. 127.0.0.1和localhost以及0.0.0.0区别"></a>7. 127.0.0.1和localhost以及0.0.0.0区别</h3><p>访问<code>nginx</code>的时候，发现用这几个 IP，都能正常访问到<code>nginx</code>的欢迎网页。一度认为这几个<code>IP</code>都是一样的。<br><img src="/interview-1/index/11.png"><br><img src="/interview-1/index/12.png"><br><img src="/interview-1/index/13.png"><br><img src="/interview-1/index/14.png"></p>
<p>但本质上还是有些区别的。</p>
<p>首先<code>localhost</code>就不叫<code>IP</code>，它是一个域名，就跟 “baidu.com”,是一个形式的东西，只不过默认会把它解析为<code>127.0.0.1</code> ，当然这可以在<code>/etc/hosts</code>文件下进行修改。</p>
<p>所以默认情况下，使用<code>localhost</code>跟使用<code>127.0.0.1</code>确实是没区别的。</p>
<p>其次就是 0.0.0.0，执行 ping 0.0.0.0  ，是会失败的，因为它在IPV4中表示的是无效的目标地址。<br><img src="/interview-1/index/15.png"><br>但它还是很有用处的，回想下，我们启动服务器的时候，一般会 listen 一个 IP 和端口，等待客户端的连接。</p>
<p>如果此时<code>listen</code>的是本机的<code>0.0.0.0</code>, 那么它表示本机上的所有IPV4地址。</p>
<p>举个例子。刚刚提到的 <code>127.0.0.1</code> 和 <code>192.168.1.100</code> ，都是本机的IPV4地址，如果监听<code>0.0.0.0</code> ，那么用上面两个地址，都能访问到这个服务器。</p>
<p>当然， 客户端<code>connect</code>时，不能使用<code>0.0.0.0</code> 。必须指明要连接哪个服务器IP。</p>
<h3 id="8-总结"><a href="#8-总结" class="headerlink" title="8. 总结"></a>8. 总结</h3><ul>
<li><p><code>127.0.0.1</code>是回环地址。<code>localhost</code>是域名，但默认等于<code>127.0.0.1</code>。</p>
</li>
<li><p><code>ping</code> 回环地址和 <code>ping</code> 本机地址，是一样的，走的是<code>lo0</code> “假网卡”，都会经过网络层和数据链路层等逻辑，最后在快要出网卡前狠狠拐了个弯， 将数据插入到一个链表后就软中断通知 <code>ksoftirqd</code> 来进行收数据的逻辑，压根就不出网络。所以断网了也能<code>ping</code>通回环地址。</p>
</li>
<li><p>如果服务器<code>listen</code>的是 <code>0.0.0.0</code>，那么此时用<code>127.0.0.1</code>和本机地址都可以访问到服务。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title>说说wait()和sleep的区别</title>
    <url>/interview-2/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-得分点"><a href="#1-得分点" class="headerlink" title="1. 得分点"></a>1. 得分点</h3><p>所属的类型不同、对锁的依赖不同、返回的条件不同、使用方式不同</p>
<h3 id="2-标准回答"><a href="#2-标准回答" class="headerlink" title="2. 标准回答"></a>2. 标准回答</h3><p>wait()和sleep()方法主要有以下3个区别：</p>
<ol>
<li><p>所属类型不同： </p>
<ul>
<li><code>wait()</code>是<code>Object</code>类的实例方法，调用该方法的线程将进入<code>WAITING</code>状态</li>
<li><code>sleep()</code>是<code>Thread</code>类的静态方法，调用该方法的线程将进入<code>TIMED_WAITING</code></li>
</ul>
</li>
<li><p>对锁的依赖不同：</p>
<ul>
<li><code>wait()</code>依赖于<code>synchronized</code>锁，它必须通过监视器进行调用，在调用后会释放锁</li>
<li><code>sleep()</code>不依赖任何锁，所以在调用后不会释放锁</li>
</ul>
</li>
<li><p>返回的条件不同：</p>
<ul>
<li>调用<code>wait()</code>进入等待状态的线程，需要由<code>notify()/ notifyAll()</code>唤醒，进入就绪状态，从而返回</li>
<li>调用<code>sleep()</code>进入睡眠的线程，在超时时间到达后自动返回或者使用<code>interrupt()</code>方法中断，进入就绪状态（sleep()）方法只是让出CPU，并不会让出同步资源锁</li>
</ul>
</li>
<li><p>使用方式不同：</p>
<ul>
<li><code>wait()</code>只能在同步方法或者同步代码块中调用，否则会报<code>illegalMonitorStateException</code>异常，如果没有设置超时时间，使用<code>notify()</code>来唤醒</li>
<li><code>sleep()</code>能在任何地方调用</li>
</ul>
</li>
</ol>
<h3 id="3-加分项"><a href="#3-加分项" class="headerlink" title="3. 加分项"></a>3. 加分项</h3><ol>
<li><p><code>wait()</code>方法也支持超时参数，线程调用带有超时参数的<code>wait()</code>会进入<code>TIMED_WAITING</code>状态，在此状态下的线程可以通过<code>notify()/ notifyAll()</code>唤醒从而返回，若在超时时间结束后仍未被唤醒则自动返回.</p>
</li>
<li><p>如果采用Lock进行线程同步,则不存在同步监视器,此时需要使用Condition的方法实现等待。</p>
</li>
<li><p>Condition对象是通过Lock对象创建出来的,它的await()方法会导致线程进入WTING状态,它的带超时参数的<code>await()</code>方法会导致线程进入<code>TIMED_WAITING</code>状态,当调用它的<code>signal()/signalAll()</code>方法时,线程会被唤醒从而返回。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Magic-api Java接口快速开发框架</title>
    <url>/magic-api/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h3><p>magic-api 是一个基于Java的接口快速开发框架，编写接口将通过magic-api提供的UI界面完成，自动映射为HTTP接口，无需定义Controller、Service、Dao、Mapper、XML、VO等Java对象即可完成常见的HTTP API接口开发</p>
<h3 id="2-特性"><a href="#2-特性" class="headerlink" title="2 特性"></a>2 特性</h3><ul>
<li>支持MySQL、MariaDB、Oracle、DB2、PostgreSQL、SQLServer 等支持jdbc规范的数据库</li>
<li>支持非关系型数据库Redis、Mongodb</li>
<li>支持集群部署、接口自动同步。</li>
<li>支持分页查询以及自定义分页查询</li>
<li>支持多数据源配置，支持在线配置数据源</li>
<li>支持SQL缓存，以及自定义SQL缓存</li>
<li>支持自定义JSON结果、自定义分页结果</li>
<li>支持对接口权限配置、拦截器等功能</li>
<li>支持运行时动态修改数据源</li>
<li>支持Swagger接口文档生成</li>
<li>基于magic-script脚本引擎，动态编译，无需重启，实时发布</li>
<li>支持Linq式查询，关联、转换更简单</li>
<li>支持数据库事务、SQL支持拼接，占位符，判断等语法</li>
<li>支持文件上传、下载、输出图片</li>
<li>支持脚本历史版本对比与恢复</li>
<li>支持脚本代码自动提示、参数提示、悬浮提示、错误提示</li>
<li>支持导入Spring中的Bean、Java中的类</li>
<li>支持在线调试</li>
<li>支持自定义工具类、自定义模块包、自定义类型扩展、自定义方言、自定义列名转换等自定义操作</li>
</ul>
<h3 id="3-快速开始"><a href="#3-快速开始" class="headerlink" title="3 快速开始"></a>3 快速开始</h3><ol>
<li><p>引入依赖包</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 父包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- magic-api依赖包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.ssssssss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>magic-api-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改<code>application.yaml</code></p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="comment"># 配置静态资源启用 gzip 压缩</span></span><br><span class="line">  <span class="attr">compression:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">min-response-size:</span> <span class="number">128</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#配置magic-api</span></span><br><span class="line"><span class="attr">magic-api:</span></span><br><span class="line">  <span class="attr">web:</span> <span class="string">/magic/web</span></span><br><span class="line">  <span class="comment">#配置文件存储位置，当以classpath开头时，为只读模式</span></span><br><span class="line">  <span class="attr">resource:</span></span><br><span class="line">    <span class="comment">#location: /data/magic-api</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">database</span>  <span class="comment"># 配置接口存储方式，这里选择存在数据库中</span></span><br><span class="line">    <span class="attr">table-name:</span> <span class="string">magic_api_file</span>  <span class="comment"># 数据库中的表名</span></span><br><span class="line">    <span class="attr">prefix:</span> <span class="string">/magic-api</span>  <span class="comment"># 前缀</span></span><br><span class="line">    <span class="comment"># 其它配置请参考 https://ssssssss.org/magic-api/config/</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建数据库以及数据表</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- api接口表</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> magic_api_file (</span><br><span class="line">     `file_path` <span class="type">varchar</span>(<span class="number">512</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `file_content` mediumtext,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (`file_path`)</span><br><span class="line"> ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 测试表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_magic_api (</span><br><span class="line">     `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">     `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line"> ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br></pre></td></tr></table></figure></li>
<li><p>启动程序<br> <img src="/magic-api/index/1.png"></p>
</li>
<li><p>访问接口配置平台</p>
 <figure class="highlight http"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:8080/magic/web/index.html</span><br></pre></td></tr></table></figure>
<p> 弹出一个类似与IDEA的页面，如下图所示：<br> <img src="/magic-api/index/2.png"></p>
</li>
</ol>
<h3 id="4-配置Magic-api"><a href="#4-配置Magic-api" class="headerlink" title="4 配置Magic-api"></a>4 配置Magic-api</h3><ol>
<li><p>创建分组<br> <img src="/magic-api/index/3.png"><br> <img src="/magic-api/index/4.png"></p>
</li>
<li><p>创建接口<br><img src="/magic-api/index/5.png"></p>
<ul>
<li><p>查询列表命令为：</p>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sql = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    select * from magic_api_file;   // magic_api_file为数据库表</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">return</span> db.select(sql);</span><br></pre></td></tr></table></figure>
<p> <img src="/magic-api/index/6.png"><br> <img src="/magic-api/index/7.png"></p>
</li>
<li><p>单表保存命令</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> db.table(<span class="string">&#x27;test_magic_api&#x27;</span>)   <span class="comment">//表test_magic_api有两个字段， id 自增， name</span></span><br><span class="line">    .primary(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    .save(&#123;</span><br><span class="line">        id, <span class="comment">// 当file_path不为null时做修改，否则做插入</span></span><br><span class="line">        <span class="attr">name</span>: name</span><br><span class="line">    &#125;) </span><br></pre></td></tr></table></figure>
<p>  <img src="/magic-api/index/8.png"></p>
</li>
<li><p>分页查询命令</p>
   <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sql = <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    select file_path from magic_api_file</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">return</span> db.page(sql,<span class="number">5</span>,<span class="number">0</span>) <span class="comment">//每页5条，从第0开始</span></span><br></pre></td></tr></table></figure>
<p>   <img src="/magic-api/index/9.png"></p>
</li>
</ul>
</li>
<li><p>执行查询接口，结果如下图所示</p>
</li>
</ol>
<p>这样一个简单的模拟查询数据库表记录的接口就完成了，省去了后台写的大量的测试代码，大大的节省了时间用来摸鱼。</p>
<p>具体需要查看更多关于magic-api的相关内容，可以查看 <a href="https://toscode.gitee.com/loveqianqian/magic-api">magic-api源码</a> 以及 <a href="https://gitee.com/ssssssss-team/magic-api-example">样例代码以及常用的脚本</a></p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx版本升级流程</title>
    <url>/nginx-upgrade/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<blockquote>
<p>旨在说明版本升级流程步骤，测试环境为nginx1.11.1升级至1.22.0稳定版本，目的是解决Nginx&lt;=1.21.5下的0day LDAP RCE 漏洞情报。</p>
</blockquote>
<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>安装路径目录不大的话可以直接备份整个目录，或者剔除日志文件不备份。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost nginxHome]# tar -zcvf nginx1.11.1.tar-gz nginx1.11.1/</span><br></pre></td></tr></table></figure>

<h3 id="查看原有的-nginx-编译参数"><a href="#查看原有的-nginx-编译参数" class="headerlink" title="查看原有的 nginx 编译参数"></a>查看原有的 nginx 编译参数</h3><p>到nginx安装目录下，通过nginx -V命令检查原有的 nginx 编译参数，即configure arguments的配置内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost sbin]# ./nginx -V</span><br><span class="line"> nginx version: nginx/1.11.1</span><br><span class="line"> built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line"> configure arguments: --prefix=/home/oneapm/nginxHome/nginx1.11.1</span><br></pre></td></tr></table></figure>

<h3 id="对新版本的源码包进行编译"><a href="#对新版本的源码包进行编译" class="headerlink" title="对新版本的源码包进行编译"></a>对新版本的源码包进行编译</h3><p>解压新版本的源码包，通过上述检查原有的编译参数（–prefix=/home/oneapm/nginxHome/nginx1.11.1）对新版本源码包进行编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx-1.22.0]# ./configure --prefix=/home/oneapm/nginxHome/nginx1.11.1</span><br><span class="line">[root@localhost nginx-1.22.0]# make</span><br></pre></td></tr></table></figure>
<blockquote>
<p>特别说明：</p>
<p>make完之后就不要再make install，没有必要，如果make install，但–prefix又没改路径，那就gg了，覆盖了原来的安装环境，所以备份也很重要</p>
</blockquote>
<h3 id="停止nginx进程"><a href="#停止nginx进程" class="headerlink" title="停止nginx进程"></a>停止nginx进程</h3><p>不停止正在运行的nginx进程在下一步做二进制文件覆盖的时候会报错<code>***/sbin/nginx’: Text file busy</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Tips:</p>
<p>提前检查好自己当前使用的那个配置文件，别停了启动的时候就不晓得配置文件是哪个了</p>
</blockquote>
<h3 id="复制新的nginx源码包中二进制文件，覆盖原来的文件"><a href="#复制新的nginx源码包中二进制文件，覆盖原来的文件" class="headerlink" title="复制新的nginx源码包中二进制文件，覆盖原来的文件"></a>复制新的nginx源码包中二进制文件，覆盖原来的文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost nginx-1.22.0]# cp -p /opt/nginx-1.22.0/objs/nginx /home/oneapm/nginxHome/nginx1.11.1/sbin/</span><br></pre></td></tr></table></figure>

<h3 id="启动nginx服务"><a href="#启动nginx服务" class="headerlink" title="启动nginx服务"></a>启动nginx服务</h3><p>-c选项指定配置文件启动nginx服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -c /home/oneapm/nginxHome/nginx1.11.1/conf/nginx.conf</span><br></pre></td></tr></table></figure>

<h3 id="验证nginx升级是否成功"><a href="#验证nginx升级是否成功" class="headerlink" title="验证nginx升级是否成功"></a>验证nginx升级是否成功</h3><p>检查版本并测试配置是否正常</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost sbin]# ./nginx -V</span><br><span class="line">nginx version: nginx/1.22.0</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)</span><br><span class="line">configure arguments: --prefix=/home/oneapm/nginxHome/nginx1.22.0</span><br><span class="line">[root@localhost sbin]# ./nginx -t</span><br><span class="line">nginx: the configuration file /home/oneapm/nginxHome/nginx1.11.1/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /home/oneapm/nginxHome/nginx1.11.1/conf/nginx.conf test is successful</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>09 Nginx</category>
      </categories>
      <tags>
        <tag>Nginx专题</tag>
      </tags>
  </entry>
  <entry>
    <title>服务定位模式 Service Locator Pattern</title>
    <url>/service-locator-pattern/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>不知道大家在项目中有没有遇到这样的场景，根据传入的类型，调用接口不同的实现类或者服务，比如根据文件的类型使用CSV解析器或者JSON解析器，在调用的客户端 一般都是用<code>if else</code>去做判断，比如类型为JSON，就用JSON解析器，那么如果新加一个类型的解析器，是不是调用的客户端还要修改？这显然太耦合了。</p>
<p>本文就介绍一种方法，服务定位模式<code>Service Locator Pattern</code>来解决，帮助我们消除紧耦合实现及其依赖性，并提出将服务与其具体类解耦。</p>
<h3 id="2-文件解析器"><a href="#2-文件解析器" class="headerlink" title="2. 文件解析器"></a>2. 文件解析器</h3><p>接下来通过一个例子来介绍如何使用<code>Service Locator Pattern</code>。</p>
<p>假设有一个从各种来源获取数据的应用程序，我们必须解析不同类型的文件，比如解析CSV文件和JSON 文件。</p>
<ol>
<li><p>定义一个类型的枚举</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ContentType</span> </span>&#123;</span><br><span class="line">    JSON,</span><br><span class="line">    CSV</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义一个解析的接口</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Parser</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function">List <span class="title">parse</span><span class="params">(Reader reader)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>根据不同的文件类型编写不同的实现类</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CSVParser</span> <span class="keyword">implements</span> <span class="title">Parser</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">parse</span><span class="params">(Reader reader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONParser</span> <span class="keyword">implements</span> <span class="title">Parser</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">parse</span><span class="params">(Reader reader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写一个客户端，通过<code>switch case</code>根据不同类型调用不同的实现类</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Parser csvParser, jsonParser;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(Parser csvParser, Parser jsonParser)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.csvParser = csvParser;</span><br><span class="line">        <span class="keyword">this</span>.jsonParser = jsonParser;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getAll</span><span class="params">(ContentType contentType, Reader reader)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">        <span class="keyword">switch</span> (contentType) &#123;</span><br><span class="line">            <span class="keyword">case</span> CSV:</span><br><span class="line">                <span class="keyword">return</span> csvParser.parse(reader);</span><br><span class="line">            <span class="keyword">case</span> JSON:</span><br><span class="line">                <span class="keyword">return</span> jsonParser.parse(reader);</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// ...........</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>可能大部份人首先想到的都是像上面一样的方式去实现，那么这样存在怎样的问题呢？</p>
<p>现在加入提出一个新需求支持XML文件类型，是不是客户端也要修改代码，然后在<code>switch case</code>中添加新的类型，这就导致客户端和不同的解析器紧密耦合。</p>
<p>那么有什么更好的方式呢？</p>
<h3 id="3-应用Service-Locator-Pattern"><a href="#3-应用Service-Locator-Pattern" class="headerlink" title="3. 应用Service Locator Pattern"></a>3. 应用Service Locator Pattern</h3><p>接下来使用服务定位模式<code>Service Locator Pattern</code>来改造上面的方法</p>
<ol>
<li><p>定义服务定位器接口<code>ParserFactory</code>，根据参数类型返回<code>Parser</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ParserFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Parser <span class="title">getParser</span><span class="params">(ContentType contentType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置<code>ServiceLocatorFactoryBean</code>使用<code>ParserFactory</code>作为服务定位器接口，<code>ParserFactory</code>这个接口不需要写实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParserConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;parserFactory&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FactoryBean <span class="title">serviceLocatorFactoryBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ServiceLocatorFactoryBean factory = <span class="keyword">new</span> ServiceLocatorFactoryBean();</span><br><span class="line">        <span class="comment">//设置服务定位接口</span></span><br><span class="line">        factory.setServiceLocatorInterface(ParserFactory.class);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>设置解析器Bean的名称为类型名称，方便服务定位</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;CSV&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CSVParser</span> <span class="keyword">implements</span> <span class="title">Parser</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">parse</span><span class="params">(Reader reader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component(&quot;JSON&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONParser</span> <span class="keyword">implements</span> <span class="title">Parser</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">parse</span><span class="params">(Reader reader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component(&quot;XML&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XmlParser</span> <span class="keyword">implements</span> <span class="title">Parser</span></span>&#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> List <span class="title">parse</span><span class="params">(Reader reader)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改枚举，添加XML类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ContentType</span> </span>&#123;</span><br><span class="line">    JSON,</span><br><span class="line">    CSV,</span><br><span class="line">    XML</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>最后修改客户端调用，直接根据类型调用对应的解析器，去掉了<code>switch case</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ParserFactory parserFactory;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Client</span><span class="params">(ParserFactory parserFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.parserFactory = parserFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List <span class="title">getAll</span><span class="params">(ContentType contentType, Reader reader)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//..............</span></span><br><span class="line">        <span class="comment">//关键点，直接根据类型获取</span></span><br><span class="line">        <span class="keyword">return</span> parserFactory.getParser(contentType).parse(reader);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>这样就实现了，如果再添加新的类型，只需要扩展添加新的解析器就行，再也不用修改客户端了，满足开闭原则。</strong></p>
<p>如果觉得Bean的名称直接使用类型怪怪的，可以建议按照下面的方式来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">ContentType</span> </span>&#123;</span><br><span class="line">    JSON(TypeConstants.JSON_PARSER),</span><br><span class="line">    CSV(TypeConstants.CSV_PARSER),</span><br><span class="line">    XML(TypeConstants.XML_PARSER);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String parserName;</span><br><span class="line"></span><br><span class="line">    ContentType(String parserName) &#123;</span><br><span class="line">        <span class="keyword">this</span>.parserName = parserName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.parserName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TypeConstants</span> </span>&#123;</span><br><span class="line">        String CSV_PARSER = <span class="string">&quot;csvParser&quot;</span>;</span><br><span class="line">        String JSON_PARSER = <span class="string">&quot;jsonParser&quot;</span>;</span><br><span class="line">        String XML_PARSER = <span class="string">&quot;xmlParser&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(TypeConstants.CSV_PARSER)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CSVParser</span> <span class="keyword">implements</span> <span class="title">Parser</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(TypeConstants.JSON_PARSER)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JSONParser</span> <span class="keyword">implements</span> <span class="title">Parser</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(TypeConstants.XML_PARSER)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMLParser</span> <span class="keyword">implements</span> <span class="title">Parser</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-剖析Service-Locator-Pattern"><a href="#4-剖析Service-Locator-Pattern" class="headerlink" title="4. 剖析Service Locator Pattern"></a>4. 剖析Service Locator Pattern</h3><blockquote>
<p>服务定位器模式消除了客户端对具体实现的依赖。以下引自 Martin Fowler 的文章总结了核心思想：“服务定位器背后的基本思想是拥有一个知道如何获取应用程序可能需要的所有服务的对象。因此，此应用程序的服务定位器将有一个在需要时返回“服务”的方法。”</p>
</blockquote>
<p><img src="/service-locator-pattern/index/1.png"><br><code>Spring</code> 的<code>ServiceLocatorFactoryBean</code>实现了 <code>FactoryBean</code>接口，创建了<code>Service Factory</code>服务工厂<code>Bean</code>。</p>
<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>我们通过使用服务定位器模式实现了一种扩展 Spring 控制反转的绝妙方法。它帮助我们解决了依赖注入未提供最佳解决方案的用例。也就是说，依赖注入仍然是首选，并且在大多数情况下不应使用服务定位器来替代依赖注入。</p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>MyPerf4J一个高性能、无侵入的Java性能监控和统计工具</title>
    <url>/myperf4j/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h2><p>随着应用服务的规模不断扩大，原有的垂直应用架构已无法满足产品的发展，几十个工程师在一个项目里并行开发不同的功能，开发效率不断降低，于是公司开始全面推进服务化进程，把团队内的大部分工程师主要精力全部都集中到服务化中。 服务化可以让每个工程师仅在自己负责的子项目中进行开发，提高了开发的效率，但是服务化同时也带来了其他问题：</p>
<ul>
<li>无法知道每个服务的运行情况，例如，某一台服务它目前的 QPS 是多少？它的平均延迟是多少，99% 的延迟是多少，99.9% 的延迟又是多少？</li>
<li>某一个接口响应时间慢，如何定位是哪个方法引起的？</li>
<li>每个服务的负载是否均衡？</li>
<li>当服务出现抖动时，如何判断是 DB、Cache 还是下游服务引起的？</li>
<li>DB 和 Cache 响应延迟是多少？</li>
<li>如何评估服务的容量，随着服务的调用量越来越大，这个服务需要多少机器来支撑？什么时候应该加机器？</li>
</ul>
<p>目前已有的监控工具要么过于重量级，要么没有我想要的性能指标，不能满足我的 监控需求，为此，MyPerf4J诞生了，它用来来帮助我们监控服务的运行情况以及快速定位问题。</p>
<h3 id="1-1-需求"><a href="#1-1-需求" class="headerlink" title="1.1 需求"></a>1.1 需求</h3><p>MyPerf4J最基本的需求：</p>
<ul>
<li><p>能统计处方法的<code>RPS</code>、<code>Avg</code>、<code>Min</code>、<code>Max</code>、<code>StdDev</code>、<code>TP90</code>、<code>TP95</code>、<code>TP99</code> 等指标</p>
</li>
<li><p>可配置：</p>
<ul>
<li>可指定统计某些类、某些方法</li>
<li>可指定不统计某些类、某些方法</li>
</ul>
</li>
<li><p>拥有极致的性能</p>
<ul>
<li>不影响应用的GC</li>
<li>不影响应用的RT</li>
</ul>
</li>
<li><p>性能指标的处理可以定制化，例如：日志收集、上报给日志收集服务等。</p>
</li>
</ul>
<h3 id="1-2-指标"><a href="#1-2-指标" class="headerlink" title="1.2 指标"></a>1.2 指标</h3><ol>
<li>Method Metrics<ul>
<li>RPS: 每秒请求数</li>
<li>Count: 总请求数</li>
<li>RT: 方法响应时间</li>
<li>Avg: 方法平均响应时间</li>
<li>Min: 方法最小响应时间</li>
<li>Max: 方法最大响应时间</li>
<li>StdDev: 方法响应时间的标准差</li>
<li>TP50, TP90, TP95, TP99, TP999, TP9999, TP100</li>
<li>TP: Top 百分数(Top Percentile)</li>
<li>TP90: 在一个时间段内（如1分钟），统计该方法每次调用所消耗的时间，并将这些时间按从小到大的顺序进行排序，取第 90% 的那个值作为 TP90 值</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>JVM GC Metrics</p>
<ul>
<li>YoungGcCount: 一个时间片内累计 YoungGC 次数</li>
<li>YoungGcTime: 一个时间片内累计 YoungGC 时间</li>
<li>AvgYoungGcTime: 一个时间片内 YoungGC 平均时间</li>
<li>FullGcCount: 一个时间片内累计 OldGC 次数</li>
<li>FullGcTime: 一个时间片内累计 OldGC 时间 </li>
</ul>
</li>
<li><p>JVM Memory Metrics</p>
<ul>
<li>EdenUsed: 当前已经使用的Eden区内存量（以 KB 为单位）</li>
<li>EdenUsedPercent: 当前已经使用的Eden区内存量占比</li>
<li>SurvivorUsed: 当前已经使用的Survivor区内存量（以 KB 为单位）</li>
<li>SurvivorUsedPercent: 当前已经使用的Survivor区内存量占比</li>
<li>OldGenUsed: 当前已经使用的老年代内存量（以 KB 为单位）</li>
<li>OldGenUsedPercent: 当前已经使用的老年代内存量占比</li>
<li>HeapUsed: 当前已经使用的堆内内存量（以 KB 为单位）</li>
<li>HeapUsedPercent: 当前已经使用的堆内内存量占比</li>
<li>NonHeapUsed: 当前已经使用的非堆内内存量（以 KB 为单位）</li>
<li>NonHeapUsedPercent: 当前已经使用的非堆内内存量占比</li>
<li>PermGenUsed: 当前已经使用的永久代内存量（以 KB 为单位）</li>
<li>PermGenUsedPercent: 当前已经使用的永久代内存量占比</li>
<li>MetaspaceUsed: 当前已经使用的元数据区内存量（以 KB 为单位）</li>
<li>MetaspaceUsedPercent: 当前已经使用的元数据区内存量占比</li>
<li>CodeCacheUsed: 当前已经使用的 CodeCache区 内存量（以 KB 为单位）</li>
<li>CodeCacheUsedPercent: 当前已经使用的 CodeCache区 内存量占比</li>
</ul>
</li>
</ol>
<ol start="4">
<li><p>JVM Thread Metrics</p>
<ul>
<li>TotalStarted: 自 JVM 启动以来启动过的线程数</li>
<li>Active: 当前存活的线程数，包括守护线程和非守护线程</li>
<li>Daemon: 当前存活的守护线程数</li>
<li>Runnable: 正在 JVM 中执行的线程</li>
<li>Blocked: 受阻塞并等待某个监视器锁的线程数</li>
<li>Waiting: 无限期地等待另一个线程来执行某一特定操作的线程数</li>
<li>TimedWaiting: 等待另一个线程来执行取决于指定等待时间的操作的线程处于这种状态数</li>
<li>Terminated: 已退出的线程数</li>
<li>Peak: 自 JVM 启动或峰值重置以来峰值活动线程计数</li>
<li>New: 至今尚未启动的线程数</li>
</ul>
</li>
</ol>
<ol start="5">
<li><p>JVM ByteBuff Metrics</p>
<ul>
<li>Name: 缓存池名称</li>
<li>Count: 缓存池中 buffer 的数量</li>
<li>MemoryUsed: JVM 用于此缓冲池的内存估计值</li>
<li>MemoryCapacity: 缓存池中所有 buffer 的总容量估计值</li>
</ul>
</li>
</ol>
<ol start="6">
<li><p>JVM Class Metrics</p>
<ul>
<li>Total: 自 JVM 开始执行到目前已经加载的类的总数</li>
<li>Loaded: 当前加载到 JVM 中的类的数量</li>
<li>Unloaded: 自 JVM 开始执行到目前已经卸载的类的总数</li>
</ul>
</li>
</ol>
<ol start="7">
<li><p>JVM Compilation Metrics</p>
<ul>
<li>Time: 一个时间片内累计编译时间</li>
<li>TotalTime: 自 JVM 开始执行到目前累计的的总编译时间</li>
</ul>
</li>
<li><p>JVM FileDescriptor Metrics</p>
<ul>
<li>OpenCount: 当前打开的文件句柄数</li>
<li>OpenPercent: 当前打开的文件句柄数占最大文件句柄数的百分比</li>
</ul>
</li>
</ol>
<h3 id="1-3-架构"><a href="#1-3-架构" class="headerlink" title="1.3 架构"></a>1.3 架构</h3><p>MyPerf4j支持两种部署架构:</p>
<ol>
<li>3.x及其之前<br> <img src="/myperf4j/index/v2.jpeg"></li>
</ol>
<ol start="2">
<li>3.x<br><img src="/myperf4j/index/v1.png"></li>
</ol>
<h4 id="各组件说明"><a href="#各组件说明" class="headerlink" title="各组件说明"></a>各组件说明</h4><table>
<thead>
<tr>
<th align="center">组件</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Java Application</td>
<td>MyPerf4J 的运行容器</td>
</tr>
<tr>
<td align="center">MyPerf4J</td>
<td>Metrics 收集和统计</td>
</tr>
<tr>
<td align="center">Collector</td>
<td>日志收集器</td>
</tr>
<tr>
<td align="center">Storage</td>
<td>日志收集器</td>
</tr>
<tr>
<td align="center">Collector</td>
<td>存储平台</td>
</tr>
<tr>
<td align="center">Dashboard</td>
<td>可视化平台</td>
</tr>
</tbody></table>
<p>各组件关系说明：</p>
<ul>
<li><p>MyPerf4j 定时把指定时间片内的统计数据写入日志文件</p>
</li>
<li><p>Collector 从日志文件中读取统计数据，并写入Storage</p>
</li>
<li><p>Dashboard 从Storage 中读取数据并展示</p>
</li>
</ul>
<p>注意，<code>MyPerf4J</code>项目 只提供<code>MyPerf4J</code>本身，其余组件需要用户自行选择。 这样做的优点如下：</p>
<ul>
<li>保持 MyPerf4J 的精简</li>
<li>健壮性，不论是 Collector、Storage 还是 Dashboard 宕掉都不影响 MyPerf4J 的数据采集，也不丢失采集到的数据</li>
<li>多样性，Collector 可以是 Telegraf 也可以是 Filebeat；Storage 可以是 InfluxDB 也可以是 OpenTSDB; Dashboard 可以是 Grafana 也可以是 Chronograf</li>
</ul>
<h2 id="2-配置"><a href="#2-配置" class="headerlink" title="2 配置"></a>2 配置</h2><p>这里主要是<strong>3.x</strong>配置，如果需要查看2.x配置，可以到 <a href="https://github.com/LinShunKang/MyPerf4J/wiki">MyPerf4j</a> 源码处查找。</p>
<p>MyPerf4J 默认提供了以下几个参数，用于控制 MyPerf4J 的行为:</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="center">类型</th>
<th align="left">必填</th>
<th align="left">默认值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">app_name</td>
<td align="center">String</td>
<td align="left">Y</td>
<td align="left"></td>
<td align="left">配置应用名称</td>
</tr>
<tr>
<td align="left">debug</td>
<td align="center">boolean</td>
<td align="left">N</td>
<td align="left">false</td>
<td align="left">配置是否开启 debug 模式，可配置为 true/false</td>
</tr>
<tr>
<td align="left">http.server.port</td>
<td align="center">int</td>
<td align="left">N</td>
<td align="left">2048,2000,2040</td>
<td align="left">配置 Http 服务器端口号，格式为：首选端口,备选最小端口,备选最大端口</td>
</tr>
<tr>
<td align="left">http.server.min_workers</td>
<td align="center">int</td>
<td align="left">N</td>
<td align="left">1</td>
<td align="left">配置 Http 服务器的最小 work 线程数</td>
</tr>
<tr>
<td align="left">http.server.max_workers</td>
<td align="center">int</td>
<td align="left">N</td>
<td align="left">2</td>
<td align="left">配置 Http 服务器的最大 work 线程数</td>
</tr>
<tr>
<td align="left">http.server.accept_count</td>
<td align="center">int</td>
<td align="left">N</td>
<td align="left">1024</td>
<td align="left">配置 Http 服务器的最大排队请求数</td>
</tr>
<tr>
<td align="left">metrics.exporter</td>
<td align="center">String</td>
<td align="left">Y</td>
<td align="left">log.stdout</td>
<td align="left">配置用于导出监控指标的 Exporter 的类型<code>log.stdout</code>:以标准格式化结构输出到 stdout.log，<code>log.standard</code>: 以标准格式化结构输出到磁盘，<code>log.influxdb</code>: 以 InfluxDB LineProtocol 格式输出到磁盘，<code>http.influxdb</code>:以 InfluxDB LineProtocol 格式发送至 InfluxDB server</td>
</tr>
<tr>
<td align="left">metrics.log.method</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">data/logs/MyPerf4J/metrics.log</td>
<td align="left">配置方法性能监控指标的日志路径，NULL 表示丢弃收集到的监控指标</td>
</tr>
<tr>
<td align="left">metrics.log.class_loading</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">NULL</td>
<td align="left">配置类加载监控指标的日志路径，NULL 表示丢弃收集到的监控指标</td>
</tr>
<tr>
<td align="left">metrics.log.gc</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">NULL</td>
<td align="left">配置GC监控指标的日志路径，NULL 表示丢弃收集到的监控指标</td>
</tr>
<tr>
<td align="left">metrics.log.memory</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">NULL</td>
<td align="left">配置内存监控指标的日志路径，NULL 表示丢弃收集到的监控指标</td>
</tr>
<tr>
<td align="left">metrics.log.buff_pool</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">NULL</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">metrics.log.thread</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">NULL</td>
<td align="left">配置线程监控指标的日志路径，NULL 表示丢弃收集到的监控指标</td>
</tr>
<tr>
<td align="left">metrics.log.file_desc</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">NULL</td>
<td align="left">配置文件描述符监控指标的日志路径，NULL 表示丢弃收集到的监控指标</td>
</tr>
<tr>
<td align="left">metrics.log.compilation</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">NULL</td>
<td align="left">配置编译时间监控指标的日志路径，NULL 表示丢弃收集到的监控指标</td>
</tr>
<tr>
<td align="left">metrics.log.rolling.time_unit</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">DAILY</td>
<td align="left">配置日志文件滚动时间间隔，分别有 MINUTELY、HOURLY 和 DAILY 三个值</td>
</tr>
<tr>
<td align="left">metrics.log.reserve.count</td>
<td align="center">int</td>
<td align="left">N</td>
<td align="left">7</td>
<td align="left">配置历史日志文件保留个数</td>
</tr>
<tr>
<td align="left">metrics.time_slice.method</td>
<td align="center">int</td>
<td align="left">N</td>
<td align="left">60000</td>
<td align="left">配置方法指标采集的时间片，单位为 ms，最小 1s，最大 600s</td>
</tr>
<tr>
<td align="left">metrics.time_slice.jvm</td>
<td align="center">int</td>
<td align="left">N</td>
<td align="left">60000</td>
<td align="left">配置方法指标采集的时间片，单位为 ms，最小 1s，最大 600s</td>
</tr>
<tr>
<td align="left">metrics.method.show_params</td>
<td align="center">boolean</td>
<td align="left">N</td>
<td align="left">false</td>
<td align="left">是否展示方法参数类型</td>
</tr>
<tr>
<td align="left">metrics.method.class_level_mapping</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">配置 Java类的层级映射关系</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">recorder.mode    String</td>
<td align="center">N</td>
<td align="left">rough</td>
<td align="left">配置 RecordMode，包含 accurate 和 rough 两个模式</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">recorder.size.timing_arr</td>
<td align="center">int</td>
<td align="left">N</td>
<td align="left">1000</td>
<td align="left">配置通用的方法响应时间阈值，单位为 ms</td>
</tr>
<tr>
<td align="left">recorder.size.timing_map</td>
<td align="center">int</td>
<td align="left">N</td>
<td align="left">16</td>
<td align="left">配置通用的方法响应时间超出指定阈值的次数，仅在 RecorderMode=accurate 时有效</td>
</tr>
<tr>
<td align="left">recorders.backup_count</td>
<td align="center">Int</td>
<td align="left">N</td>
<td align="left">1</td>
<td align="left">配置备用 Recorders 的数量，最小 1，最大 8；当你的应用程序拥有非常多的方法需要监控并且你配置的MilliTimeSlice 比较小时，可以适当的提高 BackupRecordersCount 的数值。</td>
</tr>
<tr>
<td align="left">filter.packages.include</td>
<td align="center">String</td>
<td align="left">Yes</td>
<td align="left"></td>
<td align="left">配置需要进行监控的包的前缀，支持多个包路径，每个包路径用英文 ‘;’ 分隔；可以使用 [] 表示包/类的集合，形如：com.demo.[p1,p2,p3]；可以使用 * 表示通配符，形如：com.<em>.demo.</em></td>
</tr>
<tr>
<td align="left">filter.packages.exclude</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">“”</td>
<td align="left">配置不需要进行监控的包的前缀，支持多个包路径，每个包路径用英文 ‘;’ 分隔；可以使用 [] 表示包/类的集合，形如：com.demo.[p1,p2,p3]；可以使用 * 表示通配符，形如：com.<em>.demo.</em></td>
</tr>
<tr>
<td align="left">filter.methods.exclude</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">“”</td>
<td align="left">配置不需要进行监控的方法名，每个方法名用英文 ‘;’ 分隔</td>
</tr>
<tr>
<td align="left">filter.methods.exclude_private</td>
<td align="center">boolean</td>
<td align="left">N</td>
<td align="left">true</td>
<td align="left">配置是否要排除私有方法，可配置为true/false</td>
</tr>
<tr>
<td align="left">filter.class_loaders.exclude</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">“”</td>
<td align="left">配置不需要进行监控的 ClassLoader，支持多个 ClassLoader，每个 ClassLoader 路径用英文’;’分隔</td>
</tr>
<tr>
<td align="left">influxdb.version</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">1.0</td>
<td align="left">配置 InfluxDB 的 版本号</td>
</tr>
<tr>
<td align="left">influxdb.orgName</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">“”</td>
<td align="left">配置 InfluxDB 所属的组织名称，当 InfluxDB 为 v2.x 时为必填项</td>
</tr>
<tr>
<td align="left">influxdb.host</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">127.0.0.1</td>
<td align="left">配置 InfluxDB 的 IP 地址</td>
</tr>
<tr>
<td align="left">influxdb.port</td>
<td align="center">int</td>
<td align="left">N</td>
<td align="left">8086</td>
<td align="left">配置 InfluxDB 的端口号</td>
</tr>
<tr>
<td align="left">influxdb.database</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">“”</td>
<td align="left">配置 InfluxDB 的数据库名</td>
</tr>
<tr>
<td align="left">influxdb.username</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">“”</td>
<td align="left">配置 InfluxDB 的用户名</td>
</tr>
<tr>
<td align="left">influxdb.password</td>
<td align="center">String</td>
<td align="left">N</td>
<td align="left">“”</td>
<td align="left">配置 InfluxDB 的密码</td>
</tr>
<tr>
<td align="left">influxdb.conn_timeout</td>
<td align="center">int</td>
<td align="left">N</td>
<td align="left">3000</td>
<td align="left">配置 InfluxDB 的连接超时时间，单位为 ms</td>
</tr>
<tr>
<td align="left">influxdb.read_timeout</td>
<td align="center">int</td>
<td align="left">N</td>
<td align="left">5000</td>
<td align="left">配置 InfluxDB 的读超时时间，单位为 ms</td>
</tr>
</tbody></table>
<h3 id="2-1-关于-Rough模式-与-Accurate模式"><a href="#2-1-关于-Rough模式-与-Accurate模式" class="headerlink" title="2.1 关于 Rough模式 与 Accurate模式"></a>2.1 关于 Rough模式 与 Accurate模式</h3><ul>
<li>Rough 模式<ul>
<li>精度略差，会把响应时间超过指定阈值的记录为’阈值+1’</li>
<li>更加节省内存，只使用数组来记录响应时间</li>
<li>速度略快一些，但计算 Metrics 的速度略慢一些</li>
<li>在 MyPerf4JPropFile 配置文件中指定 recorder.mode = rough</li>
</ul>
</li>
</ul>
<ul>
<li><p>Accurate 模式</p>
<ul>
<li>精度高，会记录所有的响应时间</li>
<li>相对耗费内存，使用数组 + Map 来记录响应时间</li>
<li>速度略慢一些，但计算 Metrics 的速度略快一些</li>
<li>默认</li>
</ul>
</li>
</ul>
<ul>
<li><p>建议</p>
<ul>
<li>对于有以下特征的应用，推荐使用 Rough 模式</li>
<li>内存敏感</li>
<li>精度要求不是特别高</li>
<li>对于有以下特征的应用，推荐使用 Accurate 模式</li>
<li>内存不敏感</li>
<li>精度要求特别高</li>
<li>方法响应时间范围比较广</li>
<li>MyPerf4J 的版本号大于等于 2.8.0</li>
</ul>
</li>
</ul>
<h3 id="2-2-关于包路径规则"><a href="#2-2-关于包路径规则" class="headerlink" title="2.2 关于包路径规则"></a>2.2 关于包路径规则</h3><p><code>filter.packages.include</code> 和 <code>filter.packages.exclude</code> 目前支持以下三种规则：</p>
<ul>
<li><p>com.demo.p1 代表包含以 <code>com.demo.p1</code> 为前缀的所有包和类</p>
</li>
<li><p>[] 表示集合的概念：例如，<code>com.demo.[p1,p2,p3]</code> 代表包含以 <code>com.demo.p1</code>、<code>com.demo.p2</code> 和 <code>com.demo.p3</code> 为前缀的所有包和类，等价于 <code>com.demo.p1;com.demo.p2;com.demo.p3</code></p>
</li>
<li><p>* 表示通配符：可以指代零个或多个字符，例如: <code>com.*.demo.*</code></p>
</li>
</ul>
<h3 id="2-3-关于包路径规则"><a href="#2-3-关于包路径规则" class="headerlink" title="2.3 关于包路径规则"></a>2.3 关于包路径规则</h3><p><code>filter.methods.exclude</code> 目前支持以下三种规则：</p>
<ul>
<li><code>filter.methods.exclude = getId1</code> 代表排除所有方法名为 getId1 的方法</li>
<li><code>filter.methods.exclude = DemoServiceImpl.getId1</code> 代表排除类 DemoServiceImpl 中所有方法名为 getId1 的方法</li>
<li><code>filter.methods.exclude = DemoServiceImpl.getId1(long)</code> 代表排除类 DemoServiceImpl 中方法签名为 getId1(long) 的方法</li>
</ul>
<h3 id="2-4-关于-metrics-method-class-level-mapping-的使用规则"><a href="#2-4-关于-metrics-method-class-level-mapping-的使用规则" class="headerlink" title="2.4 关于 metrics.method.class_level_mapping 的使用规则"></a>2.4 关于 metrics.method.class_level_mapping 的使用规则</h3><p><code>metrics.method.class_level_mapping</code> 用于配置 Class 层级映射关系，格式为：LevelA:[classNameExpA1,classNameExpA2];LevelB:[classNameExpB1,classNameExpB2]，以 metrics.method.class_level_mapping = Api:[*Api,*ApiImpl];Controller:[*Controller];为例：</p>
<ul>
<li><code>Api:[*Api,*ApiImpl]</code> 代表所有以 Api 和 ApiImpl 结尾的类的层级为 Api</li>
<li><code>Controller:[*Controller]</code> 代表所有以 Controller 结尾的类的层级为 Controller</li>
</ul>
]]></content>
      <categories>
        <category>13 开源组件</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring注解装配方式</title>
    <url>/spring-injection/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><strong>1. <a href="#part1">实例注入方式</a></strong><br><strong>2. <a href="#part2">@Autowired, @Resource, @Inject 三个注解的区别</a></strong><br><strong>3. <a href="#part3">@Autowired Field injection is not recommended</a></strong><br><strong>4. <a href="#part4">总结</a></strong></p>
<h2 id="1-实例注入方式"><a href="#1-实例注入方式" class="headerlink" title="1. 实例注入方式"></a><span id="part1">1. 实例注入方式</span></h2><p>spring注入的方式有三种：</p>
<ol>
<li>属性field注入</li>
<li>setter方法注入</li>
<li>构造方法constructor注入</li>
</ol>
<p>下面就分别看下这三种方式注入的区别</p>
<h4 id="1-1-属性field注入"><a href="#1-1-属性field注入" class="headerlink" title="1.1 属性field注入"></a>1.1 属性field注入</h4><p>属性注入是大家最为常见也是使用最多的一种注入方式，就是在bean的变量上使用注解进行依赖注入，本质上是通过反射的方式直接注入到field。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BService</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AService aService;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里使用<code>@Autowired</code>注解注入，另外也有<code>Resource</code>以及<code>@Inject</code>等注解，都可以实现注入。</p>
<p>但是当我们使用<code>@Autowired</code>注解注入时，却出现Field injection is not recommended的警告，这是为什么？且看下文。</p>
<h4 id="1-2-setter方法注入"><a href="#1-2-setter方法注入" class="headerlink" title="1.2 setter方法注入"></a>1.2 setter方法注入</h4><p>set 方法注入太过于臃肿，实际上很少使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BService</span></span>&#123;</span><br><span class="line">    AService aService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setaService</span><span class="params">(AService aService)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aService = aService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注：在 Spring 4.3 及以后的版本中，setter 上面的 @Autowired 注解是可以不写的。</p>
</blockquote>
<h4 id="1-3-构造方法注入"><a href="#1-3-构造方法注入" class="headerlink" title="1.3 构造方法注入"></a>1.3 构造方法注入</h4><p>构造方法注入方式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BService</span></span>&#123;</span><br><span class="line">    AService aService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BService</span><span class="params">(AService aService)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.aService = aService;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果类只有一个构造方法，那么<code>@Autowired</code>注解可以省略；如果有多个构造方法，那么需要添加上<code>@Autowired</code>注解来明确指定使用哪个构造方法</p>
<h4 id="1-4-属性field注入优缺点"><a href="#1-4-属性field注入优缺点" class="headerlink" title="1.4 属性field注入优缺点"></a>1.4 属性field注入优缺点</h4><p>好处：方式简洁，代码简单；</p>
<p>坏处：</p>
<ul>
<li><p>容易违背了单一职责原则，使用这种基于field注入的方式，添加依赖是很简单的，就算类中有十几个依赖你可能都觉得没有什么问题，但是拥有太多的依赖通常意味着你的类要承担更多的责任，明显违背了单一职责原则(SRP：Single responsibility principle)</p>
</li>
<li><p>依赖注入与容器本身耦合：依赖注入框架的核心思想之一就是受容器管理的类不应该去依赖容器所使用的依赖。换句话说，这个类应该是一个简单的POJO能够被单独实例化并且能为它提供所需的依赖；这个问题具体可以表现在</p>
<ul>
<li>类和依赖容器强耦合，不能在容器外使用</li>
<li>类不能绕过反射（例如单元测试的时候）进行实例化，必须通过依赖容器才能实例化</li>
</ul>
</li>
<li><p>不能使用属性注入的方式构建不可变对象（final修饰的变量）</p>
</li>
</ul>
<h4 id="1-5-Spring-开发团队的建议"><a href="#1-5-Spring-开发团队的建议" class="headerlink" title="1.5 Spring 开发团队的建议"></a>1.5 Spring 开发团队的建议</h4><blockquote>
<p>Since you can mix constructor-based and setter-based DI, it is a good rule of thumb to use constructors for mandatory dependencies and setter methods or configuration methods for optional dependencies.</p>
</blockquote>
<p>简单的说，就是</p>
<ul>
<li><p>强制依赖就用构造器凡事</p>
</li>
<li><p>可选、可变的依赖就用setter注入</p>
<p> 当然你可以在同一个类中使用这两种方法。构造器注入更适合强制性的注入旨在不变性，Setter注入更适合可变性的注入</p>
</li>
</ul>
<ol>
<li>基于构造方法注入<blockquote>
<p>The Spring team generally advocates constructor injection as it enables one to implement application components as immutable objects and to ensure that required dependencies are not null. Furthermore constructor-injected components are always returned to client (calling) code in a fully initialized state. As a side note, a large number of constructor arguments is a bad code smell, implying that the class likely has too many responsibilities and should be refactored to better address proper separation of concerns.</p>
</blockquote>
Spring 团队提倡使用基于构造方法的注入，因为这样一方面可以将依赖注入到一个不可变的变量中 (注：final 修饰的变量) ，另一方面也可以保证这些变量的值不会是 null 。此外，经过构造方法完成依赖注入的组件 (注：比如各个 service)，在被调用时可以保证它们都完全准备好了 。与此同时，从代码质量的角度来看，一个巨大的构造方法通常代表着出现了代码异味，这个类可能承担了过多的责任 。</li>
</ol>
<ol start="2">
<li>基于setter注入<blockquote>
<p>Setter injection should primarily only be used for optional dependencies that can be assigned reasonable default values within the class. Otherwise, not-null checks must be performed everywhere the code uses the dependency. One benefit of setter injection is that setter methods make objects of that class amenable to reconfiguration or re-injection later.</p>
</blockquote>
基于 setter 的注入，则只应该被用于注入非必需的依赖，同时在类中应该对这个依赖提供一个合理的默认值。如果使用 setter 注入必需的依赖，那么将会有过多的 null 检查充斥在代码中。使用 setter 注入的一个优点是，这个依赖可以很方便的被改变或者重新注入 。</li>
</ol>
<h2 id="2-Autowired-Resource-Inject-三个注解的区别"><a href="#2-Autowired-Resource-Inject-三个注解的区别" class="headerlink" title="2. @Autowired, @Resource, @Inject 三个注解的区别"></a><span id="part2">2. @Autowired, @Resource, @Inject 三个注解的区别</span></h2><p>Spring 支持使用<code>@Autowired</code>、<code>@Resource</code>、<code>@Inject</code>三个注解进行依赖注入，下面就来介绍一下这三个注解的区别。</p>
<h3 id="2-1-Autowired"><a href="#2-1-Autowired" class="headerlink" title="2.1 @Autowired"></a>2.1 @Autowired</h3><p>@Autowired为Spring框架提供的注解，需要导入包<code>org.springframework.beans.factory.annotation.Autowired</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">true<span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从Autowired注解源码上看，可以作用在：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.CONSTRUCTOR)</span> <span class="comment">//构造函数</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">//方法</span></span><br><span class="line"><span class="meta">@Target(ElementType.PARAMETER)</span> <span class="comment">//方法参数</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span> <span class="comment">//字段、枚举的常量</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span> <span class="comment">//注解</span></span><br></pre></td></tr></table></figure>
<p>@Autowired是Spring自带的注解，通过<code>AutowiredAnnotationBeanPostProcessor</code>类实现的依赖注入</p>
<p>下面就通过一段代码来了解它。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Svc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SvcA</span> <span class="keyword">implements</span> <span class="title">Svc</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello, this is service A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">// @Qualifier(&quot;svcA&quot;)</span></span><br><span class="line">    Svc svc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assertions.assertNotNull(svc);</span><br><span class="line">        svc.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@Qualifier(“XXX”) 中的 XX是 <code>Bean</code> 的名称，所以 @Autowired 和 @Qualifier 结合使用时，自动注入的策略就从 byType 转变成 byName 了<br>注意：使用@Qualifier 时候，如何设置的指定名称的Bean不存在，则会抛出异常，如果防止抛出异常，可以使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Qualifier(&quot;xxxxyyyy&quot;)</span></span><br><span class="line"><span class="meta">@Autowired(required = false)</span></span><br><span class="line"><span class="keyword">private</span> Svc svc;</span><br></pre></td></tr></table></figure>

<p><strong>装配顺序：</strong></p>
<ol>
<li><p>按照<code>type</code>在上下文查看匹配的bean</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查找type为Svc的bean</span><br></pre></td></tr></table></figure></li>
<li><p>如果有多个bean, 则按照<code>name</code>进行匹配</p>
</li>
</ol>
<ol start="3">
<li>判断是否有<code>@Qualifier</code>注解 a. 如果有<code>@Qualifier</code>注解，则按照<code>@Qualifier</code>指定的name进行匹配<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查找name为svcA的bean</span><br></pre></td></tr></table></figure>
 b. 如果没有，则按照变量名进行匹配 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查找name为svc的bean</span><br></pre></td></tr></table></figure></li>
<li>匹配不到，则报错。（<code>@Autowired(required=false)</code>，如果设置<code>required</code>为<code>false</code>(默认为<code>true</code>)，则注入失败时不会抛出异常）</li>
</ol>
<h3 id="2-2-Inject"><a href="#2-2-Inject" class="headerlink" title="2.2 @Inject"></a>2.2 @Inject</h3><p><code>@Inject</code>是JSR330 (Dependency Injection for Java)中的规范，需要导入<code>javax.inject.Inject</code> jar包，才能实现注入</p>
<p><code>@Inject</code>是根据类型进行自动装配的，如果需要按名称进行装配，则需要配合@Named</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Inject &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从<code>@Inject</code>注解源码上看，可以使用在以下地方：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.CONSTRUCTOR)</span> <span class="comment">//构造函数</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">//方法</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span>  <span class="comment">//字段、枚举的常量</span></span><br></pre></td></tr></table></figure>
<p>在Spring 的环境下，<code>@Inject</code>和<code>@Autowired</code> 是相同的 ，因为它们的依赖注入都是使用<code>AutowiredAnnotationBeanPostProcessor</code>来处理的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AutowiredAnnotationBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">InstantiationAwareBeanPostProcessorAdapter</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">MergedBeanDefinitionPostProcessor</span>, <span class="title">PriorityOrdered</span>, <span class="title">BeanFactoryAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//........省略........</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="title">AutowiredAnnotationBeanPostProcessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">truetrue<span class="keyword">this</span>.autowiredAnnotationTypes.add(Autowired.class);</span><br><span class="line">truetrue<span class="keyword">this</span>.autowiredAnnotationTypes.add(Value.class);</span><br><span class="line">truetrue<span class="keyword">try</span> &#123;</span><br><span class="line">truetruetrue<span class="keyword">this</span>.autowiredAnnotationTypes.add((Class&lt;? extends Annotation&gt;)</span><br><span class="line">truetruetruetruetrueClassUtils.forName(<span class="string">&quot;javax.inject.Inject&quot;</span>, AutowiredAnnotationBeanPostProcessor.class.getClassLoader()));</span><br><span class="line">truetruetruelogger.info(<span class="string">&quot;JSR-330 &#x27;javax.inject.Inject&#x27; annotation found and supported for autowiring&quot;</span>);</span><br><span class="line">truetrue&#125;</span><br><span class="line">truetrue<span class="keyword">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class="line">truetruetrue<span class="comment">// JSR-330 API not available - simply skip.</span></span><br><span class="line">truetrue&#125;</span><br><span class="line">true&#125;</span><br><span class="line">       <span class="comment">//........省略........   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单使用代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inject</span></span><br><span class="line"><span class="meta">@Named(&quot;svcA&quot;)</span></span><br><span class="line"><span class="keyword">private</span> SvcA asvc;</span><br></pre></td></tr></table></figure>
<p><code>@Named</code>的作用类似 <code>@Qualifier</code>！</p>
<p>区别：@Inject是Java EE包里的，在SE环境需要单独引入。另一个区别在于@Autowired可以设置required=false而@Inject并没有这个属性</p>
<h3 id="2-3-Resource"><a href="#2-3-Resource" class="headerlink" title="2.3 @Resource"></a>2.3 @Resource</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Resource &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    <span class="function">String <span class="title">lookup</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    Class&lt;?&gt; type() <span class="keyword">default</span> java.lang.Object.class;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">AuthenticationType</span> </span>&#123;</span><br><span class="line">            CONTAINER,</span><br><span class="line">            APPLICATION</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">AuthenticationType <span class="title">authenticationType</span><span class="params">()</span> <span class="keyword">default</span> AuthenticationType.CONTAINER</span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">shareable</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">mappedName</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">    <span class="function">String <span class="title">description</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从<code>@Resource</code>注解源码上看，可以使用在以下地方：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span> <span class="comment">//Class, interface (including annotation type), or enum declaration</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span> <span class="comment">//方法</span></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span> <span class="comment">//字段、枚举的常量</span></span><br></pre></td></tr></table></figure>
<p><code>@Resource</code>是JSR-250定义的注解。Spring 在 <code>CommonAnnotationBeanPostProcessor</code>实现了对JSR-250的注解的处理，其中就包括<code>@Resource</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonAnnotationBeanPostProcessor</span> <span class="keyword">extends</span> <span class="title">InitDestroyAnnotationBeanPostProcessor</span></span></span><br><span class="line"><span class="class">		<span class="keyword">implements</span> <span class="title">InstantiationAwareBeanPostProcessor</span>, <span class="title">BeanFactoryAware</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//........省略........   </span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> PropertyValues <span class="title">postProcessPropertyValues</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">           PropertyValues pvs, PropertyDescriptor[] pds, Object bean, String beanName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      InjectionMetadata metadata = findResourceMetadata(beanName, bean.getClass(), pvs);</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         metadata.inject(bean, beanName, pvs);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> BeanCreationException(beanName, <span class="string">&quot;Injection of resource dependencies failed&quot;</span>, ex);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> pvs;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//........省略........   </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>@Resource有两个重要的属性：<code>name</code>和<code>type</code>，而Spring 将<code>@Resource</code>注解的name属性解析为bean的名字，而type属性则解析为bean的类型。</p>
<p><strong>装配顺序：</strong></p>
<ol>
<li>如果同时指定了name和type，则从Spring上下文中找到唯一匹配的bean进行装配，找不到则抛出异常。</li>
<li>如果指定了name，则从上下文中查找名称（id）匹配的bean进行装配，找不到则抛出异常。</li>
<li>如果指定了type，则从上下文中找到类型匹配的唯一bean进行装配，找不到或是找到多个，都会抛出异常。</li>
<li>如果既没有指定name，又没有指定type，则默认按照byName方式进行装配；如果没有匹配，按照byType进行装配。</li>
</ol>
<h2 id="3-Autowired-Field-injection-is-not-recommended"><a href="#3-Autowired-Field-injection-is-not-recommended" class="headerlink" title="3. @Autowired Field injection is not recommended"></a><span id="part3">3. @Autowired Field injection is not recommended</span></h2><p>在使用IDEA进行Spring开发时，使用<code>@Autowired</code>注解的时候，会发现IDEA会有警告显示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Field injection is not recommended</span><br><span class="line"></span><br><span class="line">Inspection info: Spring Team Recommends: &quot;Always use constructor based dependency injection in your beans. Always use assertions for mandatory dependencies&quot;.</span><br></pre></td></tr></table></figure>
<p>大致的意思就是：</p>
<blockquote>
<p>不建议使用基于 field 的注入方式。</p>
</blockquote>
<blockquote>
<p>Spring 开发团队建议：在你的Spring Bean 永远使用基于constructor 的方式进行依赖注入。对于必须的依赖，永远使用断言来确认。</p>
</blockquote>
<p>比如以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelpService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;svcB&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Svc svc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        svc.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Svc</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SvcB</span> <span class="keyword">implements</span> <span class="title">Svc</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello, this is service B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改为Constructor的注入方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelpService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Svc svc;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelpService</span><span class="params">(<span class="meta">@Qualifier(&quot;svcB&quot;)</span> Svc svc)</span> </span>&#123;</span><br><span class="line">        Assert.notNull(svc, <span class="string">&quot;svc must not be null&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.svc = svc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        svc.sayHello();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果按照Spring团段的建议，如果<code>svc</code>是必须的依赖，应该使用<code>Assert.notNull(svc, &quot;svc must not be null&quot;);</code>来确认</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a><span id="part4">4. 总结</span></h2><h3 id="4-1-Autowired总结"><a href="#4-1-Autowired总结" class="headerlink" title="4.1 @Autowired总结"></a>4.1 @Autowired总结</h3><p><strong>@Autowired注解总结</strong></p>
<ol>
<li><p>可用于构造函数，成员变量以及set方法</p>
</li>
<li><p>从Spring 4.3开始，如果目标Bean只有一个构造函数，则在该构造函数上可以省略@Autowired注解；如果目标Bean有多个构造函数则不可省略</p>
</li>
</ol>
<p><strong>@Autowired注入方式：</strong></p>
<ul>
<li><p>按照type查找bean，如果使用@Qualifier注解声明了name，则从结果集中取出与该name相匹配的bean返回（此时可以视为通过name和type获取bean，但实质是先通过type获取所有bean，然后通过name筛选，详情见后文findAutowireCandidates()方法源码分析）</p>
</li>
<li><p>如果没有使用@Qualifier注解，且找到多个bean，则判断这些bean中是否有使用@Primary注解和@Priority注解，有就返回优先级最高的哪一个bean，没有就按照字段名称去匹配bean，匹配成功返回，不成功抛出异常。（详情见后文determineAutowireCandidate()方法源码解析）</p>
</li>
</ul>
<h3 id="4-2-Resource总结"><a href="#4-2-Resource总结" class="headerlink" title="4.2 @Resource总结"></a>4.2 @Resource总结</h3><ol>
<li><p>可用于成员变量以及set方法</p>
</li>
<li><p>若不指定name属性，则会把name属性值处理为字段名或set方法标识的字段名称</p>
</li>
<li><p>若指定type属性，则type属性值必须与字段类型或set方法返回值类型为父子关系（type属性值可以是子类，也可以是超类），否则会抛出异常</p>
</li>
<li><p>@Resource先按照name属性值注入，若未找到，则按type属性值注入。即默认的name或指定的name找不到 bean ，就会按 type 注入</p>
</li>
</ol>
<h3 id="4-3-Inject总结"><a href="#4-3-Inject总结" class="headerlink" title="4.3 @Inject总结"></a>4.3 @Inject总结</h3><ol>
<li><p>@Inject是JSR330 (Dependency Injection for Java)中的规范，需要导入javax.inject.Inject jar包 ，才能实现注入</p>
</li>
<li><p>@Inject可以作用CONSTRUCTOR、METHOD、FIELD上</p>
</li>
<li><p>@Inject是根据类型进行自动装配的，如果需要按名称进行装配，则需要配合@Named；</p>
</li>
</ol>
<h3 id="4-4-总结"><a href="#4-4-总结" class="headerlink" title="4.4 总结"></a>4.4 总结</h3><p>1、@Autowired是Spring自带的，@Resource是JSR250规范实现的，@Inject是JSR330规范实现的</p>
<p>2、@Autowired、@Inject用法基本一样，不同的是@Inject没有一个request属性</p>
<p>3、@Autowired、@Inject是默认按照类型匹配的，@Resource是按照名称匹配的，@Autowired默认是byType可以使用@Qualifier指定Name，@Resource默认ByName如果找不到则ByType</p>
<p>4、@Autowired如果需要按照名称匹配需要和@Qualifier一起使用，@Inject和@Name一起使用，@Resource则通过name进行指定</p>
<p>5、@Autowired可以对构造器、方法、参数、字段使用，@Resource只能对方法、字段使用， @Inject可以对构造函数、方法、字段、枚举的常量使用</p>
]]></content>
      <categories>
        <category>02 Spring</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot+Disruptor</title>
    <url>/springboot-disruptor/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h2 id="1-Disruptor介绍"><a href="#1-Disruptor介绍" class="headerlink" title="1. Disruptor介绍"></a>1. Disruptor介绍</h2><ol>
<li><p>Disruptor 是英国外汇交易公司LMAX开发的一个高性能队列，研发的初衷是解决内存队列的延迟问题（在性能测试中发现竟然与I/O操作处于同样的数量级）。基于 Disruptor 开发的系统单线程能支撑每秒 600 万订单，2010 年在 QCon 演讲后，获得了业界关注</p>
</li>
<li><p>Disruptor是一个开源的Java框架，它被设计用于在生产者—消费者（producer-consumer problem，简称PCP）问题上获得尽量高的吞吐量（TPS）和尽量低的延迟</p>
</li>
<li><p>从功能上来看，Disruptor 是实现了“队列”的功能，而且是一个有界队列。那么它的应用场景自然就是“生产者-消费者”模型的应用场合了</p>
</li>
<li><p>Disruptor是LMAX在线交易平台的关键组成部分，LMAX平台使用该框架对订单处理速度能达到600万TPS，除金融领域之外，其他一般的应用中都可以用到Disruptor，它可以带来显著的性能提升</p>
</li>
<li><p>其实Disruptor与其说是一个框架，不如说是一种设计思路，这个设计思路对于存在“并发、缓冲区、生产者—消费者模型、事务处理”这些元素的程序来说，Disruptor提出了一种大幅提升性能（TPS）的方案</p>
</li>
<li><p>Disruptor的github主页：<a href="https://github.com/LMAX-Exchange/disruptor">https://github.com/LMAX-Exchange/disruptor</a></p>
</li>
</ol>
<h2 id="2-Disruptor核心概念"><a href="#2-Disruptor核心概念" class="headerlink" title="2. Disruptor核心概念"></a>2. Disruptor核心概念</h2><p>先从连接Disruptor的核心概念开始，来了解它是如何运作的，下面介绍的概念模型，既是领域对象，也是映射到代码实现的核心对象<br><img src="/springboot-disruptor/index/1.png" alt="核心架构图"></p>
<h3 id="2-1-Ring-Buffer"><a href="#2-1-Ring-Buffer" class="headerlink" title="2.1 Ring Buffer"></a>2.1 Ring Buffer</h3><blockquote>
<p>环形的缓冲区，曾经<code>RingBuffer</code>是<code>Disruptor</code>中最主要的对象，但从3.0 版本开始，其职责被简化为仅仅负责对通过<code>Disruptor</code>进行交换的数据（事件）进行存储和更新。在一些更高级的应用场景中， RingBuffer可以由用户的自定义实现来完全替代</p>
</blockquote>
<h3 id="2-2-Sequence-Disruptor"><a href="#2-2-Sequence-Disruptor" class="headerlink" title="2.2 Sequence Disruptor"></a>2.2 Sequence Disruptor</h3><blockquote>
<p>通过顺序递增的序号来管理通过其进行交换的数据（事件），对数据（事件）的处理过程总是沿着序号逐个递增处理。一个sequence用于跟踪标识某个特定的事件处理者（RingBuffer/Consumer）的处理进度，虽然一个 AtomicLong也可以用于标识进度，但定义sequence来负责该问题还有另一个目的，就是防不同的sequence之间的CPU缓存伪共享（False Sharing）问题。</p>
</blockquote>
<h3 id="2-3-Sequencer"><a href="#2-3-Sequencer" class="headerlink" title="2.3 Sequencer"></a>2.3 Sequencer</h3><blockquote>
<p>Sequencer是Disruptor的真正核心。此接口有两个实现类<code>SingleProducerSequencer</code>和<code>MultiProducerSequencer</code>，他们定义在生产者和消费者之间快速、正确地传递数据的并发算法。</p>
</blockquote>
<h3 id="2-4-Sequence-Barrier"><a href="#2-4-Sequence-Barrier" class="headerlink" title="2.4 Sequence Barrier"></a>2.4 Sequence Barrier</h3><blockquote>
<p>用于保持对RingBuffer的 main published Sequence 和Consumer依赖的其它Consumer的 Sequence 的引用。Sequence Barrier 还定义了决定 Consumer 是否还有可处理的事件的逻辑。</p>
</blockquote>
<h3 id="2-5-Wait-Strategy"><a href="#2-5-Wait-Strategy" class="headerlink" title="2.5 Wait Strategy"></a>2.5 Wait Strategy</h3><blockquote>
<p>定义 Consumer 如何进行等待下一个事件的策略。（注：Disruptor 定义了多种不同的策略，针对不同的场景，提供了不一样的性能表现）</p>
</blockquote>
<h3 id="2-6-Event"><a href="#2-6-Event" class="headerlink" title="2.6 Event"></a>2.6 Event</h3><blockquote>
<p>在 Disruptor 的语义中，生产者和消费者之间进行交换的数据被称为事件(Event)。它不是一个被 Disruptor 定义的特定类型，而是由 Disruptor 的使用者定义并指定。</p>
</blockquote>
<h3 id="2-7-EventProcessor"><a href="#2-7-EventProcessor" class="headerlink" title="2.7 EventProcessor"></a>2.7 EventProcessor</h3><blockquote>
<p>EventProcessor 持有特定消费者(Consumer)的 Sequence，并提供用于调用事件处理实现的事件循环(Event Loop)。</p>
</blockquote>
<h3 id="2-8-EventHandler"><a href="#2-8-EventHandler" class="headerlink" title="2.8 EventHandler"></a>2.8 EventHandler</h3><blockquote>
<p>Disruptor 定义的事件处理接口，由用户实现，用于处理事件，是 Consumer 的真正实现。</p>
</blockquote>
<h3 id="2-9-Producer"><a href="#2-9-Producer" class="headerlink" title="2.9 Producer"></a>2.9 Producer</h3><blockquote>
<p>即生产者，只是泛指调用 Disruptor 发布事件的用户代码，Disruptor 没有定义特定接口或类型。</p>
</blockquote>
<p><img src="/springboot-disruptor/index/2.png"></p>
<h2 id="3-案例Demo"><a href="#3-案例Demo" class="headerlink" title="3. 案例Demo"></a>3. 案例Demo</h2><ol>
<li>添加pom.xml依赖 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 主要的 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.lmax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>disruptor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="2">
<li>消息体Model <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>构造EventFactory <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloEventFactory</span> <span class="keyword">implements</span> <span class="title">EventFactory</span>&lt;<span class="title">MessageModel</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageModel <span class="title">newInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MessageModel();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>构造EventHandler - 消费者 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloEventHandler</span> <span class="keyword">implements</span> <span class="title">EventHandler</span>&lt;<span class="title">MessageModel</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEvent</span><span class="params">(MessageModel messageModel, <span class="keyword">long</span> l, <span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//这里停顿1000ms是为了确定消费消息是异步的</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            log.info(<span class="string">&quot;消费者处理消息开始&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (messageModel != <span class="keyword">null</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;消费者消费的消息是：&#123;&#125;&quot;</span>, messageModel);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;消费者处理消息失败&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;消费者处理消息结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>构造BeanManager <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取实例化对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanManager</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ApplicationContext applicationContext = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        BeanManager.applicationContext = applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> applicationContext.getBean(clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>构造MQManager <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MQManager</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;messageModel&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RingBuffer&lt;MessageModel&gt; <span class="title">messageModelRingBuffer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ExecutorService executor = Executors.newFixedThreadPool(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指定事件工厂</span></span><br><span class="line">        HelloEventFactory factory = <span class="keyword">new</span> HelloEventFactory();</span><br><span class="line">        <span class="comment">//指定ringBuffer字节大小，必须为2的N次方，能将求模运算转为位运算提高效率，否则将影响效率</span></span><br><span class="line">        <span class="keyword">int</span> bufferSize = <span class="number">1024</span> * <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">        Disruptor&lt;MessageModel&gt; disruptor = <span class="keyword">new</span> Disruptor&lt;&gt;(factory, bufferSize, executor, ProducerType.SINGLE, <span class="keyword">new</span> BlockingWaitStrategy());</span><br><span class="line">        <span class="comment">//设置事件业务处理器---消费者</span></span><br><span class="line">        disruptor.handleEventsWith(<span class="keyword">new</span> HelloEventHandler());</span><br><span class="line">        <span class="comment">//启动disruptor线程</span></span><br><span class="line">        disruptor.start();</span><br><span class="line">        <span class="comment">//获取ringBuffer环， 用于接收生产者生产的事件</span></span><br><span class="line">        RingBuffer&lt;MessageModel&gt; ringBuffer = disruptor.getRingBuffer();</span><br><span class="line">        <span class="keyword">return</span> ringBuffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>构造MqService和实现类- 生产者 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DisruptorMqService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHelloMq</span><span class="params">(String message)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 实现类： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DsiruptorMqServiceImpl</span> <span class="keyword">implements</span> <span class="title">DisruptorMqService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RingBuffer&lt;MessageModel&gt; messageModelRingBuffer;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> message 消息内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHelloMq</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;record the message:&#123;&#125;&quot;</span>, message);</span><br><span class="line">        <span class="comment">//获取下一个Event槽的下标</span></span><br><span class="line">        <span class="keyword">long</span> sequence = messageModelRingBuffer.next();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            MessageModel event = messageModelRingBuffer.get(sequence);</span><br><span class="line">            event.setMessage(message);</span><br><span class="line">            log.info(<span class="string">&quot;网消息队列中添加消息:&#123;&#125;&quot;</span>,event);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;添加失败:&#123;&#125;&quot;</span>,e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//发布Event，激活观察者去消费，将sequence传递给消费者</span></span><br><span class="line">            <span class="comment">//注意最后的publish方法必须放在finally中以确保必须调用；如果某个请求的sequence未被提交将会堵塞后续的发布操作或者其他的producer</span></span><br><span class="line">            messageModelRingBuffer.publish(sequence);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>构造测试类以及方法 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = App.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DisruptorMqService disruptorMqService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHelloTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       disruptorMqService.sayHelloMq(<span class="string">&quot;消息到了， hello world !&quot;</span>);</span><br><span class="line">       log.info(<span class="string">&quot;消息队列以发送完毕&quot;</span>);</span><br><span class="line">       <span class="comment">//这里停顿2000ms是为了确定处理消息是异步的</span></span><br><span class="line">       Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
运行结果： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2023-01-10 20:44:15.461  INFO 7643 --- [           main] org.example.DsiruptorMqServiceImpl       : record the message:消息到了， hello world !</span><br><span class="line">2023-01-10 20:44:15.463  INFO 7643 --- [           main] org.example.DsiruptorMqServiceImpl       : 网消息队列中添加消息:MessageModel(message=消息到了， hello world !)</span><br><span class="line">2023-01-10 20:44:15.463  INFO 7643 --- [           main] org.example.AppTest                      : 消息队列以发送完毕</span><br><span class="line">2023-01-10 20:44:16.467  INFO 7643 --- [pool-1-thread-1] org.example.handler.HelloEventHandler    : 消费者处理消息开始</span><br><span class="line">2023-01-10 20:44:16.468  INFO 7643 --- [pool-1-thread-1] org.example.handler.HelloEventHandler    : 消费者消费的消息是：MessageModel(message=消息到了， hello world !)</span><br><span class="line">2023-01-10 20:44:16.468  INFO 7643 --- [pool-1-thread-1] org.example.handler.HelloEventHandler    : 消费者处理消息结束</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p>其实生产者-消费者模式是很常见的，通过一些消息队列也可以轻松做到上述的效果，不同的地方在于：<strong>Disruptor是在内存中以队列的方式去实现的，而且是无锁的。这也是 Disruptor 为什么高效的原因</strong></p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot集成轻量级内存数据库H2</title>
    <url>/springboot-h2/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-什么是H2内存数据库"><a href="#1-什么是H2内存数据库" class="headerlink" title="1. 什么是H2内存数据库"></a>1. 什么是H2内存数据库</h3><blockquote>
<p>H2是一个用Java开发的嵌入式数据库，它本身是一个类库，可以直接嵌入到项目中</p>
</blockquote>
<p>官网地址：<a href="http://www.h2database.com/html/download.html">H2数据库</a></p>
<h4 id="1-1-H2用途"><a href="#1-1-H2用途" class="headerlink" title="1.1. H2用途"></a>1.1. H2用途</h4><ul>
<li><p>H2最大的用途在于可以同应用程序打包在一起发布，这样可以非常方便地少量结构化数据</p>
</li>
<li><p><strong>用于单元测试</strong>，启动速度块，而且可以关闭持久化功能，每一个用例执行完随机还原到初始状态</p>
</li>
<li><p><strong>作为缓存</strong>，作为NoSQL的一个补充。当某些场景下数据模型必须为关系型，可以把它当Memcached使，作为后端Mysql/Oracle的一个缓冲层，缓存一些不经常变化但需要频繁访问的数据，比如字电表、、权限表。不过这样系统架构就会比较复杂了。</p>
</li>
</ul>
<h4 id="1-2-H2的产品优势"><a href="#1-2-H2的产品优势" class="headerlink" title="1.2. H2的产品优势"></a>1.2. H2的产品优势</h4><ul>
<li><p>纯Java编写，不受平台的限制</p>
</li>
<li><p>只有一个jar文件，适合作为嵌入式数据库使用</p>
</li>
<li><p>H2提供了一个时份翻边的web控制台用于操作和管理数据库内容</p>
</li>
<li><p>功能完整，支持标准sql和jdbc</p>
</li>
<li><p>支持内嵌模式、服务器模式和集群</p>
</li>
</ul>
<h3 id="2-Springboot集成H2"><a href="#2-Springboot集成H2" class="headerlink" title="2. Springboot集成H2"></a>2. Springboot集成H2</h3><h4 id="2-1-添加H2以及相关依赖"><a href="#2-1-添加H2以及相关依赖" class="headerlink" title="2.1. 添加H2以及相关依赖"></a>2.1. 添加H2以及相关依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-配置H2相关参数"><a href="#2-2-配置H2相关参数" class="headerlink" title="2.2. 配置H2相关参数"></a>2.2. 配置H2相关参数</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">schema:</span> <span class="string">classpath:db/schema.sql</span>   <span class="comment">#指定数据表结构文件所在目录</span></span><br><span class="line">    <span class="attr">data:</span> <span class="string">classpath:db/data.sql</span>   <span class="comment">#指定数据文件所在目录</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:h2:mem:test</span>   <span class="comment"># 内存模式，数据不会持久化</span></span><br><span class="line">    <span class="comment">#url:jdbc:h2:~/test  嵌入模式，数据文件存储在用户目录test开头的文件中</span></span><br><span class="line">    <span class="comment">#url:jdbc:h2:tcp//localhost/〜/test 远程模式，访问远程的h2 数据库</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">sa</span>    <span class="comment">#用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span>  <span class="comment">#密码</span></span><br><span class="line">    <span class="attr">platform:</span> <span class="string">h2</span></span><br><span class="line">  <span class="attr">h2:</span></span><br><span class="line">    <span class="attr">console:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/h2</span>           <span class="comment">#H2控制台访问路径</span></span><br><span class="line">      <span class="attr">settings:</span></span><br><span class="line">        <span class="attr">web-allow-others:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">open-in-view:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>其中在<code>resources/db</code>下创建表结构schema.sql</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> sys_user(</span><br><span class="line">    USER_ID <span class="type">int</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    USER_NAME <span class="type">varchar</span>(<span class="number">200</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>以及数据文件 data.sql，作为初始化数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 字段都是大写的</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SYS_USER (USER_ID, USER_NAME) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">&#x27;小余哥&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SYS_USER (USER_ID, USER_NAME) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> SYS_USER (USER_ID, USER_NAME) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">&#x27;李四&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="2-3-实体关联表"><a href="#2-3-实体关联表" class="headerlink" title="2.3. 实体关联表"></a>2.3. 实体关联表</h4><p>给User添加@Entity注解和@Table注解</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name=&quot;sys_user&quot;)</span></span><br><span class="line"><span class="meta">@Proxy(lazy = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * userName 对应数据库  USER_NAME</span></span><br><span class="line"><span class="comment">     * username 对应数据库 USERNAME</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;USER_NAME&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//----------省略getter/setter-----</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-创建Dao继承JpaRepository"><a href="#2-4-创建Dao继承JpaRepository" class="headerlink" title="2.4. 创建Dao继承JpaRepository"></a>2.4. 创建Dao继承JpaRepository</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="2-5-创建测试类"><a href="#2-5-创建测试类" class="headerlink" title="2.5. 创建测试类"></a>2.5. 创建测试类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUserName(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">        userRepository.save(user);</span><br><span class="line">        <span class="comment">//Hibernate: insert into sys_user (user_name, user_id) values (?, ?)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = userRepository.getOne(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user.toString());</span><br><span class="line">        <span class="comment">//Hibernate: select user0_.user_id as user_id1_0_0_, user0_.user_name as user_nam2_0_0_ from sys_user user0_ where user0_.user_id=?</span></span><br><span class="line">        <span class="comment">//User&#123;userId=1, userName=&#x27;小余哥&#x27;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">list</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;User&gt; list = userRepository.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : list) &#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//User&#123;userId=1, userName=&#x27;小余哥&#x27;&#125;</span></span><br><span class="line">        <span class="comment">//User&#123;userId=2, userName=&#x27;张三&#x27;&#125;</span></span><br><span class="line">        <span class="comment">//User&#123;userId=3, userName=&#x27;李四&#x27;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-6-访问H2控制台"><a href="#2-6-访问H2控制台" class="headerlink" title="2.6. 访问H2控制台"></a>2.6. 访问H2控制台</h4><p>启动应用程序，通过访问H2控制台连接<code>localhost:8080/h2</code>，进入H2控制台页面<br><img src="/springboot-h2/index/1.png"></p>
<p>进入控制台后，可以查看到初始化的数据表<code>SYS_USER</code>以及数据<br><img src="/springboot-h2/index/2.png"></p>
<h3 id="3-H2数据库应用场景"><a href="#3-H2数据库应用场景" class="headerlink" title="3. H2数据库应用场景"></a>3. H2数据库应用场景</h3><h4 id="3-1-嵌入式模式-上文例子"><a href="#3-1-嵌入式模式-上文例子" class="headerlink" title="3.1. 嵌入式模式(上文例子)"></a>3.1. 嵌入式模式(上文例子)</h4><p>在嵌入式模式下，应用程序使用JDBC从同一JVM中打开数据库。这是最快也是最容易的连接方式。缺点是数据库可能只在任何时候在一个虚拟机（和类加载器）中打开。与所有模式一样，支持持久性和内存数据库。对并发打开数据库的数量或打开连接的数量没有限制<br><img src="/springboot-h2/index/3.png"></p>
<h4 id="3-2-服务器模式"><a href="#3-2-服务器模式" class="headerlink" title="3.2. 服务器模式"></a>3.2. 服务器模式</h4><p>当使用服务器模式（有时称为远程模式或客户机/服务器模式）时，应用程序使用 JDBC 或 ODBC API 远程打开数据库。服务器需要在同一台或另一台虚拟机上启动，或者在另一台计算机上启动。许多应用程序可以通过连接到这个服务器同时连接到同一个数据库。在内部，服务器进程在嵌入式模式下打开数据库。</p>
<p>服务器模式比嵌入式模式慢，因为所有数据都通过TCP/IP传输。与所有模式一样，支持持久性和内存数据库。对每个服务器并发打开的数据库数量或打开连接的数量没有限制。<br><img src="/springboot-h2/index/4.png"></p>
<h4 id="3-3-混合模式"><a href="#3-3-混合模式" class="headerlink" title="3.3. 混合模式"></a>3.3. 混合模式</h4><p>混合模式是嵌入式和服务器模式的结合。连接到数据库的第一个应用程序在嵌入式模式下运行，但也启动服务器，以便其他应用程序（在不同进程或虚拟机中运行）可以同时访问相同的数据。本地连接的速度与数据库在嵌入式模式中的使用速度一样快，而远程连接速度稍慢。</p>
<p>服务器可以从应用程序内（使用服务器API）启动或停止，或自动（自动混合模式）。当使用自动混合模式时，所有想要连接到数据库的客户端（无论是本地连接还是远程连接）都可以使用完全相同的数据库URL来实现。</p>
<p><img src="/springboot-h2/index/5.png"></p>
<h3 id="4-H2数据库连接格式"><a href="#4-H2数据库连接格式" class="headerlink" title="4. H2数据库连接格式"></a>4. H2数据库连接格式</h3><table>
<thead>
<tr>
<th align="center">Connect Method</th>
<th align="left">URL Format and Examples</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#embedded_databases">Embedded (local) connection</a></td>
<td align="left">jdbc:h2:[file:][&lt;path&gt;]<databaseName>  <br> jdbc:h2:~/test <br> jdbc:h2:file:/data/sample <br>jdbc:h2:file:C:/data/sample (Windows only)</databaseName></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#in_memory_databases">In-memory (private)</a></td>
<td align="left">jdbc:h2:mem:</td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#in_memory_databases">In-memory (named)</a></td>
<td align="left">jdbc:h2:mem:<databaseName> <br> jdbc:h2:mem:test_mem</databaseName></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/tutorial.html#using_server">Server mode (remote connections) using TCP/IP</a></td>
<td align="left">dbc:h2:tcp://<server>[:&lt;port&gt;]/[&lt;path&gt;]&lt;databaseName&gt;<br> jdbc:h2:tcp://localhost/<del>/test<br> jdbc:h2:tcp://dbserv:8084/</del>/sample<br> jdbc:h2:tcp://localhost/mem:test</server></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/advanced.html#tls_connections">Server mode (remote connections) using TLS</a></td>
<td align="left">jdbc:h2:ssl://<server>[:&lt;port&gt;]/&lt;databaseName&gt;<br> jdbc:h2:ssl://localhost:8085/~/sample;</server></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#file_encryption">Using encrypted files</a></td>
<td align="left">jdbc:h2:<url>;CIPHER=AES<br> jdbc:h2:ssl://localhost/<del>/test;CIPHER=AES <br> jdbc:h2:file:</del>/secure;CIPHER=AES</url></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#database_file_locking">File locking methods</a></td>
<td align="left">jdbc:h2:<url>;FILE_LOCK={FILE|SOCKET|NO}<br> jdbc:h2:file:~/private;CIPHER=AES;FILE_LOCK=SOCKET</url></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#database_only_if_exists">Only open if it already exists</a></td>
<td align="left">jdbc:h2:<url>;IFEXISTS=TRUE<br> jdbc:h2:file:~/sample;IFEXISTS=TRUE</url></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#do_not_close_on_exit">Don’t close the database when the VM exits</a></td>
<td align="left">jdbc:h2:<url>;DB_CLOSE_ON_EXIT=FALSE</url></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#execute_sql_on_connection">Execute SQL on connection</a></td>
<td align="left">jdbc:h2:<url>;INIT=RUNSCRIPT FROM ‘<del>/create.sql’ <br> jdbc:h2:file:</del>/sample;INIT=RUNSCRIPT FROM ‘<del>/create.sql’;RUNSCRIPT FROM ‘</del>/populate.sql’</url></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/advanced.html#passwords">User name and/or password</a></td>
<td align="left">jdbc:h2:<url>[;\USER=&lt;username&gt;][;\PASSWORD=&lt;value&gt;] <br> jdbc:h2:file:~/sample;USER=sa;PASSWORD=123</url></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#trace_options">Debug trace settings</a></td>
<td align="left">jdbc:h2:<url>;TRACE_LEVEL_FILE=&lt;level 0..3&gt;<br> jdbc:h2:file:~/sample;TRACE_LEVEL_FILE=3</url></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#ignore_unknown_settings">Ignore unknown settings</a></td>
<td align="left">jdbc:h2:<url>;IGNORE_UNKNOWN_SETTINGS=TRUE</url></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#custom_access_mode">Custom file access mode</a></td>
<td align="left">jdbc:h2:<url>;ACCESS_MODE_DATA=rws</url></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#database_in_zip">Database in a zip file</a></td>
<td align="left">jdbc:h2:zip:&lt;zipFileName&gt;!/&lt;databaseName&gt; <br> jdbc:h2:zip:~/db.zip!/test</td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#compatibility">Compatibility mode</a></td>
<td align="left">jdbc:h2:<url>;MODE=&lt;databaseType&gt;<br> jdbc:h2:~/test;MODE=MYSQL</url></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#auto_reconnect">Auto-reconnect</a></td>
<td align="left">jdbc:h2:<url>;AUTO_RECONNECT=TRUE<br> jdbc:h2:tcp://localhost/~/test;AUTO_RECONNECT=TRUE</url></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#auto_mixed_mode">Automatic mixed mode</a></td>
<td align="left">jdbc:h2:<url>;AUTO_SERVER=TRUE <br> jdbc:h2:~/test;AUTO_SERVER=TRUE</url></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#page_size">Page size</a></td>
<td align="left">jdbc:h2:<url>;PAGE_SIZE=512</url></td>
</tr>
<tr>
<td align="center"><a href="http://www.h2database.com/html/features.html#other_settings">Changing other settings</a></td>
<td align="left">jdbc:h2:<url>;<setting>=<value>[;&lt;setting&gt;=&lt;value&gt;…] <br> jdbc:h2:file:~/sample;TRACE_LEVEL_SYSTEM_OUT=3</value></setting></url></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>03 SpringBoot</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>ContiPerf接口性能测试</title>
    <url>/contiperf/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>ContiPerf是一个轻量级的测试工具，基于JUnit4开发，可用于接口级的性能测试，可以设置线程数和执行次数，通过限制最大时间和平均执行时间来进行效率测试。</p>
<h3 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2. 使用方法"></a>2. 使用方法</h3><ol>
<li><p>添加依赖</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.databene<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>contiperf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建Domain</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;g_data_sources&quot;)</span></span><br><span class="line"><span class="meta">@org</span>.hibernate.annotations.Table(appliesTo = <span class="string">&quot;g_data_sources&quot;</span>, comment = <span class="string">&quot;数据源信息表&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSources</span> <span class="keyword">extends</span> <span class="title">BasePO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;name&quot;, columnDefinition = &quot;varchar(30) NOT NULL comment &#x27;数据库名&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;url&quot;, columnDefinition = &quot;varchar(100) NOT NULL comment &#x27;数据库ip&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;username&quot;, columnDefinition = &quot;varchar(30) NOT NULL comment &#x27;数据库连接用户名&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = &quot;pwd&quot;, columnDefinition = &quot;varchar(30) default &#x27;&#x27; comment &#x27;数据库连接密码&#x27;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="comment">//-----------------省略getter/setter方法 ---------------</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建查询代码</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;dataSourcesDaoImpl&quot;)</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED, rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourcesDaoImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PersistenceContext</span></span><br><span class="line">    <span class="keyword">private</span> EntityManager entityManager;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSources <span class="title">findById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        List&lt;DataSources&gt; result = entityManager.createQuery(<span class="string">&quot;from DataSources e where e.id = &quot;</span> + id).getResultList();</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span> &amp;&amp; !result.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> result.get(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建测试类</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisGeneratorApplicationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DataSourcesDaoImpl dataSourcesDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Rule</span></span><br><span class="line">    <span class="keyword">public</span> ContiPerfRule rule = <span class="keyword">new</span> ContiPerfRule();    <span class="comment">//重点</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="comment">//10个线程 执行100次</span></span><br><span class="line">    <span class="meta">@PerfTest(invocations = 100, threads = 10)</span>           <span class="comment">//重点</span></span><br><span class="line">    <span class="comment">//指定每次执行的最长时间/平均时间/总时间</span></span><br><span class="line">    <span class="comment">// @Required(max = 1200, average = 250, totalTime = 60000)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> id = (<span class="keyword">int</span>) (Math.random() * <span class="number">60</span>);</span><br><span class="line">        dataSourcesDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>JUnit执行完毕，会在<code>target/contiperf-report</code>中有相关的执行结果</p>
<p><img src="/contiperf/index/1.png"></p>
</li>
</ol>
<ol start="6">
<li><p>可以使用浏览器打开查看结果</p>
<p><img src="/contiperf/index/2.png"></p>
<ul>
<li><strong>Measured invocations</strong>:    请求次数</li>
<li><strong>Thread Count</strong>:    线程数</li>
<li><strong>Execution time</strong>：总执行时间</li>
<li><strong>Throughput</strong>:   吞吐量，每秒效率 TPS</li>
<li><strong>Min. latency</strong>:    最短响应时间</li>
<li><strong>Average latency</strong>: 平均响应时间</li>
<li><strong>Median</strong>:    TP50响应时间</li>
<li><strong>90%</strong>: TP90响应时间，指在一个时间段内（如5分钟），统计该方法每次调用所消耗的时间，并将这些时间按从小到大的顺序进行排序，取第90%的那个值作为TP90 值；配置此监控指标对应的报警阀值后，需要保证在这个时间段内该方法所有调用的消耗时间至少有90%的值要小于此阀值，否则系统将会报警</li>
<li><strong>Max latency</strong>:   最长响应时间</li>
</ul>
</li>
</ol>
<p>   报告图片显示不出来，是源码中使用了google图表，需要在线！！并且源码中写死了<code>cht=lxy</code>，可以参考<a href="https://stackoverflow.com/questions/13494178/contiperf-html-report">ContiPerf html报告</a></p>
<h3 id="3-PerfTest参数说明"><a href="#3-PerfTest参数说明" class="headerlink" title="3. @PerfTest参数说明"></a>3. @PerfTest参数说明</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.TYPE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> PerfTest &#123;</span><br><span class="line">    <span class="comment">//常用的就是这个参数 执行次数  与线程无关</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">invocations</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 间隔时间  可以暂时不用  因为性能测试主要是测试并发</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@PerfTest</span>(invocations = 300, threads = 2, duration = 100)，如果执行方法300次的时候执行时间还没到100ms，则继续执行到满足执行时间等于100ms，如果执行到50次的时候已经100ms了，则会继续执行之100次。</span></span><br><span class="line"><span class="comment">    * The number of milliseconds to run and repeat the test with the full number of configured threads -</span></span><br><span class="line"><span class="comment">    * use this alternatively to &#123;<span class="doctag">@link</span> #invocations()&#125;. When using a &#123;<span class="doctag">@link</span> #rampUp()&#125;, the ramp-up times</span></span><br><span class="line"><span class="comment">    * add to the duration.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@see</span> #duration()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">duration</span><span class="params">()</span> <span class="keyword">default</span> -1</span>;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 线程数 </span></span><br><span class="line"><span class="comment">    * The number of threads which concurrently invoke the test. The default value is 1.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">threads</span><span class="params">()</span> <span class="keyword">default</span> 1</span>;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The number of milliseconds to wait before each thread is added to the currently active threads.</span></span><br><span class="line"><span class="comment">    * On &#123;<span class="doctag">@link</span> #duration()&#125;-based tests, the total ramp-up time of rampUp * (threads - 1) is added to the</span></span><br><span class="line"><span class="comment">    * configured duration.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rampUp</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * The number of milliseconds to wait before the actual measurement and requirements monitoring is activated.</span></span><br><span class="line"><span class="comment">    *  Use this to exclude ramp-up times from measurement or wait some minutes before dynamic optimizations are</span></span><br><span class="line"><span class="comment">    *  applied (like code optimization or cache population). </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">warmUp</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * Set this to true, if execution should stop with a failure message as soon as a configured &#123;<span class="doctag">@link</span> Required#max()&#125;</span></span><br><span class="line"><span class="comment">    * value is violated. Set it to false, if you are interested in performing a full measurement to get percentiles,</span></span><br><span class="line"><span class="comment">    * throughput and more. The default value is false. </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">cancelOnViolation</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * The class of a &#123;<span class="doctag">@link</span> WaitTimer&#125; implementation by which a wait time can be incurred between test invocations </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Class&lt;? extends WaitTimer&gt; timer() <span class="keyword">default</span> None.class;</span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * The parameters to initialize the &#123;<span class="doctag">@link</span> WaitTimer&#125;.</span></span><br><span class="line"><span class="comment">    * The meaning of the values is individual for the WaitTimer implementation. </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">double</span>[] timerParams() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * One ore more &#123;<span class="doctag">@link</span> Clock&#125; classes to use for time measurement.</span></span><br><span class="line"><span class="comment">    * The first one specified is the one relevant for requirements verification. </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Class&lt;? extends Clock&gt;[] clocks() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-Required参数说明"><a href="#4-Required参数说明" class="headerlink" title="4. @Required参数说明"></a>4. @Required参数说明</h3><table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">@Required(throughput = 20)</td>
<td align="center">要求每秒至少执行20个测试</td>
</tr>
<tr>
<td align="center">@Required(average = 50)</td>
<td align="center">要求平均执行时间不超过50ms</td>
</tr>
<tr>
<td align="center">@Required(median = 45)</td>
<td align="center">要求所有执行的50%不超过45ms</td>
</tr>
<tr>
<td align="center">@Required(max = 2000)</td>
<td align="center">要求没有测试超过2s</td>
</tr>
<tr>
<td align="center">@Required(totalTime = 5000)</td>
<td align="center">要求总的执行时间不超过5s</td>
</tr>
<tr>
<td align="center">@Required(percentile90 = 3000)</td>
<td align="center">要求90%的测试不超过3s</td>
</tr>
<tr>
<td align="center">@Required(percentile95 = 5000)</td>
<td align="center">要求95%的测试不超过5s</td>
</tr>
<tr>
<td align="center">@Required(percentile99 = 10000)</td>
<td align="center">要求99%的测试不超过10s</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>13 开源组件</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式理论及一致性算法</title>
    <url>/distributed-01/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h2 id="什么是分布式系统"><a href="#什么是分布式系统" class="headerlink" title="什么是分布式系统"></a>什么是分布式系统</h2><blockquote>
<p>一个分布式系统就是一些独立的计算机集合，但是对这个系统的用户来说，系统就像一台计算机一样</p>
</blockquote>
<p>分布式系统是一个硬件或软件组建分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统，简单来说就是一群独立计算机集合共同对外提供服务；分布式意味着可以采用更多的普通计算机组成分布式集群对外提供服务。<br>计算机越多，CPU、内存、存储资源等就越多，能够处理的并发访问量也就越大。</p>
<p>从分布式系统的概念中，可以知道各个主机之间通信和协调主要是通过网络进行的，所以分布式系统中的计算机在空间上没几乎没有限制，这些计算机可能被放在不同的机柜上，也可能在不同的机房或城市(地区/国家)。</p>
<h3 id="分布式系统的主要特征"><a href="#分布式系统的主要特征" class="headerlink" title="分布式系统的主要特征"></a>分布式系统的主要特征</h3><ol>
<li><p>分布性</p>
<p> 分布式系统中多台计算机之间在空间位置上可以随意分布，也可随时变动</p>
</li>
<li><p>对等性</p>
<p> 分布式系统中的计算机没有主/从之分，即没有控制整个系统的主机，也没有被控制的从机，组成分布式系统的所有计算机节点都是<strong>对等的</strong>。副本(Replica)是分布式最常见的概念之一，指的是分布式系统对数据和服务提供的一种冗余方式，在常见的分布式系统中，为了对外提供高可用的服务，我们往往会对数据和服务进行副本处理。</p>
<p> <strong>数据副本</strong>是指在不同节点上持久化同一份数据，当某一个节点上存储的数据丢失，可以从副本上读取该数据，这是解决分布式系统丢失问题最有效的方式。</p>
<p> 另一类副本是服务副本，每个节点都有能力接收来自外部的请求并进行相应的处理</p>
</li>
<li><p>自治性</p>
<p> 分布式系统中的各个节点都包含自己的处理机和内存，各自具有独立的处理数据的功能，通常，彼此在地位上平等的，无主次之分，既能自治地进行工作，又能利用共享的通信线路来传递消息，协调任务处理</p>
</li>
<li><p>并发性</p>
<p>在一个计算机网络中，程序运行过程的并发性操作是非常常见的行为。例如同一个分布式系统中的多个节点，可能会并发地操作一些共享的资源，如何准确并高效地协调分布式并发操作也成为了分布式系统架构与设计中最大的挑战之一</p>
</li>
</ol>
<h3 id="分布式系统面临的问题"><a href="#分布式系统面临的问题" class="headerlink" title="分布式系统面临的问题"></a>分布式系统面临的问题</h3><ol>
<li><p>缺乏全局时钟</p>
<p>在分布式系统中，很难定义两个事件究竟谁先谁后，原因就是因为分布式系统缺乏一个全局的时钟序列控制。</p>
</li>
</ol>
<ol start="2">
<li><p>机器宕机</p>
<p>机器宕机是最常见的异常之一。在大型集群中每日宕机发生的概率为千分之一左右，在实践中，一台宕机的机器恢复的时间通常认为是24 小时，一般需要人工介入重启机器</p>
</li>
</ol>
<ol start="3">
<li><p>网络异常</p>
<p>消息丢失，两片节点之间彼此完全无法通信，即出现了“网络分化”；消息乱序，有一定的概率不是按照发送时的顺序依次到达目的节点，考虑使用序列号等机制处理网络消息的乱序问题，使得无效的、过期的网络消息不影响系统的正确性；数据错误；不可靠的TCP，TCP 协议为应用层提供了可靠的、面向连接的传输服务，但在分布式系统的协议设计中不能认为所有网络通信都基于TCP 协议则通信就是可靠的。TCP协议只能保证同一个TCP 链接内的网络消息不乱序，TCP 链接之间的网络消息顺序则无法保证。</p>
</li>
</ol>
<ol start="4">
<li><p>分布式三态</p>
<p>如果某个节点向另一个节点发起RPC(Remote procedure call)调用，即某个节点A 向另一个节点B 发送一个消息，节点B 根据收到的消息内容完成某些操作，并将操作的结果通过另一个消息返回给节点A，那么这个RPC 执行的结果有三种状态：“成功”、“失败”、“超时（未知）”，称之为分布式系统的三态。</p>
</li>
</ol>
<ol start="5">
<li><p>存储数据丢失</p>
<p>对于有状态节点来说，数据丢失意味着状态丢失，通常只能从其他节点读取、恢复存储的状态。 异常处理原则：被大量工程实践所检验过的异常处理黄金原则是：任何在设计阶段考虑到的异常情况一定会在系统实际运行中发生，但在系统实际运行遇到的异常却很有可能在设计时未能考虑，所以，除非需求指标允许，在系统设计时不能放过任何异常情况</p>
</li>
</ol>
<h3 id="衡量分布式系统的指标"><a href="#衡量分布式系统的指标" class="headerlink" title="衡量分布式系统的指标"></a>衡量分布式系统的指标</h3><ul>
<li><p>性能</p>
<p>系统的吞吐能力，指系统在某一时间可以处理的数据总量，通常可以用系统每秒处理的总的数据量来衡量；系统的响应延迟，指系统完成某一功能需要使用的时间；系统的并发能力，指系统可以同时完成某一功能的能力，通常也用QPS(query per second)来衡量。上述三个性能指标往往会相互制约，追求高吞吐的系统，往往很难做到低延迟；系统平均响应时间较长时，也很难提高QPS</p>
</li>
</ul>
<ul>
<li><p>可用性</p>
<p>系统的可用性(availability)指系统在面对各种异常时可以正确提供服务的能力。系统的可用性可以用系统停服务的时间与正常服务的时间的比例来衡量，也可以用某功能的失败次数与成功次数的比例来衡量。可用性是分布式的重要指标，衡量了系统的鲁棒性，是系统容错能力的体现</p>
</li>
</ul>
<ul>
<li><p>可扩展性</p>
<p>系统的可扩展性(scalability)指分布式系统通过扩展集群机器规模提高系统性能（吞吐、延迟、并发）、存储容量、计算能力的特性。好的分布式系统总在追求“线性扩展性”，也就是使得系统的某一指标可以随着集群中的机器数量线性增长。</p>
</li>
</ul>
<ul>
<li><p>一致性</p>
<p>分布式系统为了提高可用性，总是不可避免的使用副本的机制，从而引发副本一致性的问题。越是强的一致的性模型，对于用户使用来说使用起来越简单</p>
</li>
</ul>
<h2 id="分布式理论基础"><a href="#分布式理论基础" class="headerlink" title="分布式理论基础"></a>分布式理论基础</h2><blockquote>
<p>主要包括CAP理论和BASE理论  </p>
</blockquote>
<h3 id="CAP理论"><a href="#CAP理论" class="headerlink" title="CAP理论"></a>CAP理论</h3><blockquote>
<p>CAP理论是分布式系统（特别是分布是存储领域）中被讨论最多的理论，其中</p>
<ul>
<li><strong>C</strong>：一致性(<strong>C</strong>onsistency)</li>
<li><strong>A</strong>：可用性(<strong>A</strong>vailability)</li>
<li><strong>P</strong>：分区容错性(<strong>P</strong>artition tolerance)</li>
</ul>
<p>CAP理论告诉我们C、A、P三者不能同时满足，最多只能满足其中两个</p>
</blockquote>
<p><img src="/distributed-01/index/1.png"></p>
<h3 id="BASE-理论"><a href="#BASE-理论" class="headerlink" title="BASE 理论"></a>BASE 理论</h3><blockquote>
<p>BASE是”Basically Available, Soft state, Eventually consistent(基本可用、软状态、最终一致性)”的首字母。其中的软状态和最终一致性这两种技巧擅于对付存在分区的场合，并因此提高类可用性</p>
</blockquote>
<p><img src="/distributed-01/index/2.png"></p>
<h2 id="分布式一致性算法"><a href="#分布式一致性算法" class="headerlink" title="分布式一致性算法"></a>分布式一致性算法</h2><blockquote>
<p>一致性算法的目的是保证在分布式系统中，多数据副本节点数据一致性，主要包含一致性hash算法、Paxos算法、Raft算法、ZAB算法等</p>
</blockquote>
<h3 id="一致性Hash算法"><a href="#一致性Hash算法" class="headerlink" title="一致性Hash算法"></a>一致性Hash算法</h3><p>一致性Hash算法是个经典算法，Hash环的引入是为了解决**单调性(Monotonicity)<strong>的问题，虚拟节点的引入是为了解决</strong>平衡性(Balance)**的问题</p>
<h3 id="Paxos算法"><a href="#Paxos算法" class="headerlink" title="Paxos算法"></a>Paxos算法</h3><p>Paxos算法是Lamport宗师提出的一种基于消息传递的分布式一致性算法</p>
<h3 id="Raft算法"><a href="#Raft算法" class="headerlink" title="Raft算法"></a>Raft算法</h3><p>Paxos是出了名的难懂，而Raft正式为了探索一种更易于理解的一致性算法而产生的。它的设计目的就是易于理解，所以在选主的冲突处理等方式上它都选择了非常简单明了的解决方案</p>
<h3 id="ZAB算法"><a href="#ZAB算法" class="headerlink" title="ZAB算法"></a>ZAB算法</h3><p>ZAB 协议全称：Zookeeper Atomic Broadcast（Zookeeper 原子广播协议）, 它应该是所有一致性协议中生产环境中应用最多的了。为什么呢？因为他是为 Zookeeper 设计的分布式一致性协议！#</p>
<h2 id="摘录"><a href="#摘录" class="headerlink" title="摘录"></a>摘录</h2><p><a href="https://pdai.tech/md/arch/arch-z-theory.html">分布式系统 - 理论基础,理论及一致性算法</a></p>
]]></content>
      <categories>
        <category>05 分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot单元测试获取Resources文件的8个姿势</title>
    <url>/get-resources-file/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = &#123;IdempotentApplication.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String resourceName = <span class="string">&quot;template/1.text&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过class.getClassLoader获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String path = <span class="keyword">this</span>.getClass().getClassLoader().getResource(<span class="string">&quot;&quot;</span>).getPath();<span class="comment">// getResource(&quot;&quot;)里面是空字符串</span></span><br><span class="line">            String filepath = path + resourceName;</span><br><span class="line">            getFileContent(filepath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过文件名getPath来获取路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String path = <span class="keyword">this</span>.getClass().getClassLoader().getResource(resourceName).getPath();</span><br><span class="line">            String filePath = URLDecoder.decode(path, <span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//如果路径中带有中文会被URLEncoder,因此这里需要解码</span></span><br><span class="line">            getFileContent(filePath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接通过文件名 + getFile()获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String path = <span class="keyword">this</span>.getClass().getClassLoader().getResource(resourceName).getFile();</span><br><span class="line">            String filePath = URLDecoder.decode(path, <span class="string">&quot;UTF-8&quot;</span>);<span class="comment">//如果路径中带有中文会被URLEncoder,因此这里需要解码</span></span><br><span class="line">            getFileContent(filePath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接使用getResourceAsStream方法获取流</span></span><br><span class="line"><span class="comment">     * springboot项目中需要使用此种方法，因为jar包中没有一个实际的路径存放文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             InputStream in = <span class="keyword">this</span>.getClass().getClassLoader().getResourceAsStream(resourceName);</span><br><span class="line">            getFileContent(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接使用getResourceAsStream方法获取流</span></span><br><span class="line"><span class="comment">     * 如果不使用getClassLoader，可以使用getResourceAsStream(&quot;/配置测试.txt&quot;)直接从resources根路径下获取</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function5</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InputStream in = <span class="keyword">this</span>.getClass().getResourceAsStream(<span class="string">&quot;/&quot;</span>+resourceName);</span><br><span class="line">            getFileContent(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过ClassPathResource类获取，建议SpringBoot中使用</span></span><br><span class="line"><span class="comment">     * springboot项目中需要使用此种方法，因为jar包中没有一个实际的路径存放文件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassPathResource cb = <span class="keyword">new</span> ClassPathResource(resourceName);</span><br><span class="line">            InputStream in = cb.getInputStream();</span><br><span class="line">            getFileContent(in);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过绝对路径获取项目中文件的位置（不能用于服务器）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function7</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           String rootPath = System.getProperty(<span class="string">&quot;user.dir&quot;</span>);</span><br><span class="line">           String filePath = rootPath + <span class="string">&quot;/src/main/resources/&quot;</span> + resourceName;</span><br><span class="line">            getFileContent(filePath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过绝对路径获取项目中文件的位置（不能用于服务器）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">function8</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//参数为空</span></span><br><span class="line">            File directory = <span class="keyword">new</span> File(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//规范路径：getCanonicalPath() 方法返回绝对路径，会把 ..\ 、.\ 这样的符号解析掉</span></span><br><span class="line">            String rootCanonicalPath = directory.getCanonicalPath();</span><br><span class="line">            <span class="comment">//绝对路径：getAbsolutePath() 方法返回文件的绝对路径，如果构造的时候是全路径就直接返回全路径，如果构造时是相对路径，就返回当前目录的路径 + 构造 File 对象时的路径</span></span><br><span class="line">            String filePath = rootCanonicalPath + <span class="string">&quot;/src/main/resources/&quot;</span> + resourceName;</span><br><span class="line">            getFileContent(filePath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据文件路径读取文件内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileInPath 文件路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getFileContent</span><span class="params">(Object fileInPath)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        BufferedReader br = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (fileInPath == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (fileInPath <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader((String) fileInPath));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (fileInPath <span class="keyword">instanceof</span> InputStream) &#123;</span><br><span class="line">            br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader((InputStream) fileInPath));</span><br><span class="line">        &#125;</span><br><span class="line">        String line;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">while</span> ((line = br.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            sb.append(line);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sb.toString());</span><br><span class="line">        br.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis 总体框架设计</title>
    <url>/mybatis-01/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="Mybatis-架构概览"><a href="#Mybatis-架构概览" class="headerlink" title="Mybatis 架构概览"></a>Mybatis 架构概览</h3><p>Mybatis框架整体设计如下：<br><img src="/mybatis-01/index/1.png"></p>
<h4 id="接口层与数据库交互方式"><a href="#接口层与数据库交互方式" class="headerlink" title="接口层与数据库交互方式"></a>接口层与数据库交互方式</h4><p>Mybatis和数据库交互有两种方式：</p>
<ol>
<li><p>使用传统的Mybatis提供的API</p>
</li>
<li><p>使用Mapper接口</p>
</li>
</ol>
<p><u><strong>使用传统的Mybatis提供的API:</strong></u></p>
<p>这是传统的传递Statement Id和查询参数给<code>SqlSession</code>对象，使用<code>SqlSession</code>对象完成和数据库的交互；Mybatis提供了非常方便和简单的API，供用户实现对数据库的增删改查操作以及对数据库连接信息和Mybatis自身配置信息的维护操作<br><img src="/mybatis-01/index/2.png"></p>
<p>上述使用MyBatis 的方法，是创建一个和数据库打交道的SqlSession对象，然后根据Statement Id 和参数来操作数据库，这种方式固然很简单和实用，但是它不符合面向对象语言的概念和面向接口编程的编程习惯。由于面向接口的编程是面向对象的大趋势，MyBatis 为了适应这一趋势，增加了第二种使用MyBatis 支持接口（Interface）调用方式</p>
<p><u><strong>使用Mapper接口:</strong></u></p>
<p>Mybatis将配置文件中的每一个<code>&lt;Mapper&gt;</code>节点抽象为一个Mapper接口，而这个接口中声明的方法跟<code>&lt;Mapper&gt;</code>节点中的<code>&lt;select|update|delete|insert&gt;</code> 节点项对应，即<code>&lt;select|update|delete|insert&gt;</code> 节点的id值为Mapper接口中的方法名称，<code>parameterType</code> 值表示Mapper 对应方法的入参类型，而<code>resultMap</code> 值则对应了Mapper 接口表示的返回值类型或者返回结果集的元素类型<br><img src="/mybatis-01/index/3.png"><br>根据MyBatis 的配置规范配置好后，通过SqlSession.getMapper(XXXMapper.class)方法，MyBatis 会根据相应的接口声明的方法信息，通过动态代理机制生成一个Mapper 实例，我们使用Mapper 接口的某一个方法时，MyBatis 会根据这个方法的方法名和参数类型，确定Statement Id，底层还是通过SqlSession.select(“statementId”,parameterObject);或者SqlSession.update(“statementId”,parameterObject); 等等来实现对数据库的操作， MyBatis 引用Mapper 接口这种调用方式，纯粹是为了满足面向接口编程的需要。（其实还有一个原因是在于，面向接口的编程，使得用户在接口上可以使用注解来配置SQL语句，这样就可以脱离XML配置文件，实现“0配置”）。</p>
<h4 id="数据处理层"><a href="#数据处理层" class="headerlink" title="数据处理层"></a>数据处理层</h4><p>数据处理层可以说是MyBatis 的核心，从大的方面上讲，它要完成两个功能：</p>
<ol>
<li><p>通过传入参数构建动态SQL语句；</p>
</li>
<li><p>SQL语句的执行以及封装查询结果集成List<E></E></p>
</li>
</ol>
<p><u><strong>参数映射和动态SQL语句生成:</strong></u></p>
<p>动态语句生成可以说是MyBatis框架非常优雅的一个设计，MyBatis 通过传入的参数值，使用 Ognl 来动态地构造SQL语句，使得MyBatis 有很强的灵活性和扩展性。</p>
<p>参数映射指的是对于java 数据类型和jdbc数据类型之间的转换：这里有包括两个过程：查询阶段，我们要将java类型的数据，转换成jdbc类型的数据，通过 preparedStatement.setXXX() 来设值；另一个就是对resultset查询结果集的jdbcType 数据转换成java 数据类型。#</p>
<p><u><strong>SQL语句的执行以及封装查询结果集成List<E>:</E></strong></u></p>
<p>动态SQL语句生成之后，MyBatis 将执行SQL语句，并将可能返回的结果集转换成List<E> 列表。MyBatis 在对结果集的处理中，支持结果集关系一对多和多对一的转换，并且有两种支持方式，一种为嵌套查询语句的查询，还有一种是嵌套结果集的查询。#</E></p>
<h4 id="框架支撑层"><a href="#框架支撑层" class="headerlink" title="框架支撑层"></a>框架支撑层</h4><ul>
<li><p>事务管理机制</p>
<p>  事务管理机制对于ORM框架而言是不可缺少的一部分，事务管理机制的质量也是考量一个ORM框架是否优秀的一个标准</p>
</li>
<li><p>连接吃管理机制</p>
<p>由于创建一个数据库连接所占用的资源比较大， 对于数据吞吐量大和访问量非常大的应用而言，连接池的设计就显得非常重要。</p>
</li>
<li><p>缓存机制</p>
<p>为了提高数据利用率和减小服务器和数据库的压力，MyBatis 会对于一些查询提供会话级别的数据缓存，会将对某一次查询，放置到SqlSession 中，在允许的时间间隔内，对于完全相同的查询，MyBatis 会直接将缓存结果返回给用户，而不用再到数据库中查找。</p>
</li>
<li><p>SQL语句的配置方式</p>
<p>传统的MyBatis 配置SQL 语句方式就是使用XML文件进行配置的，但是这种方式不能很好地支持面向接口编程的理念，为了支持面向接口的编程，MyBatis 引入了Mapper接口的概念，面向接口的引入，对使用注解来配置SQL 语句成为可能，用户只需要在接口上添加必要的注解即可，不用再去配置XML文件了，但是，目前的MyBatis 只是对注解配置SQL 语句提供了有限的支持，某些高级功能还是要依赖XML配置文件配置SQL 语句。#</p>
</li>
</ul>
<h4 id="引导层"><a href="#引导层" class="headerlink" title="引导层"></a>引导层</h4><p>引导层是配置和启动MyBatis配置信息的方式。MyBatis 提供两种方式来引导MyBatis ：基于XML配置文件的方式和基于Java API 的方式。</p>
<h3 id="主要构建及其相互关系"><a href="#主要构建及其相互关系" class="headerlink" title="主要构建及其相互关系"></a>主要构建及其相互关系</h3><p>从MyBatis代码实现的角度来看，主体构件和关系如下：<br><img src="/mybatis-01/index/4.png"><br>主要的核心部件解释如下：</p>
<ul>
<li><code>SqlSession</code> 作为MyBatis工作的主要顶层API，表示和数据库交互的会话，完成必要数据库增删改查功能</li>
<li><code>Executor</code> MyBatis执行器，是MyBatis 调度的核心，负责SQL语句的生成和查询缓存的维护</li>
<li><code>StatementHandler</code> 封装了JDBC Statement操作，负责对JDBC statement 的操作，如设置参数、将Statement结果集转换成List集合。</li>
<li><code>ParameterHandler</code> 负责对用户传递的参数转换成JDBC Statement 所需要的参数，</li>
<li><code>ResultSetHandler</code> 负责将JDBC返回的ResultSet结果集对象转换成List类型的集合；</li>
<li><code>TypeHandler</code> 负责java数据类型和jdbc数据类型之间的映射和转换</li>
<li><code>MappedStatement</code> MappedStatement维护了一条&lt;select|update|delete|insert&gt;节点的封装 </li>
<li><code>SqlSource</code> 负责根据用户传递的parameterObject，动态地生成SQL语句，将信息封装到BoundSql对象中，并返回</li>
<li><code>BoundSql</code> 表示动态生成的SQL语句以及相应的参数信息</li>
<li><code>Configuration</code> MyBatis所有的配置信息都维持在Configuration对象之中。</li>
</ul>
]]></content>
      <categories>
        <category>04 Mybatis</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis执行一条SQL命令的过程</title>
    <url>/mybatis-sql-excute-process/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<p>Mybatis中的sql命令，在枚举类<code>SqlCommandType</code>中定义的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">SqlCommandType</span> </span>&#123;</span><br><span class="line">  UNKNOWN, INSERT, UPDATE, DELETE, SELECT, FLUSH;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面以Mapper接口中一个方法为例子，看下sql命令的执行完整流程:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//参数RowBounds和ResultSetHandler是可选参数，表示分页对象和自定义结果集处理器，一般不需要。</span></span><br><span class="line">    <span class="function">List&lt;Student&gt; <span class="title">findAllStudents</span><span class="params">(Map&lt;String, Object&gt; map, RowBounds rowBounds, ResultSetHandler rh)</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一条完整的sql命令，其执行的完整流程如下图所示：<br><img src="/mybatis-sql-excute-process/index/1.png" alt="sql执行流程"></p>
<h4 id="MapperProxy的功能"><a href="#MapperProxy的功能" class="headerlink" title="MapperProxy的功能"></a>MapperProxy的功能</h4><ol>
<li><p>因为Mapper接口不能直接实例化，MapperProxy的作用就是使用JDK动态代理功能，间接实例化Mapper的proxy对象</p>
</li>
<li><p>缓存MapperMethod对象</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MapperMethod&gt; methodCache;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 投鞭断流</span></span><br><span class="line">    <span class="keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class="line">    <span class="keyword">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存MapperMethod</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> MapperMethod <span class="title">cachedMapperMethod</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">    MapperMethod mapperMethod = methodCache.get(method);</span><br><span class="line">    <span class="keyword">if</span> (mapperMethod == <span class="keyword">null</span>) &#123;</span><br><span class="line">        mapperMethod = <span class="keyword">new</span> MapperMethod(mapperInterface, method, sqlSession.getConfiguration());</span><br><span class="line">        methodCache.put(method, mapperMethod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mapperMethod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="MapperMethod的功能"><a href="#MapperMethod的功能" class="headerlink" title="MapperMethod的功能"></a>MapperMethod的功能</h4><ol>
<li><p>解析Mapper接口的方法，并且封装成MapperMethod对象</p>
</li>
<li><p>将sql命令正确路由到恰当的SqlSession的方法上</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 保存了Sql命令的类型和键id</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> SqlCommand command;</span><br><span class="line">  <span class="comment">// 保存了Mapper接口方法的解析信息</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> MethodSignature method;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MapperMethod</span><span class="params">(Class&lt;?&gt; mapperInterface, Method method, Configuration config)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.command = <span class="keyword">new</span> SqlCommand(config, mapperInterface, method);</span><br><span class="line">    <span class="keyword">this</span>.method = <span class="keyword">new</span> MethodSignature(config, method);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 根据解析结果，路由到恰当的SqlSession方法上</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">execute</span><span class="params">(SqlSession sqlSession, Object[] args)</span> </span>&#123;</span><br><span class="line">    Object result;</span><br><span class="line">    <span class="keyword">if</span> (SqlCommandType.INSERT == command.getType()) &#123;</span><br><span class="line">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.insert(command.getName(), param));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SqlCommandType.UPDATE == command.getType()) &#123;</span><br><span class="line">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.update(command.getName(), param));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SqlCommandType.DELETE == command.getType()) &#123;</span><br><span class="line">      Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">      result = rowCountResult(sqlSession.delete(command.getName(), param));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SqlCommandType.SELECT == command.getType()) &#123;</span><br><span class="line">      <span class="keyword">if</span> (method.returnsVoid() &amp;&amp; method.hasResultHandler()) &#123;</span><br><span class="line">        executeWithResultHandler(sqlSession, args);</span><br><span class="line">        result = <span class="keyword">null</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMany()) &#123;</span><br><span class="line">        result = executeForMany(sqlSession, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.returnsMap()) &#123;</span><br><span class="line">        result = executeForMap(sqlSession, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Object param = method.convertArgsToSqlCommandParam(args);</span><br><span class="line">        result = sqlSession.selectOne(command.getName(), param);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SqlCommandType.FLUSH == command.getType()) &#123;</span><br><span class="line">        result = sqlSession.flushStatements();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">&quot;Unknown execution method for: &quot;</span> + command.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; method.getReturnType().isPrimitive() &amp;&amp; !method.returnsVoid()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> BindingException(<span class="string">&quot;Mapper method &#x27;&quot;</span> + command.getName() </span><br><span class="line">          + <span class="string">&quot; attempted to return null from a method with a primitive return type (&quot;</span> + method.getReturnType() + <span class="string">&quot;).&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>04 Mybatis</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis持久化之AOF（八）</title>
    <url>/redis-special-aof/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">


<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>Redis是先执行命令，把数据写入内存，然后才记录日志。日志里记录的是Redis收到的每一条命令，这些命令是以文本形式保存。</p>
<blockquote>
<p>Redis是”写后”日志， 而大多数的数据库采用的是写前日志(WAL),例如Mysql，通过写前日志和两阶段提交，实现数据和逻辑的一致性。</p>
</blockquote>
<p>AOF日志采用写后日志，即：<strong>先写内存，后写日志</strong><br><img src="/redis-special-aof/index/1.png"></p>
<p><strong>为什么采用写后日志？</strong></p>
<p>Redis要求高性能，采用后写日志有两方面的好处：</p>
<ol>
<li><p>避免额外的检查开销：Redis向AOF里面记录日志的时候，并不会先去会这些命令进行语法检查，如果先记日志再执行命令，日志可能会记录错误的命令，在使用日志恢复数据的时候，就可能会报错。</p>
</li>
<li><p>不会阻塞当前的写操作</p>
</li>
</ol>
<p>但是这种方式潜在的风险：</p>
<ol>
<li><p>如果命令执行完成，写日志之前宕机了，会丢失数据</p>
</li>
<li><p>主线程写磁盘压力大，导致写磁盘满，阻塞后续操作</p>
</li>
</ol>
<h3 id="2-如何实现AOF"><a href="#2-如何实现AOF" class="headerlink" title="2. 如何实现AOF"></a>2. 如何实现AOF</h3><p>AOF 日志记录Redis的每个写命令，步骤分为：<strong>命令追加append</strong>、<strong>文件写入write</strong>和<strong>文件同步sync</strong></p>
<ul>
<li><p>命令追加：当AOF持久功能打开后，服务器在执行完一个命令之后，会以协议格式将被执行的写命令追加到服务器的<code>aof_buf</code>缓冲区</p>
</li>
<li><p>文件写入和同步：关于何时将<code>aof_buf</code>缓冲区的内容写入AOF文件中，redis提供了3中写回策略：</p>
<table>
<thead>
<tr>
<th align="center">配置项</th>
<th align="center">写回时机</th>
<th align="center">优点</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Always</td>
<td align="center">同步写回</td>
<td align="center">可靠性高，基本不会丢失</td>
<td align="center">每个写命令都要落盘，性能影响大</td>
</tr>
<tr>
<td align="center">Everysec</td>
<td align="center">每秒写回</td>
<td align="center">性能适中</td>
<td align="center">宕机时丢失1秒内的数据</td>
</tr>
<tr>
<td align="center">No</td>
<td align="center">操作系统控制的写回</td>
<td align="center">性能好</td>
<td align="center">宕机时丢失的数据较多</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<ul>
<li><p><code>Always</code>: 同步写回：每个写命令执行完，立马同步地将日志写回磁盘</p>
</li>
<li><p><code>Everysec</code>: 每秒写回：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，每隔一秒把缓冲区中的内容写入磁盘</p>
</li>
<li><p><code>No</code>: 操作系统控制的写回：每个写命令执行完，只是先把日志写到AOF文件的内存缓冲区，由操作系统决定何时将缓冲区内容写回磁盘。</p>
</li>
</ul>
</li>
</ul>
<h4 id="2-1-三种写回策略的优缺点"><a href="#2-1-三种写回策略的优缺点" class="headerlink" title="2.1 三种写回策略的优缺点"></a>2.1 三种写回策略的优缺点</h4><p>上面的三种写回策略体现了一个重要原则：<strong>trade-off取舍</strong>，在性能和可靠性之间做取舍</p>
<p>关于AOF的同步策略是涉及到操作系统的 write 函数和 fsync 函数的，在《Redis设计与实现》中是这样说明的：</p>
<blockquote>
<p>为了提高文件写入效率，在现代操作系统中，当用户调用write函数，将一些数据写入文件时，操作系统通常会将数据暂存到一个内存缓冲区里，当缓冲区的空间被填满或超过了指定时限后，才真正将缓冲区的数据写入到磁盘里。</p>
<p>这样的操作虽然提高了效率，但也为数据写入带来了安全问题：如果计算机停机，内存缓冲区中的数据会丢失。为此，系统提供了fsync、fdatasync同步函数，可以强制操作系统立刻将缓冲区中的数据写入到硬盘里，从而确保写入数据的安全性。</p>
</blockquote>
<h3 id="3-redis-conf配置AOF"><a href="#3-redis-conf配置AOF" class="headerlink" title="3. redis.conf配置AOF"></a>3. redis.conf配置AOF</h3><p>默认情况下，Redis是没有开启AOF的，可以通过配置redis.conf文件来开启AOF持久化，关于AOF的配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># appendonly参数开启AOF持久化</span><br><span class="line">appendonly no</span><br><span class="line"></span><br><span class="line"># AOF持久化的文件名，默认是appendonly.aof</span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"></span><br><span class="line"># AOF文件的保存位置和RDB文件的位置相同，都是通过dir参数设置的</span><br><span class="line">dir ./</span><br><span class="line"></span><br><span class="line"># 同步策略</span><br><span class="line"># appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line"># appendfsync no</span><br><span class="line"></span><br><span class="line"># aof重写期间是否同步</span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"></span><br><span class="line"># 重写触发配置</span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"></span><br><span class="line"># 加载aof出错如何处理</span><br><span class="line">aof-load-truncated yes</span><br><span class="line"></span><br><span class="line"># 文件重写策略</span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br></pre></td></tr></table></figure>

<p>以下是Redis中关于AOF的主要配置信息：</p>
<ul>
<li>appendonly：默认情况下AOF功能是关闭的，将该选项改为yes以便打开Redis的AOF功能。</li>
<li>appendfilename：这个参数项很好理解了，就是AOF文件的名字。</li>
<li>appendfsync：这个参数项是AOF功能最重要的设置项之一，主要用于设置“真正执行”操作命令向AOF文件中同步的策略。什么叫“真正执行”呢？还记得Linux操作系统对磁盘设备的操作方式吗？ 为了保证操作系统中I/O队列的操作效率，应用程序提交的I/O操作请求一般是被放置在linux Page Cache中的，然后再由Linux操作系统中的策略自行决定正在写到磁盘上的时机。而Redis中有一个fsync()函数，可以将Page Cache中待写的数据真正写入到物理设备上，而缺点是频繁调用这个fsync()函数干预操作系统的既定策略，可能导致I/O卡顿的现象频繁 。与上节对应，appendfsync参数项可以设置三个值，分别是：always、everysec、no，默认的值为everysec。</li>
<li>no-appendfsync-on-rewrite：always和everysec的设置会使真正的I/O操作高频度的出现，甚至会出现长时间的卡顿情况，这个问题出现在操作系统层面上，所有靠工作在操作系统之上的Redis是没法解决的。为了尽量缓解这个情况，Redis提供了这个设置项，保证在完成fsync函数调用时，不会将这段时间内发生的命令操作放入操作系统的Page Cache（这段时间Redis还在接受客户端的各种写操作命令）。</li>
<li>auto-aof-rewrite-percentage：上文说到在生产环境下，技术人员不可能随时随地使用“BGREWRITEAOF”命令去重写AOF文件。所以更多时候我们需要依靠Redis中对AOF文件的自动重写策略。Redis中对触发自动重写AOF文件的操作提供了两个设置：auto-aof-rewrite-percentage表示如果当前AOF文件的大小超过了上次重写后AOF文件的百分之多少后，就再次开始重写AOF文件。例如该参数值的默认设置值为100，意思就是如果AOF文件的大小超过上次AOF文件重写后的1倍，就启动重写操作。</li>
<li>auto-aof-rewrite-min-size：参考auto-aof-rewrite-percentage选项的介绍，auto-aof-rewrite-min-size设置项表示启动AOF文件重写操作的AOF文件最小大小。如果AOF文件大小低于这个值，则不会触发重写操作。注意，auto-aof-rewrite-percentage和auto-aof-rewrite-min-size只是用来控制Redis中自动对AOF文件进行重写的情况，如果是技术人员手动调用“BGREWRITEAOF”命令，则不受这两个限制条件左右。#</li>
</ul>
<h3 id="4-深入理解AOF重写"><a href="#4-深入理解AOF重写" class="headerlink" title="4. 深入理解AOF重写"></a>4. 深入理解AOF重写</h3><blockquote>
<p>AOF会记录每个写命令到AOF文件，随着时间越长，AOF文件会越来越大，如果不加以控制，会对Redis服务器，甚至操作系统造成影响，而且AOF文件越大，数据恢复越慢，<br>为了解决AOF文件体积膨胀的问题，Redis提供AOF文件重写机制来对AOF文件进行”瘦身”。</p>
</blockquote>
<h4 id="4-1-图例"><a href="#4-1-图例" class="headerlink" title="4.1. 图例"></a>4.1. 图例</h4><p>Redis通过创建一个新的AOF文件来替换现有的AOF，新旧两个AOF文件保存的数据相同，但新的文件没有冗余的命令</p>
<p><img src="/redis-special-aof/index/2.png"></p>
<h4 id="4-2-AOF重写会阻塞吗？"><a href="#4-2-AOF重写会阻塞吗？" class="headerlink" title="4.2. AOF重写会阻塞吗？"></a>4.2. AOF重写会阻塞吗？</h4><p>AOF重写过程是由后台进程<code>bgrewriteaof</code>来完成的。 主线程fork出后台的<code>bgrewriteaof</code>子进程，fork会把主线程的内存拷贝一份给<code>bgrewriteaof</code>子进程，<br>这里面就包含来数据库的最新数据，然后，<code>bgrewriteaof</code>子进程就可以在不影响主线程的情况下，逐一把拷贝的数据写成操作，记入重写日志。</p>
<p><strong>所以aof在重写是，在fork进程时会阻塞主线程的。</strong></p>
<h4 id="4-3-AOF日志何时会重写"><a href="#4-3-AOF日志何时会重写" class="headerlink" title="4.3. AOF日志何时会重写"></a>4.3. AOF日志何时会重写</h4><p>有两个配置项控制AOF重写的触发：</p>
<ul>
<li><p><code>auto-aof-rewrite-min-size</code>: 表示运行AOF重写时文件的最小大小，默认是<strong>64MB</strong></p>
</li>
<li><p><code>auto-aof-rewrite-percentage</code>: 这个值的计算方式是，当前aof文件大小和上一次重写aof文件的大小差值，再除以上一次重写后的aof文件大小，也就是当前aof文件比上一次重写aof文件的增量大小，和上一次重写后aof后文件大小的比值</p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">简单公式：(current - before) / before</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-4-重写日志时，有新的数据写入"><a href="#4-4-重写日志时，有新的数据写入" class="headerlink" title="4.4. 重写日志时，有新的数据写入"></a>4.4. 重写日志时，有新的数据写入</h4><p>重写过程总结为：”一个拷贝，两次日志”。在fork出子进程时的拷贝，以及在重写时，如果有新的数据写入。主线程就会将命令记录到两个aof日志内存缓冲区中，如果AOF写回策略配置的时<code>always</code>，则直接将命令写回旧的日志文件，并且保存一份命令至AOF重写缓冲区，这些操作对新的日志文件时不存在影响的。</p>
<ul>
<li><p>旧日志文件：主线程使用的日志文件</p>
</li>
<li><p>新日志文件：<code>bgrewriteaof</code>进程使用的日志文件</p>
</li>
</ul>
<p>而在<code>bgrewriteaof</code>子进程完成日志重写操作后，会提示主线程，主线程会将AOF重写缓冲区中的命令追加到新的日志文件后面，这时在高并发的情况下，AOF重写缓冲区积累可能会很大，这样就会造成阻塞，<br>Redis后来通过Linux管道技术让aof重写期间就能同时进行回放，这样aof重写结束后只需回放少量剩余的数据即可。</p>
<p>最后通过修改文件名的方式，保证文件切换的原子性。</p>
<p>在AOF重写日志期间发生宕机的话，因为日志文件还没有切换，所以恢复数据时，用的还是旧的日志文件。</p>
<p><strong>总结操作：</strong></p>
<ul>
<li><p>主线程fork出子进程重写aof日志</p>
</li>
<li><p>子进程重写日志完成后，主线程追加aof日志缓冲</p>
</li>
<li><p>替换日志文件</p>
</li>
</ul>
<blockquote>
<p><strong>温馨提示：</strong></p>
<p>这里的进程和线程的概念有点混乱。因为后台的bgreweiteaof进程就只有一个线程在操作，而主线程是Redis的操作进程，也是单独一个线程。这里想表达的是Redis主进程在fork出一个后台进程之后，后台进程的操作和主进程是没有任何关联的，也不会阻塞主线程</p>
</blockquote>
<p><img src="/redis-special-aof/index/3.png"></p>
<h4 id="4-5-主线程fork出子进程的是如何复制内存数据的？"><a href="#4-5-主线程fork出子进程的是如何复制内存数据的？" class="headerlink" title="4.5. 主线程fork出子进程的是如何复制内存数据的？"></a>4.5. 主线程fork出子进程的是如何复制内存数据的？</h4><p>fork采用操作系统提供的写时复制（copy on write）机制，就是为了避免一次性拷贝大量内存数据给子进程造成阻塞。fork子进程时，子进程时会拷贝父进程的页表，即虚实映射关系（虚拟内存和物理内存的映射索引表），而不会拷贝物理内存。这个拷贝会消耗大量cpu资源，并且拷贝完成前会阻塞主线程，阻塞时间取决于内存中的数据量，数据量越大，则内存页表越大。拷贝完成后，父子进程使用相同的内存地址空间。</p>
<p>但主进程是可以有数据写入的，这时候就会拷贝物理内存中的数据。如下图（进程1看做是主进程，进程2看做是子进程）：<br><img src="/redis-special-aof/index/4.png"></p>
<p>在主进程有数据写入时，而这个数据刚好在页c中，操作系统会创建这个页面的副本（页c的副本），即拷贝当前页的物理数据，将其映射到主进程中，而子进程还是使用原来的的页c。</p>
<h4 id="4-6-在重写日志整个过程时，主线程有哪些地方会被阻塞？"><a href="#4-6-在重写日志整个过程时，主线程有哪些地方会被阻塞？" class="headerlink" title="4.6. 在重写日志整个过程时，主线程有哪些地方会被阻塞？"></a>4.6. 在重写日志整个过程时，主线程有哪些地方会被阻塞？</h4><ul>
<li>fork子进程时，需要拷贝虚拟页表，会对主线程阻塞。</li>
<li>主进程有<code>bigkey</code>写入时，操作系统会创建页面的副本，并拷贝原有的数据，会对主线程阻塞。</li>
<li>子进程重写日志完成后，主进程追加aof重写缓冲区时可能会对主线程阻塞。</li>
</ul>
<h4 id="4-7-为什么AOF重写不复用原AOF日志？"><a href="#4-7-为什么AOF重写不复用原AOF日志？" class="headerlink" title="4.7. 为什么AOF重写不复用原AOF日志？"></a>4.7. 为什么AOF重写不复用原AOF日志？</h4><ul>
<li><p>父子进程写同一个文件会产生竞争问题，影响父进程的性能。</p>
</li>
<li><p>如果AOF重写过程中失败了，相当于污染了原本的AOF文件，无法做恢复数据使用。</p>
</li>
</ul>
<h3 id="5-RDB和AOF混合方式（4-0版本）"><a href="#5-RDB和AOF混合方式（4-0版本）" class="headerlink" title="5. RDB和AOF混合方式（4.0版本）"></a>5. RDB和AOF混合方式（4.0版本）</h3><blockquote>
<p>Redis4.0帮本提出了一个混合使用AOF日志和内存快照的方法，简单来说，内存快照以一定的频率执行，在两次快照期间，使用AOF日志记录这期间的所有命令操作。</p>
</blockquote>
<p>这样依赖，快照不用很频繁的执行，这就避免了频繁fork对主线程的影响，而且AOF日志只用记录两次快照间的操作，不需要记录所有的操作，避免来文件过大的情况，也避免来重写开销。</p>
<p>如下图所示，T1和T2时刻的修改，用AOF日志记录，等到第二次做全量快照时，就可以清空AOF日志，因为此时的修改已经记录到快照中，恢复时就不再用日志来。</p>
<p><img src="/redis-special-aof/index/5.png"></p>
<p>这个方法既能享受到 RDB 文件快速恢复的好处，又能享受到 AOF 只记录操作命令的简单优势, 实际环境中用的很多。</p>
<h3 id="6-从持久化中恢复数据"><a href="#6-从持久化中恢复数据" class="headerlink" title="6. 从持久化中恢复数据"></a>6. 从持久化中恢复数据</h3><blockquote>
<p>数据的备份、持久化做完来，我们如何从这些持久化文件中恢复数据呢？如果一台服务器上既有RDB文件，又有AOF文件，该加载谁呢？</p>
</blockquote>
<p>其实想要从这些文件中恢复数据，只需要重新启动Redis即可。通过以下图了解流程：<br><img src="/redis-special-aof/index/6.png"></p>
<ul>
<li><p>redis重启时判断是否开启aof，如果开启了aof，那么就优先加载aof文件；</p>
</li>
<li><p>如果aof存在，那么就去加载aof文件，加载成功的话redis重启成功，如果aof文件加载失败，那么会打印日志表示启动失败，此时可以去修复aof文件后重新启动；</p>
</li>
<li><p>若aof文件不存在，那么redis就会转而去加载rdb文件，如果rdb文件不存在，redis直接启动成功；</p>
</li>
<li><p>如果rdb文件存在就会去加载rdb文件恢复数据，如加载失败则打印日志提示启动失败，如加载成功，那么redis重启成功，且使用rdb文件恢复数据；</p>
</li>
</ul>
<p>那么为什么会优先加载AOF呢？因为AOF保存的数据更完整，通过上面的分析我们知道AOF基本上最多损失1s的数据。</p>
<h3 id="7-性能与实践"><a href="#7-性能与实践" class="headerlink" title="7. 性能与实践"></a>7. 性能与实践</h3><p>RDB的快照、AOF的重写都需要fork，这是一个重量级操作，会对Redis造成阻塞。因此为了不影响Redis主进程响应，我们需要尽可能降低阻塞。</p>
<ul>
<li><p>降低fork的频率，比如可以手动来触发RDB生成快照、与AOF重写；</p>
</li>
<li><p>控制Redis最大使用内存，防止fork耗时过长；</p>
</li>
<li><p>使用更牛逼的硬件；</p>
</li>
<li><p>合理配置Linux的内存分配策略，避免因为物理内存不足导致fork失败。</p>
</li>
</ul>
<p>在线上我们到底该怎么做？我提供一些自己的实践经验。</p>
<ol>
<li>如果Redis中的数据并不是特别敏感或者可以通过其它方式重写生成数据，可以关闭持久化，如果丢失数据可以通过其它途径补回；</li>
<li>自己制定策略定期检查Redis的情况，然后可以手动触发备份、重写数据；</li>
<li>单机如果部署多个实例，要防止多个机器同时运行持久化、重写操作，防止出现内存、CPU、IO资源竞争，让持久化变为串行；</li>
<li>可以加入主从机器，利用一台从机器进行备份处理，其它机器正常响应客户端的命令；</li>
<li>RDB持久化与AOF持久化可以同时存在，配合使用</li>
</ol>
<p>感谢原博文<a href="https://pdai.tech/md/db/nosql-redis/db-redis-x-rdb-aof.html#rdb%E5%92%8Caof%E6%B7%B7%E5%90%88%E6%96%B9%E5%BC%8F-4-0%E7%89%88%E6%9C%AC">Redis进阶</a> !!!</p>
]]></content>
      <categories>
        <category>07 Redis</category>
      </categories>
      <tags>
        <tag>redis专题</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot集成Selenium</title>
    <url>/selenium/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">


<h3 id="1-介绍Selenium"><a href="#1-介绍Selenium" class="headerlink" title="1. 介绍Selenium"></a>1. 介绍Selenium</h3><p>Selenium是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera，Edge等。这个工具的主要功能包括：测试与浏览器的兼容性——测试应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成.Net、Java、Perl等不同语言的测试脚本。</p>
<h3 id="2-简单Demo"><a href="#2-简单Demo" class="headerlink" title="2. 简单Demo"></a>2. 简单Demo</h3><ol>
<li>下载驱动<code>chromedriver</code> <figure class="highlight http"><figcaption><span>request</span></figcaption><table><tr><td class="code"><pre><span class="line">-- 根据自己chrome的版本并下载相对应的驱动</span><br><span class="line">http://chromedriver.storage.googleapis.com/index.html</span><br></pre></td></tr></table></figure>

 <img src="/selenium/index/1.png"></li>
</ol>
<ol start="2">
<li><p>配置<code>chromedriver</code></p>
<p><strong>Window配置</strong>：下载好后解压放到你喜欢的位置，放到D:\Program Files\ChromeDriver文件夹下，记好这个路径配置要用到。接着右键我的电脑==&gt;属性==&gt;高级系统设置==&gt;环境变量==&gt;选中系统变量中的Path，点击编辑，点击新建，把前面提到的文件路径添加进去，点击确定至窗口关闭。</p>
<p><strong>Mac</strong>: 使用终端打开即可。</p>
</li>
<li><p>引入依赖，<a href="https://mvnrepository.com/search?q=org.seleniumhq.selenium">依赖包下载地址</a></p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.seleniumhq.selenium<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>selenium-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 用到了@WithMockUser注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="comment">&lt;!-- 解决报错：com.google.common.util.concurrent.SimpleTimeLimiter.create(Ljava/util/concurrent/ExecutorService;)Lcom/google/common/util/concurrent/SimpleTimeLimiter; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写测试类</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="comment">//设置测试端口号</span></span><br><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT, properties = &#123;&quot;server.port=1000&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeleniumTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TestRestTemplate restRestTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ChromeDriver driver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">openBrowser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//初始化参数，chromeDriver驱动包的路径</span></span><br><span class="line">        System.setProperty(<span class="string">&quot;webdriver.chrome.driver&quot;</span>, <span class="string">&quot;/Users/xiaoyuge/Desktop/browser/chromedriver&quot;</span>);</span><br><span class="line">        driver = <span class="keyword">new</span> ChromeDriver();</span><br><span class="line">        <span class="comment">// 最大化浏览器</span></span><br><span class="line">        driver.manage().window().maximize();</span><br><span class="line">        <span class="comment">//加载URL</span></span><br><span class="line">        driver.get(<span class="string">&quot;http://localhost:8082/mpg/login/auth1&quot;</span>);</span><br><span class="line">        <span class="comment">//等待加载完成</span></span><br><span class="line">        driver.manage().timeouts().implicitlyWait(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeBrowser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        driver.quit();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loginTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取页面元素</span></span><br><span class="line">        WebElement username = driver.findElementById(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        WebElement password = driver.findElementById(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">        WebElement submit = driver.findElementByClassName(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">        username.sendKeys(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        password.sendKeys(<span class="string">&quot;admin1&quot;</span>);</span><br><span class="line">        <span class="comment">//提交表单</span></span><br><span class="line">        submit.click();</span><br><span class="line">        <span class="comment">//获取cookies</span></span><br><span class="line">        Set&lt;org.openqa.selenium.Cookie&gt; cookies = driver.manage().getCookies();</span><br><span class="line">        System.out.println(<span class="string">&quot;Size: &quot;</span> + cookies.size());</span><br><span class="line">        Iterator&lt;Cookie&gt; itr = cookies.iterator();</span><br><span class="line">        CookieStore cookieStore = <span class="keyword">new</span> BasicCookieStore();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (itr.hasNext()) &#123;</span><br><span class="line">            Cookie cookie = itr.next();</span><br><span class="line">            BasicClientCookie basicClientCo = <span class="keyword">new</span> BasicClientCookie(cookie.getName(), cookie.getValue());</span><br><span class="line">            basicClientCo.setDomain(cookie.getDomain());</span><br><span class="line">            basicClientCo.setPath(cookie.getPath());</span><br><span class="line">            cookieStore.addCookie(basicClientCo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如此便能拿到登录后的cookie，后续需要访问该网站其他网页，只需将拿到的cookie放到请求中“骗过”服务器即可</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@WithMockUser(username = &quot;admin&quot;, password = &quot;admin1&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSources dataSources = restRestTemplate.getForObject(<span class="string">&quot;&quot;</span>, DataSources.class);</span><br><span class="line">        Assert.assertEquals(<span class="string">&quot;22&quot;</span>, dataSources.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>13 开源组件</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>转换成小写字母</title>
    <url>/algoright-2/index.html</url>
    <content><![CDATA[<p>实现函数 ToLowerCase()，该函数接收一个字符串参数 str，并将该字符串中的大写字母转换成小写字母，之后返回新的字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入: &quot;Hello&quot;</span><br><span class="line">输出: &quot;hello&quot;</span><br><span class="line"></span><br><span class="line">示例2：</span><br><span class="line">输入: &quot;LOVELY&quot;</span><br><span class="line">输出: &quot;lovely&quot;</span><br></pre></td></tr></table></figure>
<h3 id="方法一：-ASCCII码"><a href="#方法一：-ASCCII码" class="headerlink" title="方法一： ASCCII码"></a>方法一： ASCCII码</h3><p><strong>解题思路：通过ascii码表操作字符串即可,a和A相差32；</strong></p>
<ul>
<li>a-z: 97 - 122</li>
<li>A-Z: 65 - 90</li>
<li>0-9: 48 - 57<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toLowerCase</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> ch : str.toCharArray()) &#123;</span><br><span class="line">        <span class="comment">// a-z：97-122  A-Z：65-90  0-9：48-57</span></span><br><span class="line">        <span class="keyword">if</span> (ch &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            sb.append((<span class="keyword">char</span>)(ch + <span class="number">32</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sb.append(ch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
或者：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toLowerCase</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] ch = str.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; ch[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">            ch[i] += <span class="number">32</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="方法二：-位运算"><a href="#方法二：-位运算" class="headerlink" title="方法二： 位运算"></a>方法二： 位运算</h3><p><strong>解题思路：</strong></p>
<ul>
<li>大写变小写、小写变大写：字符 ^= 32;</li>
<li>大写变小写、小写变小写：字符 |= 32;</li>
<li>大写变大写、小写变大写：字符 &amp;= 33;</li>
</ul>
<p>ASCII码表中大写的A是65，小写的a是97，它们的差是32<br>65 | 32 转为二进制（按8位来算）可以得到 0100 0001 | 0010 0000 = 0110 0001 = 97 = a</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toLowerCase</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (str == <span class="keyword">null</span> || str.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span>[] ch = str.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;</span><br><span class="line">        ch[i] |= <span class="number">32</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> String.valueOf(ch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>10 算法</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>mysqldumpslow分析慢查询日志</title>
    <url>/mysqldumpslow%E5%88%86%E6%9E%90%E6%85%A2%E6%9F%A5%E8%AF%A2%E6%97%A5%E5%BF%97/index.html</url>
    <content><![CDATA[<p>按照平均查询输出5行慢查询记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s at -t 5 /phpstudy/data/slowquery.log</span><br></pre></td></tr></table></figure>
<ul>
<li>-s   排序方式，可选值有c（记录次数）、t（查询时间）、l（锁定时间）、r（返回记录）、a（平均）</li>
<li>-t    显示的记录数Spawn failed解决方式</li>
<li>-g   后面跟正则表达式（如 left join），不区分大小写。</li>
<li>-r   正序排序，即从小到大排序。</li>
<li>-d  调试 debug</li>
<li>-v   查看版本</li>
</ul>
<p>按照平均查询时间排序且只显示含有left join的记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldumpslow -s at -g &#x27;left join&#x27; /phpstudy/data/slowquery.log</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql行列转置</title>
    <url>/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E7%BD%AE/index.html</url>
    <content><![CDATA[<p>数据表：<br><img src="/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E7%BD%AE/index/01.png" alt="原始数据"></p>
<p>行转列结果为：<br><img src="/mysql%E8%A1%8C%E5%88%97%E8%BD%AC%E7%BD%AE/index/02.png" alt="转置后结果"><br>数据库表语句：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_score(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>,  #名字</span><br><span class="line">    Subject <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">not</span> <span class="keyword">null</span>, #科目</span><br><span class="line">    Fraction <span class="keyword">double</span> <span class="keyword">default</span> <span class="number">0</span>  #分数</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `t_score`(name,Subject,Fraction) <span class="keyword">VALUES</span></span><br><span class="line">     (<span class="string">&#x27;王海&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="number">86</span>),</span><br><span class="line">     (<span class="string">&#x27;王海&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="number">83</span>),</span><br><span class="line">     (<span class="string">&#x27;王海&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="number">93</span>),</span><br><span class="line">     (<span class="string">&#x27;陶俊&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="number">88</span>),</span><br><span class="line">     (<span class="string">&#x27;陶俊&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="number">84</span>),</span><br><span class="line">     (<span class="string">&#x27;陶俊&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="number">94</span>),</span><br><span class="line">     (<span class="string">&#x27;刘可&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="number">80</span>),</span><br><span class="line">     (<span class="string">&#x27;刘可&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="number">86</span>),</span><br><span class="line">     (<span class="string">&#x27;刘可&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="number">88</span>),</span><br><span class="line">     (<span class="string">&#x27;李春&#x27;</span>, <span class="string">&#x27;语文&#x27;</span>, <span class="number">89</span>),</span><br><span class="line">     (<span class="string">&#x27;李春&#x27;</span>, <span class="string">&#x27;数学&#x27;</span>, <span class="number">80</span>),</span><br><span class="line">     (<span class="string">&#x27;李春&#x27;</span>, <span class="string">&#x27;英语&#x27;</span>, <span class="number">87</span>);</span><br></pre></td></tr></table></figure>

<ol>
<li>方法一：使用if <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    name <span class="keyword">as</span> 名字 ,</span><br><span class="line">    <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;语文&#x27;</span>,Fraction,<span class="number">0</span>)) <span class="keyword">as</span> 语文,</span><br><span class="line">    <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;数学&#x27;</span>,Fraction,<span class="number">0</span>))<span class="keyword">as</span> 数学, </span><br><span class="line">    <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;英语&#x27;</span>,Fraction,<span class="number">0</span>))<span class="keyword">as</span> 英语,</span><br><span class="line">    round(<span class="built_in">AVG</span>(Fraction),<span class="number">2</span>) <span class="keyword">as</span> 平均分,</span><br><span class="line">    <span class="built_in">SUM</span>(Fraction) <span class="keyword">as</span> 总分</span><br><span class="line"><span class="keyword">from</span> t_score <span class="keyword">group</span> <span class="keyword">by</span> name</span><br><span class="line"><span class="comment">-- 如果不用求总分的话，不需要下面的union</span></span><br><span class="line"><span class="keyword">union</span>(</span><br><span class="line">    <span class="keyword">select</span> name <span class="keyword">as</span> 名字 , <span class="built_in">sum</span>(语文) Chinese,<span class="built_in">sum</span>(数学) Math,<span class="built_in">sum</span>(英语) English,round(<span class="built_in">AVG</span>(总分),<span class="number">2</span>)<span class="keyword">as</span> 平均分,<span class="built_in">sum</span>(总分) score  <span class="keyword">from</span>(</span><br><span class="line">        <span class="keyword">select</span> <span class="string">&#x27;TOTAL&#x27;</span> <span class="keyword">as</span> name,</span><br><span class="line">        <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;语文&#x27;</span>,Fraction,<span class="number">0</span>)) <span class="keyword">as</span> 语文,</span><br><span class="line">        <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;数学&#x27;</span>,Fraction,<span class="number">0</span>))<span class="keyword">as</span> 数学, </span><br><span class="line">        <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;英语&#x27;</span>,Fraction,<span class="number">0</span>))<span class="keyword">as</span> 英语,</span><br><span class="line">        <span class="built_in">SUM</span>(Fraction) <span class="keyword">as</span> 总分</span><br><span class="line">        <span class="keyword">from</span> t_score <span class="keyword">group</span> <span class="keyword">by</span> Subject </span><br><span class="line">    )t <span class="keyword">GROUP</span> <span class="keyword">BY</span> t.`name`</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li>方法二：使用case <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> name <span class="keyword">as</span> name,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Subject <span class="operator">=</span> <span class="string">&#x27;语文&#x27;</span> <span class="keyword">then</span> Fraction <span class="keyword">end</span>) <span class="keyword">as</span> Chinese,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Subject <span class="operator">=</span> <span class="string">&#x27;数学&#x27;</span> <span class="keyword">then</span> Fraction <span class="keyword">end</span>) <span class="keyword">as</span> Math,</span><br><span class="line"><span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Subject <span class="operator">=</span> <span class="string">&#x27;英语&#x27;</span> <span class="keyword">then</span> Fraction <span class="keyword">end</span>) <span class="keyword">as</span> English,</span><br><span class="line"><span class="built_in">sum</span>(fraction)<span class="keyword">as</span> score</span><br><span class="line"><span class="keyword">from</span> t_score <span class="keyword">group</span> <span class="keyword">by</span> name</span><br><span class="line"><span class="comment">-- 如果不用求总分的话，不需要下面的union</span></span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">(</span><br><span class="line">    <span class="keyword">select</span> name <span class="keyword">as</span> Name,<span class="built_in">sum</span>(Chinese) <span class="keyword">as</span> Chinese,<span class="built_in">sum</span>(Math) <span class="keyword">as</span> Math,<span class="built_in">sum</span>(English) <span class="keyword">as</span> English,<span class="built_in">sum</span>(score) <span class="keyword">as</span> score <span class="keyword">from</span>(</span><br><span class="line">    <span class="keyword">select</span> <span class="string">&#x27;TOTAL&#x27;</span> <span class="keyword">as</span> name,</span><br><span class="line">    <span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Subject <span class="operator">=</span> <span class="string">&#x27;语文&#x27;</span> <span class="keyword">then</span> Fraction <span class="keyword">end</span>) <span class="keyword">as</span> Chinese,</span><br><span class="line">    <span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Subject <span class="operator">=</span> <span class="string">&#x27;数学&#x27;</span> <span class="keyword">then</span> Fraction <span class="keyword">end</span>) <span class="keyword">as</span> Math,</span><br><span class="line">    <span class="built_in">sum</span>(<span class="keyword">case</span> <span class="keyword">when</span> Subject <span class="operator">=</span> <span class="string">&#x27;英语&#x27;</span> <span class="keyword">then</span> Fraction <span class="keyword">end</span>) <span class="keyword">as</span> English,</span><br><span class="line">    <span class="built_in">sum</span>(fraction)<span class="keyword">as</span> score</span><br><span class="line">    <span class="keyword">from</span> t_score <span class="keyword">group</span> <span class="keyword">by</span> Subject,name)t <span class="keyword">GROUP</span> <span class="keyword">BY</span> t.`name`</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li>
<li>方法三：使用with rollup<br>在group分组字段的基础上在进行统计数据； <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    <span class="comment">-- coalesce(name,&#x27;TOTAL&#x27;) name,</span></span><br><span class="line">    ifnull(name,<span class="string">&#x27;TOTAL&#x27;</span>) name,</span><br><span class="line">    <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;语文&#x27;</span>,Fraction,<span class="number">0</span>)) <span class="keyword">as</span> 语文,</span><br><span class="line">    <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;英语&#x27;</span>,Fraction,<span class="number">0</span>)) <span class="keyword">as</span> 英语,</span><br><span class="line">    <span class="built_in">sum</span>(if(Subject<span class="operator">=</span><span class="string">&#x27;数学&#x27;</span>,Fraction,<span class="number">0</span>))<span class="keyword">as</span> 数学,</span><br><span class="line">    <span class="built_in">sum</span>(Fraction) 总分</span><br><span class="line"><span class="keyword">from</span> t_score <span class="keyword">group</span> <span class="keyword">by</span> name <span class="keyword">with</span> <span class="keyword">rollup</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>ElasticSearch安装</title>
    <url>/ElasticSearch/index.html</url>
    <content><![CDATA[<h2 id="1-JDK14安装"><a href="#1-JDK14安装" class="headerlink" title="1. JDK14安装"></a>1. JDK14安装</h2><ol>
<li><p>下载jdk14：  <a href="https://jdk.java.net/14/">https://jdk.java.net/14/</a></p>
</li>
<li><p>将文件存放在linux系统某文件夹内</p>
</li>
<li><p>解压</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf openjdk-14.0.2_linux-x64_bin.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>配置环境变量</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#在文件最末尾添加，其中JAVA_HOME是jdk解压后的文件路径</span></span></span><br><span class="line">JAVA_HOME=/usr/lib/tools/jdk-14.0.2</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">CLASSPATH=$JAVA_HOME/jre/lib/ext:$JAVA_HOME/lib/tools.jar</span><br><span class="line">export PATH JAVA_HOME CLASSPATH</span><br></pre></td></tr></table></figure></li>
<li><p>保存后，更新配置文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li><p>查看JDK是否配置完成</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>出现下图表示安装成功！</p>
<p><img src="/ElasticSearch/index/image-20200806170145844.png" alt="image-20200806170145844"></p>
</li>
</ol>
<h2 id="2-ElasticSearch安装"><a href="#2-ElasticSearch安装" class="headerlink" title="2. ElasticSearch安装"></a>2. ElasticSearch安装</h2><ol>
<li><p>解压tar.gz包</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf elasticsearch-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>添加elasticsearch用户</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd elastic</span><br></pre></td></tr></table></figure></li>
<li><p>赋予elastic search操作文件夹的权限</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure></li>
<li><p>查看本机的hostname</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hostname</span><br><span class="line"><span class="meta">#</span><span class="bash">localhost.localdomain</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改elastic search配置</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> cd ./elasticsearch-7.8.0/config</span><br><span class="line">vim elasticsearch.yml</span><br></pre></td></tr></table></figure>

<p><strong>elasticsearch.yml</strong></p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ======================== Elasticsearch Configuration =========================</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># <span class="doctag">NOTE:</span> Elasticsearch comes with reasonable defaults for most settings.</span></span><br><span class="line"><span class="comment">#       Before you set out to tweak and tune the configuration, make sure you</span></span><br><span class="line"><span class="comment">#       understand what are you trying to accomplish and the consequences.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The primary way of configuring a node is via this file. This template lists</span></span><br><span class="line"><span class="comment"># the most important settings you may want to configure for a production cluster.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Please consult the documentation for further information on configuration options:</span></span><br><span class="line"><span class="comment"># https://www.elastic.co/guide/en/elasticsearch/reference/index.html</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Cluster -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use a descriptive name for your cluster:</span></span><br><span class="line"><span class="comment">#集群名称，默认可以不修改，此处 xiaoyuge</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">xiaoyuge</span></span><br><span class="line"><span class="comment"># ------------------------------------ Node ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Use a descriptive name for the node:</span></span><br><span class="line"><span class="comment">#节点名称，必须修改 ，默认修改为当前机器名称，若是多实例则需要区分</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">xiaoyuge-local1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Add custom attributes to the node:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#node.attr.rack: r1</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------------------- Paths ------------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to directory where to store the data (separate multiple locations by comma):</span></span><br><span class="line"><span class="comment">##数据目录与日志目录，默认在当前运行程序下，生产环境需要指定</span></span><br><span class="line"><span class="comment">#path.data: /path/to/data</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Path to log files:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#path.logs: /path/to/logs</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ----------------------------------- Memory -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Lock the memory on startup:</span></span><br><span class="line"><span class="comment">#内存交换锁定，此处需要操作系统设置才生效</span></span><br><span class="line"><span class="comment">#bootstrap.memory_lock: true</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Make sure that the heap size is set to about half the memory available</span></span><br><span class="line"><span class="comment"># on the system and that the owner of the process is allowed to use this</span></span><br><span class="line"><span class="comment"># limit.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Elasticsearch performs poorly when the system is swapping the memory.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Network -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set the bind address to a specific IP (IPv4 or IPv6):</span></span><br><span class="line"><span class="comment">#IP 地址，默认是 local，仅限本机访问，外网不可访问，设置 0.0.0.0 通用做法</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">192.168</span><span class="number">.135</span><span class="number">.111</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Set a custom port for HTTP:</span></span><br><span class="line"><span class="comment">#访问端口，默认 9200，9300，建议明确指定</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">9200</span></span><br><span class="line"><span class="attr">transport.port:</span> <span class="number">9300</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the network module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># --------------------------------- Discovery ----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Pass an initial list of hosts to perform discovery when this node is started:</span></span><br><span class="line"><span class="comment"># The default list of hosts is [&quot;127.0.0.1&quot;, &quot;[::1]&quot;]</span></span><br><span class="line"><span class="comment">## 集群发现配置</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> [<span class="string">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Bootstrap the cluster using an initial set of master-eligible nodes:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> [<span class="string">&quot;192.168.135.111:9300&quot;</span>]</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the discovery and cluster formation module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Gateway -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Block initial recovery after a full cluster restart until N nodes are started:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#gateway.recover_after_nodes: 3</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For more information, consult the gateway module documentation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># ---------------------------------- Various -----------------------------------</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Require explicit names when deleting indices:</span></span><br><span class="line"><span class="comment">##防止批量删除索引</span></span><br><span class="line"><span class="attr">action.destructive_requires_name:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#设置密码</span></span><br><span class="line"><span class="attr">xpack.security.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">xpack.license.self_generated.type:</span> <span class="string">trial</span></span><br><span class="line"><span class="attr">xpack.security.transport.ssl.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">&quot;*&quot;</span></span><br><span class="line"><span class="attr">http.cors.allow-headers:</span> <span class="string">Authorization</span></span><br></pre></td></tr></table></figure></li>
<li><p>切换为elastic search用户，然后启动elastic search</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su elastic			#切换用户</span><br><span class="line">./bin/elasticsearch -d      #后台启动</span><br></pre></td></tr></table></figure></li>
<li><p>设置密码</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./bin/elasticsearch-setup-passwords interactive</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">执行设置用户名和密码的命令,这里需要为4个用户分别设置密码，elastic, kibana, logstash_system,beats_system</span></span><br><span class="line">Initiating the setup of passwords for reserved users elastic,kibana,logstash_system,beats_system.</span><br><span class="line">You will be prompted to enter passwords as the process progresses.</span><br><span class="line">Please confirm that you would like to continue [y/N]y</span><br><span class="line">Enter password for [elastic]:</span><br><span class="line">passwords must be at least [6] characters long</span><br><span class="line">Try again.</span><br><span class="line">Enter password for [elastic]:</span><br><span class="line">Reenter password for [elastic]:</span><br><span class="line">Passwords do not match.</span><br><span class="line">Try again.</span><br><span class="line">Enter password for [elastic]:</span><br><span class="line">Reenter password for [elastic]:</span><br><span class="line">Enter password for [kibana]:</span><br><span class="line">Reenter password for [kibana]:</span><br><span class="line">Enter password for [logstash_system]:</span><br><span class="line">Reenter password for [logstash_system]:</span><br><span class="line">Enter password for [beats_system]:</span><br><span class="line">Reenter password for [beats_system]:</span><br><span class="line">Changed password for user [kibana]</span><br><span class="line">Changed password for user [logstash_system]</span><br><span class="line">Changed password for user [beats_system]</span><br><span class="line">Changed password for user [elastic]</span><br></pre></td></tr></table></figure></li>
</ol>
<p><strong>常见异常：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash">java.lang.RuntimeException: can not run elasticsearch as root</span></span><br><span class="line"><span class="meta"> #</span><span class="bash">切换为elastic search用户，不能用root项目启动</span></span><br><span class="line">  </span><br><span class="line">su elastic</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">Exception <span class="keyword">in</span> thread <span class="string">&quot;main&quot;</span> java.nio.file.AccessDeniedException: /usr/lib/tools/elasticsearch-7.8.0/config/elasticsearch.keystore</span></span><br><span class="line"><span class="meta">#</span><span class="bash">elastic search用户没有操作该文件夹的权限</span></span><br><span class="line">  </span><br><span class="line">su root</span><br><span class="line">chown -R elastic:elastic /usr/lib/tools/elasticsearch-7.8.0/*</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ERROR: [2] bootstrap checks failed</span><br><span class="line">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</span><br><span class="line">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span><span class="bash">分配内存不够</span></span><br><span class="line"><span class="meta">#</span><span class="bash">1. 修改 /etc/security/limits.conf</span></span><br><span class="line">sudo vi /etc/security/limits.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">在文件末尾加上</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 4096</span><br><span class="line">* hard nproc 4096</span><br><span class="line"><span class="meta">#</span><span class="bash">2. 修改 /etc/sysctl.conf</span></span><br><span class="line">sudo vi /etc/sysctl.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">在文件末尾增加</span></span><br><span class="line">vm.max_map_count=262144</span><br><span class="line"><span class="meta">#</span><span class="bash">3. 配置重新生效</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>
<p><strong>效果如下：</strong></p>
<p><img src="/ElasticSearch/index/image-20200807093208470.png" alt="image-20200807093208470"></p>
<h2 id="3-Kibana安装"><a href="#3-Kibana安装" class="headerlink" title="3. Kibana安装"></a>3. Kibana安装</h2><ol>
<li><p>解压文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf kibana-7.8.0-linux-x86_64.tar.gz</span><br></pre></td></tr></table></figure></li>
<li><p>修改配置文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ./config/kibana.yml</span><br></pre></td></tr></table></figure>

<p><strong>kibana.yml:</strong></p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Kibana is served by a back end server. This setting specifies the port to use.</span></span><br><span class="line"><span class="comment">##访问端口，默认无需修改</span></span><br><span class="line"><span class="attr">server.port:</span> <span class="number">5601</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies the address to which the Kibana server will bind. IP addresses and host names are both valid values.</span></span><br><span class="line"><span class="comment"># The default is &#x27;localhost&#x27;, which usually means remote machines will not be able to connect.</span></span><br><span class="line"><span class="comment"># To allow connections from remote users, set this parameter to a non-loopback address.</span></span><br><span class="line"><span class="comment">#访问地址 IP，默认本地 ;如果需要外网访问，则配置0.0.0.0</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Enables you to specify a path to mount Kibana at if you are running behind a proxy.</span></span><br><span class="line"><span class="comment"># Use the `server.rewriteBasePath` setting to tell Kibana if it should remove the basePath</span></span><br><span class="line"><span class="comment"># from requests it receives, and to prevent a deprecation warning at startup.</span></span><br><span class="line"><span class="comment"># This setting cannot end in a slash.</span></span><br><span class="line"><span class="comment">#server.basePath: &quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Specifies whether Kibana should rewrite requests that are prefixed with</span></span><br><span class="line"><span class="comment"># `server.basePath` or require that they are rewritten by your reverse proxy.</span></span><br><span class="line"><span class="comment"># This setting was effectively always `false` before Kibana 6.3 and will</span></span><br><span class="line"><span class="comment"># default to `true` starting in Kibana 7.0.</span></span><br><span class="line"><span class="comment">#server.rewriteBasePath: false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The maximum payload size in bytes for incoming server requests.</span></span><br><span class="line"><span class="comment">#server.maxPayloadBytes: 1048576</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The Kibana server&#x27;s name.  This is used for display purposes.</span></span><br><span class="line"><span class="comment">#server.name: &quot;your-hostname&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The URLs of the Elasticsearch instances to use for all your queries.</span></span><br><span class="line"><span class="comment"># ES 服务指向，集群下配置多个</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> [<span class="string">&quot;http://192.168.135.111:9200&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># When this setting&#x27;s value is true Kibana uses the hostname specified in the server.host</span></span><br><span class="line"><span class="comment"># setting. When the value of this setting is false, Kibana uses the hostname of the host</span></span><br><span class="line"><span class="comment"># that connects to this Kibana instance.</span></span><br><span class="line"><span class="comment">#elasticsearch.preserveHost: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Kibana uses an index in Elasticsearch to store saved searches, visualizations and</span></span><br><span class="line"><span class="comment"># dashboards. Kibana creates a new index if the index doesn&#x27;t already exist.</span></span><br><span class="line"><span class="comment"># Kibana 元数据存储索引名字，默认.kibana 无需修改</span></span><br><span class="line"><span class="comment">#kibana.index: &quot;.kibana&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># The default application to load.</span></span><br><span class="line"><span class="comment">#kibana.defaultAppId: &quot;home&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If your Elasticsearch is protected with basic authentication, these settings provide</span></span><br><span class="line"><span class="comment"># the username and password that the Kibana server uses to perform maintenance on the Kibana</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"> 当前窗口内启动</span></span><br><span class="line"> ./bin/kibana# </span><br><span class="line"><span class="meta">#</span><span class="bash">后台进程启动</span></span><br><span class="line">nohup ./bin/kibana &amp;</span><br></pre></td></tr></table></figure>

<p><strong>效果如下</strong></p>
<p><img src="/ElasticSearch/index/image-20200807093309761.png" alt="image-20200807093309761"></p>
</li>
</ol>
<p><strong>遇见问题：</strong></p>
<ul>
<li><p>root启动报错<img src="/ElasticSearch/index/image-20201211095101816.png" alt="image-20201211095101816"></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换到elastic账户</span></span><br><span class="line">su xiaoyuge</span><br></pre></td></tr></table></figure></li>
<li><p>elastic用户权限不足 <strong>Babel could not write cache to file: /usr/share/kibana/optimize/.babel_register_cache.json</strong><img src="/ElasticSearch/index/image-20201211095258901.png" alt="image-20201211095258901"></p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换到root用户</span></span><br><span class="line">su root </span><br><span class="line"><span class="meta">#</span><span class="bash">赋予elastic账户 xiaoyuge操作权限</span></span><br><span class="line">chown -R xiaoyuge /usr/local/kibana-7.7.1-linux-x86_64</span><br><span class="line"><span class="meta">#</span><span class="bash">切换为elastic账户</span></span><br><span class="line">su xiaoyuge</span><br><span class="line"><span class="meta">#</span><span class="bash">再次启动即可</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>ELK</tag>
      </tags>
  </entry>
  <entry>
    <title>二分查找</title>
    <url>/algorithm/index.html</url>
    <content><![CDATA[<p>二分法查找是一种基于比较目标值和数组中间元素的算法</p>
<ul>
<li>如果目标值 = 中间值，则找到目标值</li>
<li>如果目标值 &lt; 中间值，则在左侧继续搜索</li>
<li>如果目标值 &gt; 中间值，则在右侧继续搜索<br><img src="/algorithm/index/01.png" alt="二分查找"></li>
</ul>
<p><strong>解题思路：</strong></p>
<ul>
<li>初始化指针left = 0, right=n-1;</li>
<li>当left &lt;= right： <ul>
<li>比较中间元素nums[pivot]和目标值target<br>1.target = nums[pivot], 返回pivot<br>2.target &gt; nums[pivot], 则在右侧继续搜索left = pivot+1<br>3.target &lt; nums[pivot], 则在左侧继续搜索right = pivot+1<br><img src="/algorithm/index/02.png"><br><img src="/algorithm/index/03.png"></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target  ，</span></span><br><span class="line"><span class="comment"> * 写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。</span></span><br><span class="line"><span class="comment"> * 输入: nums = [-1,0,3,5,9,12], target = 9</span></span><br><span class="line"><span class="comment"> * 输出: 4</span></span><br><span class="line"><span class="comment"> * 解释: 9 出现在 nums 中并且下标为 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> pivot, left =<span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right)&#123;</span><br><span class="line">        pivot = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[pivot] == target)&#123;</span><br><span class="line">            <span class="keyword">return</span> pivot;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (nums[pivot] &lt; target)&#123;</span><br><span class="line">            left = pivot + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            right = pivot - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>复杂度分析：</strong></p>
<ul>
<li>时间复杂度：O(logN) </li>
<li>空间复杂度：O(1)</li>
</ul>
]]></content>
      <categories>
        <category>10 算法</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>ConcurrentHashMap线程安全</title>
    <url>/ConcurrentHashMap/index.html</url>
    <content><![CDATA[<p>##1. jdk1.7 ConcurrentHashMap<br>jdk1.7 ConcurrentHashMap是由一个Segment数组和多个HashEntry数组组成<br><img src="/ConcurrentHashMap/index/01.png" alt="image-20201210103251475"><br>其实就是将HashMap分为多个小HashMap,每个Segment元素维护一个小HashMap,目的是锁分离，本来实现同步，直接可以是对整个HashMap加锁，但是加锁粒度太大，影响并发性能，所以变换成此结构，仅仅对Segment元素加锁，降低锁粒度，提高并发性能</p>
<p>###1.1 初始化过程<br>由于变换成<strong>Segment数组+HashEntry数组</strong>，所以初始化时，需要依次对Segment数组和HashEntry数组初始化</p>
<ol>
<li><p>Segment数组初始化</p>
<p>初始化时，使用右移一位，乘以2的计算方式，保证ssize是2的幂次方，小于指定参数concurrencyLevel的最大2的幂次方</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> sshift = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//记录Segment数组大小</span></span><br><span class="line"><span class="keyword">int</span> ssize = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class="line">    ++sshift;</span><br><span class="line">    ssize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>HashEntry数组初始化</p>
<p>跟Segment数组初始化方式相同</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> cap = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(cap &lt; c)&#123;</span><br><span class="line">    cap &lt;&lt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="1-2-put操作"><a href="#1-2-put操作" class="headerlink" title="1.2 put操作"></a>1.2 put操作</h3><p>对于插入操作，需要两次Hash映射去定位数据存储位置</p>
<ol>
<li>首先通过第一次hash过程，定位Segment位置 </li>
<li>然后通过第二次hash过程定位HashEntry位置</li>
</ol>
<p>Segment继承ReentrantLock,在数据插入指定HashEntry过程的时候会尝试调用ReentrantLock的tryLock方法获取锁，如果获取成功就直接插入相应位置，如果有线程获取该Segment的锁，当前线程就会以自旋方式去继续调用tryLock方法去获取锁，超过指定次数就挂起，等待唤醒。</p>
<h3 id="1-3-get操作"><a href="#1-3-get操作" class="headerlink" title="1.3 get操作"></a>1.3 get操作</h3><p>也是两次Hash映射，相对于put操作，少了加锁过程</p>
<h3 id="1-4-size操作"><a href="#1-4-size操作" class="headerlink" title="1.4 size操作"></a>1.4 size操作</h3><p>size操作就是计算ConcurrentHashMap的大小，有两种方案</p>
<ul>
<li>给每个Segment都加上锁(相当于给整个Map加上锁)，然后计算size返回</li>
<li>不加锁的模式，尝试多次计算ConcurrentHashMap的size,最多三次，比较前后计算的结果，结果一致就认为当前没有元素加入，计算结果是准确的。(查看计算出size的前后modCount的数值有没有发生变化，modCount的值用于记录元素变化的操作。如put，remove，clear)</li>
</ul>
<h2 id="2-jdk1-8-ConcurrentHashMap"><a href="#2-jdk1-8-ConcurrentHashMap" class="headerlink" title="2. jdk1.8 ConcurrentHashMap"></a>2. jdk1.8 ConcurrentHashMap</h2><p>jdk1.8ConcurrentHashMap是数组+链表，或者数组+红黑树结构,并发控制使用Synchronized关键字和CAS操作<br><img src="/ConcurrentHashMap/index/02.png" alt="jdk1.8 ConcurrentHashMap"></p>
<h3 id="2-1关键概念点"><a href="#2-1关键概念点" class="headerlink" title="2.1关键概念点"></a>2.1关键概念点</h3><ul>
<li>sizeCtl变量(volatile修饰)<br> 通过CAS操作+volatile, 控制数组初始化和扩容操作<ul>
<li>-1 代表正在初始化</li>
<li>-N 前16位记录数组容量，后16位记录扩容线程大小+1，是个负数</li>
<li>正数0，表示未初始化</li>
<li>正数，0.75*当前数组大小</li>
</ul>
</li>
<li>&lt;key,value&gt;键值对，封装为Node对象</li>
<li>table变量(volatile)：也就是所说的数组，默认为null，默认大小为16的数组，每次扩容时大小总是2的幂次方</li>
<li>nextTable(volatile):扩容时新生成的数组，大小为table的两倍</li>
</ul>
<h3 id="2-2put函数"><a href="#2-2put函数" class="headerlink" title="2.2put函数"></a>2.2put函数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>1.putValue函数</strong><br>首先调用spread函数，计算hash值，之后进入一个自旋循环过程，直到插入或替换成功，才会返回。如果table未被初始化，则调用initTable进行初始化。之后判断hash映射的位置是否为null,如果为null,直接通过CAS自旋操作，插入元素成功，则直接返回，如果映射的位置值为MOVED(-1),则直接去协助扩容，排除以上条件后，尝试对链头Node节点f加锁，加锁成功后，链表通过尾插遍历，进行插入或替换。红黑树通过查询遍历，进行插入或替换。之后如果当前链表节点数量大于阈值，则调用treeifyBin函数，转换为红黑树最后通过调用addCount,执行CAS操作，更新数组大小，并且判断是否需要进行扩容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">//spread函数计算hash值</span></span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//自旋过程</span></span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">            tab = initTable();</span><br><span class="line">        <span class="comment">//判断映射位置节点是否为空</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                         <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                <span class="keyword">break</span>;                  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果映射位置节点value==MOVED，说明正在进行扩容操作</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                          value, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">//红黑树结构</span></span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                       value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//链表节点数量超过阈值，转为红黑树</span></span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. spread函数</strong><br>spread函数，计算hash值。key的hash值与其高16位相异或，然后与HASH_BITS将最高位置0</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">spread</span><span class="params">(<span class="keyword">int</span> h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (h ^ (h &gt;&gt;&gt; <span class="number">16</span>)) &amp; HASH_BITS;</span><br><span class="line">    <span class="comment">//HASH_BITS=0x7fffffff</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. tableAt函数</strong><br>获取最新的tab[i]</p>
<p><strong>4. casTabAt函数</strong><br>通过CAS操作，将值赋值进tab中对应位置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function">Node&lt;K,V&gt; <span class="title">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>5. addCount函数</strong><br>尝试使用CAS操作，将BASECOUNT加1，操作失败，则说明有其他线程在进行加一操作,发生冲突。之后判断是否需要扩容</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> check)</span> </span>&#123;</span><br><span class="line">    CounterCell[] as; <span class="keyword">long</span> b, s;</span><br><span class="line">    <span class="comment">//使用CAS操作，将BASECOUNT加1</span></span><br><span class="line">    <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> ||</span><br><span class="line">        !U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class="line">        CounterCell a; <span class="keyword">long</span> v; <span class="keyword">int</span> m;</span><br><span class="line">        <span class="comment">//发生冲突</span></span><br><span class="line">        <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="keyword">null</span> ||</span><br><span class="line">            !(uncontended =</span><br><span class="line">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class="line">            <span class="comment">//多线程冲突执行</span></span><br><span class="line">            fullAddCount(x, uncontended);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        s = sumCount();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab, nt; <span class="keyword">int</span> n, sc;</span><br><span class="line">        <span class="comment">//判断是否需要扩容  大于0.75当前数组大小</span></span><br><span class="line">        <span class="keyword">while</span> (s &gt;= (<span class="keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            <span class="keyword">int</span> rs = resizeStamp(n);</span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//判断是否需要帮助扩容</span></span><br><span class="line">                <span class="comment">//扩容完成，或者扩容线程达到阈值不需要进行扩容，直接break</span></span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</span><br><span class="line">                    transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">//帮助扩容，扩容线程数+1</span></span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                    transfer(tab, nt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//进行扩容操作</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</span><br><span class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                transfer(tab, <span class="keyword">null</span>);</span><br><span class="line">            s = sumCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-3-initTable函数"><a href="#2-3-initTable函数" class="headerlink" title="2.3 initTable函数"></a>2.3 initTable函数</h3><p>进入一个自旋过程，一旦有线程扩容成功，才break</p>
<ul>
<li>如果sizeCtl &lt; 0,说明已经有线程正在扩容，所以直接让出线程。</li>
<li>如果sizeCtl&gt;=0,说明当前没有线程扩容，尝试CAS操作，设置sizeCtl为-1</li>
<li>设置sizeCtl为-1成功的线程，进行扩容操作，并且将sc更新为数组负载阈值0.75*n<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="comment">//自旋过程</span></span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">            Thread.yield(); </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                    table = tab = nt;</span><br><span class="line">                    <span class="comment">//0.75*n</span></span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                sizeCtl = sc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-4-统计ConCurrentHashMap中的元素个数"><a href="#2-4-统计ConCurrentHashMap中的元素个数" class="headerlink" title="2.4 统计ConCurrentHashMap中的元素个数"></a>2.4 统计ConCurrentHashMap中的元素个数</h3><p><strong>1. mappingCount函数</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调用sumCount,获得元素数量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">mappingCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> n = sumCount();</span><br><span class="line"><span class="keyword">return</span> (n &lt; <span class="number">0L</span>) ? <span class="number">0L</span> : n; <span class="comment">// ignore transient negative values</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>2. sumCount函数</strong></p>
<p>baseCount+ counterCells各个元素值，就是元素数量<br>其实baseCount就是记录容器数量的，直接放回baseCount不就可以了吗？为什么sumCount()方法中还要遍历counterCells数组，累加对象的值呢？<br>其中：counterCells是个全局的变量，表示的是CounterCell类数组。CounterCell是ConcurrentHashmap的内部类，它就是存储一个值。<br>JDK1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据put()或则删除数据remove()时，会通过addCount()方法更新baseCount<br>初始化时counterCells为空，在并发量很高时，如果存在两个线程同时执行CAS修改baseCount值，则失败的线程会继续执行方法体中的逻辑，执行fullAddCount(x, uncontended)方法，这个方法其实就是初始化counterCells，并将x的值插入到counterCell类中，而x值一般也就是1或-1，这可以从put()方法中得知。<br>这些对象是因为在CAS更新baseCount值时，由于高并发而导致失败，最终将值保存到CounterCell中，放到counterCells里。这也就是为什么sumCount()中需要遍历counterCells数组，sum累加CounterCell.value值了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">sumCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    CounterCell[] as = counterCells; CounterCell a;</span><br><span class="line">    <span class="keyword">long</span> sum = baseCount;</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="keyword">null</span>)</span><br><span class="line">                sum += a.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3. CounterCell类</strong><br>只存储一个值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterCell</span></span>&#123;</span><br><span class="line">   <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line">   CountCell(<span class="keyword">long</span> x) &#123;value = x;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>原文链接：<a href="https://blog.csdn.net/zycxnanwang/article/details/105424734">https://blog.csdn.net/zycxnanwang/article/details/105424734</a></p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>springCloud之FeignClient访问微服务接口缓慢</title>
    <url>/bug-sprigCloud/index.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>逻辑是A服务调用B服务(AB在同一个局域网内)。 经过反复测试，有一个访问缓慢的现象，具体表现为：<br>程序启动第一次访问初始化1.2秒左右，还可以理解。<br>但后面访问还是要1.1秒左右（格式化到SSS毫秒打印日志监控的）。<br>但如果连续访问几次，后面几次又是几十毫秒。过一会再访问，或者换浏览器换post工具请求，又会1.2秒左右。</p>
<h3 id="原因排查1"><a href="#原因排查1" class="headerlink" title="原因排查1"></a>原因排查1</h3><p>查看连接查实的接口<br><img src="/bug-sprigCloud/index/02.png" alt="请求缓慢2"><br>发现接口调用的是这个地址，其实是别人启动项目的时候吧自己的ip注册到了eureka注册中心，导致接口有时候走的是getway，有时候又是走的别人的接口</p>
<p>解决方法：eureka.client.register-with-eureka 为false  这样就不会注册到eureka注册中心了</p>
<h3 id="原因排查2"><a href="#原因排查2" class="headerlink" title="原因排查2"></a>原因排查2</h3><ol>
<li>查看日志<br> <img src="/bug-sprigCloud/index/01.png" alt="请求缓慢"><br>查看是否是hystrix 配置的时间小于了ribbon的时间</li>
</ol>
]]></content>
      <categories>
        <category>02 Spring</category>
      </categories>
      <tags>
        <tag>SpringCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA类加载过程</title>
    <url>/classLoad/index.html</url>
    <content><![CDATA[<h2 id="1-类加载机制"><a href="#1-类加载机制" class="headerlink" title="1.类加载机制"></a>1.类加载机制</h2><p>JVM将类描述数据从.class文件中加载到内存，并对数据进行解析、初始化，最终形成被JVM直接使用的Java类型；类从被加载到JVM中开始，到卸载为止，<br>整个生命周期包括：<strong>加载、验证、准备、解析、初始化、使用和卸载</strong>7个阶段<br><img src="/classLoad/index/01.png" alt="完整的类加载过程"></p>
<ol>
<li><p>加载</p>
<p> 加载时jvm做了三件事</p>
<ul>
<li>1)通过一个类的全限定名获取该类的二进制流</li>
<li>2)将这个字节流的静态存储结构转化为方法区运行时数据结构</li>
<li>3)在内存堆中生成一个代表该类的java.lang.class对象，最为该类数据的访问入口</li>
</ul>
</li>
<li><p>验证</p>
<p> 验证、准备、解析这三步可以看作是一个连接的过程，将类的字节码连接到JVM的运行黄台之中;  验证是为了确保class文件的字节流中包含的信息符合当前虚拟机的要求，不会威胁到jvm的安全。<br>验证内容如下：</p>
<ul>
<li>文件格式的验证： 验证字节流是否符合class文件袋额规范，是否能被当前版本的虚拟机处理</li>
<li>元数据验证： 对字节码描述的信息进行语义分析，确保符合Java语言规范</li>
<li>字节码验证：通过数据流和控制流分析，确定寓意是否合法，符合逻辑的</li>
<li>符号引用验证：这个娇艳在解析阶段发生</li>
</ul>
</li>
<li><p>准备</p>
<p> 为类的静态变量分配内存，设置初始值，对于final static修饰的变量，直接赋值为用户的定义值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//准备阶段过后的初始值为0， 而不是7</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">7</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>解析</p>
<p> 解析是将常量池内的符号引用转化为直接引用（如物理内存地址指针）</p>
</li>
<li><p>初始化</p>
<p> 初始化阶段，jvm才开始真正执行类中定义的Java代码</p>
<ul>
<li>执行类构造器<clinit>()方法的过程，类构造器方法是有编译器自动手机类中所有类变量的赋值动作和静态语句块（static块）中的语句合并产生的</clinit></li>
<li>当初始化一个类的时候，如果发现其父类还没有进行过初始化，需有限触发其父类的初始化</li>
<li>虚拟机会保证一个类的<clinit>()方法在多线程环境被正确加锁和同步<br><img src="/classLoad/index/02.png" alt="完整的类加载过程2"></clinit></li>
</ul>
</li>
</ol>
<h2 id="2-类加载器"><a href="#2-类加载器" class="headerlink" title="2.类加载器"></a>2.类加载器</h2><p>类加载器的主要任务：对类加载过程中的加载操作（根据一个类的全限定名读取该类的二进制字节流到JVM内部，然后转换为一个对应的java.lang.Class对象实例）</p>
<p>类加载器的分类</p>
<ul>
<li>启动类加载器Bootstrap ClassLoader:<br>在HotSpot虚拟机中，Bootstrap ClassLoader用C++语言编写并嵌入JVM内部，主要负载加载JAVA_HOME/lib目录中的所有类，或者加载由选项-Xbootcalsspath指定的路径下的类</li>
<li>拓展类加载器/ExtClassLoader：<br>ExtClassLoader继承ClassLoader类，负载加载JAVA_HOME/lib/ext目录中的所有类型，或者由参数-Xbootclasspath指定路径中的所有类型</li>
<li>应用程序类加载器/AppClassLoader:<br>ExtClassLoader继承ClassLoader类，负责加载用户类路径ClassPath下的所有类型，一般情况下为程序的默认类加载器</li>
<li>自定义加载器:<br>Java虚拟机规范将所有继承抽象类java.lang.ClassLoader的类加载器，定义为自定义类加载器</li>
</ul>
<h2 id="3-双亲委派模型"><a href="#3-双亲委派模型" class="headerlink" title="3. 双亲委派模型"></a>3. 双亲委派模型</h2><p><img src="/classLoad/index/03.png" alt="双亲委派模型"><br>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式 。</p>
<ul>
<li>除了启动类加载器以外，每个类加载器拥有一个父类加载器，用户的自定义类加载器的父类加载器是AppClassLoader；</li>
<li>双亲委派模型可以保证全限名指定的类，只被加载一次；</li>
<li>双亲委派模型不具有强制性约束，是Java设计者推荐的类加载器实现方式；</li>
</ul>
<h3 id="3-1-双亲委派模式优势"><a href="#3-1-双亲委派模式优势" class="headerlink" title="3.1 双亲委派模式优势"></a>3.1 双亲委派模式优势</h3><ol>
<li>采用双亲委派模式的是好处是Java类随着它的类加载器一起具备了一种带有优先级的层次关系，通过这种层级关可以避免类的重复加载，当父亲已经加载了该类时，就没有必要子ClassLoader再加载一次</li>
<li>java核心api中定义类型不会被随意替换，假设通过网络传递一个名为java.lang.Integer的类，通过双亲委托模式传递到启动类加载器，而启动类加载器在核心Java API发现这个名字的类，发现该类已被加载，并不会重新加载网络传递的过来的java.lang.Integer，而直接返回已加载过的Integer.class，这样便可以防止核心API库被随意篡改</li>
<li>如果我们在classpath路径下自定义一个名为java.lang.SingleInterge类(该类是胡编的)呢？该类并不存在java.lang中，经过双亲委托模式，传递到启动类加载器中，由于父类加载器路径下并没有该类，所以不会加载，将反向委托给子类加载器加载，最终会通过系统类加载器加载该类。但是这样做是不允许，因为java.lang是核心API包，需要访问权限，强制加载将会报出如下异常</li>
</ol>
<h3 id="3-2-双庆委派模型实现源码"><a href="#3-2-双庆委派模型实现源码" class="headerlink" title="3.2 双庆委派模型实现源码"></a>3.2 双庆委派模型实现源码</h3><p>可以打开 java.lang.ClassLoader 类，其 loadClass方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">            <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        c = findBootstrapClassOrNull(name);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                    <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                    <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                    <span class="comment">// to find the class.</span></span><br><span class="line">                    <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                    c = findClass(name);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">                resolveClass(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>实现方式很简单，首先会检查该类是否已经被加载过了，若加载过了直接返回（默认resolve取false）；若没有被加载，则调用父类加载器的 loadClass方法，若父类加载器为空则默认使用启动类加载器作为父加载器。如果父类加载失败，则在抛出 ClassNotFoundException 异常后，在调用自己的 findClass 方法进行加载</p>
<h2 id="4-自定义类加载器"><a href="#4-自定义类加载器" class="headerlink" title="4.自定义类加载器"></a>4.自定义类加载器</h2><ol>
<li><p>加密</p>
<p>我们知道Java字节码是可以进行反编译的，在某些安全性高的场景，是不允许这种情况发生的。那么我们可以将编译后的代码用某种加密算法进行加密，加密后的文件就不能再用常规的类加载器去加载类了。而我们自己可以自定义类加载器在加载的时候先解密，然后在加载</p>
</li>
<li><p>动态创建</p>
<p>比如很有名的动态代理。</p>
</li>
<li><p>从非标准的来源加载代码<br>我们不用非要从class文件中获取定义此类的二进制流，还可以从数据库，从网络中，或者从zip包等。</p>
</li>
</ol>
<h3 id="4-1-自定义类加载器方法"><a href="#4-1-自定义类加载器方法" class="headerlink" title="4.1 自定义类加载器方法"></a>4.1 自定义类加载器方法</h3><p>   类加载时根据双亲委派模型会先一层层找到父加载器，如果加载失败，则会调用当前加载器的 findClass() 方法来完成加载。因此我们自定义类加载器，有两个步骤：<br>   1、继承 ClassLoader</p>
<p>   2、覆写 findClass() 方法</p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>ClassLoader</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo博客加密</title>
    <url>/hexo-encrypt/index.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="310f12fe1b1e78b54a5df19aaa04e467fa0fcc47678c2ec825f715ec1d7db8ba"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>11 其他工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo部署出现错误Error Spawn failed解决方式</title>
    <url>/hexo-spawn-failed/index.html</url>
    <content><![CDATA[<p>部署过程中可能会出现错误:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br><span class="line">remote: Please see https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information.</span><br><span class="line">fatal: unable to access &#x27;https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git/&#x27;: The requested URL returned error: 403</span><br><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (/Users/xiaoyuge/workspace/mybolg/node_modules/hexo-util/lib/spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (events.js:315:20)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (internal/child_process.js:277:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br><span class="line">xiaoyuge@xiaoyugedeMacBook-Pro mybolg % hexo clean</span><br></pre></td></tr></table></figure>
<p>####解决方式一：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#进入站点根目录</span></span></span><br><span class="line">cd cd /Users/xiaoyuge/workspace/mybolg</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#删除git提交内容文件夹</span></span></span><br><span class="line">rm -rf .deploy_git/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#执行</span></span></span><br><span class="line">git config --global core.autocrlf false</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#最后</span></span></span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>####解决方式二：<br>有可能是你的git repo配置地址不正确,可以将http方式变更为ssh方式（我的就是这个问题）<br>github在2021-08-13正式启用personal access token后，原来的用户名+密码方式部署会报错，需要采用最新的token登录方式进行部署 。<br>具体方式参考：<a href="https://cloud.tencent.com/developer/article/1861466">https://cloud.tencent.com/developer/article/1861466</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</span><br></pre></td></tr></table></figure>
<p>查看_config.yml文件，</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="comment">#repo:https://github.com/xiaoyuge5201/xiaoyuge5201.github.io.git  这是原来的路径，现在改成了下面这种</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xiaoyuge5201/xiaoyuge5201.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>11 其他工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>面试常见的趣味题</title>
    <url>/interest/index.html</url>
    <content><![CDATA[<h3 id="8升、5升、3升水桶各一个-如何分成两个4升"><a href="#8升、5升、3升水桶各一个-如何分成两个4升" class="headerlink" title="8升、5升、3升水桶各一个,如何分成两个4升"></a>8升、5升、3升水桶各一个,如何分成两个4升</h3><p><img src="/interest/index/3_5_8.png" alt="分成两个4升"></p>
<h3 id="以面向对象的思想设计长方形和正方形"><a href="#以面向对象的思想设计长方形和正方形" class="headerlink" title="以面向对象的思想设计长方形和正方形"></a>以面向对象的思想设计长方形和正方形</h3><ul>
<li>方式1：设计接口，然后长方形和正方形各自实现这个接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//形状类：结算面积和周长</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span></span>;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">perimeter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//长方形：实现接口并实现方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">true<span class="keyword">private</span> <span class="keyword">double</span> width;</span><br><span class="line">true<span class="keyword">private</span> <span class="keyword">double</span> height;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="title">Rectangle</span><span class="params">(<span class="keyword">double</span> width,<span class="keyword">double</span> height)</span></span>&#123;</span><br><span class="line">truetrue<span class="keyword">this</span>.width=width;</span><br><span class="line">truetrue<span class="keyword">this</span>.height=height;</span><br><span class="line">true&#125;	</span><br><span class="line">true<span class="meta">@Override</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> <span class="keyword">this</span>.width*<span class="keyword">this</span>.height;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="meta">@Override</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">perimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> <span class="number">2</span>*(<span class="keyword">this</span>.width+<span class="keyword">this</span>.height);</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正方形：实现接口并实现方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">true<span class="keyword">private</span> <span class="keyword">double</span> side;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">double</span> side)</span></span>&#123;</span><br><span class="line">truetrue<span class="keyword">this</span>.side=side;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="meta">@Override</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">area</span><span class="params">()</span> </span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> side*side;</span><br><span class="line">true&#125;</span><br><span class="line"> </span><br><span class="line">true<span class="meta">@Override</span></span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">perimeter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">truetrue<span class="keyword">return</span> <span class="number">4</span>*side;</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>方式2：使用extents<br>因为正方形 <strong>is a</strong> 长方形，所以可以使用继承来设计正方形，然后在构造函数中使用super函数；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">extends</span> <span class="title">Rectangle</span></span>&#123;</span><br><span class="line">true<span class="keyword">private</span> <span class="keyword">double</span> side;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="title">Square</span><span class="params">(<span class="keyword">double</span> side)</span></span>&#123;</span><br><span class="line">truetrue<span class="keyword">super</span>(side,side);</span><br><span class="line">truetrue<span class="keyword">this</span>.side=side;</span><br><span class="line">true&#125;</span><br><span class="line">true<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">truetrueSquare s=<span class="keyword">new</span> Square(<span class="number">2.5</span>);</span><br><span class="line">truetrueSystem.out.println(s.perimeter());</span><br><span class="line">truetrueSystem.out.println(s.area());</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="java使用递归计算1-2-3-…-n之间的和"><a href="#java使用递归计算1-2-3-…-n之间的和" class="headerlink" title="java使用递归计算1+2+3+…+n之间的和"></a>java使用递归计算1+2+3+…+n之间的和</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SumNumber</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(sumN(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用递归的方法计算1+2+3+4+....n的和; 切记注意n不能小于1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">sumN</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n+ sumN(n-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数"><a href="#java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数" class="headerlink" title="java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数"></a>java读取一篇英文文章，并输出其中出现单词次数最多的3个单词以及次数</h3><p>文件文章中存在,.以及空格</p>
<ul>
<li>读取文件内容</li>
<li>对文件进行内容匹配</li>
<li>使用map 保存单词、次数</li>
<li>map排序</li>
<li>输出<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCount</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1. 使用流读取文件</span></span><br><span class="line">            BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;d:/n.txt&quot;</span>));</span><br><span class="line">            StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">            String line;</span><br><span class="line">            <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                sb.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            reader.close();</span><br><span class="line">            <span class="comment">//替换所有的英文逗号和句号</span></span><br><span class="line">            String temp = sb.toString().replaceAll(<span class="string">&quot;/[\\w\\,\\.]+/&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="comment">//2.使用正则表达式匹配</span></span><br><span class="line">            Pattern pattern = Pattern.compile(<span class="string">&quot;/[a-zA-Z\\w\\,\\.]+/&quot;</span>);</span><br><span class="line">            Matcher matcher = pattern.matcher(temp);</span><br><span class="line">            Map&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">            String word;</span><br><span class="line">            <span class="keyword">int</span> count;</span><br><span class="line">            <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">                word = matcher.group();</span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(word)) &#123;</span><br><span class="line">                    count = map.get(word);</span><br><span class="line">                    map.put(word, count + <span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    map.put(word, <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//将map的数据根据count排序；</span></span><br><span class="line">            List&lt;Map.Entry&lt;String, Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(map.entrySet());</span><br><span class="line">            Collections.sort(list, Comparator.comparing(Map.Entry::getValue));</span><br><span class="line">            <span class="keyword">int</span> last = list.size() - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = last; i &gt; last - <span class="number">5</span>; i--) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;key=&quot;</span> + list.get(i).getKey() + <span class="string">&quot; value=&quot;</span> + list.get(i).getValue());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="java-获取字符串第一次出现重复的字符"><a href="#java-获取字符串第一次出现重复的字符" class="headerlink" title="java 获取字符串第一次出现重复的字符"></a>java 获取字符串第一次出现重复的字符</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findDuplicate</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">    Set&lt;Character&gt; uniqueChars = <span class="keyword">new</span> HashSet(chars.length,<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!uniqueChars.add(chars[i]))&#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>10 算法</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 8学习</title>
    <url>/java8%E7%89%B9%E6%80%A7/index.html</url>
    <content><![CDATA[<h2 id="1-Optional"><a href="#1-Optional" class="headerlink" title="1. Optional"></a>1. Optional</h2><p>Optional 类主要解决的问题是臭名昭著的空指针异常（NullPointerException)。<br>本质上，这是一个包含有可选值的包装类，这意味着 Optional 类既可以含有对象也可以为空</p>
<h3 id="1-1-optional构造方式"><a href="#1-1-optional构造方式" class="headerlink" title="1.1. optional构造方式"></a>1.1. optional构造方式</h3><ul>
<li><p>Optional.of(T)</p>
<p>  该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。</p>
</li>
<li><p>Optional.ofNullable(T)</p>
<p>  该方式的入参可以为null，当入参不确定为非null时使用。</p>
</li>
<li><p>Optional.empty()</p>
<p>  这种方式是返回一个空Optional，等效Optional.ofNullable(null)</p>
</li>
</ul>
<h3 id="1-2-如何正确的使用Optional"><a href="#1-2-如何正确的使用Optional" class="headerlink" title="1.2. 如何正确的使用Optional"></a>1.2. 如何正确的使用Optional</h3><ul>
<li><p>尽量避免使用的地方</p>
<ol>
<li><p>避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null != obj没有区别，这样用就没什么意义了。</p>
</li>
<li><p>避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。</p>
</li>
<li><p>避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。</p>
</li>
<li><p>避免使用Optional作为方法的参数，原因同3。</p>
</li>
</ol>
</li>
<li><p>正确使用方式</p>
<ol>
<li><p>实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse/orElseGet方式：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//存在则返回</span></span><br><span class="line">User king = <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">&quot;king&quot;</span>);</span><br><span class="line">Optional&lt;User&gt; userOpt = Optional.of(king);</span><br><span class="line">User user =  userOpt.orElse(<span class="keyword">null</span>);</span><br><span class="line">System.out.println(user.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//不存在提供默认值</span></span><br><span class="line">User user2 = <span class="keyword">null</span>;</span><br><span class="line">Optional&lt;User&gt; userOpt2 = Optional.ofNullable(user2);</span><br><span class="line">User user3 = userOpt2.orElse(unknown);</span><br><span class="line">System.out.println(user3.getName());</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过方法提供值</span></span><br><span class="line">User user4 = userOpt2.orElseGet(() -&gt; <span class="keyword">new</span> User(<span class="number">0</span>, <span class="string">&quot;DEFAULT&quot;</span>)); </span><br><span class="line">System.out.println(user4.getName())</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//不建议下面这种使用</span></span><br><span class="line"><span class="keyword">if</span>(userOpt.isPresent()) &#123;</span><br><span class="line">    System.out.println(userOpt.get().getName());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用ifPresent()来进行对象操作，存在则操作，否则不操作。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例存在则操作，否则不操作</span></span><br><span class="line">userOpt.ifPresent(u -&gt; System.out.println(u.getName()));</span><br><span class="line">userOpt2.ifPresent(u -&gt; System.out.println(u.getName()));</span><br></pre></td></tr></table></figure></li>
<li><p>使用map/flatMap来获取关联数据</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用map方法获取关联数据</span></span><br><span class="line">System.out.println(userOpt.map(u -&gt; u.getName()).orElse(<span class="string">&quot;Unknown&quot;</span>));</span><br><span class="line">System.out.println(userOpt2.map(u -&gt; u.getName()).orElse(<span class="string">&quot;Default&quot;</span>));</span><br><span class="line"><span class="comment">//使用flatMap方法获取关联数据</span></span><br><span class="line">List&lt;String&gt; interests = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">interests.add(<span class="string">&quot;a&quot;</span>);interests.add(<span class="string">&quot;b&quot;</span>);interests.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">user.setInterests(interests);</span><br><span class="line">List&lt;String&gt; interests2 = Optional.of(user)</span><br><span class="line">    .flatMap(u -&gt; Optional.ofNullable(u.getInterests()))</span><br><span class="line">    .orElse(Collections.emptyList());</span><br><span class="line">System.out.println(interests2.isEmpty());</span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<h3 id="1-3-Optional判断第三方接口"><a href="#1-3-Optional判断第三方接口" class="headerlink" title="1.3.Optional判断第三方接口"></a>1.3.Optional判断第三方接口</h3><p>使用java8的optional可以减少很多的NPE，再也不用当心别人的接口返回值问题了，也不用满屏的if（a != null）这种判断，下面是使用过程中遇到的问题以及如何使用Optional解决。</p>
<h4 id="1-3-1-接口返回参数问题"><a href="#1-3-1-接口返回参数问题" class="headerlink" title="1.3.1. 接口返回参数问题"></a>1.3.1. 接口返回参数问题</h4><ol>
<li>在微服务中使用feign调用其他接口，总担心别人返回的参数是否符合标准</li>
<li>参数符合标准后，然后再进行数据判断，先判断是否code为200，然后判断数据存不存在，这样冗余的代码就很多</li>
</ol>
<p>这是我们期望的返回格式</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">true<span class="attr">&quot;code&quot;</span>: <span class="string">&quot;200&quot;</span>,</span><br><span class="line">true<span class="attr">&quot;msg&quot;</span>: <span class="string">&quot;调用成功!&quot;</span>,</span><br><span class="line">true<span class="attr">&quot;data&quot;</span>: []</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟接口调用方法</span></span><br><span class="line">Map&lt;String,Object&gt; map = serviceImpl.queryList();</span><br><span class="line"><span class="comment">//即使map为空也能正常返回，配合map直接映射数据值</span></span><br><span class="line"><span class="keyword">return</span> Optional.ofNullable(map).map(r-&gt; r.get(<span class="string">&quot;data&quot;</span>)).orElseGet(ArrayList:: <span class="keyword">new</span>)</span><br><span class="line">    </span><br><span class="line"> <span class="comment">//JSONObject 判断是否返回成功，如果成功返回200， 不成功返回400   </span></span><br><span class="line">JSONObject jsonObject = service.updateDate();</span><br><span class="line">Optional.ofNullable(jsonObject).map(r-&gt;r.getInteger(<span class="string">&quot;code&quot;</span>)).orElse(<span class="number">400</span>)</span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-避免判断风暴"><a href="#1-3-2-避免判断风暴" class="headerlink" title="1.3.2. 避免判断风暴"></a>1.3.2. 避免判断风暴</h4><p>对象层层嵌套，为了逻辑严谨必须要进行空判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对于一个对象里面嵌套对象，那么需要层层去判断非空</span></span><br><span class="line">School school = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span>(school != <span class="keyword">null</span>)&#123;</span><br><span class="line">    Clazz clazz = school.getClazz();</span><br><span class="line">    <span class="keyword">if</span>(clazz != <span class="keyword">null</span>)&#123;</span><br><span class="line">        Student student = clazz.getStudent();</span><br><span class="line">        <span class="keyword">if</span>(student != <span class="keyword">null</span>)&#123;</span><br><span class="line">            String name = student.getName();</span><br><span class="line">            <span class="keyword">if</span>(name == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(name))&#123;</span><br><span class="line">                name = <span class="string">&quot;学生的姓名为空&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//使用Optional后</span></span><br><span class="line"> String name = Optional.ofNullable(school)</span><br><span class="line">                .map(School::getClazz)</span><br><span class="line">                .map(Clazz::getStudent)</span><br><span class="line">                .map(Student::getName)</span><br><span class="line">                .orElse(<span class="string">&quot;学生的姓名为空&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="2-Stream"><a href="#2-Stream" class="headerlink" title="2. Stream"></a>2. Stream</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找出某一个字段等于某个值的那一条数据</span></span><br><span class="line">JaponicaRiceCheck1 streamCheck = listItemRice.stream()</span><br><span class="line">.filter(o -&gt; o.getSYS_PARENTID().equals(check.getSYS_ID())).findAny().orElse(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内部类初始化</title>
    <url>/java-inner-class-01/index.html</url>
    <content><![CDATA[<h3 id="1-在同个java文件中，但不是内部类"><a href="#1-在同个java文件中，但不是内部类" class="headerlink" title="1. 在同个java文件中，但不是内部类"></a>1. 在同个java文件中，但不是内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在同一个Java文件中只能存在一个public类，除内部类外</span></span><br><span class="line"><span class="comment">//只允许使用“public”、“abstract”和“final”。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例化</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    D d = <span class="keyword">new</span> D();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-常规内部类"><a href="#2-常规内部类" class="headerlink" title="2. 常规内部类"></a>2. 常规内部类</h3><p>要实例化内部类对象，必须先有外部类对象，通过外部类对象.new 内部类();来实例化内部类对象，在其他文件或者其他包内都是这样，只是要能在其他包实例化的话，内部类Inner还得加上修饰符public。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outter out = <span class="keyword">new</span> Outter();</span><br><span class="line">        Outter.Inner in = out.<span class="function">new <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种情况：通过提供方法来获取实例对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="number">111</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> B <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> B();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        B b = a.getInstance();</span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-静态内部类"><a href="#3-静态内部类" class="headerlink" title="3. 静态内部类"></a>3. 静态内部类</h3><p>实例化静态内部类和实例化常规内部类有类似的地方，而不同之处在与静态内部类由于是静态的，所以不需要外部类对象就可以实例化，如上例Outter.Inner in = new Outter.Inner();<br>在其他Java文件也是这么实例化的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outter.Inner in = <span class="keyword">new</span> Outter.Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-局部内部类"><a href="#4-局部内部类" class="headerlink" title="4. 局部内部类"></a>4. 局部内部类</h3><p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内，所以只能在方法或者该作用域内实例化,局部内部类不能有访问说明符,因为它不是外围类的一部分,但是可以访问当前代码块的常量,以及此外围类的所有成员</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> C();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pint</span><span class="params">(<span class="keyword">boolean</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">new</span> D();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-匿名内部类"><a href="#5-匿名内部类" class="headerlink" title="5. 匿名内部类"></a>5. 匿名内部类</h3><p>匿名内部类可以继承一个类或实现一个接口，这里的ClassOrInterfaceName是匿名内部类所继承的类名或实现的接口名。但匿名内部类不能同时实现一个接口和继承一个类，也不能实现多个接口。如果实现了一个接口，该类是Object类的直接子类，匿名类继承一个类或实现一个接口，不需要extends和implements关键字</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;() &#123;&#123;</span><br><span class="line">        add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(</span><br><span class="line">        <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; ... &#125;</span><br><span class="line">        &#125;</span><br><span class="line">).start();</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>内部类</tag>
      </tags>
  </entry>
  <entry>
    <title>锁优化</title>
    <url>/lock01/index.html</url>
    <content><![CDATA[<h2 id="1-优化思路以及方法"><a href="#1-优化思路以及方法" class="headerlink" title="1. 优化思路以及方法"></a>1. 优化思路以及方法</h2><ul>
<li>减少锁持有时间</li>
<li>减小锁粒度</li>
<li>锁分离</li>
<li>锁粗化</li>
<li>锁消除</li>
</ul>
<h3 id="1-1-减少锁持有时间"><a href="#1-1-减少锁持有时间" class="headerlink" title="1.1 减少锁持有时间"></a>1.1 减少锁持有时间</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">syncMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    othercode1();</span><br><span class="line">    mutextMethod();</span><br><span class="line">    othercode2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>像上述代码，在进入方法前就要得到锁，其他线程就要在外面等待。</p>
<p>分析：锁里面的资源在同一时间只允许一个线程执行，我们不仅要减少其他线程等待的时间，也要尽力减少线程在锁里面的执行时间，所以，尽量只有在有线程安全要求的程序代码上加锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">syncMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    othercode1();</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>)&#123;</span><br><span class="line">        metextMethod();</span><br><span class="line">    &#125;</span><br><span class="line">    othercode2();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-2-减小锁粒度"><a href="#1-2-减小锁粒度" class="headerlink" title="1.2 减小锁粒度"></a>1.2 减小锁粒度</h3><p>将大对象（这个对象可能会被很多线程访问）拆成小对象，大大增加并行度。</p>
<p>降低锁竞争，那么偏向锁、轻量级锁成功率才会提高。</p>
<p>最最典型的减小锁粒度的案例就是ConcurrentHashMap。在HashMap的基础上进行优化，使用了cas与synchronized来确保安全性，在保证安全性的基础上为了充分利用线程资源，更是巧妙的设计了多线程同扩容的模式。</p>
<h3 id="1-3-锁分离"><a href="#1-3-锁分离" class="headerlink" title="1.3 锁分离"></a>1.3 锁分离</h3><p>最常见的锁分离就是读写锁ReadWriteLock，根据功能进行分离成读锁和写锁。这样读读不互斥，读写互斥，写写互斥。既保证了线程安全，又提高了性能。</p>
<p>分析：读写分离这种思想可以延伸到我们其他的设计中，只要操作上互不影响，那锁就可以进行分离，比如：LinkedBlockingQueue</p>
<img src="..\images/read_writer_Lock1.png" alt="read_writer_Lock1" style="zoom: 67%;">

<p>从头部获取数据，从尾部放入数据，使用两把锁。</p>
<h3 id="1-4-锁粗化"><a href="#1-4-锁粗化" class="headerlink" title="1.4 锁粗化"></a>1.4 锁粗化</h3><p>通常情况下，为了保证多线程间的有效并发，会要求每个线程持有锁的时间尽量短，即在使用完公共资源后，应该立即释放锁，只有这样，等待在这个锁上的其他线程才能尽早的获取资源执行任务；但是凡事都有一个度，如果对同一个锁不停的进行请求、同步和释放，其本身也会消耗系统宝贵的资源，反而不利于性能的优化。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demoMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>&#123;</span><br><span class="line">    	<span class="comment">//dow sth.</span></span><br><span class="line">true&#125;</span><br><span class="line">    <span class="comment">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class="line">    <span class="keyword">synchronized</span>&#123;</span><br><span class="line">        <span class="comment">//do sth.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种情况，根据锁粗化的思想，应该合并：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demoMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//整合成一次锁请求,前提时中间哪些不需要同步的工作很快就执行完成</span></span><br><span class="line">    <span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">        <span class="comment">//do sth.</span></span><br><span class="line">        <span class="comment">//....做其他不需要同步的工作，但能很快执行完毕</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再举一个极端的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; circle; i++)&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">        <span class="comment">//.....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在一个循环内不同得获得锁。虽然JDK内部会对这个代码做些优化，但是还不如直接写成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; circle; i++)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然如果有需求说，这样的循环太久，需要给其他线程不要等待太久，那只能写成上面那种。如果没有这样类似的需求，还是直接写成后者那种比较好。<br><strong>分析</strong>: 锁粗化是JVM默认启动的一种机制，锁粗化针对的是对连续的区域进行分段加锁这种场景，JVM会自发进行优化。但作为开发者而言在满足业务的情况下，应该减少锁的使用。</p>
<h3 id="1-5-锁消除"><a href="#1-5-锁消除" class="headerlink" title="1.5 锁消除"></a>1.5 锁消除</h3><p>锁消除是在编译器级别的事情。在即时编译器(JIT)时，如果发现不可能被共享的对象，则可以消除这些对象的锁操作。也许你会觉得奇怪，既然有些对象不可能被多线程访问，那为什么要加锁呢？写代码时直接不加锁不就好了。<br>但是有时，这些锁并不是程序员所写的，有的是JDK实现中就有锁的，比如Vector和StringBuffer这样的类，它们中的很多方法都是有锁的。当我们在一些不会有线程安全的情况下使用这些类的方法时，达到某些条件时，编译器会将锁消除来提高性能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterrruptedException</span>&#123;</span><br><span class="line">    <span class="keyword">long</span> start = System.currentTimeTimeMillis();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">20000</span>; i++)&#123;</span><br><span class="line">        createStringBuffer(<span class="string">&quot;JVM&quot;</span>,<span class="string">&quot;asdfasdfasdf&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> bufferCost = System.currentTimeTimeMillis() - start;</span><br><span class="line">    System.out.println(<span class="string">&quot;createStringBuffer:&quot;</span>+bufferCost+<span class="string">&quot;ms&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createStringBuffer</span><span class="params">(String s1, String s2)</span></span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上述代码中的StringBuffer.append是一个同步操作，但是StringBuffer却是一个局部变量，并且方法也并没有把StringBuffer返回，所以不可能会有多线程去访问它。那么此时StringBuffer中的同步操作就是没有意义的。<br>开启锁消除是在JVM参数上设置的，当然需要在server模式下：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>

<p>并且要开启逃逸分析。 逃逸分析的作用呢，就是看看变量是否有可能逃出作用域的范围。<br>比如上述的StringBuffer，上述代码中craeteStringBuffer的返回是一个String，所以这个局部变量StringBuffer在其他地方都不会被使用。如果将craeteStringBuffer改成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StringBuffer <span class="title">createStringBuffer</span><span class="params">(String s1, String s2)</span></span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    sb.append(s1);</span><br><span class="line">    sb.append(s2);</span><br><span class="line">    <span class="keyword">return</span> sb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>那么这个 StringBuffer被返回后，是有可能被任何其他地方所使用的（譬如被主函数将返回结果put进map啊等等）。那么JVM的逃逸分析可以分析出，这个局部变量 StringBuffer逃出了它的作用域。<br>所以基于逃逸分析，JVM可以判断，如果这个局部变量StringBuffer并没有逃出它的作用域，那么可以确定这个StringBuffer并不会被多线程所访问，那么就可以把这些多余的锁给去掉来提高性能。<br>当JVM参数为：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">-server -XX:+DoEscapeAnalysis -XX:+EliminateLocks</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">createStringBuffer: 302ms</span><br></pre></td></tr></table></figure>

<p>JVM参数为：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">-server -XX:+DoEscapeAnalysis -XX:-EliminateLocks</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">createStringBuffer: 660ms</span><br></pre></td></tr></table></figure>

<p>显然，锁消除的效果还是很明显的。</p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>lock</tag>
      </tags>
  </entry>
  <entry>
    <title>MVCC多版本并发控制</title>
    <url>/mvcc/index.html</url>
    <content><![CDATA[<h3 id="1-MVCC"><a href="#1-MVCC" class="headerlink" title="1. MVCC"></a>1. MVCC</h3><p>全称Multi-Version Concurrency Control即多版本并发控制。MVCC是一种并发控制的方法，一般在数据库管理系统中，实现对数据库的并发访问，在编程语言中是心啊事务内存。<br>MVCC在mysql Innodb中的实现主要是为了提高数据库并发性能，用更好的方式去处理读-写冲突，做到即使读写冲突时，也能做到不加锁，非阻塞并发读</p>
<h3 id="2-当前读和快照读"><a href="#2-当前读和快照读" class="headerlink" title="2. 当前读和快照读"></a>2. 当前读和快照读</h3><ul>
<li><p>当前读</p>
<p>  像select lock in share mode（共享锁），select for update， update, insert,delete(排他锁)这些操作都是一种当前读；<strong>当前读就是读取记录的最新版本，读取时还要保证其他并发事务不能修改当前记录，会对读取的记录进行加锁</strong>。</p>
</li>
<li><p>快照读</p>
<p>  像不加锁的select操作就是快照读，即不加锁的非阻塞读；快照读的前提是隔离级别不是串行级别（串行级别快照读会变成当前读）；快照读的实现是基于多版本并发控制（即MVCC）；可以任务MVCC是行锁的一个变种，但它在很多情况下，避免了加锁操作，降低了开销；<br>  既然是基于多版本，即快照读可能读到的并不一定是最新版本的数据，有可能是之前的历史版本</p>
</li>
</ul>
<p><strong>MVCC就是为了实现读（快照读）-写冲突不加锁，当前读实际上是一种加锁的操作，是悲观锁的实现。</strong></p>
<hr>
<h3 id="3-当前读、快照读和MVCC的关系"><a href="#3-当前读、快照读和MVCC的关系" class="headerlink" title="3. 当前读、快照读和MVCC的关系"></a>3. 当前读、快照读和MVCC的关系</h3><p>MVCC多版本并发控制指的是”维持一个数据的多个版本，使得读写操作没有冲突”；<br>Mysql通过快照读的方式去实现MVCC理想模型的其中一个具体非阻塞读功能，相对而言，当前读就是悲观锁的具体功能实现</p>
<p>MVCC模型在Mysql中具体实现有3个隐式字段：undo日志、Read View等去完成的</p>
<h3 id="4-MVCC的作用与好处"><a href="#4-MVCC的作用与好处" class="headerlink" title="4. MVCC的作用与好处"></a>4. MVCC的作用与好处</h3><p>数据库并发场景分为以下三种：</p>
<ul>
<li>读-读：没有问题，也不需要并发控制</li>
<li>读-写：有线程安全问题，可能会造成事务隔离性问题，（脏读、幻读、不可重复读）</li>
<li>写-写：有线程安全问题，可能会存在更新丢失问题</li>
</ul>
<p><strong>MVCC带来的好处：</strong></p>
<p>MVCC是一种用来解决读-写冲突的无所并发控制（在MVCC提出之前采用的是采用<strong>悲观锁</strong>），也就是事务分配增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，读操作只读该事务前的数据库快照，主要解决以下问题：</p>
<ul>
<li>在并发读写数据库时，可以做到在读操作是不用阻塞写操作，写操作也不用阻塞读操作，提高了数据库并发读写的性能；</li>
<li>解决脏读、幻读、不可重复读等事务隔离性问题，但不能解决更新丢失问题</li>
</ul>
<p><strong>MVCC组合方法</strong></p>
<ul>
<li>MVCC + 悲观锁： MVCC解决读写冲突，悲观锁解决写写冲突</li>
<li>MVCC + 乐观锁： MVCC解决读写冲突，乐观锁解决写写冲突，这种方式可能最大程度的提高数据库并发性能，并解决读写冲突和写写冲突导致的问题</li>
</ul>
<h3 id="5-MVCC的实现原理"><a href="#5-MVCC的实现原理" class="headerlink" title="5. MVCC的实现原理"></a>5. MVCC的实现原理</h3><p>实现原理主要是依赖记录中的 3个隐式字段、undo日志 、ReadView 来实现的</p>
<p>在Mysql的InnoDB引擎中就是指在已提交读(READ COMMITTD)和可重复读(REPEATABLE READ)这两种隔离级别下的事务对于SELECT操作会访问版本链中的记录的过程<br>这就使得别的事务可以修改这条记录，反正每次修改都会在版本链中记录。SELECT可以去版本链中拿记录，这就实现了读-写，写-读的并发执行，提升了系统的性能。</p>
<h4 id="5-1-版本链"><a href="#5-1-版本链" class="headerlink" title="5.1 版本链"></a>5.1 版本链</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;</span><br><span class="line">#触发分配TRX_ID</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_role;</span><br><span class="line">#指定TRX_MYSQL_THREAD_ID<span class="operator">=</span>当前CONNECTION_ID,表示查询当前连接</span><br><span class="line"><span class="keyword">select</span> TRX_ID, ROLL_PTR, ROW_ID  <span class="keyword">from</span> INFORMATION_SCHEMA.INNODB_TRX <span class="keyword">where</span> TRX_MYSQL_THREAD_ID <span class="operator">=</span> CONNECTION_ID();</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>
<p>在InnoDB引擎表中，它的聚簇索引记录中有两个必要的隐藏列：</p>
<ul>
<li><p>TRX_ID</p>
<p>6byte，这个id用来存储的每次对某条聚簇索引记录进行修改的时候的事务id</p>
</li>
<li><p>roll_pointer</p>
<p>每次对哪条聚簇索引记录有修改的时候，都会把老版本写入undo日志中。这个roll_pointer就是存了一个指针，它指向这条聚簇索引记录的上一个版本的位置，通过它来获得上一个版本的记录信息。(注意插入操作的undo日志没有这个属性，因为它没有老版本)</p>
</li>
<li><p>ROW_ID</p>
<p>6byte，隐含的自增ID（隐藏主键），如果数据表没有主键，InnoDB会自动以DB_ROW_ID产生一个聚簇索引</p>
</li>
<li><p>实际还有一个删除flag隐藏字段, 既记录被更新或删除并不代表真的删除，而是删除flag变了<br><img src="/mvcc/index/02.png"></p>
</li>
</ul>
<p>比如现在有个事务id是60的执行的这条记录的修改语句</p>
<p><img src="/mvcc/index/03.png"></p>
<p>此时在undo日志中就存在版本链<br><img src="/mvcc/index/04.png"></p>
<h4 id="5-2-ReadView"><a href="#5-2-ReadView" class="headerlink" title="5.2 ReadView"></a>5.2 ReadView</h4><p>已提交读和可重复读的区别就在于它们生成ReadView的策略不同<br>ReadView中主要就是有个列表来存储我们系统中当前活跃着的读写事务，也就是begin了还未提交的事务。通过这个列表来判断记录的某个版本是否对当前事务可见。假设当前列表里的事务id为[80,100]。</p>
<ul>
<li>如果你要访问的记录版本的事务id为50，比当前列表最小的id80小，那说明这个事务在之前就提交了，所以对当前活动的事务来说是可访问的。</li>
<li>如果你要访问的记录版本的事务id为90,发现此事务在列表id最大值和最小值之间，那就再判断一下是否在列表内，如果在那就说明此事务还未提交，所以版本不能被访问。如果不在那说明事务已经提交，所以版本可以被访问。</li>
<li>如果你要访问的记录版本的事务id为110，那比事务列表最大id100都大，那说明这个版本是在ReadView生成之后才发生的，所以不能被访问。<br>这些记录都是去版本链里面找的，先找最近记录，如果最近这一条记录事务id不符合条件，不可见的话，再去找上一个版本再比较当前事务的id和这个版本事务id看能不能访问，以此类推直到返回可见的版本或者结束。</li>
</ul>
]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql索引</title>
    <url>/mysql-index/index.html</url>
    <content><![CDATA[<p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。<br>索引分单列索引和组合索引。</p>
<ul>
<li>单列索引，即一个索引只包含单个列，一个表可以有多个单列索引，但这不是组合索引。 </li>
<li>组合索引，即一个索引包含多个列。</li>
</ul>
<p>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。<br>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。<br>上面都在说使用索引的好处，但过多的使用索引将会造成滥用。因此索引也会有它的缺点：<br>虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。<br>建立索引会占用磁盘空间的索引文件。</p>
<h2 id="1-普通索引"><a href="#1-普通索引" class="headerlink" title="1.普通索引"></a>1.普通索引</h2><ul>
<li>创建索引  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 如果是CHAR，VARCHAR类型，length可以小于字段实际长度；如果是BLOB和TEXT类型，必须指定 length。</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX indexName <span class="keyword">on</span> table_name (column_name )</span><br></pre></td></tr></table></figure></li>
<li>添加索引（修改表结构）  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 表结构已经存在了，然后使用alter修改表结构添加索引</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> table_name  <span class="keyword">add</span> INDEX indexName(column_name )</span><br></pre></td></tr></table></figure></li>
<li>创建表指定  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line">    ID <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,   </span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">    INDEX [indexName] (username(length))  </span><br><span class="line">); </span><br></pre></td></tr></table></figure></li>
<li>删除索引  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> index [indexName] <span class="keyword">on</span>  table_name </span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-唯一索引"><a href="#2-唯一索引" class="headerlink" title="2. 唯一索引"></a>2. 唯一索引</h2><p>他和普通索引类似，不同的是：索引列的值必须唯一，但允许有控制。如果是组合索引，则列值的组合必须唯一。</p>
<ul>
<li>创建索引  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> INDEX indexName <span class="keyword">ON</span> table_name (column_name (length ))</span><br></pre></td></tr></table></figure></li>
<li>修改表结构  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> mytable <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> [indexName] (column_name(length))</span><br></pre></td></tr></table></figure></li>
<li>创建表的时候指定  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line">    ID <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,   </span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">    <span class="keyword">UNIQUE</span> [indexName] (username(length))  </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h2 id="3-组合索引"><a href="#3-组合索引" class="headerlink" title="3.组合索引"></a>3.组合索引</h2></li>
<li>修改表结构指定索引  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> table_name <span class="keyword">ADD</span> INDEX indexName (column_name1 , column_name2,...)</span><br></pre></td></tr></table></figure></li>
<li>创建表的时候指定  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line">    ID <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,   </span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">    KEY [indexName] (column_name1 , column_name2,...)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<h3 id="3-1-组合索引查询问题"><a href="#3-1-组合索引查询问题" class="headerlink" title="3.1 组合索引查询问题"></a>3.1 组合索引查询问题</h3></li>
</ul>
<p><strong>问题描述：</strong>在mysql中有张表test_a，有3个字段id,name,num；对这三个字段建立组合索引，那么查询时使用其中某两个或者一个作为查询条件，是否还会走索引<br><img src="/mysql-index/index/01.png" alt="表结构"><br>根据查询字段的位置不同来决定，如查询<strong>id</strong>、<strong>id,num</strong>、<strong>id,num,name</strong>、 <strong>id, name</strong> 都可以走索引的，其他条件的查询不能走索引。</p>
<p><strong>组合索引 有“最左前缀”原则。就是只从最左面的开始组合，并不是所有只要含有这三列存在的字段的查询都会用到该组合索引</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加组合索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test_a <span class="keyword">ADD</span> INDEX <span class="string">&#x27;lianhe&#x27;</span>(id, num, name)</span><br></pre></td></tr></table></figure>
<ol>
<li><p>使用三个字段id, num, name查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 只要三个条件都有，可以随意变换位置，结果都会走索引</span></span><br><span class="line"><span class="comment">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_a <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> num<span class="operator">=</span><span class="string">&#x27;001&#x27;</span> <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="/mysql-index/index/02.png" alt="使用三个字段id, num, name查询"><br>从执行结果上可以看到是从走索引进行查询的</p>
</li>
<li><p>使用num, name 查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_a <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;1#&#x27;</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_a <span class="keyword">WHERE</span> num<span class="operator">=</span><span class="string">&#x27;001&#x27;</span> </span><br></pre></td></tr></table></figure>
<p><img src="/mysql-index/index/03.png" alt="使用id, name 查询"></p>
</li>
<li><p>使用id, name或者id, num 查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 只要包括id，可以随意变换位置，结果都会走索引</span></span><br><span class="line"><span class="comment">-- 优化器会将条件顺序优化成上面三种情况后执行</span></span><br><span class="line"><span class="comment">--如果只有两个字段，只有id条件命中，num或者name 条件不走联合索引。</span></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_a <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">AND</span> name <span class="operator">=</span> <span class="string">&#x27;1#&#x27;</span></span><br></pre></td></tr></table></figure>
<p><img src="/mysql-index/index/02.png" alt="使用id, name 查询"></p>
</li>
</ol>
<p>需要避免索引失效的情况，如：LIKE %xxx，或者条件中使用函数等。<br>4. 使用id查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_a <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><img src="/mysql-index/index/02.png" alt="使用id查询"></p>
<ol start="5">
<li>使用name或者num查询<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_a <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;1#&#x27;</span></span><br><span class="line"></span><br><span class="line">EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test_a <span class="keyword">WHERE</span> num <span class="operator">=</span> <span class="string">&#x27;001&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-2-创建组合索引选择规则"><a href="#3-2-创建组合索引选择规则" class="headerlink" title="3.2 创建组合索引选择规则"></a>3.2 创建组合索引选择规则</h3><ul>
<li>经常用的列优先（最左匹配原则）</li>
<li>离散度高的列优先（离散度高原则）</li>
<li>宽度小的列优先（最少空间原则）</li>
</ul>
<h2 id="4-使用alter命令添加索引"><a href="#4-使用alter命令添加索引" class="headerlink" title="4.使用alter命令添加索引"></a>4.使用alter命令添加索引</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (column_list): </span><br><span class="line">    </span><br><span class="line"><span class="comment">--  这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> index_name (column_list):</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加普通索引，索引值可出现多次。</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> INDEX index_name (column_list):</span><br><span class="line"></span><br><span class="line"><span class="comment">--该语句指定了索引为 FULLTEXT ，用于全文索引。</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> tbl_name <span class="keyword">ADD</span> FULLTEXT index_name (column_list):</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql事务</title>
    <url>/mysql-transcation/index.html</url>
    <content><![CDATA[<h2 id="事务的定义"><a href="#事务的定义" class="headerlink" title="事务的定义"></a>事务的定义</h2><p>事务是数据管理系统DBMS执行过程中的一个<strong>逻辑单位</strong>，有一个有限的数据库<strong>操作序列</strong>构成</p>
<h2 id="事务四大特性"><a href="#事务四大特性" class="headerlink" title="事务四大特性"></a>事务四大特性</h2><ol>
<li> 原子性atomicity：依赖undo log做到全部失败</li>
<li> 隔离性isolation：实现方式LBCC 和 MVCC</li>
<li> 持久性durability ：实现方式redo log和double write</li>
<li> 一致性consistency：通过上面的三种方式实现</li>
</ol>
<p>数据恢复：</p>
<ul>
<li>  redo log 崩溃恢复</li>
<li>  双写缓冲（double write）</li>
</ul>
<p>Mysql中insert、delete、update 自带事务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> veriables <span class="keyword">like</span> ‘autocommit’;</span><br><span class="line"><span class="keyword">set</span> session autocommit <span class="operator">=</span> <span class="keyword">on</span>;</span><br><span class="line">update xxx <span class="keyword">where</span> <span class="keyword">set</span> xx <span class="operator">=</span><span class="number">1</span> ;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure>

<p>结束事务两种方式：rollback     commit</p>
<h2 id="事务并发的三大问题"><a href="#事务并发的三大问题" class="headerlink" title="事务并发的三大问题"></a>事务并发的三大问题</h2><p>数据并发的三大问题其实都是数据库读一致性问题，必须有数据库提供一定的事务隔离机制来解决。</p>
<h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3><p><img src="/mysql-transcation/index/image-20201202210510525.png" alt="image-20200727224117281"></p>
<h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3><p><img src="/mysql-transcation/index/image-20201202210235089.png" alt="image-20200727224117281"></p>
<h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3><p><img src="/mysql-transcation/index/image-20201202210357906.png" alt="image-20200727224117281"></p>
<h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><p><a href="http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt">http://www.contrib.andrew.cmu.edu/~shadow/sql/sql1992.txt</a><br><img src="/mysql-transcation/index/image-20201202210817094.png" alt="image-20200727224117281"><br><img src="/mysql-transcation/index/image-20201202211406282.png" alt="image-20200727224117281"></p>
<p><img src="/mysql-transcation/index/image-20201202211752764.png" alt="image-20201202211752764"></p>
<h3 id="MVCC思想"><a href="#MVCC思想" class="headerlink" title="MVCC思想"></a>MVCC思想</h3><p><img src="/mysql-transcation/index/image-20201202212103393.png" alt="image-20201202212103393"></p>
<h4 id="Read-View（一致性试图）"><a href="#Read-View（一致性试图）" class="headerlink" title="Read View（一致性试图）"></a>Read View（一致性试图）</h4><p>存储内容</p>
<p><img src="/mysql-transcation/index/image-20201202213520136.png" alt="image-20201202213520136"></p>
<h4 id="Read-View判断规则"><a href="#Read-View判断规则" class="headerlink" title="Read View判断规则"></a>Read View判断规则</h4><p><img src="/mysql-transcation/index/image-20201202213757692.png" alt="image-20201202213757692"></p>
<h4 id="RC与RR-read-View-的区别"><a href="#RC与RR-read-View-的区别" class="headerlink" title="RC与RR read View 的区别"></a>RC与RR read View 的区别</h4><p><img src="/mysql-transcation/index/image-20201202214418001.png" alt="image-20201202214418001"></p>
<p>所以RC解决不了脏读的问题</p>
<h1 id="Mysql-InnoDb所得基本类型"><a href="#Mysql-InnoDb所得基本类型" class="headerlink" title="Mysql InnoDb所得基本类型"></a>Mysql InnoDb所得基本类型</h1><p>InnoDB支持行锁</p>
<p>MyiSAM支持行锁</p>
<p>表锁和行锁的区别</p>
<ul>
<li>  锁力度：表锁 &gt; 行锁</li>
<li>  加锁效率：表锁 &gt; 行锁</li>
<li>  冲突概率：表锁 &gt; 行锁</li>
<li>  并发性能：表锁 &lt; 行锁</li>
</ul>
<h2 id="表锁"><a href="#表锁" class="headerlink" title="表锁"></a>表锁</h2><p><img src="/mysql-transcation/index/image-20201202214957559.png" alt="image-20201202214957559"></p>
<p>一个事务能够给一张表加上锁的前提是：没有其他任何一个事务锁定了这张表的任意一行数据。如果没有意向锁的话，那么加表锁需要扫描表中的每行数据，大大的浪费时间；</p>
<p>如果在添加行锁的时候，会在表上添加意向锁，那么在添加表锁的时候就不需要去扫描所有表数据了，只需要看下表上是否由意向锁就可；</p>
<h2 id="行锁"><a href="#行锁" class="headerlink" title="行锁"></a>行锁</h2><h3 id="共享锁shared-locks"><a href="#共享锁shared-locks" class="headerlink" title="共享锁shared locks"></a>共享锁shared locks</h3><p><img src="/mysql-transcation/index/image-20201202215350319.png" alt="image-20201202215350319"></p>
<h3 id="排它锁Exclusive-locks"><a href="#排它锁Exclusive-locks" class="headerlink" title="排它锁Exclusive locks"></a>排它锁Exclusive locks</h3><p><img src="/mysql-transcation/index/image-20201202215717524.png" alt="image-20201202215717524"></p>
<h3 id="Innodb行锁锁定的是什么"><a href="#Innodb行锁锁定的是什么" class="headerlink" title="Innodb行锁锁定的是什么"></a>Innodb行锁锁定的是什么</h3><p>锁定的是index索引，如果表中没有索引，那么Innodb会把隐藏列DB_ROW_ID当作聚集索引</p>
<p>加锁一定要加上条件，不然会锁表</p>
<p><img src="/mysql-transcation/index/image-20201202222250939.png" alt="image-20201202222250939"></p>
<h3 id="记录锁Rcord-Lock-锁定记录"><a href="#记录锁Rcord-Lock-锁定记录" class="headerlink" title="记录锁Rcord Lock 锁定记录"></a>记录锁Rcord Lock 锁定记录</h3><p><img src="/mysql-transcation/index/image-20201202222823984.png" alt="image-20201202222823984"></p>
<h3 id="间隙锁Gap-Lock-锁定范围"><a href="#间隙锁Gap-Lock-锁定范围" class="headerlink" title="间隙锁Gap Lock 锁定范围"></a>间隙锁Gap Lock 锁定范围</h3><p>专门用于阻塞插入，间隙锁如果没有命中的话，会锁定最后一个值到正无穷，那么在最后一个值和正无穷之间的插入都不能成功。</p>
<p><img src="/mysql-transcation/index/image-20201202222914087.png" alt="image-20201202222914087"></p>
<h3 id="临健锁Next-key-Lock-：锁定范围加记录"><a href="#临健锁Next-key-Lock-：锁定范围加记录" class="headerlink" title="临健锁Next-key Lock ：锁定范围加记录"></a>临健锁Next-key Lock ：锁定范围加记录</h3><p><img src="/mysql-transcation/index/image-20201202223655445.png" alt="image-20201202223655445"></p>
<p><strong>为了解决幻读的问题</strong></p>
<h3 id="事务隔离级别的实现"><a href="#事务隔离级别的实现" class="headerlink" title="事务隔离级别的实现"></a>事务隔离级别的实现</h3><p><img src="/mysql-transcation/index/image-20201202224136052.png" alt="image-20201202224136052"></p>
<h3 id="事务隔离级别的选择"><a href="#事务隔离级别的选择" class="headerlink" title="事务隔离级别的选择"></a>事务隔离级别的选择</h3><p><img src="/mysql-transcation/index/image-20201202224412832.png" alt="image-20201202224412832"></p>
]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql数据库锁</title>
    <url>/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E9%94%81/index.html</url>
    <content><![CDATA[<p>当数据库有事务的时候，可能会产生数据的不一致，这时就需要一些机制来保证访问的次序，这就是锁的机制；<br><strong>锁的作用</strong>：用于挂你对共享资源的并发访问，保证数据库的完整性和一致性。<br>##1. 不同引擎的锁以及锁分类<br><strong>Mysql数据库中，InnoDB支持表、行级锁，而MyISAM支持表级锁</strong><br><br><br>Mysql大致可以归纳为以下3种锁：</p>
<ul>
<li>表级锁：开销小，加锁块，不会出现死锁，发生锁冲突的概率最高，并发度最低。</li>
<li>行级锁：开销大，加锁慢，会出现死锁，发生锁冲突的概率最低，并发度最高。</li>
<li>页面锁：开销和加锁的时间介于表级锁和行级锁之间，会出现死锁，锁粒度介于两者之间；并发度一般，一次锁定相邻一组记录</li>
</ul>
<p>Mysql表级锁两种模式: <strong>表共享锁（Table Read Lock）和 表独占写锁（Table Write Lock）</strong>，表现如下：</p>
<ul>
<li>对一个表的读操作，不会阻塞其他用户对同一表请求，但会阻塞对同一表的写请求；</li>
<li>对MyISAM的写操作，则会则色其他用户对同一表的读和写操作；</li>
<li>MyISAM表的读操作和写操作之间，以及写操作之间是串行的。<br>当一个线程获得对一个表的写锁后，只有持有锁的线程可以对表进行更新操作，其他线程的读、写操作都会等待。</li>
</ul>
<h2 id="2-加表级锁"><a href="#2-加表级锁" class="headerlink" title="2.加表级锁"></a>2.加表级锁</h2><p>MyISAM在执行查询语句（SELECT）前，会自动给涉及的所有表加读锁，在执行更新操作（UPDATE、DELETE、INSERT等）前，会自动给涉及的表加写锁，这个过程并不需要用户干预，因此用户一般不需要直接用LOCK TABLE命令给MyISAM表显式加锁。<br>给MyISAM表显式加锁，一般是为了一定程度模拟事务操作，实现对某一时间点多个表的一致性读取。例如，有一个订单表orders，其中记录有订单的总金额total，同时还有一个订单明细表order_detail，其中记录有订单每一产品的金额小计subtotal，假设我们需要检查这两个表的金额合计是否相等，可能就需要执行如下两条SQL</p>
]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql知识总结</title>
    <url>/mysql/index.html</url>
    <content><![CDATA[<h1 id="mysql-初识"><a href="#mysql-初识" class="headerlink" title="mysql 初识"></a>mysql 初识</h1><h2 id="1-版本历史"><a href="#1-版本历史" class="headerlink" title="1. 版本历史"></a>1. 版本历史</h2><ul>
<li>  1996年 mysql.10发布</li>
<li>  1996年10月3.11.1发布</li>
<li>  2000年ISAM升级成MyISAM引擎，mysql开源</li>
<li>  2003年 Mysql4.0发布集成InnoDB存储引擎</li>
<li>  2005年 MySQL 5.0版本发布，提供了试图，存储过程等功能</li>
<li>  2010年MySQL5.5发布，InnoDB成为默认的存储引擎</li>
<li>  2016年发布8.0.0版本</li>
</ul>
<h2 id="2-流行分支"><a href="#2-流行分支" class="headerlink" title="2. 流行分支"></a>2. 流行分支</h2><ul>
<li>  Maria DB</li>
<li>  Percona Server</li>
</ul>
<h2 id="3-SQL-执行流程"><a href="#3-SQL-执行流程" class="headerlink" title="3. SQL 执行流程"></a>3. SQL 执行流程</h2><h3 id="通信类型"><a href="#通信类型" class="headerlink" title="通信类型"></a>通信类型</h3><ul>
<li>  同步</li>
<li>  异步</li>
</ul>
<h3 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h3><ul>
<li>  长连接</li>
<li>  短连接</li>
</ul>
<h3 id="超时时间"><a href="#超时时间" class="headerlink" title="超时时间"></a>超时时间</h3><ul>
<li><p>非交互式超时时间，如JDBC程序，单位s</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;wait_timeout&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>交互式超时间，如数据库工具</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> variables <span class="keyword">LIKE</span> <span class="string">&#x27;interactive_timeout&#x27;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="查看连接"><a href="#查看连接" class="headerlink" title="查看连接"></a>查看连接</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">GLOBAL</span> STATUS <span class="keyword">LIKE</span> <span class="string">&#x27;Thread%&#x27;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">连接名称</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Threads_cached</td>
<td align="center">缓存中的线程</td>
</tr>
<tr>
<td align="center">Threads_connected</td>
<td align="center">连接中线程</td>
</tr>
<tr>
<td align="center">Threads_created</td>
<td align="center">创建过的线程</td>
</tr>
<tr>
<td align="center">Threads_running</td>
<td align="center">正在执行的线程</td>
</tr>
</tbody></table>
<h4 id="查看所有的线程"><a href="#查看所有的线程" class="headerlink" title="查看所有的线程"></a>查看所有的线程</h4><p>如果是root权限，可以看到所有用户发起的线程，否则只能看到自己的线程</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> processlist</span><br></pre></td></tr></table></figure>

<p><img src="/mysql/index/image-20200727224117281.png" alt="image-20200727224117281"></p>
<ul>
<li>  id ：一个表示，kill一个语句的时候可以使用</li>
<li>  user：显示当前用户，如果不是root，这个命令就只显示你权限范围内的sql语句</li>
<li>  host：显示这个语句是从哪个ip的端口上发出的，可以用来追踪出问题语句的用户</li>
<li>  db：显示这个进程目前连接的是哪个数据库</li>
<li>  commmand：显示当年连接的执行命令，一般分为休眠slee、查询query、连接connect</li>
<li>  time：此状态持续的时间，单位是秒</li>
<li>  state： 显示使用当年连接的sql语句状态，state只是语句执行中的某一个状态，如查询：需要经过copying to tmp table、sorting result、sending data等转台才可以完成</li>
<li>  info：显示这个sql语句，因为长度有限，所以长的sql语句就显示不全</li>
</ul>
<h4 id="查看最大连接数"><a href="#查看最大连接数" class="headerlink" title="查看最大连接数"></a>查看最大连接数</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> variables <span class="keyword">LIKE</span> <span class="string">&#x27;max_connections&#x27;</span>; <span class="operator">/</span><span class="operator">/</span>一般默认是<span class="number">151</span>，最大可以是<span class="number">2</span>的<span class="number">14</span>次方</span><br></pre></td></tr></table></figure>
<h4 id="mysql变量级别"><a href="#mysql变量级别" class="headerlink" title="mysql变量级别"></a>mysql变量级别</h4><ul>
<li><p>global全局</p>
  <figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">在mysql中修改全局变量global有两种方法：</span><br><span class="line">1. 修改my.ini配置文件（永久有效）</span><br><span class="line">2. 在不修改配置文件的基础上，使用关键字global设置全局变量</span><br><span class="line">   set global autocommit = 1;将autocommit变量的值设置为ON，需要注意的是此方法对global全局变量的设计进对于新开启的会话有效，对已开启的会话无效，同理，如果修改回哈session变量，可以使用session关键字，如set session autocommit = 1；这个仅对本session的变量配置有效，对其他的session无效；（在MySQL服务重启之后，数据库的配置重新按照my.ini文件 初始化，global和session 的配置都会失效）</span><br></pre></td></tr></table></figure></li>
<li><p>  session当前会话</p>
</li>
</ul>
<h3 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h3><ul>
<li>  Unix Socket</li>
<li>  TCP/IP</li>
<li>  Named Pipes命名管道</li>
<li>  Share Memory共享内存</li>
</ul>
<h3 id="通信方式"><a href="#通信方式" class="headerlink" title="通信方式"></a>通信方式</h3><ul>
<li>  单工</li>
<li>  半双工</li>
<li>  全双工</li>
</ul>
<p><img src="/mysql/index/image-20200727231112059.png" alt="image-20200727231112059"></p>
<h3 id="MySQL-缓存"><a href="#MySQL-缓存" class="headerlink" title="MySQL 缓存"></a>MySQL 缓存</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> VARIABLES <span class="keyword">LIKE</span> <span class="string">&#x27;query_cache%&#x27;</span></span><br><span class="line">#默认关闭，是因为mysql要保证两次执行的<span class="keyword">sql</span>完全一致，连空格，大小写都一致，而且当数据表中的任何一条数据发生变化，整个缓存会失效；</span><br></pre></td></tr></table></figure>

<p>#2. 删除数据</p>
<h2 id="1-数据删除方式"><a href="#1-数据删除方式" class="headerlink" title="1. 数据删除方式"></a>1. 数据删除方式</h2><ul>
<li>DELETE</li>
<li>Truncate</li>
<li>Drop</li>
</ul>
<h2 id="2-执行速度"><a href="#2-执行速度" class="headerlink" title="2. 执行速度"></a>2. 执行速度</h2><p>drop &gt; truncate &gt; delete</p>
<h3 id="2-1-DELETE"><a href="#2-1-DELETE" class="headerlink" title="2.1 DELETE"></a>2.1 DELETE</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> XXX</span><br></pre></td></tr></table></figure>

<ul>
<li><p>DELETE 数据数据库DML操作语言，只删除数据不删除表的结构，会走事务，执行时会触发trigger</p>
</li>
<li><p>在InnoDB中，delete其实并不会真的把数据删除，mysqL实际上只是给删除的数据打个标记为删除，因此delete删除表中的数据，表文件在磁盘所占的控件不会变小，存储控件不会被释放，只是把删除的数据设置为不可见。虽然未释放磁盘控件，但是下次插入数据的时候，仍然可以重用这部分空间（重用-&gt;覆盖）</p>
</li>
<li><p>delete执行时，会先把所删除数据缓存到rollback segement中，事务commit之后生效</p>
</li>
<li><p><strong>delete from  table_name</strong> 删除表的全部数据对于MyISAM会释放磁盘控件，Innodb不会释放磁盘空间</p>
</li>
<li><p>对于<strong>DELETE from table_name where xxx</strong>带条件的删除，不管是Innodb还是MyISAM都不会释放磁盘控件</p>
</li>
<li><p>delete 操作以后使用<strong>optimize table  table_name</strong>会里级释放磁盘空间（不管是Innodb还是MyISAM）</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查看表占用磁盘空间大小</span></span><br><span class="line"><span class="keyword">select</span> concat(round(<span class="built_in">sum</span>(DATA_LENGTH<span class="operator">/</span><span class="number">1024</span><span class="operator">/</span><span class="number">1024</span>),<span class="number">2</span>),<span class="string">&#x27;M&#x27;</span>) <span class="keyword">as</span> table_size</span><br><span class="line"><span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span><span class="string">&#x27;demo_db&#x27;</span> <span class="keyword">AND</span> table_name<span class="operator">=</span><span class="string">&#x27;demo_table&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 执行空间优化语句，以及执行后的表size变化</span></span><br><span class="line">optimize <span class="keyword">table</span> demo_table</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><strong>delete 操作时一行一行执行删除的，并且同时将该行的删除操作日志记录在redo和undo表空间中以便进行回滚（rollback）和重做操作</strong>，生成大量日志也会占用磁盘空间</li>
</ul>
<h3 id="2-2-Truncate"><a href="#2-2-Truncate" class="headerlink" title="2.2 Truncate"></a>2.2 Truncate</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--删除表数据， 不带where条件</span></span><br><span class="line"><span class="comment">--与不带where的delete ：只删除数据，而不删除表的结构	</span></span><br><span class="line"><span class="keyword">Truncate</span> <span class="keyword">table</span> table_name</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>Truncate数据数据库DDL定义语言，不走事务，原数据不放到rollback segement中，操作不触发trigger</strong>，执行后里级生效，无法找回；</p>
</li>
<li><p><strong>truncate table table_name里级释放磁盘空间不管是Innodb 和MyISAM</strong>；truncate table其实有点类似余drop table然后create，只不过这个crate table的过程做了优化，比如表结构文件之前已经有了等，所以速度上应该是接近drop table的速度</p>
</li>
<li><p>truncate 能快速清空一个表，并且重置auto_increment的值</p>
<p>​    但是对于不同的类型存储引擎需要注意的地方是：</p>
<ul>
<li><strong>对于MyISAM</strong>：truncate会重置auto_increment（自增序列）的值为1，而delete后表仍然保持auto_increment。</li>
<li><strong>对于Innodb</strong>：truncate会重置auto_increment（自增序列）的值为1， 而delete后表仍然保持auto_increment。但是在做delete整个表之后重启mysql的话，而重启后的auto_increment会被置为1</li>
</ul>
<p>也就是说，Innodb的表本身是无法持久保存auto_increment。delete表之后auto_increment仍然保存在内存，但是重启后就丢失了，只能从1开始，实质上重启后的auto_increment会从SELETE 1+MAX(ai_col) FROM t开始</p>
</li>
<li><p>小心使用 truncate，尤其没有备份的时候，如果误删除线上的表，记得及时联系中国民航，订票电话：400-806-9553</p>
</li>
</ul>
<h3 id="2-3-Drop"><a href="#2-3-Drop" class="headerlink" title="2.3 Drop"></a>2.3 Drop</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除表结构以及表数据</span></span><br><span class="line"><span class="keyword">Drop</span> <span class="keyword">table</span> table_name</span><br></pre></td></tr></table></figure>

<ul>
<li><p><strong>drop：属于数据库DDL定义语言，同Truncate；</strong></p>
<p><strong>执行后立即生效，无法找回！ 执行后立即生效，无法找回！ 执行后立即生效，无法找回！</strong></p>
</li>
<li><p>**drop table table_name 立刻释放磁盘空间 ，不管是 InnoDB 和 MyISAM; **drop 语句将删除表的结构被依赖的约束(constrain)、触发器(trigger)、索引(index); 依赖于该表的存储过程/函数将保留,但是变为 invalid 状态。</p>
</li>
<li><p>小心使用 drop ，要删表跑路的兄弟，请在订票成功后在执行操作！订票电话：400-806-9553</p>
</li>
</ul>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p><strong>可以这么理解，一本书，delete是把目录撕了，truncate是把书的内容撕下来烧了，drop是把书烧了</strong></p>
]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Java内存泄漏排查</title>
    <url>/outOfMemoryError/index.html</url>
    <content><![CDATA[<h2 id="1-内存溢出"><a href="#1-内存溢出" class="headerlink" title="1.内存溢出"></a>1.内存溢出</h2><p>java.lang.OutOfMemoryError：是指程序在申请内存是，没有足够的内存空间供其使用，出现OutOfMemoryError</p>
<ol>
<li>产生原因<ul>
<li>JMM内存过小</li>
<li>程序不严谨，产生了过多的垃圾</li>
</ul>
</li>
<li>具体表现在以下集中情况<ul>
<li>内存中加载的数据量过于庞大，如一次从数据库取出过多的数据</li>
<li>集合类中有对对象的引用，使用完后未清空，使得JVM不能回收</li>
<li>代码中存在死循环或循环过多产生过多重复的对象实体</li>
<li>使用第三方软件的bug</li>
<li>启动参数内存值设定过小</li>
</ul>
</li>
<li>常见错误提示<ul>
<li>tomcat:java.lang.OutOfMemoryError: PermGen space </li>
<li>tomcat:java.lang.OutOfMemoryError: Java heap space</li>
<li>weblogic:Root cause of ServletException java.lang.OutOfMemoryError</li>
<li>resin:java.lang.OutOfMemoryError</li>
<li>java:java.lang.OutOfMemoryError</li>
</ul>
</li>
<li>解决方法<ul>
<li>增加JVM的内存大小<br>对于tomcat容器，找到tomcat在电脑中的安装目录，进入这个目录，然后进入bin目录中，在window环境下找到bin目录中的catalina.bat，在linux环境下找到catalina.sh。<br>编辑catalina.bat文件，找到JAVA_OPTS（具体来说是 set “JAVA_OPTS=%JAVA_OPTS% %LOGGING_MANAGER%”）这个选项的位置，这个参数是Java启动的时候，需要的启动参数。<br>也可以在操作系统的环境变量中对JAVA_OPTS进行设置，因为tomcat在启动的时候，也会读取操作系统中的环境变量的值，进行加载。<br>如果是修改了操作系统的环境变量，需要重启机器，再重启tomcat，如果修改的是tomcat配置文件，需要将配置文件保存，然后重启tomcat，设置就能生效了</li>
<li>优化程序，释放垃圾<br>主要思路就是避免程序体现上出现的情况。避免死循环，防止一次载入太多的数据，提高程序健壮型及时释放。因此，从根本上解决Java内存溢出的唯一方法就是修改程序，及时地释放没用的对象，释放内存空间  </li>
</ul>
</li>
</ol>
<h2 id="2-内存泄漏"><a href="#2-内存泄漏" class="headerlink" title="2. 内存泄漏"></a>2. 内存泄漏</h2><p>Memory Leak，是指程序在申请内存后，无法释放已申请的内存空间，一次内存泄露危害可以忽略，但内存泄露堆积后果很严重，无论多少内存，迟早会被占光。<br>在Java中，内存泄漏就是存在一些被分配的对象，这些对象有下面两个特点：<br>1）首先，这些对象是可达的，即在有向图中，存在通路可以与其相连；<br>2）其次，这些对象是无用的，即程序以后不会再使用这些对象。<br>如果对象满足这两个条件，这些对象就可以判定为Java中的内存泄漏，这些对象不会被GC所回收，然而它却占用内存。<br>关于内存泄露的处理页就是提高程序的健壮型，因为内存泄露是纯代码层面的问题</p>
<h2 id="3-内存溢出和内存泄漏的联系"><a href="#3-内存溢出和内存泄漏的联系" class="headerlink" title="3.内存溢出和内存泄漏的联系"></a>3.内存溢出和内存泄漏的联系</h2><p>内存泄露会最终会导致内存溢出。<br><strong>相同点</strong>：都会导致应用程序运行出现问题，性能下降或挂起。<br><strong>不同点</strong>：<br>    1) 内存泄露是导致内存溢出的原因之一，内存泄露积累起来将导致内存溢出。<br>    2) 内存泄露可以通过完善代码来避免，内存溢出可以通过调整配置来减少发生频率，但无法彻底避免。</p>
<h2 id="4-排查案例"><a href="#4-排查案例" class="headerlink" title="4.排查案例"></a>4.排查案例</h2><p>Java的内存泄露多半是因为对象存在无效的引用，对象得不到释放，如果发现Java应用程序占用的内存出现了泄露的迹象，那么我们一般采用下面的步骤分析：</p>
<ol>
<li>用工具生成java应用程序的heap dump（如jmap）</li>
<li>使用Java heap分析工具（如MAT），找出内存占用超出预期的嫌疑对象</li>
<li>根据情况，分析嫌疑对象和其他对象的引用关系。</li>
<li>分析程序的源代码，找出嫌疑对象数量过多的原因。</li>
</ol>
<p>实际操作如下：<br>1.登录linux服务器，获取tomcat的pid</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep java</span><br></pre></td></tr></table></figure>
<p>2.利用jmap初步分析内存映射</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jmap -histo:live pid | head -7</span><br></pre></td></tr></table></figure>
<p><img src="/outOfMemoryError/index/01.png" alt="jmap"><br>第2行是我们业务系统的对象，通过这个对象的引用可以初步分析出到底是哪里出现了引用未被垃圾回收收集，通知开发人员优化相关代码</p>
<p>3.如果上面一步还无法定位到关键信息，那么需要拿到heap dump，生成离线文件，做进一步分析</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jmap -dump:live,format=b,file=heap.hprof 3514 </span><br></pre></td></tr></table></figure>
<p><img src="/outOfMemoryError/index/02.png" alt="jmap"><br>4. 拿到heap dump文件，利用eclipse插件MAT来分析heap profile。 </p>
<ul>
<li>1.安装MAT插件 </li>
<li>2.在eclipse里切换到Memory Analysis视图</li>
<li>3.用MAT打开heap profile文件。<br><img src="/outOfMemoryError/index/03.png" alt="jmap"><br>直接看到下面Action窗口，有4种Action来分析heap profile，介绍其中最常用的2种:</li>
<li><strong>Histogram</strong>：这个使用的最多，跟上面的jmap -histo 命令类似，只是在MAT里面可以用GUI来展示应用系统各个类产生的实例。<br><img src="/outOfMemoryError/index/04.png" alt="jmap"><br>Shllow Heap排序后发现 Cms_Organization 这个类占用的内存比较多（没有得到及时GC），查看引用<br><img src="/outOfMemoryError/index/05.png" alt="jmap"><br>分析引用栈，找到无效引用，打开源码<br><img src="/outOfMemoryError/index/06.png" alt="jmap"><br><strong>查看源码！！！</strong></li>
</ul>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>内存溢出</tag>
      </tags>
  </entry>
  <entry>
    <title>redis常见使用场景</title>
    <url>/redis-usage-scenario/index.html</url>
    <content><![CDATA[<h2 id="1-缓存"><a href="#1-缓存" class="headerlink" title="1. 缓存"></a>1. 缓存</h2><p>String类型<br>例如：热点数据缓存、对象缓存、全页缓存可以提升热点数据的访问效率</p>
<h2 id="2-数据共享分布式"><a href="#2-数据共享分布式" class="headerlink" title="2. 数据共享分布式"></a>2. 数据共享分布式</h2><p>String类型，因为redis是分布式的独立服务，可以在多个应用服务之间共享，例如分布式session</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-分布式锁"><a href="#3-分布式锁" class="headerlink" title="3. 分布式锁"></a>3. 分布式锁</h2><p>String类型 setnx方法，只有不存在时才能添加成功返回true</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    Long flag = jedis.setnx(key, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</span><br><span class="line">        jedis.expire(key, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> flag == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">releaseLock</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">    jedis.del(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-全局ID"><a href="#4-全局ID" class="headerlink" title="4. 全局ID"></a>4. 全局ID</h2><p>int 类型， incrby, 利用原子性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">incrby userid 1000</span><br></pre></td></tr></table></figure>
<p>分库分表的场景，一次性拿一段。</p>
<h2 id="5-计数器"><a href="#5-计数器" class="headerlink" title="5. 计数器"></a>5. 计数器</h2><p>int 类型，incr方法<br>例如：文章的阅读量、微博点赞数；允许一定的延迟，先写入redis在定时同步到数据库</p>
<ol>
<li><p>第一种方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">testRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class="line">            ops.increment(<span class="string">&quot;success&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//return (int) ops.get(&quot;success&quot;); //使用这个会出现错误，报错信息 Caused by: org.springframework.core.serializer.support.SerializationFailedException: Failed to deserialize payload. Is the byte array a result of corresponding serialization for DefaultDeserializer?; nested exception is java.io.EOFException。</span></span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(redisTemplate.boundValueOps(<span class="string">&quot;success&quot;</span>).get(<span class="number">0</span>, -<span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>第二种方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisTemplate&lt;String,Object&gt; redisTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource(name=&quot;redisTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ValueOperations&lt;String,Object&gt; ops;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">testRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//此方法会先检查key是否存在，存在+1，不存在先初始化，再+1</span></span><br><span class="line">            ops.increment(<span class="string">&quot;success&quot;</span>, <span class="number">1</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//return (int) ops.get(&quot;success&quot;);</span></span><br><span class="line">            <span class="comment">//return Integer.valueOf(redisTemplate.boundValueOps(&quot;success&quot;).get(0, -1));</span></span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">int</span>) getKey(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getKey</span><span class="params">(<span class="keyword">final</span> String key)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> redisTemplate.execute(<span class="keyword">new</span> RedisCallback&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Long <span class="title">doInRedis</span><span class="params">(RedisConnection connection)</span> <span class="keyword">throws</span> DataAccessException </span>&#123;</span><br><span class="line">                </span><br><span class="line">                RedisSerializer&lt;String&gt; redisSerializer = redisTemplate.getStringSerializer();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">byte</span>[] rowkey = redisSerializer.serialize(key);</span><br><span class="line">                <span class="keyword">byte</span>[] rowval = connection.get(rowkey);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String val = redisSerializer.deserialize(rowval);</span><br><span class="line">                    <span class="keyword">return</span> Long.parseLong(val);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">0L</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置每天零点过期，重新计数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//当天时间</span></span><br><span class="line">Date date = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">//当天零点</span></span><br><span class="line">date = DateUtils.truncate(date, Calendar.DAY_OF_MONTH);</span><br><span class="line"><span class="comment">//第二天零点</span></span><br><span class="line">date = DateUtils.addDays(date, +<span class="number">1</span>);</span><br><span class="line">redisTemplate.expireAt(<span class="string">&quot;success&quot;</span>, date);</span><br></pre></td></tr></table></figure>
<h2 id="6-限流"><a href="#6-限流" class="headerlink" title="6. 限流"></a>6. 限流</h2><p>int类型，incr方法<br>以访问者的IP和其他信息作为key,访问一次增加一次次数，超过次数 则返回false</p>
</li>
</ol>
<h2 id="7-位统计"><a href="#7-位统计" class="headerlink" title="7. 位统计"></a>7. 位统计</h2><p>String类型的bitcount<br>字符是以8位二进制存储的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set k1 a</span><br><span class="line">setbit k1 6 1</span><br><span class="line">setbit k1 7 0</span><br><span class="line">get k1 </span><br><span class="line">/* 6 7 代表的a的二进制位的修改</span><br><span class="line"></span><br><span class="line">a 对应的ASCII码是97，转换为二进制数据是01100001</span><br><span class="line">b 对应的ASCII码是98，转换为二进制数据是01100010</span><br><span class="line"></span><br><span class="line">因为bit非常节省空间（1 MB=8388608 bit），可以用来做大数据量的统计。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<p>例如：在线用户统计，留存用户统计</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setbit onlineusers 01 </span><br><span class="line">setbit onlineusers 11 </span><br><span class="line">setbit onlineusers 20</span><br></pre></td></tr></table></figure>
<p>支持按位与、按位或等等操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BITOPANDdestkeykey[key...] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。       </span><br><span class="line">BITOPORdestkeykey[key...] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。 </span><br><span class="line">BITOPXORdestkeykey[key...] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。 </span><br><span class="line">BITOPNOTdestkeykey ，对给定 key 求逻辑非，并将结果保存到 destkey 。</span><br></pre></td></tr></table></figure>
<p>计算出7天都在线的用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">BITOP &quot;AND&quot; &quot;7_days_both_online_users&quot; &quot;day_1_online_users&quot; &quot;day_2_online_users&quot; ...  &quot;day_7_online_users&quot;</span><br></pre></td></tr></table></figure>

<h2 id="8-购物车"><a href="#8-购物车" class="headerlink" title="8. 购物车"></a>8. 购物车</h2><p>String 或hash。所有String可以做的hash都可以<br>hash类型是一个String类型的field和value的映射表，每个hash都可以存储2^32 -1键值对<br><strong>使用hash做购物车：以用户id为key, 商品id为field，商品数量为value。</strong><br><img src="/redis-usage-scenario/index/01.png"></p>
<h2 id="9-用户消息时间线timeline"><a href="#9-用户消息时间线timeline" class="headerlink" title="9. 用户消息时间线timeline"></a>9. 用户消息时间线timeline</h2><p>list，双向链表，直接作为timeline就好了。插入有序</p>
<h2 id="10-消息队列"><a href="#10-消息队列" class="headerlink" title="10. 消息队列"></a>10. 消息队列</h2><p>List提供了两个阻塞的弹出操作：blpop/brpop，可以设置超时时间</p>
<ul>
<li><p>blpop：blpop key1 timeout 移除并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</p>
</li>
<li><p>brpop：brpop key1 timeout 移除并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。<br>上面的操作。其实就是java的阻塞队列。学习的东西越多。学习成本越低</p>
</li>
<li><p>队列：先进先除：rpush blpop，左头右尾，右边进入队列，左边出队列</p>
</li>
<li><p>栈：先进后出：rpush brpop</p>
</li>
</ul>
<h2 id="11-抽奖"><a href="#11-抽奖" class="headerlink" title="11. 抽奖"></a>11. 抽奖</h2><p>自带一个随机获得值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">spop myset</span><br></pre></td></tr></table></figure>

<h2 id="12-点赞、签到、打卡"><a href="#12-点赞、签到、打卡" class="headerlink" title="12. 点赞、签到、打卡"></a>12. 点赞、签到、打卡</h2><p><img src="/redis-usage-scenario/index/02.png" alt="点赞、签到、打卡"><br>假如上面的微博ID是t1001，用户ID是u3001</p>
<p>用 like:t1001 来维护 t1001 这条微博的所有点赞用户</p>
<ul>
<li>点赞了这条微博：sadd like:t1001 u3001</li>
<li>取消点赞：srem like:t1001 u3001</li>
<li>是否点赞：sismember like:t1001 u3001</li>
<li>点赞的所有用户：smembers like:t1001</li>
<li>点赞数：scard like:t1001</li>
</ul>
<h2 id="13-商品标签"><a href="#13-商品标签" class="headerlink" title="13. 商品标签"></a>13. 商品标签</h2><p><img src="/redis-usage-scenario/index/03.png" alt="商品标签"><br>用 tags:i5001 来维护商品所有的标签。</p>
<ul>
<li>sadd tags:i5001 画面清晰细腻</li>
<li>sadd tags:i5001 真彩清晰显示屏</li>
<li>sadd tags:i5001 流程至极</li>
</ul>
<h2 id="14-商品筛选"><a href="#14-商品筛选" class="headerlink" title="14.商品筛选"></a>14.商品筛选</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 获取差集</span><br><span class="line">sdiff set1 set2</span><br><span class="line">// 获取交集（intersection ）</span><br><span class="line">sinter set1 set2</span><br><span class="line">// 获取并集</span><br><span class="line">sunion set1 set2</span><br></pre></td></tr></table></figure>
<p><img src="/redis-usage-scenario/index/04.png" alt="商品筛选"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sadd brand:apple iPhone11</span><br><span class="line"></span><br><span class="line">sadd brand:ios iPhone11</span><br><span class="line"></span><br><span class="line">sad screensize:6.0-6.24 iPhone11</span><br><span class="line"></span><br><span class="line">sad screentype:lcd iPhone 11</span><br></pre></td></tr></table></figure>
<p>筛选商品，苹果的、ios的、屏幕在6.0-6.24之间的，屏幕材质是LCD屏幕</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sinter brand:apple brand:ios screensize:6.0-6.24 screentype:lcd</span><br></pre></td></tr></table></figure>
<h2 id="15-用户关注、推荐模型"><a href="#15-用户关注、推荐模型" class="headerlink" title="15. 用户关注、推荐模型"></a>15. 用户关注、推荐模型</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># follow 关注 fans 粉丝</span></span></span><br><span class="line">sadd 1:follow 2</span><br><span class="line">sadd 2:fans 1</span><br><span class="line">sadd 1:fans 2</span><br><span class="line">sadd 2:follow 1</span><br></pre></td></tr></table></figure>
<p>我关注的人也关注了他(取交集)：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sinter 1:follow 2:fans</span><br></pre></td></tr></table></figure>
<p>可能认识的人：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 用户1可能认识的人(差集)：</span></span></span><br><span class="line">sdiff 2:follow 1:follow</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 用户2可能认识的人：</span></span></span><br><span class="line">sdiff 1:follow 2:follow</span><br></pre></td></tr></table></figure>

<h2 id="16-排行榜"><a href="#16-排行榜" class="headerlink" title="16. 排行榜"></a>16. 排行榜</h2><p>id 为6001 的新闻点击数加1：zincrby hotNews:20190926 1 n6001<br>获取今天点击最多的15条：zrevrange hotNews:20190926 0 15 withscores<br><img src="/redis-usage-scenario/index/05.png" alt="排行榜"></p>
<hr>
<p><img src="/redis-usage-scenario/index/06.png"></p>
<h2 id="redis不适用的场景"><a href="#redis不适用的场景" class="headerlink" title="redis不适用的场景"></a>redis不适用的场景</h2><p>Redis是一种缓存技术，主要用来提高应用的性能，更多的应用场景是对数据库读数据进行缓存，减轻数据库的IO的访问压力，以下场景不太适合使用Redis:</p>
<ul>
<li><p>数据规模大小角度</p>
<p>  Redis是将数据放在内存进行缓存的，内存相对于磁盘来锁价格是比较贵的。<strong>如果成本是需要考虑的重要因素，那么大规模的数据就不太适合</strong>；</p>
</li>
<li><p>数据冷热程度角度</p>
<p>  很多业务数据可以根据数据读的频繁程度分为热数据和冷数据；<strong>频繁使用的热数据一般适合用redis，冷数据一般不太适合用redis</strong>,如果大量的冷数据进行了缓存，那是对内存资源的浪费，<br>所以在应用场景上区分冷热数据，将热数据放在内存中，进而提高性能。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>07 Redis</category>
      </categories>
      <tags>
        <tag>redis专题</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux环境下安装Redis</title>
    <url>/redis_install/index.html</url>
    <content><![CDATA[<h4 id="1-安装gcc"><a href="#1-安装gcc" class="headerlink" title="1. 安装gcc"></a>1. 安装gcc</h4>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc gcc-c++</span><br></pre></td></tr></table></figure>
<h4 id="2-下载安装包"><a href="#2-下载安装包" class="headerlink" title="2. 下载安装包"></a>2. 下载安装包</h4>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget http://download.redis.io/redis-stable.tar.gz </span><br></pre></td></tr></table></figure>
<h4 id="3-解压"><a href="#3-解压" class="headerlink" title="3. 解压"></a>3. 解压</h4>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar xvzf redis-stable.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">移动redis目录，一般都会将redis目录放置到 /usr/<span class="built_in">local</span>/redis目录</span></span><br><span class="line">mv redis-stable /usr/local/redis</span><br></pre></td></tr></table></figure>
<h4 id="4-编译"><a href="#4-编译" class="headerlink" title="4. 编译"></a>4. 编译</h4>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/redis</span><br><span class="line">make</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果执行make命令报错：cc 未找到命令，原因是虚拟机系统中缺少gcc，执行下面命令安装gcc：yum -y install gcc automake autoconf libtool make</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果使用make失败，致命错误:jemalloc/jemalloc.h: 没有那个文件或目录，则需要在make指定分配器为libc make MALLOC=libc</span></span><br><span class="line">//make之后如果出现Hint: To run &#x27;make test&#x27; is a good idea ;</span><br><span class="line">//运行make test, 会提示需要安装tcl,执行yum install tcl</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">执行下面命令安装redis，并指定安装目录</span></span><br><span class="line">make install PREFIX=/usr/local/redis</span><br></pre></td></tr></table></figure>

<h4 id="5-配置密码以及允许外网ip访问"><a href="#5-配置密码以及允许外网ip访问" class="headerlink" title="5. 配置密码以及允许外网ip访问"></a>5. 配置密码以及允许外网ip访问</h4>   <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#在redis.conf中配置requirepass 密码以及port端口号（非必须）</span></span><br><span class="line"><span class="attr">requirepass</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">port</span> <span class="string">6379 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#开启redis允许外网ip访问，在 Linux 中安装了redis 服务，当在客户端通过远程连接的方式连接时，报could not connect错误。错误的原因为：redis采用的安全策略，默认会只准许本地访问。</span></span><br><span class="line"><span class="comment">#将所有的bing信息全部屏蔽</span></span><br><span class="line"><span class="comment">#bind 192.168.1.100 10.0.0.1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#配置redis后台启动，如果不配置的话可以使用hohup启动</span></span><br><span class="line"><span class="attr">daemonize</span> <span class="string">yes</span></span><br></pre></td></tr></table></figure>
<h4 id="6-启动-关闭redis服务"><a href="#6-启动-关闭redis服务" class="headerlink" title="6. 启动/关闭redis服务"></a>6. 启动/关闭redis服务</h4>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ./src</span><br><span class="line">nohup ./redis-server ../redis.conf &amp;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">关闭</span></span><br><span class="line">kill -9 pid</span><br><span class="line">redis-cli shutdown</span><br></pre></td></tr></table></figure>
<p><img src="http://doc.redisfans.com/" alt="redis 命令参考"></p>
<h4 id="7-查看redis进程"><a href="#7-查看redis进程" class="headerlink" title="7. 查看redis进程"></a>7. 查看redis进程</h4>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@localhost redis]# pstree</span><br></pre></td></tr></table></figure>
<p>   <img src="/redis_install/index/image-20201201155441018.png" alt="image-20201210103251475"></p>
<h4 id="8-查看安装目录"><a href="#8-查看安装目录" class="headerlink" title="8. 查看安装目录"></a>8. 查看安装目录</h4><p><img src="/redis_install/index/1.png"></p>
<p>目录介绍：</p>
<ul>
<li>redis-benchmark: 性能测试工具</li>
<li>redis-check-apf: 修复有问题的AOF文件</li>
<li>redis-check-dump: 修复有问题的dump.rdb文件</li>
<li>redis-sentinel: redis集群使用</li>
<li>redis-server: redis 服务器启动命令</li>
<li>redis-cli: 客户端</li>
</ul>
<h4 id="9-redis相关知识"><a href="#9-redis相关知识" class="headerlink" title="9. redis相关知识"></a>9. redis相关知识</h4><ul>
<li>默认端口：6379</li>
<li>默认16个数据库，类似数组的下标从0开始，初始默认使用0号库</li>
<li>使用select <dbid>来切换数据库，如：select 1 切换到第二个数据库</dbid></li>
<li>统一密码管理，所有的库密码相同</li>
<li>dbsize: 查看当前数据库key的数量</li>
<li>flushdb: 清空当前库</li>
<li>flushall: 清空全部库</li>
</ul>
<p>redis是单线程+多路IO复用技术</p>
<blockquote>
<p>多路复用是指使用一个线程来检测多个文件描述符（socket）的就绪状态，比如调用select 和 poll 函数，传入多个文件描述符，如果有一个文件描述符就绪，则返回，否则阻塞到超时，得到就绪状态后进行真正的操作可以在同一个线程里执行，也可以启动使用线程池。</p>
</blockquote>
<p>串行 VS 多线程+锁(memcached) VS 单线程+多路复用(redis)<br>与memcache三不同：支持多数据类型，支持持久化，单线程+多路复用</p>
<p>redis6.0中提供了多线程，<strong>命令解析和io数据读写</strong>这部分采用了多线程，而命令的执行还是采用的是单线程，多个客户端发送来的命令会在同一个线程去执行，相当于排队执行，效率极高。</p>
]]></content>
      <categories>
        <category>07 Redis</category>
      </categories>
      <tags>
        <tag>redis专题</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot读取yml配置的方式</title>
    <url>/springboot-yml/index.html</url>
    <content><![CDATA[<p>springboot项目中默认的配置文件是application.properties；</p>
<h3 id="1-yml文件规则"><a href="#1-yml文件规则" class="headerlink" title="1.yml文件规则"></a>1.yml文件规则</h3><ul>
<li>树状结构，结构清晰</li>
<li>不支持tab缩进</li>
<li>可以使用”_”或”-“消协字母代替大写字母；如userName 与user-name， user_name含义是一样的（宽松绑定原则 relaxed binding）; key: value格式书写，value前面有个空格</li>
</ul>
<h3 id="2-数据格式"><a href="#2-数据格式" class="headerlink" title="2. 数据格式"></a>2. 数据格式</h3><ul>
<li>普通的值（数字，字符串，布尔）如：  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">123</span>      </span><br><span class="line"><span class="attr">name:</span> <span class="string">abc</span>      </span><br><span class="line"><span class="attr">flag:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
  字符串默认不用加上单引号或者双引号；  “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思,name: “zhangsan \n lisi”：输出；zhangsan 换行 lisi  ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据,name: ‘zhangsan \n lisi’：输出；zhangsan \n lisi</li>
<li>对象、Map(属性和值)如：  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#k: v：在下一行来写对象的属性和值的关系；注意缩进(不支持tab,使用空格)</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8123</span></span><br><span class="line">  <span class="attr">tomcat:</span></span><br><span class="line">    <span class="attr">uri-encoding:</span> <span class="string">utf-8</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/app</span></span><br></pre></td></tr></table></figure></li>
<li>数组（list， set）  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#用- 值表示数组中的一个元素</span></span><br><span class="line"><span class="attr">hands:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">left</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">right</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="3-读取方式"><a href="#3-读取方式" class="headerlink" title="3. 读取方式"></a>3. 读取方式</h3><ol>
<li><p>@Value注解</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Value(&quot;$&#123;server.port&#125;&quot;)</span><br><span class="line">public String port;</span><br></pre></td></tr></table></figure>
<p> 此处的port所在的类需要是一个组件,如果是实体类需要加上@Component</p>
</li>
<li><p>@ConfigurationProperties</p>
<p>需要一个JavaBean 来专门映射配置的话,我们一般会使用@ConfigurationProperties来读取.</p>
<p>使用的使用需要@EnableConfigurationProperties注解让类被springboot扫描到；</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3307/app?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&amp;useLegacyDatetimeCode=false</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//prefix 指定前缀</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyDataSourceProperties</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String driverClassName;</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//省略getter setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>前缀定义了哪些外部属性将绑定到类的字段上</li>
<li>根据 Spring Boot 宽松的绑定规则，类的属性名称必须与外部属性的名称匹配</li>
<li>我们可以简单地用一个值初始化一个字段来定义一个默认值</li>
<li>类本身可以是包私有的</li>
<li>类的字段必须有公共 setter 方法</li>
</ul>
</li>
<li><p>Environment</p>
<p>Spring Environment bean</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestC</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;index&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;environment : &quot;</span>+ env.getProperty(<span class="string">&quot;spring.datasource.druid.url&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>常见sql优化方式</title>
    <url>/sql-01/index.html</url>
    <content><![CDATA[<ol>
<li><p>对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p>
</li>
<li><p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：    </p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num <span class="keyword">is</span> <span class="keyword">null</span>    </span><br><span class="line"><span class="comment">-- 可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：    </span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">=</span><span class="number">0</span></span><br></pre></td></tr></table></figure></li>
<li><p>应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</p>
</li>
<li><p>应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，如：    </p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">=</span><span class="number">10</span> <span class="keyword">or</span> num<span class="operator">=</span><span class="number">20</span>    </span><br><span class="line"><span class="comment">--可以这样查询：    </span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">=</span><span class="number">10</span>    </span><br><span class="line"><span class="keyword">union</span> <span class="keyword">all</span>    </span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">=</span><span class="number">20</span></span><br></pre></td></tr></table></figure></li>
<li><p>in 和 not in 也要慎用，否则会导致全表扫描，如：    </p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)    </span><br><span class="line"><span class="comment">--对于连续的数值，能用 between 就不要用 in 了：    </span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num <span class="keyword">between</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">3</span></span><br></pre></td></tr></table></figure></li>
<li><p>下面的查询也将导致全表扫描：</p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;%abc%&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：    </p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">/</span><span class="number">2</span><span class="operator">=</span><span class="number">100</span>    </span><br><span class="line"><span class="comment">---应改为:    </span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> num<span class="operator">=</span><span class="number">100</span><span class="operator">*</span><span class="number">2</span></span><br></pre></td></tr></table></figure></li>
<li><p>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：    </p>
 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> <span class="built_in">substring</span>(name,<span class="number">1</span>,<span class="number">3</span>)<span class="operator">=</span><span class="string">&#x27;abc&#x27;</span><span class="comment">--name以abc开头的id    </span></span><br><span class="line"><span class="comment">---应改为:    </span></span><br><span class="line"><span class="keyword">select</span> id <span class="keyword">from</span> t <span class="keyword">where</span> name <span class="keyword">like</span> <span class="string">&#x27;abc%&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p>
</li>
<li><p>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</p>
</li>
<li><p>不要写一些没有意义的查询，如需要生成一个空表结构：    </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> col1,col2 <span class="keyword">into</span> #t <span class="keyword">from</span> t <span class="keyword">where</span> <span class="number">1</span><span class="operator">=</span><span class="number">0</span>    </span><br><span class="line"><span class="comment">--这类代码不会返回任何结果集，但是会消耗系统资源的，应改成这样：    </span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> #t(...)</span><br></pre></td></tr></table></figure></li>
<li><p>很多时候用 exists 代替 in 是一个好的选择：    </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> num <span class="keyword">from</span> a <span class="keyword">where</span> num <span class="keyword">in</span>(<span class="keyword">select</span> num <span class="keyword">from</span> b)    </span><br><span class="line"><span class="comment">--用下面的语句替换：    </span></span><br><span class="line"><span class="keyword">select</span> num <span class="keyword">from</span> a <span class="keyword">where</span> <span class="keyword">exists</span>(<span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> b <span class="keyword">where</span> num<span class="operator">=</span>a.num)</span><br></pre></td></tr></table></figure></li>
<li><p>并不是所有索引对查询都有效，SQL是根据表中数据来进行查询优化的，当索引列有大量数据重复时，SQL查询可能不会去利用索引，如一表中有字段sex，male、female几乎各一半，那么即使在sex上建了索引也对查询效率起不了作用。</p>
</li>
<li><p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。<br>一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</p>
</li>
<li><p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。<br>这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</p>
</li>
<li><p>尽可能的使用 varchar 代替 char ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p>
</li>
<li><p>任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段。</p>
</li>
<li><p>避免频繁创建和删除临时表，以减少系统表资源的消耗。</p>
</li>
<li><p>临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</p>
</li>
<li><p>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>
</li>
<li><p>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p>
</li>
<li><p>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p>
</li>
<li><p>使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效。</p>
</li>
<li><p>与临时表一样，游标并不是不可使用。对小型数据集使用 FAST_FORWARD 游标通常要优于其他逐行处理方法，尤其是在必须引用几个表才能获得所需的数据时。<br>在结果集中包括“合计”的例程通常要比使用游标执行的速度快。如果开发时间允许，基于游标的方法和基于集的方法都可以尝试一下，看哪一种方法的效果更好。</p>
</li>
<li><p>尽量避免大事务操作，提高系统并发能力。</p>
</li>
<li><p>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Java守护线程和非守护线程</title>
    <url>/thread-01/index.html</url>
    <content><![CDATA[<p>用户线程：我们平常创建的普通线程。</p>
<p>守护线程：用来服务于用户线程；不需要上层逻辑介入</p>
<p>java线程分为守护线程和非守护线程，当java jvm检测主线程或其他子线程执行完之后，守护线程也会马上停止执行，我们可以使用Thread.setDaemon(ture或false)来设置一个线程是守护线程还是非守护线程，默认为false，可以通过Thread.isDaemon()方法查询该线程是否是守护线程</p>
<p>守护线程是所有的用户线程结束生命周期，守护线程才会结束生命周期，只要有一个用户线程存在，那么守护线程就不会结束，例如Java中的垃圾 回收器就是一个守护线程，只有应用程序中所有的线程结束，它才会结束。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaemonThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(DaemonThread::print);</span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;主线程main 结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> counter = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//写一个死循环的方法来测试</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;Counter:&quot;</span> + counter++);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主线程main 结束</span><br><span class="line">Counter:1</span><br></pre></td></tr></table></figure>
<p>如果我们将daemon设置为非守护线程，代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">thread.setDaemon(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure>
<p>这个时候就不会退出while(true)循环了，会一直执行下去，结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">主线程main 结束</span><br><span class="line">Counter:1</span><br><span class="line">Counter:2</span><br><span class="line">Counter:3</span><br><span class="line">Counter:4</span><br><span class="line">Counter:5</span><br><span class="line">....</span><br></pre></td></tr></table></figure>

<p><strong>总结：守护线程是为用户线程服务的，当用户线程全部结束，守护线程会自动结束。</strong></p>
<p><strong>注意事项：</strong></p>
<ol>
<li>thread.setDaemon(true)必须在thread.start()之前设置，否则会跑出一个IllegalThreadStateException异常。你不能把正在运行的常规线程设置为守护线程。</li>
<li>在Daemon线程中产生的新线程也是Daemon的。</li>
<li>守护线程不能用于去访问固有资源，比如读写操作或者计算逻辑。因为它会在任何时候甚至在一个操作的中间发生中断。</li>
<li>Java自带的多线程框架，比如ExecutorService，会将守护线程转换为用户线程，所以如果要使用后台线程就不能用Java的线程池。</li>
</ol>
<p><strong>意义以及应用场景:</strong></p>
<p>当主线程结束时，结束其余的子线程（守护线程）自动关闭，就免去了还要继续关闭子线程的麻烦。如：Java垃圾回收线程就是一个典型的守护线程；内存资源或者线程的管理，但是非守护线程也可以。</p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>守护线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加评论系统Valine</title>
    <url>/valine/index.html</url>
    <content><![CDATA[<p>Hexo的评论系统有很多，常见的有以下几个</p>
<ul>
<li><del>多说</del></li>
<li><del>网易云跟帖</del></li>
<li>畅言</li>
<li>来必力（LiveRe）</li>
<li>Disqus</li>
<li>Hypercomments</li>
<li>valine</li>
</ul>
<p>首先多说和网易云已经倒下了，其次畅言需要备案，Disqus，Hypercomments和LiveRe都是国外的，加载速度贼慢，甚至有被墙的可能，寻觅了很久之后，从Material主题换成next主题之后，终于找到了一个好用的评论系统，那就是 valine</p>
<p>我使用的是Next 6.x版本，本身就已经集成了valine，因此正常情况下是按照官方文档走就可以了，5分钟开启你的评论系统~</p>
<ol>
<li>注册LeanCloud我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个账号，注册地址：<a href="https://www.leancloud.cn/">https://www.leancloud.cn/</a><br><img src="/valine/index/1.png"></li>
<li>获取AppId注册完了之后 创建一个应用，名字随便起；然后进入应用-&gt;设置-&gt;应用凭证 中获取appid 和 appkey<br><img src="/valine/index/2.png"></li>
<li>配置valine拿到appid和appkey之后，打开主题配置文件_config.yml 搜索 valine，填入appid 和 appkey<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">comment:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">valine</span>  <span class="comment"># 启用哪种评论系统</span></span><br><span class="line">    <span class="attr">valine:</span> <span class="comment"># Valine. https://valine.js.org</span></span><br><span class="line">       <span class="attr">appid:</span> <span class="string">your</span> <span class="string">leancloud</span> <span class="string">application</span> <span class="string">appid</span></span><br><span class="line">       <span class="attr">appkey:</span> <span class="string">your</span> <span class="string">leancloud</span> <span class="string">application</span> <span class="string">appkey</span></span><br><span class="line">       <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line">       <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">       <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># comment box placeholder</span></span><br><span class="line">       <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># gravatar style</span></span><br><span class="line">       <span class="attr">meta:</span> <span class="string">nick,mail</span> <span class="comment">#,link      #   custom comment header</span></span><br><span class="line">       <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># pagination size</span></span><br><span class="line">       <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># Article reading statistic https://valine.js.org/visitor.html</span></span><br></pre></td></tr></table></figure></li>
<li>LeanCloud 安全域名配置在LeanCloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去<br><img src="/valine/index/3.png"></li>
<li>查看评论数据在数据存储 -&gt; 结构化数据 中可以查看到所有的存储的数据信息<br><img src="/valine/index/4.png"></li>
</ol>
]]></content>
      <categories>
        <category>11 其他工具</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>volatile关键字</title>
    <url>/volatile/index.html</url>
    <content><![CDATA[<h2 id="1-volatile作用"><a href="#1-volatile作用" class="headerlink" title="1.volatile作用"></a>1.volatile作用</h2><p>  volatile保证有序性，可见性，不能保证原子性</p>
<ol>
<li>禁止指令重排</li>
<li>保证了不同线程对这个变量进行操作时的可见性，即一个线程修改了某个变量值，这个新值对其他线程立即可见的</li>
<li>不能保证原子性(线程不安全)</li>
</ol>
<h2 id="2-实现原理"><a href="#2-实现原理" class="headerlink" title="2. 实现原理"></a>2. 实现原理</h2><ol>
<li>通过插入内存屏障指令禁止编译器和CPU对程序进行重排序。</li>
<li>当对声明了volatile的变量进行写操作时，JVM就会向处理器发送一条Lock前缀的指令，这条Lock前缀指令产生如下两个作用：<ul>
<li>Lock前缀指令会引起处理器缓存回写到系统内存，并使用缓存一致性机制来确保回写的原子性。</li>
<li>一个处理器的缓存回写到系统内存会导致其他处理器的缓存无效。处理器使用MESI控制协议去维护内部缓存和其他处理器缓存的一致性。处理器能嗅探其他处理器访问系统内存和它们的内部缓存。处理器使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致。例如，在Pentium和P6 family处理器中，如果通过嗅探一个处理器来检测其他处理器打算写内存地址，而这个地址当前处于共享状态，那么正在嗅探的处理器将使它的缓存行无效，在下次访问相同内存地址时，强制执行缓存行填充<h2 id="3-synchronized与volatile比较"><a href="#3-synchronized与volatile比较" class="headerlink" title="3.synchronized与volatile比较"></a>3.synchronized与volatile比较</h2></li>
</ul>
</li>
<li>volatile关键字是线程同步的轻量级实现，性能较synchronized好；但是volatile关键字只能用于变量，而synchronized关键字可以修饰方法以及代码块</li>
<li>synchronized关键字在java1.6之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其他各种优化之后执行效率有了显著的提升；</li>
<li>多线程访问volatile关键字不会发生阻塞，而synchronized关键字可能会发生阻塞</li>
<li>volatile关键字保证数据的可见性，但是不能保证数据的原子性；synchronized关键字两者都能保证（synchronized保证原子性，有序性，可见性）</li>
<li>volatile关键字主要用于解决变量在多个线程之间的可见性，而synchronized关键字解决的是多个线程之间访问资源的同步性。</li>
<li>synchronized是同步锁，同步快内的代码相当于同一时刻单线程执行</li>
</ol>
<h2 id="4-可见性问题"><a href="#4-可见性问题" class="headerlink" title="4. 可见性问题"></a>4. 可见性问题</h2><p>Java虚拟机规范中定义了一种Java内存 模型（Java Memory Model，即JMM）来屏蔽掉各种硬件和操作系统的内存访问差异，以实现让Java程序在各种平台下都能达到一致的并发效果。Java内存模型的主要目标就是定义程序中各个变量的访问规则，即在虚拟机中将变量存储到内存和从内存中取出变量这样的细节。</p>
<p>JMM中规定所有的变量都存储在主内存（Main Memory）中，每条线程都有自己的工作内存（Work Memory），线程的工作内存中保存了该线程所使用的变量的从主内存中拷贝的副本。线程对于变量的读、写都必须在工作内存中进行，而不能直接读、写主内存中的变量。同时，本线程的工作内存的变量也无法被其他线程直接访问，必须通过主内存完成<br>整体内存模型如下：<br><img src="/volatile/index/01.png" alt="image-20201210103251475"></p>
<h3 id="4-1-synchronized"><a href="#4-1-synchronized" class="headerlink" title="4.1 synchronized"></a>4.1 synchronized</h3><p>synchronized关键字的语义JMM（Java Main Memory）有两个规定，保证其实现内存可见性：<br>    - <strong>线程解锁前，必须把共享变量的最新值刷新到主内存中</strong><br>    - <strong>线程加锁前，将清空工作内存中共享变量的值，从主内存中重新取值</strong></p>
<h3 id="4-2-volatile"><a href="#4-2-volatile" class="headerlink" title="4.2 volatile"></a>4.2 volatile</h3><ul>
<li>当对volatile变量执行写操作后，JMM会把工作内存中的最新变量值强制刷新到主内存</li>
<li>写操作会导致其他线程中的缓存无效<br>这样，其他线程使用缓存时，发现本地工作内存中此变量无效，便从主内存中获取，这样获取到的变量便是最新的值，实现了线程的可见性。</li>
</ul>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>在线修改静态文件</title>
    <url>/%E5%9C%A8%E7%BA%BF%E4%BF%AE%E6%94%B9%E9%9D%99%E6%80%81%E6%96%87%E4%BB%B6/index.html</url>
    <content><![CDATA[<p>项目运行时，如果需要修改某个css、js、html等文件的时候，需要自己连接到服务器然后修改，更有甚者需要连接vpn、堡垒机等等，特别烦！！！！于是弄了一个在线修改静态文件的工具，在此记录一下。</p>
<h4 id="1-引入pom"><a href="#1-引入pom" class="headerlink" title="1. 引入pom"></a>1. 引入pom</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoyuge5201<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>static-file-modify-online<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-添加前后台代码"><a href="#2-添加前后台代码" class="headerlink" title="2. 添加前后台代码"></a>2. 添加前后台代码</h4><p>前台使用的是thymeleaf，根据自己项目的实际情况修改！</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接: https://pan.baidu.com/s/1oW38vpj74yKOOtbu5xGCOQ  </span><br><span class="line">密码: tcmg</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap的底层原理</title>
    <url>/hashmap/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>HashMap是java后端面试必问内容，其中一个高频问题就是：HashMap的底层原理是怎样的？</p>
<p>本文介绍HashMap的原理，包括数据结构、存储机制、hashCode方法。</p>
<h3 id="2-HashMap原理总结"><a href="#2-HashMap原理总结" class="headerlink" title="2. HashMap原理总结"></a>2. HashMap原理总结</h3><p>HashMap其实就是一个大的数组，将key的hashCode作为数组的下标，将value作为数组的值，如果key的hashCode重复（即：数组下标重复）<br>，则将新的key和旧的key放到链表中。</p>
<p>如果链表长度大于等于8（且数组大小大于等于64），则将链表改为红黑树（提高查询的效率）</p>
<p>如果红黑树节点个数小于6，则将红黑树转化为链表。</p>
<h3 id="3-数据结构"><a href="#3-数据结构" class="headerlink" title="3. 数据结构"></a>3. 数据结构</h3><ul>
<li><p><strong>数组和链表</strong></p>
<p>  数据结构中有数组和链表来实现对数据的存储，但这两者个有利弊。<br>  <img src="/hashmap/index/1.png"></p>
</li>
<li><p><strong>哈希表</strong></p>
<p>  哈希表：综合数组和链表的特性，查找（寻址）容易，插入删除容易，占空间中等的数据结构。</p>
<p>  哈希表有多种不同的实现方法，HashMap则使用的是拉链法，也叫<strong>链地址法</strong>。</p>
<p>   <img src="/hashmap/index/2.png"></p>
<p>  例如：<br>  <img src="/hashmap/index/3.png"></p>
<p>  哈希表的数组初始化长度为<strong>16</strong>，每个元素存储的是一个链表的头结点，这些元素按照<strong>hash(key)% len</strong>获得，也就是元素<code>key</code>的哈希值对数组长度区模得到；</p>
<blockquote>
<p>12 % 16=12；28 % 16=12；108 % 16=12；140 % 16=12</p>
<p>所以： 12， 28， 108， 140都存储在数组下标为12的位置</p>
</blockquote>
</li>
<li><p><strong>红黑树</strong></p>
<p>  <img src="/hashmap/index/4.png"></p>
</li>
</ul>
<h3 id="4-存储机制"><a href="#4-存储机制" class="headerlink" title="4. 存储机制"></a>4. 存储机制</h3><ol>
<li><p><strong>键值对的数据</strong></p>
<p> 每个键值对都是一个<code>Node&lt;K,V&gt;</code>对象，它实现了<code>Map.Entry&lt;K,V&gt;</code>接口。<code>Node&lt;K,V&gt;</code>有四个属性：<code>hash</code>、<code>key</code>、<code>value</code>、<code>next</code>(下一个结点)</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        V value;</span><br><span class="line">        Node&lt;K,V&gt; next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>既然是线性数组，为什么能随机存取？这里HashMap用来一个小算法，大致实现如下：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 存储时:</span></span><br><span class="line"><span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line"><span class="keyword">int</span> index = hash % Entry[].length;</span><br><span class="line">Entry[index] = value;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 取值时:</span></span><br><span class="line"><span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line"><span class="keyword">int</span> index = hash % Entry[].length;</span><br><span class="line"><span class="keyword">return</span> Entry[index];</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-put方法"><a href="#5-put方法" class="headerlink" title="5. put方法"></a>5. put方法</h3><p>哈希冲突：若两个key通过hash(key) % Entry[].length得到的index相同，怎么处理？HashMap用的是链表，Entry类里面有一个next属性，指向下一个Entry.</p>
<p>比如：</p>
<ol>
<li><p>第一个键值对A进来，通过计算key的hash得到的<code>index=0</code>， 记做：<code>Entry[0] = A</code></p>
</li>
<li><p>又进来一个键值对B，通过计算key的hash得到的<code>index=0</code>， HashMap会这样做：<code>B.next = A, Entry[0] = B</code></p>
</li>
<li><p>又进来C，index也等于0，那么<code>C.next = B,Entry[0] = C</code>；</p>
</li>
</ol>
<p>这样我们发现index = 0的地方其实利用单链表的头插法存储了A，B，C三个键值对，他们通过next属性连接在一起，所以会发生覆盖的情况，数组中存储的总是最后插入的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//部分代码</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEIFY_THRESHOLD = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span> threshold;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="params"><span class="function">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)</span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">// 若链表的节点数大于等于8，则转化为红黑树</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果key在链表中已存在，则替换为新value</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// existing mapping for key</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-get方法"><a href="#6-get方法" class="headerlink" title="6. get方法"></a>6. get方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> getForNullKey();</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key.hashCode());</span><br><span class="line">    <span class="comment">//先定位到数组元素，再遍历该元素处的链表</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k)))</span><br><span class="line">            <span class="keyword">return</span> e.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-null-key的存取"><a href="#7-null-key的存取" class="headerlink" title="7. null key的存取"></a>7. null key的存取</h3><p>null key总是存放在Entry[]数组的第一个元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">putForNullKey</span><span class="params">(V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    modCount++;</span><br><span class="line">    addEntry(<span class="number">0</span>, <span class="keyword">null</span>, value, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">getForNullKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> e.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>确定数组</p>
<p>  index: hashcode % table.length 取模</p>
<p>  HashMap存取时，都需要计算当前key对应Entry[]数组哪个元素，即计算数组下标，算法如下：</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Returns index for hash code h.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">indexFor</span><span class="params">(<span class="keyword">int</span> h, <span class="keyword">int</span> length)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h &amp; (length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  换位取并，作用上相当于取模mod获取取余%;这意味着数组下标相同，并不表示hashcode相同。</p>
</li>
<li><p>table初始大小</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    .....</span><br><span class="line">    <span class="comment">// Find a power of 2 &gt;= initialCapacity</span></span><br><span class="line">    <span class="keyword">int</span> capacity = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (capacity &lt; initialCapacity)</span><br><span class="line">        capacity &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    threshold = (<span class="keyword">int</span>)(capacity * loadFactor);</span><br><span class="line">    table = <span class="keyword">new</span> Entry[capacity];</span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>  注意：table初始大小并不是构造函数中的<code>initialCapacity</code>, 而是 &gt;= initialCapacity的2的n次幂</p>
</li>
</ul>
<h3 id="8-hashCode方法"><a href="#8-hashCode方法" class="headerlink" title="8. hashCode方法"></a>8. hashCode方法</h3><p>String#hashCode</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h = hash;</span><br><span class="line">    <span class="keyword">if</span> (h == <span class="number">0</span> &amp;&amp; value.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">char</span> val[] = value;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value.length; i++) &#123;</span><br><span class="line">            h = <span class="number">31</span> * h + val[i];</span><br><span class="line">        &#125;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么乘 31 呢？</p>
<p>选31是因为它是一个奇素（质）数，这里有两层意思：奇数 &amp;&amp; 素数</p>
<ol>
<li><p>什么是奇数，偶数不行？</p>
<p> 因为如果乘子是偶数，并且当乘法溢出的时候(数太大，int装不下)，相当于在做位移运算，有信息就损失了</p>
<p> 比如说只给2bit空间，二进制的10，乘以2相当于左移1位，10(bin) &lt;&lt; 1 = 00,1就损失了。</p>
</li>
<li><p>为什么是31</p>
<p> h * 31 == (h &lt;&lt; 5) - h;现代虚拟机会自动做这样的优化，计算快。</p>
<p> 再反观其他数：</p>
<p> h * 7 == (h &lt;&lt; 3) - h;  //太小，容易hash冲突</p>
<p> h * 15 == (h &lt;&lt; 4) - h; //15不是素数</p>
<p> h*31 == (h&lt;&lt;5)-h; // 31既是素数又不大不小刚刚好</p>
<p> h*63 == (h&lt;&lt;6)-h; // 63不是素数</p>
<p> h*127 == (h&lt;&lt;7)-h; // 太大了，乘不到几下就溢出了</p>
</li>
</ol>
<p><strong>实例追踪：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;abc&quot;.hashCode()</span><br><span class="line">hash为：0</span><br><span class="line">value为：[a, b, c]</span><br><span class="line"></span><br><span class="line">第一次循环：h = 0 + 97 = 97</span><br><span class="line"></span><br><span class="line">第二次循环：h = 31 * 97 + 98 = 3105</span><br><span class="line"></span><br><span class="line">第三次循环：h = 3105 * 31 + 99 = 9635</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>负载均衡Nginx Session 一致性</title>
    <url>/nginx-session-consistency/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="HTTPS请求跳转"><a href="#HTTPS请求跳转" class="headerlink" title="HTTPS请求跳转"></a>HTTPS请求跳转</h3><p>如下面的配置：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">location</span> <span class="string">/test &#123;</span></span><br><span class="line">   <span class="attr">proxy_pass</span> <span class="string">http://www.baidu.com/;</span></span><br><span class="line"><span class="attr">&#125;</span></span><br></pre></td></tr></table></figure>
<p>在访问URI为/test时会跳转到百度，但是此时浏览器的URL也发生了变化，这是因为向<code>http://www.baidu.com/</code>发送请求后，Nginx返回的是一个跳转的响应。</p>
<p>此后，客户端会重新向<code>http://www.baidu.com/</code>发送请求（此过程不再经过nginx），所以浏览器发生了跳转，而非 Nginx的负载均衡。</p>
<p><strong>解决方式： 将配置中的http改成https即可</strong></p>
<h3 id="Session一致性"><a href="#Session一致性" class="headerlink" title="Session一致性"></a>Session一致性</h3><p>在使用nginx做反向代理时，如果后端服务器时Tomcat等动态服务器，可能会出现Session一致性的问题。即无法确保同一个Session一定对应同一个Server</p>
<ol>
<li><p>配置IP地址</p>
<table>
<thead>
<tr>
<th align="center">Server</th>
<th align="center">IP</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Nginx</td>
<td align="center">172.20.1.10</td>
</tr>
<tr>
<td align="center">Server1</td>
<td align="center">172.20.1.101</td>
</tr>
<tr>
<td align="center">Server2</td>
<td align="center">172.20.1.102</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">并且在Server1 和 Server2上启动 Tomcat</td>
<td align="center"></td>
</tr>
</tbody></table>
</li>
<li><p>配置Server</p>
<p> 在Server段创建jsp页面：</p>
<ul>
<li><p>Server1</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@c5477d71795c ROOT]# pwd</span><br><span class="line">/var/lib/tomcat/webapps/ROOT</span><br><span class="line">[root@c5477d71795c ROOT]# cat index.jsp </span><br><span class="line">from 172.20.1.101</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">session=&lt;%=session.getId()%&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>Server2</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@c5477d71795c ROOT]# pwd</span><br><span class="line">/var/lib/tomcat/webapps/ROOT</span><br><span class="line">[root@c5477d71795c ROOT]# cat index.jsp </span><br><span class="line">from 172.20.1.102</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">session=&lt;%=session.getId()%&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
<p> 然后访问 <code>http://172.20.1.101:8080/</code> 和 <code>http://172.20.1.102:8080/</code>。</p>
<p> 可分别显示来自哪个<code>Server</code>和对应的 <code>SessionId</code>，并且刷新页面时 <code>SessionId</code> 不会变化（即使是使用 Ctrl+F5 刷新）</p>
</li>
<li><p>配置Nginx</p>
<p> 修改Nginx配置文件，加入upstream配置和server配置</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream tomcat &#123;</span><br><span class="line">    server 172.20.1.101:8080;</span><br><span class="line">    server 172.20.1.102:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    ......</span><br><span class="line">    location /cat &#123;</span><br><span class="line">        proxy_pass http://tomcat/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 重启Nginx</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ce12b3b4ce00 sbin]# ./nginx -s reload</span><br></pre></td></tr></table></figure>
<p> 访问 <code>http://172.20.1.10/cat</code> 并刷新，发现 <code>from 172.20.1.10x</code> 一直在变化，并且<code>session=xxx</code> 也变化。</p>
<p> <strong>说明：此时 Nginx 的配置无法保证 Session 一致性!</strong></p>
</li>
</ol>
<h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>在 Tomcat 后面部署 Redis，MemCached 等内存数据库来保存 Session 相关信息。</p>
<p>本例中在 Nginx 服务器上安装 memcached 来解决 Session 一致性问题。</p>
<ol>
<li>启动memcached <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 1. 安装memcached</span></span><br><span class="line">yum install -y memcached</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 2. 启动memcached</span></span><br><span class="line">memcached -d -m 128m -p 11211 -l 172.20.1.10 -u root -P /tmp/</span><br></pre></td></tr></table></figure>
 参数说明<ul>
<li>-d: 后台启动</li>
<li>-m: 缓存大小</li>
<li>-p: 端口</li>
<li>-l: IP地址</li>
<li>-P: 服务启动后系统进程 ID 存储文件的目录</li>
<li>-u: 服务器以哪个用户作为管理用户</li>
</ul>
</li>
<li>修改tomcat配置 在两台Server中修改tomcat配置 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@3a53f7504511 ROOT]# vi /etc/tomcat/context.xml </span><br></pre></td></tr></table></figure>

 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- context标签中加入下面的内容 --&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">Manager</span> </span></span><br><span class="line"><span class="tag"><span class="attr">className</span>=<span class="string">&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">memcachedNodes</span>=<span class="string">&quot;n1:172.20.1.10:11211&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">sticky</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">sessionBackupAsync</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">lockingMode</span>=<span class="string">&quot;auto&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">requestUriIgnorePattern</span>=<span class="string">&quot;.*\.(ico|png|gif|jpg|css|js)$&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">sessionBackupTimeout</span>=<span class="string">&quot;1000&quot;</span>          </span></span><br><span class="line"><span class="tag">        <span class="attr">transcoderFactoryClass</span>=<span class="string">&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
导入 <code>jar</code> 包使用 yum 安装的 Tomcat 可将 jar 包放在 <code>/usr/share/java/tomcat/</code> 目录下。 需要以下jar包：<br> <img src="/nginx-session-consistency/index/img.png"></li>
</ol>
<ol start="3">
<li>添加Maven依赖(Maven项目配置，测试可不加) <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>asm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>asm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.couchbase.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>couchbase-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.googlecode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kryo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.04<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.javakaffee<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>kryo-serializers<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.javakaffee.msm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>memcached-session-manager<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.javakaffee.msm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>memcached-session-manager-tc7<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.googlecode<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minlog<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.javakaffee.msm<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>msm-kryo-serializer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.esotericsoftware<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>reflectasm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.01<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.spy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spymemcached<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.11.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
注: 如果依赖和 Tomcat 版本不对应可能会什么也不显示，此时响应码为 500。</li>
</ol>
<ol start="4">
<li><p>验证</p>
<p>上述步骤都正确配置之后, 再次访问 <code>http://172.20.1.10/cat</code> 并刷新会发现 SessionId 不再变化。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>09 Nginx</category>
      </categories>
      <tags>
        <tag>Nginx专题</tag>
      </tags>
  </entry>
  <entry>
    <title>Plumelog一个简单易用的java分布式日志组件</title>
    <url>/plumelog/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-系统介绍"><a href="#1-系统介绍" class="headerlink" title="1. 系统介绍"></a>1. 系统介绍</h3><ol>
<li><p>无代码侵入的分布式日志系统，基于log4j、log4j2、logback搜集日志，设置链路ID，方便查询管关联日志</p>
</li>
<li><p>基于elasticsearch作为查询引擎</p>
</li>
<li><p>高吞吐，查询效率高</p>
</li>
<li><p>全程不占应用程序本地磁盘空间，免维护；对于项目透明，不影响项目本身运行</p>
</li>
<li><p>无需修改老项目，引入直接使用，支持dubbo，支持springCloud</p>
</li>
</ol>
<h3 id="2-架构"><a href="#2-架构" class="headerlink" title="2. 架构"></a>2. 架构</h3><p><img src="/plumelog/index/plumelog.png" alt="plumelog架构"></p>
<ul>
<li><p>plumelog-core 核心组件包含日志搜集端，负责搜集日志并推送到kafka，redis等队列</p>
</li>
<li><p>plumelog-server 负责把队列中的日志日志异步写入到elasticsearch</p>
</li>
<li><p>plumelog-demo 基于springboot的使用案例</p>
</li>
<li><p>plumelog-lite plumelog的嵌入式集成版本，免部署</p>
</li>
</ul>
<h3 id="3-使用方法"><a href="#3-使用方法" class="headerlink" title="3. 使用方法"></a>3. 使用方法</h3><ul>
<li><p>plumelog分三种启动模式，分别为redis,kafka,lite，外加嵌入式版本plumelog-lite</p>
</li>
<li><p>lite模式，不依赖任何外部中间件直接启动使用，但是性能有限，一天10个G以内可以应付，还必须是SSD硬盘，适合管理系统类的小玩家</p>
</li>
<li><p>redis,kafka模式可以集群分布式部署，适合大型玩家，互联网公司</p>
</li>
<li><p>plumelog-lite plumelog的嵌入式集成版本，直接pom引用，嵌入在项目中，自带查询界面，适合单个独立小项目使用，外包软件的最佳伴侣</p>
</li>
</ul>
<p>使用方法访问源码wiki<a href="https://gitee.com/plumeorg/plumelog/blob/master/FASTSTART.md">Plumelog使用方法</a></p>
]]></content>
      <categories>
        <category>13 开源组件</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Jedis操作Redis6（四）</title>
    <url>/redis-special-jedis/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-Jedis的用法"><a href="#1-Jedis的用法" class="headerlink" title="1. Jedis的用法"></a>1. Jedis的用法</h3><ol>
<li><p>引入maven依赖</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/redis.clients/jedis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用Redis的API操作redis</p>
<blockquote>
<p>Jedis工具类，这个类中包含了操作redis的所有方法</p>
</blockquote>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Jedis测试常用的Redis API</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    Jedis jedis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jedis = <span class="keyword">new</span> Jedis(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">        jedis.auth(<span class="string">&quot;password&quot;</span>); <span class="comment">//设置连接密码，如果没有省略</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试Redis是否能连上</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(jedis.ping());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis.rpush(<span class="string">&quot;courses&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;php&quot;</span>, <span class="string">&quot;node&quot;</span>, <span class="string">&quot;js&quot;</span>, <span class="string">&quot;C++&quot;</span>);</span><br><span class="line">        List&lt;String&gt; courses = jedis.lrange(<span class="string">&quot;courses&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String course : courses) &#123;</span><br><span class="line">            System.out.print(course + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出：java,php,node,js,C++</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis.sadd(<span class="string">&quot;users&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;lilei&quot;</span>, <span class="string">&quot;lilei&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; sets = jedis.smembers(<span class="string">&quot;users&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String set : sets) &#123;</span><br><span class="line">            System.out.print(set + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出：lilei,tom,jack</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hashTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis.hset(<span class="string">&quot;user:1001&quot;</span>, <span class="string">&quot;id&quot;</span>, <span class="string">&quot;1001&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;user:1001&quot;</span>, <span class="string">&quot;name&quot;</span>, <span class="string">&quot;xiaoyuge&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;user:1001&quot;</span>, <span class="string">&quot;age&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line">        Map&lt;String, String&gt; map = jedis.hgetAll(<span class="string">&quot;user:1001&quot;</span>);</span><br><span class="line">        System.out.println(map);    <span class="comment">//&#123;name=xiaoyuge, age=18, id=1001&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zsetTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jedis.zadd(<span class="string">&quot;score&quot;</span>, <span class="number">100d</span>, <span class="string">&quot;maths&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;score&quot;</span>, <span class="number">86d</span>, <span class="string">&quot;chinese&quot;</span>);</span><br><span class="line">        jedis.zadd(<span class="string">&quot;score&quot;</span>, <span class="number">96d</span>, <span class="string">&quot;English&quot;</span>);</span><br><span class="line">        List&lt;String&gt; list = jedis.zrange(<span class="string">&quot;score&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.print(s+<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出：chinese,English,maths</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribeTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//subscribe 消息监听</span></span><br><span class="line">        jedis.subscribe(<span class="keyword">new</span> JedisPubSub() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String channel, String message)</span> </span>&#123;</span><br><span class="line">                System.out.print(channel+<span class="string">&quot;: &quot;</span>+message);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;channelName&quot;</span>);</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishTest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        jedis.publish(<span class="string">&quot;channelName&quot;</span>,<span class="string">&quot;hello redis&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>07 Redis</category>
      </categories>
      <tags>
        <tag>redis专题</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis新的3种数据类型（三）</title>
    <url>/redis-special-newDataType/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-Bitmaps-位操作字符串"><a href="#1-Bitmaps-位操作字符串" class="headerlink" title="1. Bitmaps 位操作字符串"></a>1. Bitmaps 位操作字符串</h3><p>现代计算机使用二进制(位)作为信息的基本单位，1个字节=8位，例如”abc”字符串有3个字节组成，计算机存储是使用其二进制。<br>“abc”分别对应ASCII码：97，98，99，对应的二进制分别是：01100001、01100010、01100011，如下图<br><img src="/redis-special-newDataType/index/1.png"></p>
<p>合理的使用位操作能够有效地提高内存使用率和开发效率。</p>
<p>Redis提供了Bitmaps这个”数据类型”可以实现对位的操作：</p>
<ul>
<li><p>Bitmaps本身不是一种数据类型，实际上就是字符串（key-value),但它可以对字符串进行操作，字符串中每一个字符对应1个字节，也就是8位，一个字符可以存储8bit位信息</p>
</li>
<li><p>Bitmaps单独提供了一套命令， 所以在Redis中使用Bitmaps和使用字符串的方法不太相同。 可以把Bitmaps想象成一个以位为单位的数组， 数组的每个单元只能存储0和1， 数组的下标在Bitmaps中叫做偏移量。</p>
</li>
</ul>
<p><img src="/redis-special-newDataType/index/2.png"></p>
<h4 id="1-1-常用命令"><a href="#1-1-常用命令" class="headerlink" title="1.1 常用命令"></a>1.1 常用命令</h4><ol>
<li><p><strong>setbit</strong>：设置某个偏移量的值(0或1)</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setbit key offset value</span><br></pre></td></tr></table></figure>
<blockquote>
<p>设置offset偏移位的值为value，offset的值是从0开始的，n代表第n+1个bit位置的。 offset 参数必须大于或等于 0 ，小于 2^32 (bit 映射被限制在 512 MB 之内)。 value的值只能为0或1 返回值：指定偏移量原来储存的位。</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit bitkey 100 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; getbit bitkey 100</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; getbit bitkey 101   #bit默认初始化为 0 </span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure>
<p> 每个独立用户是否访问国网站存放在bitmaps中，将访问的用户记录记做1，没有反问的记做0，用户ID作为offset。假设现在有20个用户，userId=1,6,11，15,19的用户访问了网站，那么当前的bitmaps初始化结果如图：<br> <img src="/redis-special-newDataType/index/3.png"></p>
<p> <code>users:20230225</code>这个bitmaps中表示2023-02-25这天独立访问的用户，如下：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit users:20230225 1 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit users:20230225 6 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit users:20230225 11 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit users:20230225 15 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit users:20230225 19 1</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure></li>
<li><p><strong>getbit</strong>：获取某个偏移位的值</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">getbit key offset</span><br></pre></td></tr></table></figure>
<blockquote>
<p>获取key锁对应的bitmaps中offset偏移为的值，返回0或者1</p>
</blockquote>
</li>
</ol>
<ol start="3">
<li><p><strong>bitcount</strong>：统计bit位都为1的数量</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bitcount key [start] [end]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>统计bit被设置为1的数量，一般情况下，给定的整个字符串都会被进行统计，通过指定额外的start或者end参数，可以让计数只在特定位上进行</p>
<p>start和end都可以使用负数，比如 -1表示最后一个，-2表示倒数第二个，以此类推</p>
<p><strong>注意：start、end是指bit数组的字节下标，一个字节对应8个bit,所以[a,b]对应的offset范围是[8a, 8b+7]</strong></p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> offset值为：1,6,11，15,19</span></span><br><span class="line">127.0.0.1:6379&gt; bitcount users:20230225      # 获取user这个bitmaps中1的数量</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; bitcount users:20230225 0 1  # 获取[0,1]这个字节内bit位上1的数量，也就是offset是[0,15]的位置上1的数量，所以是4个</span><br><span class="line">(integer) 4</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="4">
<li><strong>bitop</strong>：对一个或者多个bitmaps执行位操作 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bitop &lt;operation&gt; destkey key [key ....]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>对一个或多个保存二进制位的字符串key进行位元操作，并将结果保存到destkey上。</p>
<p>operation可以是 AND 、OR、NOT、XOR中的一种：</p>
<ul>
<li>BITOP AND destkey key [key …] ，对一个或多个 key 求逻辑并，并将结果保存到 destkey 。</li>
<li>BITOP OR destkey key [key …] ，对一个或多个 key 求逻辑或，并将结果保存到 destkey 。</li>
<li>BITOP XOR destkey key [key …] ，对一个或多个 key 求逻辑异或，并将结果保存到 destkey 。</li>
<li>BITOP NOT destkey key ，对给定 key 求逻辑非，并将结果保存到 destkey 。</li>
</ul>
<p>除了 NOT 操作之外，其他操作都可以接受一个或多个 key 作为输入。 返回值：保存到 destkey 的字符串的长度，和输入 key 中最长的字符串长度相等。</p>
</blockquote>
 示例： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setbit bits-1 0 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit bits-1 3 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit bits-2 0 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; setbit bits-2 3 1</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; bitop and result-and bits-1 bits-2</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="1-2-bitmaps与set比较"><a href="#1-2-bitmaps与set比较" class="headerlink" title="1.2 bitmaps与set比较"></a>1.2 bitmaps与set比较</h4><p>假设网站有1亿的用户，每天独立访问的用户有5千万，如果每天用集合类型和bitmaps分别存储活跃用户可以得到表：</p>
<table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">每个用户ID占用空间</th>
<th align="center">需要存储的用户量</th>
<th align="center">全部存储两</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Set集合</td>
<td align="center">64位</td>
<td align="center">5千万</td>
<td align="center">64位 * 50000000 = 400MB</td>
</tr>
<tr>
<td align="center">Bitmaps</td>
<td align="center">1位</td>
<td align="center">1亿</td>
<td align="center">1位 * 100000000 = 12.5MB</td>
</tr>
</tbody></table>
<p>很明显， 这种情况下使用<code>Bitmaps</code>能节省很多的内存空间， 尤其是随着时间推移节省的内存还是非常可观的。</p>
<p>但是如果该网站每天独立访问用户很少，那么这两者对比起来，bitmaps就不太合适了，因为大部份位都是0；</p>
<h3 id="2-HyperLoglog"><a href="#2-HyperLoglog" class="headerlink" title="2. HyperLoglog"></a>2. HyperLoglog</h3><p>在工作当中，我们经常会遇到与统计相关的功能需求，比如统计网站 PV（PageView 页面访问量），可以使用 Redis 的 incr、incrby 轻松实现。但像 UV（UniqueVisitor 独立访客）、独立 IP 数、搜索记录数等需要去重和计数的问题如何解决？这种求集合中不重复元素个数的问题称为基数问题。</p>
<p>解决基数问题有很多种方案：</p>
<ul>
<li><p>数据存储在 MySQL 表中，使用 distinct count 计算不重复个数。</p>
</li>
<li><p>使用 Redis 提供的 hash、set、bitmaps 等数据结构来处理。</p>
</li>
</ul>
<p>以上的方案结果精确，但随着数据不断增加，导致占用空间越来越大，对于非常大的数据集是不切实际的。能否能够<strong>降低一定的精度来平衡存储空间</strong>？Redis 推出了 HyperLogLog。</p>
<p>Redis HyperLogLog 是用来做基数统计的算法，HyperLogLog 的优点是：<strong>在输入元素的数量或者体积非常非常大时，计算基数所需的空间总是固定的、并且是很小的</strong>。</p>
<p>在 Redis 里面，每个 HyperLogLog 键只需要花费 12 KB 内存，就可以计算接近 2^64 个不同元素的基数。这和计算基数时，元素越多耗费内存就越多的集合形成鲜明对比。</p>
<p>但是，因为 HyperLogLog只会根据输入元素来计算基数，而不会储存输入元素本身，所以 HyperLogLog不能像集合那样，返回输入的各个元素。</p>
<p>基数： 比如数据集 {1, 3, 5, 7, 5, 7, 8}，那么这个数据集的基数集为 {1, 3, 5 ,7, 8}，基数 (不重复元素) 为 5。 基数估计就是在误差可接受的范围内，快速计算基数。</p>
<h4 id="2-1-常用命令"><a href="#2-1-常用命令" class="headerlink" title="2.1 常用命令"></a>2.1 常用命令</h4><ol>
<li><p><strong>pfadd</strong>：添加多个元素</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pfadd key element [element ....]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>向HyperLoglog类型key添加一个或者多个元素,1添加成功， 0添加失败</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfadd program java php js node # program中添加4个元素[java,php,js,node]，添加成功，返回1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; pfadd program java      #再次添加java，由于已经存在，所以添加失败，返回0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; pfadd program java c++  # 再次添加2个元素，java已经存在了，但是c++不存在，添加成功，返回1</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></li>
<li><p><strong>pfcount</strong>：获取多个HLL合并后元素的个数</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pfcount key1 key2</span><br></pre></td></tr></table></figure>
<blockquote>
<p>统计一个或者多个key去重后元素的数量</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfadd k1 a b c d java   #k1中5个元素：[a,b,c,d,java],其中Java在program中存在</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; pfcount k1</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; pfcount k1 program    获取k1和program去重之后数量合集：[a,b,c,d,java,php,js,node,c++]，数量为9</span><br><span class="line">(integer) 9</span><br></pre></td></tr></table></figure></li>
<li><p><strong>pfmerge</strong>：将多个HLL合并后元素放入另一个HLL</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pfmerge &lt;destkey&gt; &lt;sourcekey&gt; [sourcekey ....]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将过个sourcekey合并放到destkey中</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; pfmerge mergekey k1 program    #将k1和program合并后放入mergekey</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; pfcount mergekey              #mergekey中元素个数为9</span><br><span class="line">(integer) 9</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-Geographic"><a href="#3-Geographic" class="headerlink" title="3. Geographic"></a>3. Geographic</h3><p>Reids3.2 中增加了对GEO类型的支持，GEO（Geographic），地理信息的缩写。</p>
<p>该类型，就是元素的2维坐标，在地图上就是经纬度，redis基于该类型，提供了经纬度设置、查询、范围查询、距离查询，经纬度Hash等常见操作。</p>
<h4 id="3-1-常用命令"><a href="#3-1-常用命令" class="headerlink" title="3.1 常用命令"></a>3.1 常用命令</h4><ol>
<li><p><strong>geoadd</strong>：添加多个位置的经纬度</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geoadd key longitude latitude member [longitude latitude member...]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>longitude latitude member：经度 纬度 名称</p>
<p><strong>geo实际上使用的是zset类型存储的</strong></p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 shanghai #添加上海的经纬度</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 chongqing  #添加重庆经纬度</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; type china:city     #查看类型，发现geo实际上使用zset类型存储的</span><br><span class="line">zset</span><br><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1    #查询key的全部元素</span><br><span class="line">1) &quot;chongqing&quot;</span><br><span class="line">2) &quot;shanghai&quot;</span><br><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1 withscores  # 查询key的全部元素包含score</span><br><span class="line">1) &quot;chongqing&quot;</span><br><span class="line">2) &quot;4026042091628984&quot;</span><br><span class="line">3) &quot;shanghai&quot;</span><br><span class="line">4) &quot;4054803462927619&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>两级无法直接添加，一般会下载城市数据，直接通过java程序一次性导入。</p>
</li>
<li><p>有效的经纬度从<code>-180</code>度到<code>180</code>度，有效的维度从<code>-85.05112878</code>度到<code>85.05112878</code>度。</p>
</li>
<li><p>当坐标位置超出指定范围时，该命令将会返回一个错误。</p>
</li>
<li><p>已经添加的数据，是无法再次往里面添加的。</p>
</li>
</ul>
</li>
<li><p><strong>geopos</strong>：获取多个位置的坐标值</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geopos key member [member.....]</span><br></pre></td></tr></table></figure>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geopos china:city shanghai chongqing wuhan  #获取上海、重庆、武汉3个城市的坐标,由于没有添加武汉的数据，所以没有获取到，其他2个获取到了</span><br><span class="line">1) 1) &quot;121.47000163793563843&quot;</span><br><span class="line">   2) &quot;31.22999903975783553&quot;</span><br><span class="line">2) 1) &quot;106.49999767541885376&quot;</span><br><span class="line">   2) &quot;29.52999957900659211&quot;</span><br><span class="line">3) (nil)</span><br></pre></td></tr></table></figure></li>
<li><p><strong>geodist</strong>：获取两个位置的直线距离</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">geodist key member1 member2 [m | km | ft | mi]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">单位：[m|km|ft|mi] -&gt; [米|千米|英里|英尺]，默认为米</span></span><br></pre></td></tr></table></figure>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class="line">1) &quot;chongqing&quot;</span><br><span class="line">2) &quot;shanghai&quot;</span><br><span class="line">127.0.0.1:6379&gt; geodist china:city shanghai chongqing  #获取上海到重庆的直线距离</span><br><span class="line">&quot;1447673.6920&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li>
<li><p><strong>georadius</strong>：以给定的经纬度为中心，找出某一半径内的元素(附近的人)</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">georadius key longitude latitude radius m |km |ft|mi</span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">单位：[m|km|ft|mi] -&gt; [米|千米|英里|英尺]，默认为米</span></span><br></pre></td></tr></table></figure>

<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; geoadd china:city 114.05 22.52 shenzhen 116.38 39.90 beijing  #添加深圳、北京2个城市的经纬度</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; zrange china:city 0 -1    #输出key中的元素，里面包含了重庆，深圳，上海，北京4个地方的经纬度</span><br><span class="line">1) &quot;chongqing&quot;</span><br><span class="line">2) &quot;shenzhen&quot;</span><br><span class="line">3) &quot;shanghai&quot;</span><br><span class="line">4) &quot;beijing&quot;</span><br><span class="line">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km  #在china:city中检索：以经纬度(110,30)为中心，半径为1000km内的位置列表</span><br><span class="line">1) &quot;chongqing&quot;</span><br><span class="line">2) &quot;shenzhen&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>07 Redis</category>
      </categories>
      <tags>
        <tag>redis专题</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis的发布和订阅（二）</title>
    <url>/redis-special-pub/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-发布和订阅介绍"><a href="#1-发布和订阅介绍" class="headerlink" title="1. 发布和订阅介绍"></a>1. 发布和订阅介绍</h3><p>Redis发布和订阅（pub/sub）是一种消息通信模式：发布者（pub）发布消息，订阅者（sub）接收消息。Redis客户端可以订阅任意数量的频道</p>
<h3 id="2-Redis的发布和订阅"><a href="#2-Redis的发布和订阅" class="headerlink" title="2. Redis的发布和订阅"></a>2. Redis的发布和订阅</h3><ol>
<li><p>客户段可以订阅频道</p>
<p> <img src="/redis-special-pub/index/1.png"></p>
</li>
<li><p>当发布者给频道发布消息后，消息就会发送给订阅的客户端</p>
<p> <img src="/redis-special-pub/index/2.png"></p>
</li>
</ol>
<h3 id="3-发布和订阅的命令行实现"><a href="#3-发布和订阅的命令行实现" class="headerlink" title="3. 发布和订阅的命令行实现"></a>3. 发布和订阅的命令行实现</h3><ol>
<li><p>打开客户端订阅<code>channel1</code></p>
<blockquote>
<p>订阅命令: <code>subscribe channel1 channel2 ...</code>，可以订阅多个</p>
</blockquote>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; subscribe channel1</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;subscribe&quot;</span><br><span class="line">2) &quot;channel1&quot;</span><br><span class="line">3) (integer) 1</span><br></pre></td></tr></table></figure></li>
<li><p>打开另一个客户端，给<code>channel1</code>发布消息<code>helloworld</code></p>
<blockquote>
<p>发布消息命令：<code>publish channel 消息</code>，channel表示发布的频道，返回值表示有几个订阅者</p>
</blockquote>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; publish channel1 helloworld</span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure></li>
<li><p>切换到订阅者窗口，可以看到收到的消息</p>
<p> <img src="/redis-special-pub/index/3.png"></p>
</li>
</ol>
<h3 id="4-发布和订阅常用命令"><a href="#4-发布和订阅常用命令" class="headerlink" title="4. 发布和订阅常用命令"></a>4. 发布和订阅常用命令</h3><ol>
<li><p><strong>subscribe</strong>：订阅一个或者多个频道</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">subscribe channel [channel ...]</span><br></pre></td></tr></table></figure></li>
<li><p><strong>publish</strong>：发布消息到指定的频道</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">publish channel message</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将消息message发送到频道channel，返回的是订阅者的数量</p>
</blockquote>
</li>
<li><p><strong>psubscribe</strong>：订阅一个或多个符合给定模式的频道</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">psubscribe pattern [pattern...]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>订阅一个或多个符合给定模式的频道，每个模式以 * 作为匹配符，比如：<code>it*</code>匹配it开头的频道(it.news, it.blog….)</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; psubscribe news.* blog.*</span><br><span class="line">Reading messages... (press Ctrl-C to quit)</span><br><span class="line">1) &quot;psubscribe&quot;   # 返回值的类型：显示订阅成功</span><br><span class="line">2) &quot;news.*&quot;       # 订阅的模式</span><br><span class="line">3) (integer) 1     # 目前已订阅的模式的数量</span><br><span class="line"></span><br><span class="line">1) &quot;psubscribe&quot;</span><br><span class="line">2) &quot;blog.*&quot;</span><br><span class="line">3) (integer) 2</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>07 Redis</category>
      </categories>
      <tags>
        <tag>redis专题</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis持久化之RDB（七）</title>
    <url>/redis-special-rdb/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-总体介绍"><a href="#1-总体介绍" class="headerlink" title="1. 总体介绍"></a>1. 总体介绍</h3><p>Redis是一个基于内存的数据库，它的数据时存放在内存中，内存有个问题就是关闭服务或者断电会丢失。</p>
<p>Redis的数据也支持写到硬盘中，这个过程就要持久化。Redis提供了4种不同的持久化方式：</p>
<ul>
<li><p>RDB（Redis Database）</p>
</li>
<li><p>AOF（Append Of File）</p>
</li>
<li><p>虚拟内存（VM）  –reids2.4已经弃用</p>
</li>
<li><p>DISKSTORE</p>
</li>
</ul>
<h3 id="2-RDB（Redis-Database）"><a href="#2-RDB（Redis-Database）" class="headerlink" title="2. RDB（Redis Database）"></a>2. RDB（Redis Database）</h3><h4 id="2-1-RDB介绍"><a href="#2-1-RDB介绍" class="headerlink" title="2.1. RDB介绍"></a>2.1. RDB介绍</h4><p>在指定的时间间隔内将内存中的数据集快照（snapshot）写入磁盘，它恢复时是将快照文件直接读到内存里</p>
<h4 id="2-2-备份是如何执行的"><a href="#2-2-备份是如何执行的" class="headerlink" title="2.2. 备份是如何执行的"></a>2.2. 备份是如何执行的</h4><p>Redis会单独创建(fork)一个子进程进行持久化，会将数据写入到一个临时文件中，待持久化过程都结束后，<br>再用这个临时文件替换上次持久化好的文件中，整个过程中主进程不进行任何IO操作，这就是确保了极高的性能。如果需要进行大规模的恢复，且对数据恢复的完整性不是非常敏感，那RDB方式要比AOF更加高效，</p>
<p>RDB的缺点是最后一次持久化后的数据可能丢失。</p>
<h4 id="2-3-Fork"><a href="#2-3-Fork" class="headerlink" title="2.3. Fork"></a>2.3. Fork</h4><ul>
<li><p>Fork的作用是复制一个与当前进程一样的进程，新进程的所有数据（变量、环境变量、程序计数器等）数值和原进程一致，它是一个全新的进程，并作为原进程的子进程</p>
</li>
<li><p>在Linux程序中，fork()会产生一个和父进程完全相同的子进程，但子进程在此后会多次exec系统调用，出于效率考虑，Linux中引入了”写时复制技术””</p>
</li>
<li><p>一般情况弗进程和子进程会共用一段物理内存，只有进程空间的各段的内容要发生变化是，才会将父进程的内容复制一份给子进程。</p>
</li>
</ul>
<h4 id="2-4-RDB持久化流程"><a href="#2-4-RDB持久化流程" class="headerlink" title="2.4. RDB持久化流程"></a>2.4. RDB持久化流程</h4><p><img src="/redis-special-rdb/index/1.png"></p>
<h4 id="2-5-指定备份文件的名称"><a href="#2-5-指定备份文件的名称" class="headerlink" title="2.5. 指定备份文件的名称"></a>2.5. 指定备份文件的名称</h4><p>在redis.conf中，可以修改rdb备份文件的名称(<code>dbfilename</code>)以及保存路径(<code>dir</code>)，默认为<code>dump.rdb</code>，如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sanitize-dump-payload no</span><br><span class="line"></span><br><span class="line"># The filename where to dump the DB</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># The working directory.</span><br><span class="line">#</span><br><span class="line"># The DB will be written inside this directory, with the filename specified</span><br><span class="line"># above using the &#x27;dbfilename&#x27; configuration directive.</span><br><span class="line">#</span><br><span class="line"># The Append Only File will also be created inside this directory.</span><br><span class="line">#</span><br><span class="line"># Note that you must specify a directory here, not a file name.</span><br><span class="line"># ./表示执行redis-server命令启动redis时所在的目录</span><br><span class="line">dir ./            </span><br></pre></td></tr></table></figure>


<h4 id="2-6-触发RDB备份"><a href="#2-6-触发RDB备份" class="headerlink" title="2.6. 触发RDB备份"></a>2.6. 触发RDB备份</h4><ol>
<li><p>方式1：自动备份</p>
<p>以下4中情况会自动触发：</p>
<ul>
<li><p>redis.conf中配置save m n，即在m秒内有n次修改时，自动触发bgsave生成rdb文件；</p>
<p> <img src="/redis-special-rdb/index/2.png"></p>
<p> save用来配置备份规则， 格式为：<code>save 秒 写操作次数</code> ，<strong>默认是1分钟内修改了1万次，或5分钟内需修改了10次，或30分钟内修改了1次。</strong></p>
<p> 示例：设置20秒内有最少3次key发生备份，则进行备份</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">save 20 3</span><br></pre></td></tr></table></figure></li>
<li><p>主从复制时，从节点要从主节点进行全量复制时也会触发bgsave操作，生成当时的快照发送到从节点；</p>
</li>
<li><p>执行debug reload命令重新加载redis时也会触发bgsave操作；</p>
</li>
<li><p>默认情况下执行shutdown命令时，如果没有开启aof持久化，那么也会触发bgsave操作；</p>
</li>
</ul>
</li>
<li><p>方式2：手动执行命令备份（save | bgsave）</p>
<p> 触发备份有两个命令：</p>
<ul>
<li><p><strong>save</strong>：阻塞当前Redis服务器，直到RDB过程完成为止，手动保存，不建议使用</p>
</li>
<li><p><strong>bgsave</strong>：redis会在后台一步进行快照操作，快照同时还可以响应客户端情况，可以通过<code>lastsave</code>命令获取最后一次生成快照的时间</p>
<p><img src="/redis-special-rdb/index/7.png"></p>
<p>具体流程如下：</p>
<ul>
<li>redis客户端执行bgsave命令或者自动触发bgsave命令；</li>
<li>主进程判断当前是否已经存在正在执行的子进程，如果存在，那么主进程直接返回；</li>
<li>如果不存在正在执行的子进程，那么就fork一个新的子进程进行持久化数据，fork过程是阻塞的，fork操作完成后主进程即可执行其他操作；</li>
<li>子进程先将数据写入到临时的rdb文件中，待快照数据写入完成后再原子替换旧的rdb文件；</li>
<li>同时发送信号给主进程，通知主进程rdb持久化完成，主进程更新相关的统计信息（info Persitence下的rdb_*相关选项）。#</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol start="3">
<li><p>方式3： flushall命令</p>
<p> 执行<code>flushall</code>命令，也会产生<code>dump.rdb</code>文件，但是里面是空的，无意义。</p>
</li>
</ol>
<h4 id="redis-conf其他的一些配置"><a href="#redis-conf其他的一些配置" class="headerlink" title="redis.conf其他的一些配置"></a>redis.conf其他的一些配置</h4><ol>
<li><p><code>stop-writes-on-bgsave-error</code>：当磁盘满时，是否关闭redis的写操作,默认<code>yes</code>。</p>
<p> <img src="/redis-special-rdb/index/3.png"></p>
</li>
<li><p><code>rdbcompression</code>：rdb备份是否开启压缩</p>
<blockquote>
<p>对于存储到磁盘中的rdb快照文件，可以设置是否进行压缩，如果是的话，redis采用LZF算法进行压缩，默认<code>yes</code></p>
</blockquote>
<p><img src="/redis-special-rdb/index/4.png"></p>
</li>
<li><p><code>rdbchecksum</code>：是否检查rdb备份文件的完整性</p>
<blockquote>
<p>存储快照后，还可以让redis使用CRC64算法来进行数据校验，但是这样会加大性能消耗，如果希望获取最大的性能，可以关闭，默认 <code>yes</code></p>
</blockquote>
<p><img src="/redis-special-rdb/index/5.png"></p>
</li>
</ol>
<h4 id="2-7-rdb的备份和恢复"><a href="#2-7-rdb的备份和恢复" class="headerlink" title="2.7. rdb的备份和恢复"></a>2.7. rdb的备份和恢复</h4><ol>
<li><p>获取rdb文件的目录</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config get dir</span><br><span class="line">1) &quot;dir&quot;</span><br><span class="line">2) &quot;/usr/local/redis/src&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>将rdb的备份文件<code>*.rdb</code>文件拷贝到其他地方</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/redis/src</span><br><span class="line">cp dump.rdb dump2.rdb</span><br></pre></td></tr></table></figure></li>
<li><p>rdb恢复</p>
<ul>
<li>关闭redis</li>
<li>把备份的文件拷贝到工作目录<code>/usr/local/redis/src</code>，比如<code>cp dump2.rdb dump.rdb</code></li>
<li>启动redis，备份数据直接加载，数据恢复</li>
</ul>
</li>
</ol>
<h4 id="2-8-优缺点"><a href="#2-8-优缺点" class="headerlink" title="2.8. 优缺点"></a>2.8. 优缺点</h4><p><strong>优势：</strong></p>
<ul>
<li><p>适合大规模数据恢复</p>
</li>
<li><p>对数据完整性和一致性要求不高更适合使用</p>
</li>
<li><p>节省磁盘空间</p>
</li>
<li><p>恢复速度块</p>
</li>
</ul>
<p><strong>劣势：</strong></p>
<ul>
<li><p>Fork的时候，内存中的数据会被克隆一份，大致2倍的膨胀，需要考虑</p>
</li>
<li><p>虽然Redis在fork的时候使用了写时拷贝技术，但是如果数据庞大时还是比较消耗性能</p>
</li>
<li><p>在备份周期在一定间隔时间做一次备份，所以如果Redis意外down的话，就会丢失最后一次快照后所有修改</p>
</li>
</ul>
<h4 id="2-9-停止RDB"><a href="#2-9-停止RDB" class="headerlink" title="2.9. 停止RDB"></a>2.9. 停止RDB</h4><p>动态停止RDB：<code>redis-cli config set save &quot;&quot;</code> #save后给空值，表示禁用保存策略。</p>
<h3 id="3-RDB深入理解"><a href="#3-RDB深入理解" class="headerlink" title="3. RDB深入理解"></a>3. RDB深入理解</h3><p>RDB中的核心思路是<code>Copy-on-Write</code>，来保证快照操作的时间，需要压缩写入磁盘上的数据在内存中不会发生便哈，在正常的快照操作中，一方面Redis主进程会fork一个新的快照进程专门处理这个事情，这样保证了Redis服务不会停止对<br>客户端包括写请求在哪的任何响应。另一方面这段时间发生的数据变化会以副本的方式存放在另一个新的内存区域，等到快照操作结束后才会同步到原来的内存区域。</p>
<p>举个例子：如果主线程对这些数据也都是读操作（例如图中的键值对 A），那么，主线程和 bgsave 子进程相互不影响。但是，如果主线程要修改一块数据（例如图中的键值对 C），那么，这块数据就会被复制一份，生成该数据的副本。然后，bgsave 子进程会把这个副本数据写入 RDB 文件，而在这个过程中，主线程仍然可以直接修改原来的数据。<br><img src="/redis-special-rdb/index/8.png"></p>
<h4 id="3-1-快照间隔时间"><a href="#3-1-快照间隔时间" class="headerlink" title="3.1. 快照间隔时间"></a>3.1. 快照间隔时间</h4><p>对于快照来说，所谓“连拍”就是指连续地做快照。这样一来，快照的间隔时间变得很短，即使某一时刻发生宕机了，因为上一时刻快照刚执行，丢失的数据也不会太多。但是，这其中的快照间隔时间就很关键了</p>
<p><strong>如果频繁地执行全量快照，也会带来两方面的开销</strong>：</p>
<ul>
<li>一方面，频繁将全量数据写入磁盘，会给磁盘带来很大压力，多个快照竞争有限的磁盘带宽，前一个快照还没有做完，后一个又开始做了，容易造成恶性循环。</li>
<li>另一方面，bgsave 子进程需要通过 fork 操作从主线程创建出来。虽然，子进程在创建后不会再阻塞主线程，但是，fork 这个创建过程本身会阻塞主线程，而且主线程的内存越大，阻塞时间越长。如果频繁 fork 出 bgsave 子进程，这就会频繁阻塞主线程了。</li>
</ul>
<h3 id="4-RDB优缺点"><a href="#4-RDB优缺点" class="headerlink" title="4. RDB优缺点"></a>4. RDB优缺点</h3><p>优点：</p>
<ul>
<li>RDB文件是某个时间节点的快照，默认使用LZF算法进行压缩，压缩后的文件体积远远小于内存大小，适用于备份、全量复制等场景；</li>
<li>Redis加载RDB文件恢复数据要远远快于AOF方式；</li>
</ul>
<p>缺点：</p>
<ul>
<li>RDB方式实时性不够，无法做到秒级的持久化；</li>
<li>每次调用bgsave都需要fork子进程，fork子进程属于重量级操作，频繁执行成本较高；</li>
<li>RDB文件是二进制的，没有可读性，AOF文件在了解其结构的情况下可以手动修改或者补全；</li>
<li>版本兼容RDB文件问题；针对RDB不适合实时持久化的问题，Redis提供了AOF持久化方式来解决#</li>
</ul>
]]></content>
      <categories>
        <category>07 Redis</category>
      </categories>
      <tags>
        <tag>redis专题</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot整合Redis（五）</title>
    <url>/redis-special-springboot/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-引入Redis依赖"><a href="#1-引入Redis依赖" class="headerlink" title="1. 引入Redis依赖"></a>1. 引入Redis依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Redis依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-配置Redis连接信息"><a href="#2-配置Redis连接信息" class="headerlink" title="2. 配置Redis连接信息"></a>2. 配置Redis连接信息</h3><p>在application.yaml配置文件中配置：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">password</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">6000</span>          <span class="comment">#超时时间</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span>            <span class="comment">#第一个数据库，0-15</span></span><br></pre></td></tr></table></figure>

<h3 id="3-配置启动类"><a href="#3-配置启动类" class="headerlink" title="3. 配置启动类"></a>3. 配置启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(App.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-使用RedisTemplate工具类操作Redis"><a href="#4-使用RedisTemplate工具类操作Redis" class="headerlink" title="4. 使用RedisTemplate工具类操作Redis"></a>4. 使用RedisTemplate工具类操作Redis</h3><blockquote>
<p>springboot中使用RedisTemplate来操作redis，需要在我们的bean中注入这个对象，代码如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用下面5个对象来操作对应的类型</span></span><br><span class="line"><span class="keyword">this</span>.redisTemplate.opsForValue(); <span class="comment">//提供了操作string类型的所有方法</span></span><br><span class="line"><span class="keyword">this</span>.redisTemplate.opsForList();  <span class="comment">// 提供了操作list类型的所有方法</span></span><br><span class="line"><span class="keyword">this</span>.redisTemplate.opsForSet();   <span class="comment">//提供了操作set的所有方法</span></span><br><span class="line"><span class="keyword">this</span>.redisTemplate.opsForHash();  <span class="comment">//提供了操作hash表的所有方法</span></span><br><span class="line"><span class="keyword">this</span>.redisTemplate.opsForZSet();  <span class="comment">//提供了操作zset的所有方法</span></span><br></pre></td></tr></table></figure>

<h3 id="5-RedisTemplate操作Demo"><a href="#5-RedisTemplate操作Demo" class="headerlink" title="5.RedisTemplate操作Demo"></a>5.RedisTemplate操作Demo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * SpringBoot集成Redis，测试常用操作命令</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest(classes = App.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisTemplateTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stringTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//删除key</span></span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.delete(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="comment">//设置值</span></span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForValue().set(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;xiaoyuge&quot;</span>);</span><br><span class="line">        <span class="comment">//获取值</span></span><br><span class="line">        String name = <span class="keyword">this</span>.redisTemplate.opsForValue().get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.delete(<span class="string">&quot;names&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForList().rightPushAll(<span class="string">&quot;names&quot;</span>, <span class="string">&quot;tom&quot;</span>, <span class="string">&quot;chelly&quot;</span>, <span class="string">&quot;xiaoyuge&quot;</span>, <span class="string">&quot;fan&quot;</span>);</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">this</span>.redisTemplate.opsForList().range(<span class="string">&quot;names&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForSet().add(<span class="string">&quot;courses&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;php&quot;</span>, <span class="string">&quot;node&quot;</span>, <span class="string">&quot;js&quot;</span>);</span><br><span class="line">        <span class="comment">//获取set集合中的值</span></span><br><span class="line">        Set&lt;String&gt; courseSet = <span class="keyword">this</span>.redisTemplate.opsForSet().members(<span class="string">&quot;courses&quot;</span>);</span><br><span class="line">        courseSet.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hashTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;() &#123;&#123;</span><br><span class="line">            put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;xiaoyuge&quot;</span>);</span><br><span class="line">            put(<span class="string">&quot;age&quot;</span>, <span class="string">&quot;18&quot;</span>);</span><br><span class="line">        &#125;&#125;;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForHash().putAll(<span class="string">&quot;userMap&quot;</span>, map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取值</span></span><br><span class="line">        Map&lt;Object, Object&gt; resultMap = <span class="keyword">this</span>.redisTemplate.opsForHash().entries(<span class="string">&quot;userMap&quot;</span>);</span><br><span class="line">        System.out.println(resultMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">zsetTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.delete(<span class="string">&quot;mv&quot;</span>);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForZSet().add(<span class="string">&quot;mv&quot;</span>, <span class="string">&quot;赵丽颖&quot;</span>, <span class="number">960d</span>);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForZSet().add(<span class="string">&quot;mv&quot;</span>, <span class="string">&quot;袁冰妍&quot;</span>, <span class="number">98d</span>);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForZSet().add(<span class="string">&quot;mv&quot;</span>, <span class="string">&quot;刘亦菲&quot;</span>, <span class="number">100d</span>);</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate.opsForZSet().add(<span class="string">&quot;mv&quot;</span>, <span class="string">&quot;杨超越&quot;</span>, <span class="number">80d</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全部的属性值</span></span><br><span class="line">        Set&lt;String&gt; mvs = <span class="keyword">this</span>.redisTemplate.opsForZSet().range(<span class="string">&quot;mv&quot;</span>, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">        mvs.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>07 Redis</category>
      </categories>
      <tags>
        <tag>redis专题</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis事务操作（六）</title>
    <url>/redis-special-transaction/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-Redis事务定义"><a href="#1-Redis事务定义" class="headerlink" title="1. Redis事务定义"></a>1. Redis事务定义</h3><p>Redis事务是一个单独的隔离操作，事务中的所有命令都会序列化、按顺序的执行，事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</p>
<p><strong>Redis事务的主要作用就是串联多个命令防止别的命令插队</strong>。</p>
<h3 id="2-Multi、Exec、discard"><a href="#2-Multi、Exec、discard" class="headerlink" title="2. Multi、Exec、discard"></a>2. Multi、Exec、discard</h3><p>从输入<code>Multi</code>命令开始，输入的命令都会依次进入命令队列中，但不会立即执行，直到输入<code>Exec</code>后，redis会将之前的命令依次执行。</p>
<p>组队的过程中可以通过<code>discard</code>放弃组队。</p>
<p>Redis事务分2个阶段：</p>
<ul>
<li><p>组队阶段：只是将所有的命令加入队列</p>
</li>
<li><p>执行阶段：依次执行队列中的命令，在执行这些命令的过程中，不会被其他客户端发送的请求命令插队或者打断。</p>
</li>
</ul>
<p><img src="/redis-special-transaction/index/1.png"></p>
<h4 id="2-1-常用命令"><a href="#2-1-常用命令" class="headerlink" title="2.1 常用命令"></a>2.1 常用命令</h4><ol>
<li><strong>multi</strong>： 标记一个事务块的开始<blockquote>
<p>标记一个事务的开始，事务块内的多条命令会按照先后顺序被放进一个队列中，最后由exec命令原子性(atomic)的执行。</p>
</blockquote>
 示例： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi    #标记事务开始</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; incr userId     # 多条命令按顺序入队，返回值为QUEUED，表示这个命令加入队列了，还没有被执行。</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incr userId</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incr userId</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; ping</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec          #执行</span><br><span class="line">1) (integer) 1</span><br><span class="line">2) (integer) 2</span><br><span class="line">3) (integer) 3</span><br><span class="line">4) PONG                           #如果ping通了，返回pong</span><br></pre></td></tr></table></figure></li>
<li><strong>exec</strong>：执行所有事务块内的命令<blockquote>
<p>执行事务块内的所有命令</p>
<p>加入某个（某些）key正处于watch命令的监视之下，且事务块有和这个（这些）key相关的命令，那么exec命令只在这个(这些)key没有被其他命令所改动的情况下执行并生效，否则该事务被打断abort</p>
<p>当操作被打断是，返回空值<code>nil</code></p>
</blockquote>
 示例1： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch lock lock_times     #watch监听多个key </span><br><span class="line">OK  </span><br><span class="line">127.0.0.1:6379&gt; multi                     #开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; set lock &quot;hangz&quot;      #设置值</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incr lock_times</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec                  #执行</span><br><span class="line">1) OK</span><br><span class="line">2) (integer) 1</span><br></pre></td></tr></table></figure>
 示例2： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch k1 k2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k1 v1         #另外一个客户端执行了set k1 aaa，修改了k1的值</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incr k2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec              # 因为k1被修改，事务执行失败</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure></li>
<li><strong>discard</strong>：取消事务<blockquote>
<p>取消事务，放弃执行事务块内的所有命令。 总是返回 OK</p>
</blockquote>
 示例： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; ping</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set name xiaoyuge</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; discard</span><br><span class="line">OK</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-事务的错误处理"><a href="#3-事务的错误处理" class="headerlink" title="3. 事务的错误处理"></a>3. 事务的错误处理</h3><ol>
<li><p>情况一：组队中命令有误，导致所有命令取消执行</p>
<p> <img src="/redis-special-transaction/index/2.png"></p>
<p> 示例代码：事务中执行了3个set命令，而第3个set命令有问题，加入队列失败，最后在执行exec时，所有命令被取消执行</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi                     #开启一个事务块</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; set name xiaoyuge     </span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set age 18</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set address           #命令有问题，导致加入队列失败</span><br><span class="line">(error) ERR wrong number of arguments for &#x27;set&#x27; command</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec                  #执行exec的时候，事务中所有命令都被取消</span><br><span class="line">(error) EXECABORT Transaction discarded because of previous errors.</span><br></pre></td></tr></table></figure></li>
<li><p>情况二：组队没有问题，执行中部分成功部分失败</p>
<p><img src="/redis-special-transaction/index/3.png"></p>
<p>示例代码如下，事务中有3个命令，3个命令都入队列成功了，执行exec命令的时候，1和3命令成功了，第2个失败了</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; multi</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k1 v1</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incr k1          #命令2：k1的值递增1，由于k1的值不是数字，执行的时候会失败的</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; set k2 v2</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec             #执行命令，1和3命令成功，第2个失败了</span><br><span class="line">1) OK</span><br><span class="line">2) (error) ERR value is not an integer or out of range</span><br><span class="line">3) OK</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2            #查看k1和k2的值</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-事务冲突的问题"><a href="#4-事务冲突的问题" class="headerlink" title="4. 事务冲突的问题"></a>4. 事务冲突的问题</h3><p>例子：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你的账户中只有10000，有多个人使用你的账户，同时去参加双十一抢购</span><br><span class="line">一个请求想给金额减8000</span><br><span class="line">一个请求想给金额减5000</span><br><span class="line">一个请求想给金额减1000</span><br></pre></td></tr></table></figure>
<p>3个请求同时看到的余额都是10000，大于操作金额，都去执行修改余额的操作，最后导致金额变成了-4000，这显然是有问题的。</p>
<p><img src="/redis-special-transaction/index/4.png"></p>
<h4 id="4-1-悲观锁"><a href="#4-1-悲观锁" class="headerlink" title="4.1 悲观锁"></a>4.1 悲观锁</h4><p><img src="/redis-special-transaction/index/5.png"></p>
<p><strong>悲观锁（Pessimistic Lock）</strong>：顾名思义，就是很悲观，每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人拿到这个数据就会block直到它拿到锁。传统的关系型数据库里面就用到了很多这种锁机制，比如行锁、表锁、读锁、写锁等，都是在做操作之前先上锁。</p>
<h4 id="4-2-乐观锁"><a href="#4-2-乐观锁" class="headerlink" title="4.2 乐观锁"></a>4.2 乐观锁</h4><p><img src="/redis-special-transaction/index/6.png"></p>
<p><strong>乐观锁（Optimistic Lock）</strong>：顾名思义，就是很乐观，每次去那数据的时候都认为别人不会修改，所以不会上锁，但是在修改的时候会判断一下在此期间别人有没有去更新这个数据，可以使用版本号等机制。乐观锁适用于多读的应用类型，这样可以提高吞吐量。redis就是使用这种<strong>check-and-set</strong>机制实现事务的。</p>
<h4 id="4-3-watch监视"><a href="#4-3-watch监视" class="headerlink" title="4.3 watch监视"></a>4.3 watch监视</h4><p>在执行multi之前，先执行<code>watch key1 [key2 …]</code>，可以监视一个或者多个key，若在事务的exec命令之前这些key对应的值被其他命令所改动了，那么事务中所有命令都将被打断，即事务所有操作将被取消执行。<br>窗口1示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set balance 1000</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; watch balance           #监视balance，若balance在事务阶段被其他命令修改，事务执行将被取消</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; multi                   #开启事务</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379(TX)&gt; set name xiaoyuge   #设置name的值为xiaoyuge</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; incrby balance 10   #将balance的值+10， 然后新开一个窗口执行窗口2的命令</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379(TX)&gt; exec                #当窗口2的命令执行完了之后，在执行窗口1的事务</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get balance             #窗口1的事务执行失败，因为窗口2修改了值，结果为1050</span><br><span class="line">&quot;1050&quot;</span><br><span class="line">127.0.0.1:6379&gt; get name                #事务执行失败，name为空</span><br><span class="line">(nil)</span><br></pre></td></tr></table></figure>

<p>窗口2示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; incrby balance 50       #balance原子+50</span><br><span class="line">(integer) 1050</span><br><span class="line">127.0.0.1:6379&gt; get balance</span><br><span class="line">&quot;1050&quot;</span><br></pre></td></tr></table></figure>
<p>窗口1中，对balance进行了监视，也就是说在执行watch balance命令之后，在exec命令之前，如果有其他请求对balance进行了修改，那么窗口1事务中所有的命令都会将会被取消执行。</p>
<p>窗口1watch balance后，由于此时窗口2对balance进行了修改，导致窗口1中事务所有命令被取消执行。</p>
<h4 id="4-4-unwatch：取消监视"><a href="#4-4-unwatch：取消监视" class="headerlink" title="4.4 unwatch：取消监视"></a>4.4 unwatch：取消监视</h4><p>取消<code>watch</code>命令对所有的key的监视，如果在执行<code>watch</code>命令之后，exec命令或discard命令先被执行的话，那么就不需要再执行<code>unwatch</code>了。<br>因为<code>EXEC</code>命令会执行事务，因此 <code>WATCH</code> 命令的效果已经产生了；而 <code>DISCARD</code> 命令在取消事务的同时也会取消所有对 key 的监视，因此这两个命令执行之后，就没有必要执行 <code>UNWATCH</code> 了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; watch k1 k2</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; unwatch</span><br><span class="line">OK</span><br></pre></td></tr></table></figure>


<h3 id="5-Redis事务的3大特性"><a href="#5-Redis事务的3大特性" class="headerlink" title="5. Redis事务的3大特性"></a>5. Redis事务的3大特性</h3><ul>
<li><p>单独的隔离操作</p>
<p>事务中的所有命令都会序列化、按顺序地执行，事务在执行过程中，不会被其他客户端发送来的命令请求所打断。</p>
</li>
</ul>
<ul>
<li><p>没有隔离级别的概念</p>
<p>队列中的命令没有提交（exec）之前，都不会实际被执行，因为事务提交前任何指令都不会被实际执行。</p>
</li>
</ul>
<ul>
<li><p>不能保证原子性</p>
<p>事务中如果有一条命令执行失败，后续的命令仍然会被执行，没有回滚。 <strong>如果在组队阶段，有1个失败了，后面都不会成功；如果在组队阶段成功了，在执行阶段有那个命令失败就这条失败，其他的命令则正常执行，不保证都成功或都失败</strong>。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>07 Redis</category>
      </categories>
      <tags>
        <tag>redis专题</tag>
      </tags>
  </entry>
  <entry>
    <title>screw 数据库表结构文档生成工具</title>
    <url>/screw/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p>在企业级开发中、我们经常会有编写数据库表结构文档的时间付出，每次需要手动进行维护到文档中，很是繁琐、如果忘记一次维护、就会给以后工作造成很多困扰、无形中制造了很多坑留给自己和后人，随着项目的需求频繁设计和更改数据库、使用此插件、节省了很多时间，解决了很多问题 。</p>
<blockquote>
<p>虽然是细小的螺丝钉，是个细微的小齿轮，然而如果缺了它，那整个的机器就无法运转了，慢说是缺了它，即使是一枚小螺丝钉没拧紧，一个小齿轮略有破损，也要使机器的运转发生故障的…</p>
</blockquote>
<p>本篇文章用到的开源项目地址是：<a href="https://toscode.gitee.com/leshalv/screw">https://toscode.gitee.com/leshalv/screw</a></p>
<h3 id="2-特点"><a href="#2-特点" class="headerlink" title="2. 特点"></a>2. 特点</h3><ul>
<li>简介、轻量、设计良好</li>
<li>多数据库支持<ul>
<li>已支持：Mysql、Mariadb、Tidb、oracle、sqlserver、postgreSql、Cache DB（2016）</li>
<li>开发中：H2、DB2、HSQL、SQLite、达梦、虚谷、人大金仓、瀚高</li>
</ul>
</li>
<li>多种格式文档</li>
<li>灵活扩展</li>
<li>支持自定义模板</li>
</ul>
<h3 id="3-文档生成支持"><a href="#3-文档生成支持" class="headerlink" title="3. 文档生成支持"></a>3. 文档生成支持</h3><ul>
<li>html<br><img src="/screw/index/1.webp"></li>
<li>word<br><img src="/screw/index/2.webp"></li>
<li>markdown<br><img src="/screw/index/3.webp"></li>
</ul>
<h3 id="4-使用案例-pom引入"><a href="#4-使用案例-pom引入" class="headerlink" title="4. 使用案例-pom引入"></a>4. 使用案例-pom引入</h3><ol>
<li><p>引入依赖</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.31<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置数据库连接信息</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/gang?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF8&amp;serverTimezone=Asia/Shanghai </span></span><br><span class="line"><span class="meta">spring.datasource.username</span>= <span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>= <span class="string">xiaoyuge</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.xa.properties.useInformationSchema</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写测试代码</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.Configuration;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.engine.EngineConfig;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.engine.EngineFileType;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.engine.EngineTemplateType;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.execute.DocumentationExecute;</span><br><span class="line"><span class="keyword">import</span> cn.smallbun.screw.core.process.ProcessConfig;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@SpringBootTest(classes = App.class)</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportDbDoc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        DataSource dataSourceMysql = applicationContext.getBean(DataSource.class);</span><br><span class="line">        <span class="comment">// 生成文件配置</span></span><br><span class="line">        EngineConfig engineConfig = EngineConfig.builder()</span><br><span class="line">                <span class="comment">// 生成文件路径，自己mac本地的地址，这里需要自己更换下路径</span></span><br><span class="line">                .fileOutputDir(<span class="string">&quot;/Users/xiaoyuge/Desktop/screw&quot;</span>)</span><br><span class="line">                <span class="comment">// 打开目录</span></span><br><span class="line">                .openOutputDir(<span class="keyword">false</span>)</span><br><span class="line">                <span class="comment">// 文件类型,我这用的是HTML, EngineFileType有以下三种类型：</span></span><br><span class="line">                <span class="comment">//HTML(&quot;.html&quot;, &quot;documentation_html&quot;, &quot;HTML文件&quot;),</span></span><br><span class="line">                <span class="comment">//WORD(&quot;.doc&quot;, &quot;documentation_word&quot;, &quot;WORD文件&quot;),</span></span><br><span class="line">                <span class="comment">//MD(&quot;.md&quot;, &quot;documentation_md&quot;, &quot;Markdown文件&quot;);</span></span><br><span class="line">                .fileType(EngineFileType.HTML)</span><br><span class="line">                <span class="comment">// 生成模板实现</span></span><br><span class="line">                .produceType(EngineTemplateType.freemarker).build();</span><br><span class="line">        <span class="comment">// 生成文档配置（包含以下自定义版本号、描述等配置连接）</span></span><br><span class="line">        Configuration config = Configuration.builder()</span><br><span class="line">                .version(<span class="string">&quot;1.0.5&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;生成文档信息描述&quot;</span>)</span><br><span class="line">                .dataSource(dataSourceMysql)</span><br><span class="line">                .engineConfig(engineConfig)</span><br><span class="line">                .produceConfig(getProcessConfig())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行生成</span></span><br><span class="line">        <span class="keyword">new</span> DocumentationExecute(config).execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置想要生成的表+ 配置想要忽略的表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生成表配置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProcessConfig <span class="title">getProcessConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 忽略表名</span></span><br><span class="line">        List&lt;String&gt; ignoreTableName = Arrays.asList(<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;test_group&quot;</span>);</span><br><span class="line">        <span class="comment">// 忽略表前缀，如忽略a开头的数据库表</span></span><br><span class="line">        List&lt;String&gt; ignorePrefix = Arrays.asList(<span class="string">&quot;a&quot;</span>,<span class="string">&quot;t&quot;</span>);</span><br><span class="line">        <span class="comment">// 忽略表后缀</span></span><br><span class="line">        List&lt;String&gt; ignoreSuffix = Arrays.asList(<span class="string">&quot;_test&quot;</span>,<span class="string">&quot;czb_&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ProcessConfig.builder()</span><br><span class="line">                <span class="comment">//根据名称指定表生成</span></span><br><span class="line">                .designatedTableName(<span class="keyword">new</span> ArrayList&lt;String&gt;())</span><br><span class="line">                <span class="comment">//根据表前缀生成</span></span><br><span class="line">                .designatedTablePrefix(<span class="keyword">new</span> ArrayList&lt;String&gt;())</span><br><span class="line">                <span class="comment">//根据表后缀生成</span></span><br><span class="line">                .designatedTableSuffix(<span class="keyword">new</span> ArrayList&lt;String&gt;())</span><br><span class="line">                <span class="comment">//忽略表名</span></span><br><span class="line">                .ignoreTableName(ignoreTableName)</span><br><span class="line">                <span class="comment">//忽略表前缀</span></span><br><span class="line">                .ignoreTablePrefix(ignorePrefix)</span><br><span class="line">                <span class="comment">//忽略表后缀</span></span><br><span class="line">                .ignoreTableSuffix(ignoreSuffix).build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>查看数据库文档<br> <img src="/screw/index/4.webp"></p>
</li>
</ol>
<h3 id="5-使用案例-Maven插件"><a href="#5-使用案例-Maven插件" class="headerlink" title="5. 使用案例-Maven插件"></a>5. 使用案例-Maven插件</h3><p>在pom.xml文件中添加以下配置即可</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.smallbun.screw<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>screw-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lastVersion&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- HikariCP --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--mysql driver--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.20<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--username--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">username</span>&gt;</span>root<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--password--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">password</span>&gt;</span>password<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">driverClassName</span>&gt;</span>com.mysql.cj.jdbc.Driver<span class="tag">&lt;/<span class="name">driverClassName</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--jdbc url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">jdbcUrl</span>&gt;</span>jdbc:mysql://127.0.0.1:3306/xxxx<span class="tag">&lt;/<span class="name">jdbcUrl</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--生成文件类型--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileType</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">fileType</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--打开文件输出目录--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">openOutputDir</span>&gt;</span>false<span class="tag">&lt;/<span class="name">openOutputDir</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--生成模板--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">produceType</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">produceType</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--文档名称 为空时:将采用[数据库名称-描述-版本号]作为文档名称--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">fileName</span>&gt;</span>测试文档名称<span class="tag">&lt;/<span class="name">fileName</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--描述--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">description</span>&gt;</span>数据库文档生成<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--版本--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--标题--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">title</span>&gt;</span>数据库文档<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>run<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>13 开源组件</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>如何停止一个正在运行的线程</title>
    <url>/thread-stop/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>停止一个线程更意味着在任务处理完成任务之前停掉正在做的操作，也就是放弃当前的操作。停止一个线程可以用Thread.stop()方法，但最好不要用它。虽然它确实可以停止一个正在运行的线程，但是这个方法是不安全的，而且已被废弃。</p>
<p>在Java中有以下3种方法可以终止正在运行的线程：</p>
<ol>
<li><p>使用退出标志，使线程正常退出，也就是当run方法完成后线程终止</p>
</li>
<li><p>使用stop方法强行终止，但是不推荐；因为stop和suspend以及resume一样都是过期作废的方法</p>
</li>
<li><p>使用interrupt方法中断线程</p>
</li>
</ol>
<h3 id="2-停止不了的线程"><a href="#2-停止不了的线程" class="headerlink" title="2. 停止不了的线程"></a>2. 停止不了的线程</h3><p>interrupt()方法的使用效果并不像for+break语句那样，马上就停止循环，调用<code>interrupt()</code>方法是在当前线程中打一个停止标志，并不是真的停止线程。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i=&quot;</span>+(i+<span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//这里休眠2秒，让线程执行一段时间，2s后中断线程</span></span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            thread.interrupt();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception ex)&#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">i=99994</span><br><span class="line">i=99995</span><br><span class="line">i=99996</span><br><span class="line">i=99997</span><br><span class="line">i=99998</span><br><span class="line">i=99999</span><br><span class="line">i=100000</span><br></pre></td></tr></table></figure>
<h3 id="3-判断线程是否停止状态"><a href="#3-判断线程是否停止状态" class="headerlink" title="3. 判断线程是否停止状态"></a>3. 判断线程是否停止状态</h3><p>Thread.java类提供了两种方法：</p>
<ol>
<li><p>this.interrupted()：测试当前线程是否已经中断，当前线程是指运行this.interrput()方法的线程</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        thread.start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            thread.interrupt();</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">&quot;stop 1??&quot;</span> + Thread.interrupted());</span><br><span class="line">            System.out.println(<span class="string">&quot;stop 2??&quot;</span> + Thread.interrupted());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            ex.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 运行结果：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop 1??false</span><br><span class="line">stop 2??false</span><br></pre></td></tr></table></figure>
<p> 从控制台输出信息可以看出：线程并未停止，这也证明来<code>interrupt()</code>方法的解释，测试当前线程是否已经中断，<strong>这个当前线程是main,它未被中断，所以打印的两个结果都是false；</strong></p>
<p> 如何使main线程产生中断效果呢？</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread.currentThread().interrupt();</span><br><span class="line">        System.out.println(<span class="string">&quot;stop 1??&quot;</span> + Thread.interrupted());</span><br><span class="line">        System.out.println(<span class="string">&quot;stop 2??&quot;</span> + Thread.interrupted());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 输出：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop 1??true</span><br><span class="line">stop 2??false</span><br><span class="line">end </span><br></pre></td></tr></table></figure>
<p> 方法<code>interrupt()</code>的确判断出当前线程是否停止状态，但是为什么第2个为false呢？</p>
<p> 官方帮助文档对<code>interrupt()</code>方法的解释是：<strong>测试当前线程是否已经中断。线程的中断状态有该方法清除。</strong>换句话说：如果连续两次调用该方法，则第二次返回false;</p>
</li>
<li><p>this.isInterrupted()：测试线程是否已经中断</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IsInterruptDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">        thread.start();</span><br><span class="line">        thread.interrupt();</span><br><span class="line">        System.out.println(<span class="string">&quot;stop 1??&quot;</span> + thread.isInterrupted());</span><br><span class="line">        System.out.println(<span class="string">&quot;stop 2??&quot;</span> + thread.isInterrupted());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 运行结果:</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop 1??true</span><br><span class="line">stop 2??true</span><br></pre></td></tr></table></figure>
<p> <code>isInterrupted()</code>并为清除状态，所以打印来两个true</p>
</li>
</ol>
<h3 id="4-停止线程-异常法"><a href="#4-停止线程-异常法" class="headerlink" title="4. 停止线程-异常法"></a>4. 停止线程-异常法</h3><p>有了前面的知识，就可以在线程中用for来判断线程是否是停止状态，如果是停止状态，则后面的代卖不再运行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500000</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程已经终止，for循环不再执行&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;i = &quot;</span> + (i + <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;这是for循环外的语句，也会被执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Thread thread = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">      thread.start();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">         thread.interrupt();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">         ex.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">......</span><br><span class="line">i = 285135</span><br><span class="line">i = 285136</span><br><span class="line">i = 285137</span><br><span class="line">i = 285138</span><br><span class="line">i = 285139</span><br><span class="line">线程已经终止，for循环不再执行</span><br><span class="line">这是for循环外的语句，也会被执行</span><br></pre></td></tr></table></figure>
<p>虽然停止了线程，但是如果for语句下面还有语句，还是会继续执行的。如果不需要继续执行</p>
<p>只需要在上面break的地方改成<code>throw new InterruptedException();</code> 即可，这样就会抛出异常。</p>
<h3 id="5-停止线程-sleep法"><a href="#5-停止线程-sleep法" class="headerlink" title="5. 停止线程-sleep法"></a>5. 停止线程-sleep法</h3><p>如果线程在sleep状态下停止线程，会是什么效果？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;线程开始....&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">200000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;线程结束。&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;在沉睡中被停止, 进入catch， 调用isInterrupted()方法的结果是：&quot;</span>+<span class="keyword">this</span>.isInterrupted());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Thread thread = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">      thread.start();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         thread.interrupt();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">         ex.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">线程开始....</span><br><span class="line">在沉睡中被停止, 进入catch， 调用isInterrupted()方法的结果是：false</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">trueat java.lang.Thread.sleep(Native Method)</span><br><span class="line">trueat org.example.ThreadDemo.run(ThreadDemo.java:13)</span><br></pre></td></tr></table></figure>
<p>从打印的结果来看，如果在sleep状态下停止线程，会进入catch语句，并且清除停止状态值，使之变为false。</p>
<p>前一个实验是先sleep然后再用interrupt()挺尸，与之相反的操作如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.......</span><br><span class="line">i=9997</span><br><span class="line">i=9998</span><br><span class="line">i=9999</span><br><span class="line">i=10000</span><br><span class="line">先停止，再遇到sleep 进入catch</span><br><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">trueat java.lang.Thread.sleep(Native Method)</span><br><span class="line">trueat org.example.ThreadDemo.run(ThreadDemo.java:16)</span><br></pre></td></tr></table></figure>

<h3 id="6-停止线程-暴力停止"><a href="#6-停止线程-暴力停止" class="headerlink" title="6. 停止线程-暴力停止"></a>6. 停止线程-暴力停止</h3><p>使用stop()方法停止线程是非常暴力的，且方法已经被废弃了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//模拟线程一直在运行</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">                i++;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Thread thread = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">      thread.start();</span><br><span class="line">      <span class="keyword">try</span>&#123;</span><br><span class="line">         Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">         thread.stop();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">         ex.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">i = 0</span><br><span class="line">i = 1</span><br><span class="line">i = 2</span><br><span class="line">i = 3</span><br><span class="line">i = 4</span><br><span class="line">i = 5</span><br><span class="line">i = 6</span><br><span class="line">i = 7</span><br><span class="line">i = 8</span><br><span class="line">i = 9</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure>

<h3 id="7-方法stop-与java-lang-ThreadDeath异常"><a href="#7-方法stop-与java-lang-ThreadDeath异常" class="headerlink" title="7. 方法stop()与java.lang.ThreadDeath异常"></a>7. 方法stop()与java.lang.ThreadDeath异常</h3><p>调用stop()方法时会抛出java.lang.ThreadDeath异常，但是通常情况下，此异常不需要显示地捕捉。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">this</span>.stop();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ThreadDeath e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;进入catch&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Thread thread = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">      thread.start();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入catch</span><br><span class="line">java.lang.ThreadDeath</span><br><span class="line">trueat java.lang.Thread.stop(Thread.java:853)</span><br><span class="line">trueat org.example.ThreadDemo.run(ThreadDemo.java:11)</span><br></pre></td></tr></table></figure>
<p>stop()方法已经作废，因为如果强制让线程停止有可能是一些清理性的工作得不到完整，另一种情况就是对锁定的对象进行了解锁，导致数据得不到同步的处理，出现数据不一致的情况。</p>
<h4 id="释放锁的不良后果"><a href="#释放锁的不良后果" class="headerlink" title="释放锁的不良后果"></a>释放锁的不良后果</h4><p>使用stop()释放锁将会给数据造成不一致性的结果。如果出现这样的情况，程序处理的数据就有可能遭到破坏，最终导致程序执行的流程错误，一定要特别注意：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SynchronizedObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String password = <span class="string">&quot;aa&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">printString</span><span class="params">(String name, String password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            Thread.sleep(<span class="number">100000</span>);</span><br><span class="line">            <span class="keyword">this</span>.password = password;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略getter/setter方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SynchronizedObject synchronizedObject;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(SynchronizedObject synchronizedObject)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.synchronizedObject = synchronizedObject;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        synchronizedObject.printString(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;bb&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SynchronizedObject synchronizedObject = <span class="keyword">new</span> SynchronizedObject();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> MyThread(synchronizedObject);</span><br><span class="line">        thread.start();</span><br><span class="line">        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">        thread.stop();</span><br><span class="line">        System.out.println(synchronizedObject.getName() + <span class="string">&quot;  &quot;</span> + synchronizedObject.getPassword());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">b  aa</span><br></pre></td></tr></table></figure>
<p>由于stop()方法以及在JDK中被标明为“过期/作废”的方法，显然它在功能上具有缺陷，所以不建议在程序张使用stop()方法。</p>
<h3 id="8-使用return停止线程"><a href="#8-使用return停止线程" class="headerlink" title="8. 使用return停止线程"></a>8. 使用return停止线程</h3><p>将方法interrupt()与return结合使用也能实现停止线程的效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.isInterrupted()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;线程被停止了&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;time:&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadDemo</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      Thread thread = <span class="keyword">new</span> ThreadDemo();</span><br><span class="line">      thread.start();</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">         thread.interrupt();</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">         ex.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.......</span><br><span class="line">time:1676209667113</span><br><span class="line">time:1676209667113</span><br><span class="line">time:1676209667113</span><br><span class="line">time:1676209667113</span><br><span class="line">time:1676209667113</span><br><span class="line">线程被停止了</span><br></pre></td></tr></table></figure>

<p><strong>总结：建议使用“抛异常”的方法来实现线程的停止，因为在catch块中还可以将异常向上抛，使线程停止事件得以传播</strong>。</p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Centos系统以及配置IP</title>
    <url>/Installing-CentOS-system/index.html</url>
    <content><![CDATA[<h2 id="1-系统安装"><a href="#1-系统安装" class="headerlink" title="1. 系统安装"></a>1. 系统安装</h2><ol>
<li><p>安装<br> <img src="/Installing-CentOS-system/index/1.png"></p>
</li>
<li><p>选择语言<br> <img src="/Installing-CentOS-system/index/2.png"></p>
</li>
<li><p>设置时区以及软件安装<br> <img src="/Installing-CentOS-system/index/3.png"></p>
</li>
<li><p>选择GNOME桌面，开发工具。然后点击左上角的完成<br><img src="/Installing-CentOS-system/index/4.png"></p>
</li>
<li><p>配置分区，选址本地标准磁盘，并且在分区中勾选”我要配置分区”,”我想让额外空间可用”；初学者可以使用自动配置分区<br><img src="/Installing-CentOS-system/index/5.png"></p>
</li>
<li><p>开始安装<br><img src="/Installing-CentOS-system/index/6.png"></p>
</li>
<li><p>设置Root账户<br><img src="/Installing-CentOS-system/index/7.png"> </p>
</li>
<li><p>等待安装成功,安装成功后会提示重启；<br><img src="/Installing-CentOS-system/index/8.png"> </p>
</li>
</ol>
<h2 id="2-永久关闭防火墙"><a href="#2-永久关闭防火墙" class="headerlink" title="2. 永久关闭防火墙"></a>2. 永久关闭防火墙</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">一、下面是red hat/CentOs7关闭防火墙的命令!</span><br><span class="line"><span class="meta">#</span><span class="bash">1:查看防火状态</span></span><br><span class="line">systemctl status firewalld</span><br><span class="line">service iptables status</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">2:暂时关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line">service iptables stop</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">3:永久关闭防火墙</span></span><br><span class="line">systemctl disable firewalld</span><br><span class="line">chkconfig iptables off</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">4:重启防火墙</span></span><br><span class="line"></span><br><span class="line">systemctl enable firewalld</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure>
<h2 id="3-配置SELinux"><a href="#3-配置SELinux" class="headerlink" title="3. 配置SELinux"></a>3. 配置SELinux</h2><p>SELinux是Linux 内核中提供的强制访问控制系统。selinux有disabled、permissive、enforcing 三种选择：</p>
<ul>
<li>disabled ：不启用控制系统。</li>
<li>permissive：开启控制系统，但是处于警告模式。即使你违反了策略的话它让你继续操作，但是把你的违反的内容记录下来。</li>
<li>Enforcing：开启控制系统，处于强制状态。一旦违反了策略，就无法继续操作下去</li>
</ul>
<p>使用命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/sysconfig/</span><br><span class="line">vim selinux</span><br></pre></td></tr></table></figure>
<p><img src="/Installing-CentOS-system/index/3-1.png"> </p>
<h2 id="4-修改ip配置文件"><a href="#4-修改ip配置文件" class="headerlink" title="4.修改ip配置文件"></a>4.修改ip配置文件</h2><ol>
<li><p>进入文件目录</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/sysconfig/network-scripts/   #进入配置文件</span><br></pre></td></tr></table></figure>
<p> <img src="/Installing-CentOS-system/index/4-1.png"> </p>
</li>
<li><p>写入配置信息并保存退出</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim ifcfg-ens33 #编辑配置文件ifcfg-ens33</span><br></pre></td></tr></table></figure>
<p> 如果要设置固定IP的话，常见设置属性有：BOOTPROTO、ONBOOT、IPADDR、NETMASK、GATEWAY</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#以下为配置文件的内容</span></span><br><span class="line"><span class="string">TYPE=&quot;Ethernet&quot;</span>		<span class="comment">#网卡类型（通常是Ethemet以太网）</span></span><br><span class="line"><span class="string">PROXY_METHOD=&quot;none&quot;</span>	<span class="comment">#代理方式：为关闭状态</span></span><br><span class="line"><span class="string">BROWSER_ONLY=&quot;no&quot;</span>	<span class="comment">#只是浏览器：否</span></span><br><span class="line"><span class="string">BOOTPROTO=&quot;static&quot;</span>	<span class="comment">#网卡的引导协议【static：静态IP(指定静态后IP地址就固定了,不建议采用动态分配)  dhcp：动态IP   none：不指定，不指定容易出现各种各样的网络受限】</span></span><br><span class="line"><span class="string">DEFROUTE=&quot;yes&quot;</span>		<span class="comment">#默认路由</span></span><br><span class="line"><span class="string">IPV4_FAILURE_FATAL=&quot;no&quot;</span>		<span class="comment">#是否开启IPV4致命错误检测</span></span><br><span class="line"><span class="string">IPV6INIT=&quot;yes&quot;</span>		<span class="comment">#IPV6是否自动初始化：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class="line"><span class="string">IPV6_AUTOCONF=&quot;yes&quot;</span>	<span class="comment">#IPV6是否自动配置：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class="line"><span class="string">IPV6_DEFROUTE=&quot;yes&quot;</span>	<span class="comment">#IPV6是否可以为默认路由：是（现在还未用到IPV6，不会有任何影响）</span></span><br><span class="line"><span class="string">IPV6_FAILURE_FATAL=&quot;no&quot;</span>		<span class="comment">#是否开启IPV6致命错误检测</span></span><br><span class="line"><span class="string">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span>	<span class="comment">#IPV6地址生成模型</span></span><br><span class="line"><span class="string">NAME=&quot;ens33&quot;</span>		<span class="comment">#网卡物理设备名称</span></span><br><span class="line"><span class="string">UUID=&quot;ab60d501-535b-49f5-a76b-3336a4120f64&quot;</span> <span class="comment">#通用唯一识别码，每一个网卡都会有，不能重复，否则两台linux机器只有一台可上网,可不写</span></span><br><span class="line"><span class="string">DEVICE=&quot;ens33&quot;</span>		<span class="comment">#网卡设备名称，必须和‘NAME’值一样</span></span><br><span class="line"><span class="string">ONBOOT=&quot;yes&quot;</span>		<span class="comment">#是否开机启动(如果yes则开机后自动加载使用当前配置文件)，要想网卡开机就启动或通过 `systemctl restart network`控制网卡,必须设置为 `yes`</span></span><br><span class="line"><span class="string">IPADDR=192.168.1.111</span>		<span class="comment"># 本机IP 设置固定IP 对应上面的BOOTPROTO</span></span><br><span class="line"><span class="string">NETMASK=255.255.255.0</span>		<span class="comment">#子网掩码 ,可不写</span></span><br><span class="line"><span class="string">GATEWAY=192.168.137.2</span>		<span class="comment">#默认网关 ,可不写</span></span><br><span class="line"><span class="string">DNS1=8.8.8.8</span> <span class="comment"># 可不写</span></span><br><span class="line"><span class="string">DNS2=8.8.8.5</span> <span class="comment"># 可不写</span></span><br><span class="line"><span class="string">ZONE=public</span> <span class="comment"># 可不写</span></span><br></pre></td></tr></table></figure></li>
<li><p>重启网络服务</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart  #重启网卡</span><br></pre></td></tr></table></figure>
<p> <img src="/Installing-CentOS-system/index/4-2.png"> </p>
</li>
<li><p>查看IP</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ip addr</span><br></pre></td></tr></table></figure>
<p> <img src="/Installing-CentOS-system/index/4-3.png"> </p>
</li>
<li><p>重启系统</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中将List列表转换为字符串</title>
    <url>/list-to-string/index.html</url>
    <content><![CDATA[<h3 id="1-toString-方法"><a href="#1-toString-方法" class="headerlink" title="1. toString() 方法"></a>1. toString() 方法</h3><p>List.toString()是最简单的，但它在开头和结尾添加方括号，每个字符串用逗号分隔符分隔。<br>缺点是我们不能用另一个分隔符替换逗号，也不能去掉方括号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListToStringUsingToStringExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// creating a list with strings.</span></span><br><span class="line">    List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;One&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;Two&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;Three&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;Four&quot;</span>,</span><br><span class="line">                      <span class="string">&quot;Five&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// converting List&lt;String&gt; to String using toString() method</span></span><br><span class="line">    String stringFromList = list.toString();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// priting the string</span></span><br><span class="line">    System.out.println(<span class="string">&quot;String : &quot;</span>+stringFromList);        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出：String : [One, Two, Three, Four, Five]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-Java-8-String-join"><a href="#2-Java-8-String-join" class="headerlink" title="2. Java 8 String.join()"></a>2. Java 8 String.join()</h3><p>java 8 String添加了一个特殊的方法String.join()以将集合转换为具有给定分隔符的字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListToStringUsingString_JoinExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// creating a list with strings.</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;One&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Two&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Three&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Four&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Five&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// converting List&lt;String&gt; to String using toString() method</span></span><br><span class="line">        String stringFromList = String.join(<span class="string">&quot;~&quot;</span>, list);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// priting the string</span></span><br><span class="line">        System.out.println(<span class="string">&quot;String with tilde delimiter: &quot;</span>+stringFromList);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// delimiting with pipe | symbol.</span></span><br><span class="line">        String stringPipe = String.join(<span class="string">&quot;|&quot;</span>, list);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// printing</span></span><br><span class="line">        System.out.println(<span class="string">&quot;String with pipe delimiter : &quot;</span>+stringPipe);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//  String with tilde delimiter: One~Two~Three~Four~Five</span></span><br><span class="line"><span class="comment">//  String with pipe delimiter : One|Two|Three|Four|Five</span></span><br></pre></td></tr></table></figure>

<h3 id="3-Collectors-joining"><a href="#3-Collectors-joining" class="headerlink" title="3. Collectors.joining()"></a>3. Collectors.joining()</h3><p>Collectors.join()方法来自 java 8 stream api。Collctors.joining()方法将分隔符、前缀和后缀作为参数。此方法将列表转换为具有给定分隔符、前缀和后缀的字符串。</p>
<p>查看以下有关使用不同分隔符的 join() 方法的示例。但是，String.join() 方法不提供前缀和后缀选项。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListToStringUsingString_JoinExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// creating a list with strings.</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;One&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Two&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Three&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Four&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Five&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// using java 8 Collectors.joining with delimiter, prefix and suffix</span></span><br><span class="line">        String joiningString = list.stream().collect(Collectors.joining(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&#123;&quot;</span>, <span class="string">&quot;&#125;&quot;</span>));</span><br><span class="line">        <span class="comment">// printing</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Collectors.joining string : &quot;</span>+joiningString);</span><br><span class="line">        String joiningString3 = list.stream().collect(Collectors.joining(<span class="string">&quot;@&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="comment">// printing</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Collectors.joining string with @ separator : &quot;</span>+joiningString3);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//Collectors.joining string : &#123;One-Two-Three-Four-Five&#125;</span></span><br><span class="line"><span class="comment">//Collectors.joining string with @ separator : One@Two@Three@Four@Five</span></span><br></pre></td></tr></table></figure>
<h3 id="4-Apache-Commons-StringUtils-join"><a href="#4-Apache-Commons-StringUtils-join" class="headerlink" title="4. Apache Commons StringUtils.join()"></a>4. Apache Commons StringUtils.join()</h3><p>使用来自 apache commons 包的外部库。该库有一个方法StringUtils.join() ，它采用类似于 String.join() 方法的列表和分隔符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListToStringUsingStringUtils_JoinExample</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// creating a list with strings.</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="string">&quot;One&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Two&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Three&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Four&quot;</span>,</span><br><span class="line">                          <span class="string">&quot;Five&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// using java 8 Collectors.joining with delimiter, prefix and suffix</span></span><br><span class="line">        String joiningString = StringUtils.join(list, <span class="string">&quot;^&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// printing</span></span><br><span class="line">        System.out.println(<span class="string">&quot;StringUtils.join string with ^ delimiter : &quot;</span>+joiningString);</span><br><span class="line">        </span><br><span class="line">        String joiningString3 = StringUtils.join(list, <span class="string">&quot;$&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// printing</span></span><br><span class="line">        System.out.println(<span class="string">&quot;StringUtils.join string with @ separator : &quot;</span>+joiningString3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：</span></span><br><span class="line"><span class="comment">//  StringUtils.join string with ^ delimiter : One^Two^Three^Four^Five</span></span><br><span class="line"><span class="comment">//  StringUtils.join string with @ separator : One$Two$Three$Four$Five</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>linux关机命令</title>
    <url>/shutdown/index.html</url>
    <content><![CDATA[<h3 id="1-shutdown命令"><a href="#1-shutdown命令" class="headerlink" title="1. shutdown命令"></a>1. shutdown命令</h3><p>shutdown会给系统计划一个时间关机。它可以被用于停止、关机、重启机器。<br>你可以指定一个时间字符串（通常是 now或者用hh:mm 指定小时/分钟）作为第一个参数。</p>
<p>shutdown命令示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">shutdown</span><br><span class="line"></span><br><span class="line">shutdown now  #立即关机</span><br><span class="line"></span><br><span class="line">shutdown 13:20  # 下午13：20关机</span><br><span class="line"></span><br><span class="line">shutdown -p now  ### 关闭机器</span><br><span class="line"></span><br><span class="line">shutdown -H now  ### 停止机器      </span><br><span class="line"></span><br><span class="line">shutdown -r09:35 ### 在 09:35am 重启机器</span><br><span class="line"></span><br><span class="line">shutdown -c  ## 取消关机</span><br></pre></td></tr></table></figure>

<h3 id="2-halt-命令"><a href="#2-halt-命令" class="headerlink" title="2. halt 命令"></a>2. halt 命令</h3><p>halt通知硬件来停止所有的 CPU 功能，但是仍然保持通电。你可以用它使系统处于低层维护状态。<br>注意在有些情况会它会完全关闭系统。</p>
<p>halt 命令示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">halt             ### 停止机器</span><br><span class="line"></span><br><span class="line">halt -p          ### 关闭机器</span><br><span class="line"></span><br><span class="line">halt --reboot    ### 重启机器</span><br></pre></td></tr></table></figure>

<h3 id="3-poweroff-命令"><a href="#3-poweroff-命令" class="headerlink" title="3.poweroff 命令"></a>3.poweroff 命令</h3><p>poweroff会发送一个 ACPI 信号来通知系统关机</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">poweroff           ### 关闭机器</span><br><span class="line"></span><br><span class="line">poweroff --halt    ### 停止机器</span><br><span class="line"></span><br><span class="line">poweroff --reboot  ### 重启机器</span><br></pre></td></tr></table></figure>

<h3 id="4-reboot-命令"><a href="#4-reboot-命令" class="headerlink" title="4.reboot 命令"></a>4.reboot 命令</h3><p>reboot 通知系统重启。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">reboot           ### 重启机器</span><br><span class="line"></span><br><span class="line">reboot --halt    ### 停止机器</span><br><span class="line"></span><br><span class="line">reboot -p        ### 关闭机器</span><br></pre></td></tr></table></figure>

<h3 id="5-init-命令"><a href="#5-init-命令" class="headerlink" title="5. init 命令"></a>5. init 命令</h3><p>一. init是Linux系统操作中不可缺少的程序之一。<br>所谓的init进程，它是一个由内核启动的用户级进程。<br>内核自行启动（已经被载入内存，开始运行，并已初始化所有的设备驱动程序和数据结构等）之后，就通过启动一个用户级程序init的方式，完成引导进程。所以,init始终是第一个进程（其进程编号始终为1）。<br>内核会在过去曾使用过init的几个地方查找它，它的正确位置（对Linux系统来说）是/sbin/init。如果内核找不到init，它就会试着运行/bin/sh，如果运行失败，系统的启动也会失败。</p>
<p>二. init一共分为7个级别，这7个级别的所代表的含义如下</p>
<p>0：停机或者关机（千万不能将initdefault设置为0）</p>
<p>1：单用户模式，只root用户进行维护</p>
<p>2：多用户模式，不能使用NFS(Net File System)</p>
<p>3：完全多用户模式（标准的运行级别）</p>
<p>4：安全模式</p>
<p>5：图形化（即图形界面）</p>
<p>6：重启（千万不要把initdefault设置为6）</p>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>shutdown</tag>
      </tags>
  </entry>
  <entry>
    <title>MinIO简介以及Linux安装MinIO</title>
    <url>/linux-minio/index.html</url>
    <content><![CDATA[<h2 id="1-什么是对象存储"><a href="#1-什么是对象存储" class="headerlink" title="1. 什么是对象存储"></a>1. 什么是对象存储</h2><p>对象存储服务OSS（Object Storage Service）是一种海量、安全、低成本、高可用的云存储服务，<strong>适合存放任意类型的文件</strong>。容量和处理能力弹性扩展，多种存储类型提供选择，全面优化存储成本。</p>
<p>最大的优势：可以存储大量的非结构话数据，例如：图片、视频、日志文件、备份数据和容器/虚拟机镜像等。</p>
<h2 id="2-MinIO"><a href="#2-MinIO" class="headerlink" title="2. MinIO"></a>2. MinIO</h2><p>MinIO 是个基于Golang编写的开源对象存储套件，基于Apache License V2.0开源协议，虽然轻量，却拥有不错的性能，兼容亚马逊S3云存储服务接口。可以很简单的和其他应用结合使用，例如：NodeJS、Redis、mysql等</p>
<p>中文文档： <a href="http://docs.minio.org.cn/docs/master/minio-monitoring-guide">http://docs.minio.org.cn/docs/master/minio-monitoring-guide</a></p>
<h3 id="2-1-MinIO应用场景"><a href="#2-1-MinIO应用场景" class="headerlink" title="2.1 MinIO应用场景"></a>2.1 MinIO应用场景</h3><p>可以作为私有云的对象存储服务来使用，也可以作为云对象存储的网关层，无缝对接Amazon S3 或者 MicroSoft Azure 。<br><img src="/linux-minio/index/1.png" alt="应用场景"></p>
<h3 id="2-2-MinIO特点"><a href="#2-2-MinIO特点" class="headerlink" title="2.2 MinIO特点"></a>2.2 MinIO特点</h3><ul>
<li><p>高性能</p>
<p>  作为一款高性能存储，在标准硬件条件下，其读写速率分别可以达到55Gb/s和 35Gb/s。并且MinIO支持一个对象文件是任意大小（几KB到最大5T不等）</p>
</li>
<li><p>可扩展</p>
<p>  不同MinIO集群可以组成联邦，并形成一个全局的命名空间，并且支持跨越多个数据中心</p>
</li>
<li><p>云原生</p>
<p>  容器化、基于K8S的编排、多租户支持</p>
</li>
<li><p>Amazon S3兼容</p>
<p>  使用Amazon S3 V2/V4 API。可以使用Minio SDK，Minio Client，AWS SDK 和 AWS CLI 访问Minio服务器。</p>
</li>
<li><p>可对接多种后端存储</p>
<p>除了Minio自己的文件系统，还支持 DAS、 JBODs、NAS、Google云存储和 Azure Blob存储。</p>
</li>
<li><p>SDK支持</p>
<p>GO SDK： <a href="https://github.com/minio/minio-go">https://github.com/minio/minio-go</a></p>
<p>JavaSDK： <a href="https://github.com/minio/minio-java">https://github.com/minio/minio-java</a></p>
<p>PythonSDK： <a href="https://github.com/minio/minio-py">https://github.com/minio/minio-py</a></p>
</li>
</ul>
<ul>
<li><p>Lambda计算</p>
<p>Minio服务器通过其兼容AWS SNS / SQS的事件通知服务触发Lambda功能。支持的目标是消息队列，如Kafka，NATS，AMQP，MQTT，Webhooks以及Elasticsearch，Redis，Postgres和MySQL等数据库</p>
</li>
<li><p>图形化界面</p>
<p>  有操作页面</p>
</li>
<li><p>功能简单</p>
<p>  不容易出错，快速启动</p>
</li>
<li><p>支持纠删码</p>
<p>MinIO使用纠删码、Checksum来防止硬件错误和静默数据污染。在最高冗余度配置下，即使丢失1/2的磁盘也能恢复数据</p>
</li>
</ul>
<h3 id="2-3-存储机制"><a href="#2-3-存储机制" class="headerlink" title="2.3 存储机制"></a>2.3 存储机制</h3><p>MinIO 使用纠删码erasure code、校验和checksum。 即使丢一半数据（N/2）的硬盘，仍然可以恢复数据。</p>
<ul>
<li><p>校验和checksum</p>
<p>  保护数据免受硬件故障和无声数据损坏</p>
</li>
<li><p>纠删码erasure code</p>
<p>  纠删码是一种恢复丢失和损坏数据的数据算法，目前纠删码技术在分布式存储系统中的应用主要有三类：阵列纠删码（Array Code : RAID5、RAID6等）、RS（Reed-Solomon）里德-所罗门类纠删码和LDPC（LowDensity Parity Check Code）<br>  低密度奇偶校验纠删码。</p>
<p>  Erasure code 是一种编码技术，他可以将N份原始数据，增加m份数据，并通过n+m 份中的任意n份数据，还原为原始数据。即如果有任意小于等于m份的数据失效，仍然能通过剩下的数据还原出来。<br>MinIO 采用Reed-Solomon code将对象拆分成N/2数据和N/2奇偶校验快，这就意味着如果是12块盘，一个对象会分成6个数据块、6个奇偶校验块；可以丢失任意6块盘（不管是存放的数据块还是奇偶校验块），仍可以通过剩下的盘进行数据恢复</p>
</li>
</ul>
<h2 id="3-安装和使用MinIO"><a href="#3-安装和使用MinIO" class="headerlink" title="3. 安装和使用MinIO"></a>3. 安装和使用MinIO</h2><h3 id="3-1-Linux安装MinIO"><a href="#3-1-Linux安装MinIO" class="headerlink" title="3.1 Linux安装MinIO"></a>3.1 Linux安装MinIO</h3><ol>
<li>下载（<a href="https://min.io/download#/linux%EF%BC%89">https://min.io/download#/linux）</a> <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br></pre></td></tr></table></figure>
</li>
<li>运行 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> chmod +x minio</span><br><span class="line"> ./minio server /usr/software/minio/data      #将/usr/software/minio/data 替换为您希望 MinIO 存储数据的驱动器或目录的路径。</span><br><span class="line"><span class="meta">#</span><span class="bash">或者指定账号密码启动</span></span><br><span class="line">MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"> #</span><span class="bash">后台启动</span></span><br><span class="line">nohup ./minio server /usr/software/minio/data  &gt;  /usr/software/minio/minio.log 2&gt;&amp;1 &amp;#</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">或者指定账号密码启动</span></span><br><span class="line">MINIO_ACCESS_KEY=minioadmin MINIO_SECRET_KEY=minioadmin nohup ./minio server --config-dir /usr/software/minio/config /usr/software/minio/data&gt;  /usr/software/minio/minio.log 2&gt;&amp;1 &amp;#</span><br></pre></td></tr></table></figure>
<img src="/linux-minio/index/8.png"></li>
<li>设置启动脚本（建议） <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir miniodata</span><br><span class="line">   </span><br><span class="line">touch minio.sh</span><br><span class="line">   </span><br><span class="line">vi minio.sh</span><br></pre></td></tr></table></figure>
在sh文件中添加以下内容 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">指定登录用户名</span></span><br><span class="line">export MINIO_ACCESS_KEY=username</span><br><span class="line"><span class="meta">#</span><span class="bash">指定登录密码</span></span><br><span class="line">export MINIO_SECRET_KEY=password</span><br><span class="line"><span class="meta">#</span><span class="bash">指定端口以及存储文件夹，并启动服务 9000访问端口， 9001 控制台界面访问端口, 这里0.0.0.0可以设置为具体的服务器IP</span></span><br><span class="line">nohup ./minio server --address &#x27;0.0.0.0:9000&#x27; --console-address &#x27;0.0.0.0:9001&#x27; ./miniodata &gt; ./miniodata/minio.log 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure>
给当前用户加上执行权限 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod u+x  *.sh</span><br><span class="line">  </span><br><span class="line"><span class="meta"> #</span><span class="bash">启动</span></span><br><span class="line">sh minio.sh</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-2-安装客户端-可选"><a href="#3-2-安装客户端-可选" class="headerlink" title="3.2 安装客户端(可选)"></a>3.2 安装客户端(可选)</h3><ol>
<li>安装 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://dl.min.io/client/mc/release/linux-amd64/mc</span><br><span class="line">chmod +x mc</span><br><span class="line">./mc --help</span><br></pre></td></tr></table></figure></li>
<li>使用命令给客户端添加一个服务端 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mc alias set minio http://172.21.0.7:9000 minioadmin minioadmin</span><br></pre></td></tr></table></figure></li>
<li>创建bucket，并查询所有bucket <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@ww xiaoyuge]# ./mc ls minio</span><br><span class="line">[root@ww xiaoyuge]# ./mc mb minio/mybucket</span><br><span class="line">Bucket created successfully `minio/mybucket`</span><br><span class="line">[root@ww xiaoyuge]# ./mc ls minio</span><br><span class="line">[2020-09-02 03:02:36 CST]      0B mybucket/</span><br><span class="line">[root@ww xiaoyuge]# </span><br></pre></td></tr></table></figure></li>
<li>页面查询bucket <img src="/linux-minio/index/6.png"></li>
<li>创建用户 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mc admin user add minio root rootroot</span><br></pre></td></tr></table></figure></li>
<li>给用户赋予权限 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./mc admin policy set minio readwrite user=root</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-3-使用MinIO"><a href="#3-3-使用MinIO" class="headerlink" title="3.3 使用MinIO"></a>3.3 使用MinIO</h3><ol>
<li><p>启动</p>
<p> 在浏览器输入： <a href="http://localhost:9000/">http://localhost:9000</a><br> <img src="/linux-minio/index/2.png"><br>在输入控制打印的默认的AccessKey和SecretKey：</p>
<p> <strong>AccessKey:</strong> minioadmin</p>
<p> <strong>SecretKey（默认）:</strong> minioadmin</p>
<p> 使用AccessKey 和 SecretKey 登录后台。</p>
</li>
<li><p>进入系统后，我们先要点击右上角的“+”按钮，创建一个文件桶（输入名称后，回车即可），在上传文件到这个文件桶中。Create bucket（创建文件桶），然后输入bucket名称为 <strong>test</strong>, 创建成功后再Upload file（上传文件）。<br><img src="/linux-minio/index/3.png"><img src="/linux-minio/index/3_1.png"><img src="/linux-minio/index/3_2.png"><img src="/linux-minio/index/4.png"></p>
<p>现在我们去服务器，我们启动时指定的目录去看看，可以看到一个新建的test文件目录（文件桶相当于文件目录），这里没有使用纠删码的模式，所以直接就是源文件了。当我们线上运行的项目已经有源文件了，在使用minio的时候，可以直接指定该目录为minio的文件目录就行了。<br><img src="/linux-minio/index/5.png"><img src="/linux-minio/index/7.png"></p>
</li>
<li><p>分享文件，也可以设置文件分享有效日期<br> <img src="/linux-minio/index/11.png"><img src="/linux-minio/index/12.png" alt="img_1.png"><br>访问连接会出现如下界面：<br><img src="/linux-minio/index/13.png" alt="img_1.png"></p>
</li>
</ol>
<h3 id="3-4-mioIO常见启动问题"><a href="#3-4-mioIO常见启动问题" class="headerlink" title="3.4 mioIO常见启动问题"></a>3.4 mioIO常见启动问题</h3><ol>
<li>启动报错“WARNING: Console endpoint is listening on a dynamic port…”<br> <img src="/linux-minio/index/9.png" alt="img_1.png"><br>错误提示很明显，需要to choose a static port。<br>写了一个shell启动MinIO，在shell中使用–console-address ‘部署minio的ip:希望通过什么端口打开minio console页面’ <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> export MINIO_ACCESS_KEY=username</span><br><span class="line"><span class="meta">#</span><span class="bash">指定登录密码</span></span><br><span class="line"> export MINIO_SECRET_KEY=password</span><br><span class="line"> nohup ./minio server --address &#x27;0.0.0.0:9000&#x27; --console-address &#x27;0.0.0.0:9001&#x27; ./miniodata &gt; ./miniodata/minio.log 2&gt;&amp;1&amp;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="4-SpringBoot-集成minIO"><a href="#4-SpringBoot-集成minIO" class="headerlink" title="4. SpringBoot 集成minIO"></a>4. SpringBoot 集成minIO</h2><p>项目源代码地址：<a href="https://gitee.com/xiaoyuge520/minio-demo%EF%BC%8C">https://gitee.com/xiaoyuge520/minio-demo，</a> 下面是应用主要功能截图展示：<br><img src="/linux-minio/index/14.png" alt="img14.png"><br>在minIO的控制台界面选择对应的bucket可以查看到刚提交的内容<br><img src="/linux-minio/index/15.png" alt="img14.png"></p>
<p>同理，删除也是一样！！！<br><img src="/linux-minio/index/16.png" alt="img14.png"></p>
]]></content>
      <categories>
        <category>13 开源组件</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux系统下查找文件命令总结</title>
    <url>/linux-search-file/index.html</url>
    <content><![CDATA[<h3 id="1-which查命令绝对路径"><a href="#1-which查命令绝对路径" class="headerlink" title="1. which查命令绝对路径"></a>1. which查命令绝对路径</h3><p><strong>which</strong> 从环境变量PATH中定位/返回与指定名字相匹配的可执行文件所在的路径<br><img src="/linux-search-file/index/1.png" alt="which命令"></p>
<p><strong>原理</strong>：执行<strong>which</strong>命令时，which会在当前环境变量PATH中依次寻找能够匹配所找命令名字的可执行文件名，不加 - a选项，返回第一个匹配的可执行文件路径，<br>否则依次返回满足条件的所有可执行文件的路径名</p>
<p><strong>适用场合：</strong> 一般用于查找命令/可执行文件所在的路径。有时候可能在多个路径下存在相同的命令，该命令可用于查找当前所执行的命令到底是哪一个位置处的命令。</p>
<h3 id="2-whereis查找特定文件"><a href="#2-whereis查找特定文件" class="headerlink" title="2. whereis查找特定文件"></a>2. whereis查找特定文件</h3><p><strong>whereis</strong> 命令用来定位指令的二进制程序、源代码文件和man手册页等相关文件的路径， 该命令只能用于程序名的搜索</p>
<ol>
<li>- b   #定位可执行文件</li>
<li>- m   #定位帮助文件</li>
<li>- s   定位源代码文件 </li>
<li>- u   搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件</li>
<li>- B   指定搜索可执行文件的路径。</li>
<li>- M   指定搜索帮助文件的路径。</li>
<li>- S   指定搜索源代码文件的路径<br><img src="/linux-search-file/index/2.png" alt="whereis命令"></li>
</ol>
<p><strong>原理：</strong> whereis命令首先会去掉filename中的前缀空格和以.开头的任何字符，然后再在数据库（var/lib/slocate/slocate.db）中查找与上述处理后的filename相匹配的二进制文件、源文件和帮助手册文件,使用之前可以使用<strong>updatedb</strong>命令手动更新数据库。</p>
<p><strong>适用场合：</strong> 二进制文件、源文件和帮助手册文件路径的查找。<br>和<strong>find</strong> 相比，Whereis 查找的速度非常快，这是因为Linux系统会将系统内的所有文件都记录在一个数据库文件中，当使用<strong>whereis (或者locate)</strong><br>会从数据库查找数据，而不是像find命令那样，通过遍历硬盘来查找文件，效率更高！</p>
<h3 id="3-locate缓存查找文件"><a href="#3-locate缓存查找文件" class="headerlink" title="3. locate缓存查找文件"></a>3. locate缓存查找文件</h3><p><strong>locate</strong> 搜素一个数据库（/var/lib/mlocate/mlocate.db）,这个数据库中国呢包含本地所有文件信息，Linux系统自动创建这个数据库，并且每天更新依次，所以使用locate命令查不到最新变动过的文件，为了避免这种情况，可以在使用locate之前，先使用updatedb命令，手动更新数据库，updatedb命令会根据/etc/updatedb.conf来更新文件。</p>
<p><strong>原理：</strong> 默认情况下(当filename中不包含通配符*)，locate会给出所有与 * filename*相匹配的文件的路径。<br><strong>适用场合：</strong> 没有文件类型性质的模糊查找（你只记得某个文件的部分名称）。<br><img src="/linux-search-file/index/3.png" alt="locate命令"><br><img src="/linux-search-file/index/4.png" alt="locate命令"><br><img src="/linux-search-file/index/5.png" alt="locate命令"><br><img src="/linux-search-file/index/6.png" alt="locate命令"></p>
<h3 id="4-find-遍历文件查找"><a href="#4-find-遍历文件查找" class="headerlink" title="4. find 遍历文件查找"></a>4. find 遍历文件查找</h3><p>语法：</p>
<ul>
<li><p>-name                    #按文件名查找(find /etc/ -name “??????” 查找/etc目录下，开头是6个任意字符的文件， *.log以log结尾的文件；”[1-3].txt”指定范围以txt结尾的文件（包括 1.txt,2.txt,3.txt）)</p>
</li>
<li><p>-size                    #按大小查找（find /etc/ -size +1M 查询大于1M的文件(find /etc/ -size -10K)，注意：如果没有+ -， 则是精确到1M,加上+ - 表示范围； find /etc/ -size +1k -a -size -10k 查找1-10K的文件）</p>
</li>
<li><p>-user                    #按属主查找（find /opt/ -user xiaoyuge 查找/opt属于xiaoyuge用户的文件；注意，系统要存在该用户，否则会报错）</p>
</li>
<li><p>-perm                    #按权限查找（find /opt/ -perm 0644 查找/opt目录权限是644文件）</p>
</li>
<li><p>-type                    #按类型查找（find /usr/bin/ -type f 查找/usr/bin下类型是二进制文件）</p>
</li>
<li><p>-time                    #按天查找</p>
<ul>
<li><p>atime n                    #将n*24小时内访问过的文件列出(access)</p>
</li>
<li><p>ctime n                    #将n*24小时内状态发生改变的文件列出（change） find /etc/ -ctime +7 在7天之前,属性被修改过的文件</p>
</li>
<li><p>mtime n                    #将n*24小时内被修改过的文件列出(modify)</p>
</li>
<li><p>newer file                 #把比file还要心的文件列出</p>
</li>
<li><p>amin n                     #将n 分钟内访问过的文件列出(access)   find /etc/ -mmin -120 在120分钟内，内容被修改的文件</p>
</li>
<li><p>cmin n                     #将n 分钟内状态发生改变的文件列出（change）</p>
</li>
<li><p>mmin n                     #将n 分钟内被修改过的文件列出(modify)</p>
</li>
</ul>
</li>
<li><p>-inum                    #按i节点查找 有一些文件的硬链接数量很多，有相同的i节点，查找其中一个文件的i节点号，一次性删除。</p>
</li>
<li><p>-exec                    #查找后执行命令</p>
</li>
</ul>
<p><strong>原理：</strong> 遍历当前工作目录及其子目录，find命令是在硬盘上遍历查找，非常耗硬盘资源，查找效率相比whereis和locate较低。<br><strong>适用场合：</strong> 能用which、whereis和locate的时候尽量不要用find.</p>
<h3 id="5-4种命令对比"><a href="#5-4种命令对比" class="headerlink" title="5. 4种命令对比"></a>5. 4种命令对比</h3><p><img src="/linux-search-file/index/7.png" alt="对比"></p>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式消息中间件设计</title>
    <url>/message-oriented-middleware/index.html</url>
    <content><![CDATA[<h2 id="1-消息中间件概述"><a href="#1-消息中间件概述" class="headerlink" title="1. 消息中间件概述"></a>1. 消息中间件概述</h2><ol>
<li><p>什么是分布式消息中间件</p>
<p> 利用高效可靠的消息传递机制进行平台无关的数据交流；<br> 并基于数据通信来进行分布式系统的集成；<br> 通过提供消息和消息排队模型，它可以在分布式环境下扩展进城间的通信。</p>
</li>
<li><p>消息中间件的应用场景</p>
<p> 跨系统数据传递、高并发流量削峰、数据异步处理……</p>
</li>
<li><p>常用的消息中间件</p>
<p> ActiveMQ(太老)、RabbitMQ、Kafka、 RocketMQ</p>
</li>
<li><p>本质</p>
<p> 一种具备接受请求、保存数据、发送数据等功能的网络应用。和一般的网络应用程序的区别是它主要负责数据的接收和传递，所以性能一般高于普通程序</p>
</li>
<li><p>5大核心组成</p>
<ul>
<li>协议</li>
<li>持久性机制</li>
<li>消息分布机制</li>
<li>高可用设计</li>
<li>高可靠设计</li>
</ul>
</li>
</ol>
<h3 id="1-1-协议"><a href="#1-1-协议" class="headerlink" title="1.1 协议"></a>1.1 协议</h3><p>协议是计算机之间通信时共同遵守的一组约定，确保计算机之间能够相互交流；是对数据格式和计算机之间交换数据时必须遵守的规则的正式描述</p>
<p>三大要素：</p>
<ul>
<li>语法：即数据和控制信息的结构或格式</li>
<li>语义：即需要发出何种控制信息，完成何种动作以及作出何种响应</li>
<li>时序：即时间实现顺序的详细说明</li>
</ul>
<p>消息中间件常用协议：openWire、AMQP、MQTT（物流网，快，不能持久化）、Kafka、OpenMessage等；<br>不能用http协议的原因是：http每次请求必须要有响应，性能不高；</p>
<h4 id="1-1-AMQP协议"><a href="#1-1-AMQP协议" class="headerlink" title="1.1 AMQP协议"></a>1.1 AMQP协议</h4><p>AMQP（Advanced Message Queuing Protocol）是高级消息队列协议；04年JPMorgan Chase(摩根大通集团)联合其他公司共同设计</p>
<ul>
<li>特性：事物支持、持久化支持，出生金融行业，在可靠性消息处理上具备天然的优势</li>
<li>优秀产品 RabbitMQ、 Apache ACTIVEMQ</li>
</ul>
<h4 id="1-2-MQTT协议"><a href="#1-2-MQTT协议" class="headerlink" title="1.2 MQTT协议"></a>1.2 MQTT协议</h4><p>MQTT（Message Queuing Telemetry Transport）消息队列遥测传输<br>是IBM开发的一个即时通讯协议，物联网系统架构中的重要组成部分；</p>
<ul>
<li>特性：轻量、结构简单、传输快、没有事务支持、没有持久化相关设计</li>
<li>应用场景：适用于计算能力有限、低宽带、网络不稳定的场景</li>
<li>优秀产品：RabbitMQ、 Apache ACTIVEMQ</li>
</ul>
<h4 id="1-3-Open-Message协议"><a href="#1-3-Open-Message协议" class="headerlink" title="1.3 Open Message协议"></a>1.3 Open Message协议</h4><p>OpenMessaging 是近几年有阿里发起，与雅虎、滴滴出行、Streamlio等公司共同参数传里的分布式消息中间件、流处理领域的开发应用标准。<br>是国内首个在全球范围内发起的分布式消息领域国际标准</p>
<ul>
<li>特性：结构简单、解析快、有事务设计、有持久化设计</li>
<li>优秀产品：Apache RocketMQ</li>
</ul>
<h4 id="1-4-Kafka协议"><a href="#1-4-Kafka协议" class="headerlink" title="1.4 Kafka协议"></a>1.4 Kafka协议</h4><p>Kafka协议是基于TCP的二进制协议。消息内部是通过长度来分割，由一些基本数据类型组成</p>
<ul>
<li>特性：结构简单、解析快、无事务设计、有持久化设计</li>
<li>优秀产品：Apache Kafka</li>
</ul>
<h4 id="1-55-OpenWire协议"><a href="#1-55-OpenWire协议" class="headerlink" title="1.55 OpenWire协议"></a>1.55 OpenWire协议</h4><p>开放链接，ActiveMQ自定义的一种协议，ActiveMQ默认链接方式，它提供一种高效率的二进制格式来使消息高速传输</p>
<ul>
<li>特性：结构简单、解析快、无事务设计、有持久化设计</li>
<li>优秀产品：Apache ActiveMQ</li>
</ul>
<h3 id="1-2-持久化"><a href="#1-2-持久化" class="headerlink" title="1.2 持久化"></a>1.2 持久化</h3><p>简单来说就是将数据存入磁盘，而不是存在内存中岁服务重启而消失，使数据能够永久保存叫做持久化</p>
<table>
<thead>
<tr>
<th></th>
<th align="center">ActiveMQ</th>
<th align="center">RabbitMQ</th>
<th align="center">Kafka</th>
<th align="center">RocketMQ</th>
</tr>
</thead>
<tbody><tr>
<td>文件系统</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td>数据库</td>
<td align="center">支持</td>
<td align="center">-</td>
<td align="center">-</td>
<td align="center">-</td>
</tr>
<tr>
<td></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="1-3-消息分发"><a href="#1-3-消息分发" class="headerlink" title="1.3 消息分发"></a>1.3 消息分发</h3><table>
<thead>
<tr>
<th></th>
<th align="center">ActiveMQ</th>
<th align="center">RabbitMQ</th>
<th align="center">Kafka</th>
<th align="center">RocketMQ</th>
</tr>
</thead>
<tbody><tr>
<td>发布订阅</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="center">支持</td>
</tr>
<tr>
<td>轮询分发</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="center">-</td>
</tr>
<tr>
<td>公平分发</td>
<td align="center">-</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="center">-</td>
</tr>
<tr>
<td>重发</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="center">-</td>
<td align="center">支持</td>
</tr>
<tr>
<td>消息拉取</td>
<td align="center">-</td>
<td align="center">支持</td>
<td align="center">支持</td>
<td align="center">支持</td>
</tr>
</tbody></table>
<h3 id="1-4-高可用"><a href="#1-4-高可用" class="headerlink" title="1.4 高可用"></a>1.4 高可用</h3><p>高可用性是指产品在规定的条件和规定的时刻或时间区间内处于可执行规定功能状态的能力；<br>当业务量大时，一台消息中间件服务器可能无法满足需求，所以需要消息中间件能够集群部署，来达到高可用的目的。</p>
<h4 id="1-4-1-Master-Slave主从共享数据的部署方式"><a href="#1-4-1-Master-Slave主从共享数据的部署方式" class="headerlink" title="1.4.1 Master-Slave主从共享数据的部署方式"></a>1.4.1 Master-Slave主从共享数据的部署方式</h4><p>当Master收到客户端的消息后，放到共享的文件系统/数据库； 客户端访问的是Master节点，Slave节点只做备份；<br><img src="/message-oriented-middleware/index/2.png" alt="Master-Slave主从共享数据的部署方式"></p>
<h4 id="1-4-2-Master-Slave主从同步部署方式"><a href="#1-4-2-Master-Slave主从同步部署方式" class="headerlink" title="1.4.2 Master-Slave主从同步部署方式"></a>1.4.2 Master-Slave主从同步部署方式</h4><p>当Master收到客户端的消息后，发给其他broker同步。<br><img src="/message-oriented-middleware/index/3.png" alt="Master-Slave主从同步部署方式"></p>
<h4 id="1-4-3-Broker-Cluster多主集群同步部署方式"><a href="#1-4-3-Broker-Cluster多主集群同步部署方式" class="headerlink" title="1.4.3 Broker-Cluster多主集群同步部署方式"></a>1.4.3 Broker-Cluster多主集群同步部署方式</h4><p>一部分消息放在broker1 ,一部分放在broker2<br><img src="/message-oriented-middleware/index/4.png" alt="Broker-Cluster多主集群同步部署方式"></p>
<h4 id="1-4-4-Broker-Cluster多主集群转发部署方式"><a href="#1-4-4-Broker-Cluster多主集群转发部署方式" class="headerlink" title="1.4.4 Broker-Cluster多主集群转发部署方式"></a>1.4.4 Broker-Cluster多主集群转发部署方式</h4><p>转发数据或转发请求<br><img src="/message-oriented-middleware/index/5.png" alt="Broker-Cluster多主集群转发部署方式"></p>
<h4 id="1-4-5-Master-slave与Broker-Cluster结合"><a href="#1-4-5-Master-slave与Broker-Cluster结合" class="headerlink" title="1.4.5 Master-slave与Broker-Cluster结合"></a>1.4.5 Master-slave与Broker-Cluster结合</h4><p><img src="/message-oriented-middleware/index/6.png" alt="Master-slave与Broker-Cluster结合"></p>
<h3 id="1-5-高可靠"><a href="#1-5-高可靠" class="headerlink" title="1.5 高可靠"></a>1.5 高可靠</h3><p>高可靠性是指系统可以无故障地持续运行。比如一个系统从来不崩溃、报错，或者崩溃、报错的几率较低，那就是高可靠。<br>保证消息中间件的高可靠行，可以从一下几方面考虑</p>
<ul>
<li>消息传输可靠： 通过协议来保证系统件数据解析的正确性</li>
<li>消息存储可靠： 通过持久化来保证消息存储可靠性</li>
</ul>
]]></content>
      <categories>
        <category>05 分布式</category>
      </categories>
      <tags>
        <tag>消息中间件</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Springboot导出数据库表结构文档</title>
    <url>/export-database-file/index.html</url>
    <content><![CDATA[<p>在项目中经常会需要查询数据库所有的表以及表字段，然后可能还需要导出到Excel中，然后自己写了一个工具类，目前支持sqlserver、mysql、oracle、Postgre；如果有问题请留言！！！</p>
<h3 id="1-引入依赖包"><a href="#1-引入依赖包" class="headerlink" title="1. 引入依赖包"></a>1. 引入依赖包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 请尽量用最新版本 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoyuge5201<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>datasource-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-编写Java代码"><a href="#2-编写Java代码" class="headerlink" title="2. 编写Java代码"></a>2. 编写Java代码</h3><ol>
<li>通过MyDataSourceProperties类所有本项目的数据库连接信息，导出当前连接库的数据库结构</li>
</ol>
<ul>
<li>数据库配置 yml  <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/dbname?serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">xiaoyuge</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line">    <span class="attr">database:</span> <span class="string">dbname</span>    <span class="comment">##需要配置数据库名称</span></span><br></pre></td></tr></table></figure></li>
<li>导出方法  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.github.xiaoyuge5201.config.MyDataSourceProperties;</span><br><span class="line"><span class="keyword">import</span> com.github.xiaoyuge5201.util.ExportDatabaseDocument;</span><br><span class="line"><span class="keyword">import</span> org.apache.catalina.servlet4preview.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/export&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    MyDataSourceProperties properties;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注意：需要在yaml /yml 配置文件中配置spring.datasource.database 属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        ExportDatabaseDocument.export(response, request, properties); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="2">
<li>自定义导出某个数据库的表结构信息 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/index&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">index</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//手动传参</span></span><br><span class="line">    ExportDatabaseDocument.export(response, request, DatabaseDriverEnum.MYSQL.getDriver(), <span class="string">&quot;127.0.0.1:3306&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;xiaoyuge&quot;</span>, <span class="string">&quot;dbname&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-导出文档"><a href="#3-导出文档" class="headerlink" title="3. 导出文档"></a>3. 导出文档</h3><p>执行请求：localhost:8080/export/index 即可；导出的内容如下：<br><img src="/export-database-file/index/1.png" alt="导出的数据库文档"></p>
<p>包括数据库表名、描述以及各个字段的类型、长度、默认值、描述等。。。；</p>
<p>另外sheet的名称为表名(表中文名)+ 4位随机值，受限于excel的sheet；</p>
<h3 id="4-数据库操作类-DataSourceClient"><a href="#4-数据库操作类-DataSourceClient" class="headerlink" title="4. 数据库操作类 DataSourceClient"></a>4. 数据库操作类 DataSourceClient</h3><ol>
<li>DataSourceClient类中根据MyDataSourceProperties操作数据库 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 查询所有的表结构信息</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span> 表结构列表</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findAllTables</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QuerySqlUtil.findAllTables(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查詢數據庫表的字段信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> table 数据表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 表字段列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ColumnEntity&gt; <span class="title">queryTableFieldsEntity</span><span class="params">(String table)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QuerySqlUtil.queryTableFieldsToColumnEntity(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查詢數據庫表的字段信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> table 数据表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 表字段列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">queryTableFields</span><span class="params">(String table)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QuerySqlUtil.queryTableFields(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase(), table);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询对应库下所有字段 信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;ColumnEntity&gt; <span class="title">listColumnsByDatasourceParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QuerySqlUtil.listColumnsByDatasourceParams(properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分页查询数据表数据</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> table  数据表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageNo 页码</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> limit  页容量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> columns 字段列表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception 异常信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> JSONArray <span class="title">queryPageData</span><span class="params">(String table, List&lt;String&gt; columns, Integer pageNo, Integer limit)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> QuerySqlUtil.queryPageData(properties.getDriverClassName(), properties.getDatabase(), table, properties.getUrl(), properties.getUsername(), properties.getPassword(), columns, pageNo, limit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 导出数据库设计文档</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> response 返回对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request  请求对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportDatabaseDocument</span><span class="params">(HttpServletResponse response, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    ExportDatabaseDocument.export(response, request, properties.getDriverClassName(), properties.getUrl(), properties.getUsername(), properties.getPassword(), properties.getDatabase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-数据库驱动枚举类-DatabaseDriverEnum"><a href="#5-数据库驱动枚举类-DatabaseDriverEnum" class="headerlink" title="5. 数据库驱动枚举类 DatabaseDriverEnum"></a>5. 数据库驱动枚举类 DatabaseDriverEnum</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数驱动的常量</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yugb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">DatabaseDriverEnum</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * mysql数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    MYSQL(<span class="number">1</span>, <span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>, <span class="string">&quot;mysql数据库&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Sql Server数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SQL_SERVER(<span class="number">2</span>, <span class="string">&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;</span>, <span class="string">&quot;Sql Server数据库&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * oracle数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ORACLE(<span class="number">3</span>, <span class="string">&quot;oracle.jdbc.driver.OracleDriver&quot;</span>, <span class="string">&quot;oracle数据库&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * postgre sql数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    POSTGRE_SQL(<span class="number">4</span>, <span class="string">&quot;org.postgresql.Driver&quot;</span>, <span class="string">&quot;postgre sql数据库&quot;</span>),</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 达梦数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DM(<span class="number">5</span>, <span class="string">&quot;dm.jdbc.driver.DmDriver&quot;</span>, <span class="string">&quot;达梦数据库&quot;</span>);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库驱动类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Integer type;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库驱动连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String driver;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriver</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> driver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DatabaseDriverEnum(Integer type, String driver, String name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">        <span class="keyword">this</span>.driver = driver;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据数据库类型获取数据库驱动</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 数据库类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 驱动</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getValue</span><span class="params">(Integer type)</span> </span>&#123;</span><br><span class="line">        DatabaseDriverEnum[] enums = values();</span><br><span class="line">        <span class="keyword">for</span> (DatabaseDriverEnum driverEnum : enums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (driverEnum.type.equals(type)) &#123;</span><br><span class="line">                <span class="keyword">return</span> driverEnum.getDriver();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>java8的lambda表达式语法</title>
    <url>/lambda/index.html</url>
    <content><![CDATA[<p>记录一下用到的一些java8的lambda表达式语法</p>
<h3 id="1-list集合根据某个字段分组后求多个字段的和"><a href="#1-list集合根据某个字段分组后求多个字段的和" class="headerlink" title="1 list集合根据某个字段分组后求多个字段的和"></a>1 list集合根据某个字段分组后求多个字段的和</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> List&lt;SafeSystemVO&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"><span class="comment">//....省略添加元素的代码</span></span><br><span class="line"><span class="comment">//分组字段 driver_id</span></span><br><span class="line">list.stream().collect(Collectors.groupingBy(SafeSystemVO::getDriver_id)).values().stream().map(d -&gt; &#123;</span><br><span class="line">    SafeSystemVO vo = d.get(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//求和1</span></span><br><span class="line">    vo.setAg_total(d.stream().map(s -&gt; BigDecimal.valueOf(s.getAg_total())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    </span><br><span class="line">    <span class="comment">// 求和2</span></span><br><span class="line">    vo.setScore(d.stream().map(s -&gt; BigDecimal.valueOf(s.getScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  </span><br><span class="line">    vo.setLkj_score(d.stream().map(s -&gt; BigDecimal.valueOf(s.getLkj_score())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());  </span><br><span class="line">    vo.setTotalScore(d.stream().map(s -&gt; BigDecimal.valueOf(s.getTotalScore())).reduce(BigDecimal.ZERO, BigDecimal::add).doubleValue());    </span><br><span class="line">    <span class="keyword">return</span> vo;</span><br><span class="line">&#125;).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="2-list-根据某个字段分组后求单个字段的平均值，并按照分组字段排序"><a href="#2-list-根据某个字段分组后求单个字段的平均值，并按照分组字段排序" class="headerlink" title="2. list 根据某个字段分组后求单个字段的平均值，并按照分组字段排序"></a>2. list 根据某个字段分组后求单个字段的平均值，并按照分组字段排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;SafeSystemVO&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"><span class="comment">//....省略添加元素的代码</span></span><br><span class="line">Map&lt;String, Double&gt; monthAvg = list1.stream().collect(Collectors.groupingBy(SafeSystemVO::getMonth, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));</span><br><span class="line"><span class="comment">//  根据Map 对象的key排序</span></span><br><span class="line"><span class="comment">// 我的分组字段是日期，就用了下面的</span></span><br><span class="line">monthAvg.entrySet().stream().sorted((o1, o2) -&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Date d1 = DateUtils.convertStringToDate(o1.getKey(), DateUtils.FM2);</span><br><span class="line">        Date d2 = DateUtils.convertStringToDate(o2.getKey(), DateUtils.FM2);</span><br><span class="line">        <span class="keyword">assert</span> d1 != <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> d1.compareTo(d2);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue, (oldVal, newVal) -&gt; oldVal, LinkedHashMap::<span class="keyword">new</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据Map 对象的value排序</span></span><br><span class="line"><span class="comment">//monthResult = workShopAvg.entrySet().stream().sorted((p1, p2) -&gt; p2.getValue().compareTo(p1.getValue())).collect(Collectors.toList());</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//方法一：</span></span><br><span class="line"><span class="comment">//list1.sort((o1, o2) -&gt; o1.getAge().compareTo(o2.getTotalScore())); //正序</span></span><br><span class="line"><span class="comment">//list1.sort((o1, o2) -&gt; o2.getAge().compareTo(o1.getTotalScore())); //倒序</span></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="comment">//list1.sort(Comparator.comparing(Person::getTotalScore)); // 正序</span></span><br><span class="line"><span class="comment">//list1.sort(Comparator.comparing(Person::getTotalScore).reversed()); // 倒序</span></span><br></pre></td></tr></table></figure>

<h3 id="3-list-根据字段分组求和后取-前-后10名"><a href="#3-list-根据字段分组求和后取-前-后10名" class="headerlink" title="3. list 根据字段分组求和后取 前/后10名"></a>3. list 根据字段分组求和后取 前/后10名</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//list对象接上面的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据driver_id分组，求平均值</span></span><br><span class="line">Map&lt;String, Double&gt; driverScores = list3.stream()</span><br><span class="line">        .collect(Collectors.groupingBy(SafeSystemVO::getDriver_id, Collectors.averagingDouble(SafeSystemVO::getTotalScore)));</span><br><span class="line"></span><br><span class="line"><span class="comment">//排序后获取后10 名， 前10名的话修改sorted逻辑为：sorted((p1, p2) -&gt; p2.getValue().compareTo(p1.getValue()))</span></span><br><span class="line">List&lt;Map.Entry&lt;String, Double&gt;&gt; driverScoresTop10 = driverScores.entrySet().stream().sorted((p1, p2) -&gt; p1.getValue().compareTo(p2.getValue())).limit(<span class="number">10</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>


<h3 id="4-其他"><a href="#4-其他" class="headerlink" title="4. 其他"></a>4. 其他</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Id, name , age</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="number">1</span>,<span class="string">&quot;麻子&quot;</span>, <span class="number">31</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="number">2</span>,<span class="string">&quot;李四&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>, <span class="number">26</span>);</span><br><span class="line">        Person p4 = <span class="keyword">new</span> Person(<span class="number">3</span>,<span class="string">&quot;王五&quot;</span>, <span class="number">26</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;Person&gt; personList = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        personList.add(p1);</span><br><span class="line">        personList.add(p2);</span><br><span class="line">        personList.add(p3);</span><br><span class="line">        personList.add(p4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//java8遍历</span></span><br><span class="line">        personList.forEach(p -&gt; System.out.println(p.getAge()));</span><br><span class="line">        <span class="comment">//按照person的 age进行排序</span></span><br><span class="line">        <span class="comment">//方法一</span></span><br><span class="line">        personList.sort((o1, o2) -&gt; o1.getAge().compareTo(o2.getAge())); <span class="comment">//正序</span></span><br><span class="line">        personList.sort((o1, o2) -&gt; o2.getAge().compareTo(o1.getAge())); <span class="comment">//倒序</span></span><br><span class="line">        <span class="comment">//方法二</span></span><br><span class="line">        personList.sort(Comparator.comparing(Person::getAge)); <span class="comment">// 正序</span></span><br><span class="line">        personList.sort(Comparator.comparing(Person::getAge).reversed()); <span class="comment">// 倒序</span></span><br><span class="line">        <span class="comment">//多个字段排序</span></span><br><span class="line">        personList.sort(Comparator.comparing(User::getId).thenComparing(Person::getAge));</span><br><span class="line">        <span class="comment">//注：若选择排序字段为null值，正序可personList.sort(Comparator.comparing(Person::getAge,Comparator.nullsFirst(Comparator.naturalOrder())))</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取年龄最大的Person</span></span><br><span class="line">        Person maxAgePerson = personList.stream().max(Comparator.comparing(Person::getAge)).get();</span><br><span class="line">        System.out.println(maxAgePerson.getAge());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========================================&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取年龄最小的Person</span></span><br><span class="line">        Person minAgePerson = personList.stream().min(Comparator.comparing(Person::getAge)).get();</span><br><span class="line">        System.out.println(minAgePerson.getAge());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过滤出年龄是20的person，想过滤出什么条件的均可以</span></span><br><span class="line">        List&lt;Person&gt; personList1 = personList.stream().filter(person -&gt; person.getAge() == <span class="number">20</span>).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过滤-- 统计出年龄等于20的个数</span></span><br><span class="line">        <span class="keyword">long</span> count = personList.stream().filter(person -&gt; person.getAge() == <span class="number">20</span>).count();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//过滤出年龄大约20的人</span></span><br><span class="line">        List&lt;Person&gt; personList2 = personList.stream().filter(t -&gt; t.getAge().equals(<span class="number">20</span>)).collect(Collectors.toList());</span><br><span class="line">        <span class="comment">//得到年龄的平均值</span></span><br><span class="line">        <span class="keyword">double</span> asDouble = personList.stream().mapToInt(person -&gt; person.getAge()).average().getAsDouble();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到年龄的求和--基本类型</span></span><br><span class="line">        <span class="keyword">int</span> sum = personList.stream().mapToInt(person -&gt; person.getAge()).sum();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//得到年龄的求和--包装类型,其中，若bigDecimal对象为null，可filter()过滤掉空指针.</span></span><br><span class="line">        BigDecimal totalAge = personList.stream().map(User::getAge).reduce(BigDecimal.ZERO, BigDecimal::add);</span><br><span class="line"></span><br><span class="line">        （其中，若bigDecimal对象为<span class="keyword">null</span>，可filter()过滤掉空指针.）</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//去重</span></span><br><span class="line">        List&lt;Person&gt; personList3 = personList.stream().distinct().collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//list转map.</span></span><br><span class="line">        <span class="comment">//（其中，若集合对象key有重，可根据(k1,k2)-&gt;k1设置&lt;保留k1，舍弃k2&gt;.）</span></span><br><span class="line">        Map&lt;Long, Person&gt; personMap = personList.stream().collect(Collectors.toMap(User::getId, t -&gt; t,(k1,k2)-&gt;k1));</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>认识UML之类图</title>
    <url>/uml/index.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="4a7b67bba32e11c0932e83618769bc95f485247a62386119711a167f0669eb1c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好，这里需要密码。</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>11 其他工具</category>
      </categories>
      <tags>
        <tag>UML</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装JDK以及配置</title>
    <url>/jdk-install/index.html</url>
    <content><![CDATA[<h3 id="1-安装包安装"><a href="#1-安装包安装" class="headerlink" title="1. 安装包安装"></a>1. 安装包安装</h3><ol>
<li><p>下载jdk安装包（<a href="https://www.oracle.com/cn/java/technologies/javase/downloads/#java8%EF%BC%89">https://www.oracle.com/cn/java/technologies/javase/downloads/#java8）</a><br> <img src="/jdk-install/index/1.png"></p>
</li>
<li><p>上传并解压</p>
</li>
</ol>
<ul>
<li>在/usr/local/目录下新建文件夹：java</li>
<li>上传介质到/usr/local/java/</li>
<li>解压：tar -zxvf jdk-8u311-linux-x64.tar.gz</li>
</ul>
<ol start="3">
<li>配置环境变量 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑配置文件</span></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在末尾追加</span></span><br><span class="line">export JAVA_HOME=/usr/local/java/jdk1.8.0_311</span><br><span class="line">export JRE_HOME=/usr/local/java/jdk1.8.0_311/jre</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使配置文件生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></li>
<li>测试 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试版本号</span></span><br><span class="line">java -version</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回</span></span><br><span class="line">java version &quot;1.8.0_311&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_311-b10)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.291-b10, mixed mode)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询JAVA_HOME</span></span><br><span class="line">echo $JAVA_HOME</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回</span></span><br><span class="line">/usr/local/java/jdk1.8.0_311</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="2-yum源安装"><a href="#2-yum源安装" class="headerlink" title="2. yum源安装"></a>2. yum源安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 检查是否已经存在java相关命令</span></span><br><span class="line">rpm -qa|grep java</span><br><span class="line">rpm -qa|grep jdk</span><br><span class="line">rpm -qa|grep gcj</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果需要卸载</span></span><br><span class="line">rpm -qa | grep java | xargs rpm -e --nodeps</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 检索Java1.8源列表</span></span><br><span class="line">yum list java-1.8*</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装Java1.8</span></span><br><span class="line">yum install java-1.8.0-openjdk* -y</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询JAVA_HOME</span></span><br><span class="line">which java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回</span></span><br><span class="line">/usr/bin/java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls -l命令</span></span><br><span class="line">ls -l /usr/bin/java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回</span></span><br><span class="line">lrwxrwxrwx 1 root root 22 Nov 13 14:37 /usr/bin/java -&gt; /etc/alternatives/java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls -l命令</span></span><br><span class="line">ls -l /etc/alternatives/java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回</span></span><br><span class="line">lrwxrwxrwx 1 root root 73 Nov 13 14:37 /etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64/jre/bin/java</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 则JAVA_HOME路径为：/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.272.b10-1.el7_9.x86_64</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>jdk</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装mysql8</title>
    <url>/mysql-install/index.html</url>
    <content><![CDATA[<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><ul>
<li>下载地址：<a href="https://downloads.mysql.com/archives/community/">https://downloads.mysql.com/archives/community/</a></li>
<li>百度网盘链接: <a href="https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg">https://pan.baidu.com/s/1BkOuYlz2Ef7KRe9gikDUCg</a>  密码: 0l15</li>
</ul>
<h3 id="2-卸载mariadb"><a href="#2-卸载mariadb" class="headerlink" title="2.卸载mariadb"></a>2.卸载mariadb</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看mariadb 的安装包</span></span><br><span class="line">rpm -qa | grep mariadb</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">卸载 mariadb</span></span><br><span class="line">rpm -e mariadb-libs-5.5.68-1.el7.x86_64 --nodeps</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">卸载验证</span></span><br><span class="line">rpm -qa | grep mariadb</span><br></pre></td></tr></table></figure>

<h3 id="3-安装"><a href="#3-安装" class="headerlink" title="3.安装"></a>3.安装</h3><ol>
<li><p>解压安装包</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"> 进入下载目录</span></span><br><span class="line"> cd /usr/local/src/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">解压， 如果是.tar则用 tar -zxvf解压， 我下载的是.tar.xz包，使用的是tar -xvJf</span></span><br><span class="line"> tar -xvJf mysql-8.0.28-linux-glibc2.17-x86_64-minimal.tar.xz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 移动解压后的文件夹至/usr/<span class="built_in">local</span></span></span><br><span class="line"> mv /usr/local/src/mysql-8.0.28-linux-glibc2.17-x86_64-minimal /usr/local/</span><br><span class="line"> cd /usr/local/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> 重命名</span></span><br><span class="line"> mv ./mysql-8.0.28-linux-glibc2.17-x86_64-minimal mysql8</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"> #</span><span class="bash"> 创建文件夹data,存储文件;</span></span><br><span class="line"> cd /usr/local/mysql8/</span><br><span class="line"> mkdir ./data</span><br></pre></td></tr></table></figure></li>
<li><p>创建用户以及用户组</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用户组</span></span><br><span class="line">groupadd mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 用户 （用户名/密码）</span></span><br><span class="line">useradd -g mysql mysql</span><br></pre></td></tr></table></figure></li>
<li><p>授权</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R mysql.mysql /usr/local/mysql8/ </span><br><span class="line"><span class="meta">#</span><span class="bash">或</span></span><br><span class="line">chown -R mysql .</span><br><span class="line">chgrp -R mysql .</span><br></pre></td></tr></table></figure></li>
<li><p>初始化数据库</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前所在目录</span></span><br><span class="line">pwd # 若显示/usr/local/mysql-8.0,请继续执行，否则请先进入此目录/usr/local/mysql-8.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化 注意查看是否存在相关目录,若不存在,请新建</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 亲测</span></span><br><span class="line">./bin/mysqld --user=mysql --basedir=/usr/local/mysql8/ --datadir=/usr/local/mysql8/data/ --initialize </span><br><span class="line"><span class="meta">#</span><span class="bash">或</span></span><br><span class="line">./bin/mysql --user=mysql --basedir=/usr/local/mysql8/ --datadir=/usr/local/mysql8/data/ --initialize ;</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span><span class="bash">如果出现错误：./bin/mysqld: error <span class="keyword">while</span> loading shared libraries: libaio.so.1: cannot open shared object file: No such file or directory</span></span><br><span class="line">yum install -y libaio  #安装后在初始化就OK了</span><br></pre></td></tr></table></figure>
<p><img src="/mysql-install/index/3.png"><br> 注意：后面白色高亮选中的是初始密码！！！！</p>
</li>
<li><p>配置my.cnf</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/local/mysql8/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>
<p>在配置中键入如下内容：</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"> <span class="attr">[mysqld]</span></span><br><span class="line"><span class="attr">port</span>=<span class="string">3306</span></span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line"><span class="attr">basedir</span>=<span class="string">/usr/local/mysql8</span></span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line"><span class="attr">datadir</span>=<span class="string">/usr/local/mysql8/data</span></span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line"><span class="attr">max_connections</span>=<span class="string">1000</span></span><br><span class="line"><span class="comment"># 允许连接失败的次数。这是为了防止有人从该主机试图攻击数据库系统</span></span><br><span class="line"><span class="attr">max_connect_errors</span>=<span class="string">100</span></span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为UTF8</span></span><br><span class="line"><span class="meta">character-set-server</span>=<span class="string">utf8mb4</span></span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="meta">default-storage-engine</span>=<span class="string">INNODB</span></span><br><span class="line"><span class="comment"># 默认使用“mysql_native_password”插件认证</span></span><br><span class="line"><span class="attr">default_authentication_plugin</span>=<span class="string">mysql_native_password</span></span><br><span class="line"><span class="comment">#是否对sql语句大小写敏感，1表示不敏感</span></span><br><span class="line"><span class="attr">lower_case_table_names</span> = <span class="string">1</span></span><br><span class="line"><span class="comment">#MySQL连接闲置超过一定时间后(单位：秒)将会被强行关闭</span></span><br><span class="line"><span class="comment">#MySQL默认的wait_timeout  值为8个小时, interactive_timeout参数需要同时配置才能生效</span></span><br><span class="line"><span class="attr">interactive_timeout</span> = <span class="string">1800</span></span><br><span class="line"><span class="attr">wait_timeout</span> = <span class="string">1800</span></span><br><span class="line"><span class="comment">#Metadata Lock最大时长（秒）， 一般用于控制 alter操作的最大时长sine mysql5.6</span></span><br><span class="line"><span class="comment">#执行 DML操作时除了增加innodb事务锁外还增加Metadata Lock，其他alter（DDL）session将阻塞</span></span><br><span class="line"><span class="attr">lock_wait_timeout</span> = <span class="string">3600</span></span><br><span class="line"><span class="comment">#内部内存临时表的最大值。</span></span><br><span class="line"><span class="comment">#比如大数据量的group by ,order by时可能用到临时表，</span></span><br><span class="line"><span class="comment">#超过了这个值将写入磁盘，系统IO压力增大</span></span><br><span class="line"><span class="attr">tmp_table_size</span> = <span class="string">64M</span></span><br><span class="line"><span class="attr">max_heap_table_size</span> = <span class="string">64M</span></span><br><span class="line"><span class="attr">[mysql]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="meta">default-character-set</span>=<span class="string">utf8mb4</span></span><br><span class="line"><span class="attr">[client]</span></span><br><span class="line"><span class="comment"># 设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line"><span class="attr">port</span>=<span class="string">3306</span></span><br><span class="line"><span class="meta">default-character-set</span>=<span class="string">utf8mb4</span></span><br></pre></td></tr></table></figure></li>
<li><p>建立Mysql服务</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp -a ./support-files/mysql.server /etc/init.d/mysql</span><br><span class="line">chmod +x /etc/init.d/mysql</span><br><span class="line">chkconfig --add mysql</span><br><span class="line">chkconfig --list mysql</span><br></pre></td></tr></table></figure>
<p><img src="/mysql-install/index/4.png"></p>
</li>
<li><p>启动Mysql服务</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">service mysql start;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看启动状态</span></span><br><span class="line">service mysql status;</span><br></pre></td></tr></table></figure>
<p>如果提示： -bash: mysql: command not found</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /usr/local/mysql8/bin/mysql /usr/bin</span><br></pre></td></tr></table></figure></li>
<li><p>登录Mysql</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta">#</span><span class="bash"> 输入<span class="string">&quot;初始化数据库&quot;</span>操作时的<span class="string">&quot;临时密码&quot;</span></span></span><br></pre></td></tr></table></figure>
<p><img src="/mysql-install/index/5.png"></p>
<p> 修改密码：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br></pre></td></tr></table></figure></li>
<li><p>远程连接</p>
<ol>
<li>进入mysql命令行 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line">update user set host =&#x27;%&#x27; where user=&#x27;root&#x27;;</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;root&#x27;;</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure>
<img src="/mysql-install/index/7.png"></li>
</ol>
</li>
<li><p>检查端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">检查3306端口是否开放</span></span><br><span class="line">netstat -nlp|grep 3306</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">开放3306端口</span></span><br><span class="line">firewall -cmd --permanent --add-prot=3306/tcp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启防火墙</span></span><br><span class="line">firewall -cmd --reload</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4. 常见问题"></a>4. 常见问题</h3><ol>
<li><p>The server quit without updating PID file</p>
<ul>
<li>第一，权限的问题，在出这个错误的时候，我所说的权限是mysq.cnf和所定义的mysql数据库存放目录的权限，要保证是mysql用户的权限，如果启动mysql还有问题，那么需要考虑提高权限了。<br>说人话， 数据库存放目录必须是mysql这个用户的属组(通常的，安装MySQL的时候建立的用户为mysql，不建议使用别的用户），mysql的启动脚本必须有执行权限。赋予权限的命令为：chown -R mysql. /usr/local/mysql,假设我的mysql是安装在  /usr/local/mysql目录，数据库存放目录为 /usr/local/mysql/data/</li>
<li>第二，进程中有mysql的进程，上次的退出并没有自动结束该pid，导致新的进程无法启动，毕竟，mysql每次启动系统只会给分配一个pid号，再启动，系统也不可能给你分配pid号了。运行命令 ps -ef |grep mysql  找到mysql的进程结束它，然后在启动mysql。</li>
<li>第三，进入mysql数据库的存放目录，如果有mysql-bin.index这样的文件，删除它，在启动mysql，该文件产生的原因不详，不过删除必定没影响，或者另一个binlog.index也删除，两个index后缀的都删除也可以。</li>
<li>第四，my.cnf 这个配置文件内容不对，检查有没有skip-federated这个字段，如果有注释或者删除。<br>检查是否定义了数据库存放目录，如果没有定义，请立刻定义。</li>
<li>第五，错误日志目录不存在解决方法：使用“chown” “chmod”命令赋予mysql目录所有者及权限。</li>
<li>第六，<strong>my.cnf文件内存在lower_case_table_names=1 字段，注释掉它。（这个选项是1表示不区分大小写）。具体原因不详</strong>。</li>
</ul>
<p> 总结：mysql说好安装也好安装，说难也难，难点在于权限的配置，给高了不安全，给低了有可能启动出问题，如果启动出问题了，首先第一件事就是检查目录权限，第二就是检查my.cnf这个配置文件，skip-federated，lower_case_table_names=1 ，这样的字段注释掉，第三，清除旧的mysql进程，如果有就清除掉，旧的不去新的不来，就这么一个道理。第四，进入mysql数据库存放目录删除index后缀的文件。下面，给张图，详细的权限慢慢体会</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls -al /etc/init.d/mysql</span><br></pre></td></tr></table></figure></li>
<li><p>Can ‘t connect to local MySQL server through socket ‘/tmp/mysql.sock</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">连接localhost通常通过一个Unix域套接字文件进行，一般是/tmp/mysql.sock。如果套接字文件被删除了，本地客户就不能连接。这可能发生在你的系统运行一个cron任务删除了/tmp下的临时文件。</span><br><span class="line">如果你因为丢失套接字文件而不能连接，你可以简单地通过重启服务器重新创建得到它。因为服务器在启动时重新创建它。</span><br><span class="line">如果和我一样，重启服务器还是没有任何变化，你可以先执行下面的语句</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -h 127.0.0.1 -p</span><br></pre></td></tr></table></figure>
<p>解决方式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /var/run/mysqld/</span><br><span class="line">sudo ln -s /tmp/mysql.sock /var/run/mysqld/mysqld.sock</span><br></pre></td></tr></table></figure></li>
<li><p>however file don’t exists. Create writable for user ‘mysql’<br> 问题描述：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@test2 my57_3307]# /usr/local/mysql57/bin/mysqld_safe  --defaults-file=/dbdata/mysql/my57_3307/my57_3307.cnf  --ledir=/usr/local/mysql57/bin</span><br><span class="line">2018-08-26T14:12:45.459798Z mysqld_safe error: log-error set to &#x27;/var/log/mysqld/my57_3307.log&#x27;, however file don&#x27;t exists. Create writable for user &#x27;mysql&#x27;.</span><br></pre></td></tr></table></figure>
<p>解决方式：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">touch /usr/local/mysql8/log/error.log</span><br><span class="line">chown mysql /usr/local/mysql8/log/error.log</span><br><span class="line">/usr/local/mysql8/bin/mysqld_safe  --defaults-file=/etc/my.cnf  --ledir=/usr/local/mysql8/bin</span><br></pre></td></tr></table></figure></li>
<li><p>cannot open shared object file: No such file or directory</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">需要安装 libnuma</span></span><br><span class="line">yum install libnuma</span><br><span class="line">yum -y install  numactl</span><br><span class="line">yum install libaio1 libaio-dev</span><br></pre></td></tr></table></figure></li>
<li><p>mysqld启动报错Failed to find valid data directory</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf #查看datadir配置项的路径，然后一般是/var/lib/mysql，将这个文件夹删掉，然后重新初始化</span><br><span class="line"></span><br><span class="line">/usr/local/mysql8/bin/mysqld --initialize --user=mysql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果mysqld启动服务时提示不能用root启动，则在/var/lib/mysql中加入这行 user=mysql</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">service mysql restart</span><br></pre></td></tr></table></figure></li>
<li><p>Navicat无法连接：Host is not allowed to connect to this MySQL server</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta">#</span><span class="bash">输入密码</span></span><br></pre></td></tr></table></figure>
<p>操作数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="keyword">select</span> host <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/mysql-install/index/q6.png" alt="navicat无法连接数据库"></p>
<p>该结果表示当前的root用户限制在当前的IP内访问，需要修改他的访问域</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update <span class="keyword">user</span> <span class="keyword">set</span> host<span class="operator">=</span><span class="string">&#x27;%&#x27;</span> <span class="keyword">where</span> <span class="keyword">user</span><span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">flush privileges ;</span><br></pre></td></tr></table></figure>
<p><img src="/mysql-install/index/q61.png" alt="navicat无法连接数据库"></p>
</li>
<li><p>Can’t connect to MySQL server ‘xxxxxx’ on(60)</p>
<p>我买的是阿里云服务器，前往阿里云服务器配置安全组规则即可</p>
</li>
</ol>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>二分法查找题</title>
    <url>/algorithm-dinary-search/index.html</url>
    <content><![CDATA[<h3 id="1-第一个错误的版本"><a href="#1-第一个错误的版本" class="headerlink" title="1. 第一个错误的版本"></a>1. 第一个错误的版本</h3><h3 id="1-1-题目描述"><a href="#1-1-题目描述" class="headerlink" title="1.1 题目描述"></a>1.1 题目描述</h3><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。<br>假设你有 n 个版本 [1, 2, …, n]，你想找出导致之后所有版本出错的第一个错误的版本。<br>你可以通过调用bool isBadVersion(version)接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。<br>示例</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">输入：n = 5, bad = 4</span><br><span class="line">输出：4</span><br><span class="line">解释：</span><br><span class="line">    调用 isBadVersion(3) -&gt; false </span><br><span class="line">    调用 isBadVersion(5) -&gt; true </span><br><span class="line">    调用 isBadVersion(4) -&gt; true</span><br><span class="line">所以，4 是第一个错误的版本</span><br></pre></td></tr></table></figure>

<h3 id="1-2-解题思路"><a href="#1-2-解题思路" class="headerlink" title="1.2 解题思路"></a>1.2 解题思路</h3><p>当一个版本为正确版本，则该版本之前的所有版本均为正确版本；当一个版本为错误版本，则该版本之后的所有版本均为错误版本。我们可以利用这个性质进行二分查找。</p>
<p>具体地，将左右边界分别初始化为 1和 n ，其中 n 是给定的版本数量。设定左右边界之后，每次我们都依据左右边界找到其中间的版本，检查其是否为正确版本。如果该版本为正确版本，那么第一个错误的版本必然位于该版本的右侧，我们缩紧左边界；否则第一个错误的版本必然位于该版本及该版本的左侧，我们缩紧右边界。<br>这样我们每判断一次都可以缩紧一次边界，而每次缩紧时两边界距离将变为原来的一半，因此我们至多只需要缩紧 O(logn) 次。</p>
<h3 id="1-3-代码"><a href="#1-3-代码" class="headerlink" title="1.3 代码"></a>1.3 代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstBadVersion</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">1</span>, right = n;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">        <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;    <span class="comment">// 防止计算时溢出</span></span><br><span class="line">        <span class="keyword">if</span> (isBadVersion(mid))&#123;</span><br><span class="line">            <span class="comment">// 答案在区间 [left, mid] 中</span></span><br><span class="line">           right = mid; <span class="comment">//如果中间版本是错误的版本，那么它之后的都是错误的;</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 答案在区间 [mid+1, right] 中</span></span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//此时有 left == right,退出了while循环</span></span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>10 算法</category>
      </categories>
      <tags>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql添加/修改/删除字段</title>
    <url>/mysql-column/index.html</url>
    <content><![CDATA[<h3 id="1-添加字段"><a href="#1-添加字段" class="headerlink" title="1. 添加字段"></a>1. 添加字段</h3><h4 id="1-1-在末尾添加字段"><a href="#1-1-在末尾添加字段" class="headerlink" title="1.1 在末尾添加字段"></a>1.1 在末尾添加字段</h4><p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>
<p>语法格式的说明：</p>
<ul>
<li>&lt;表名&gt; 为数据表的名字；</li>
<li>&lt;字段名&gt; 为所要添加的字段的名字；</li>
<li>&lt;数据类型&gt; 为所要添加的字段能存储数据的数据类型；</li>
<li>[约束条件] 是可选的，用来对添加的字段进行约束。</li>
<li>这种语法格式默认在表的最后位置（最后一列的后面）添加新字段</li>
</ul>
<p>2）示例：在user表末尾添加字段phone</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> phone <span class="type">VARCHAR</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;电话号码&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="1-2-在开头添加字段"><a href="#1-2-在开头添加字段" class="headerlink" title="1.2 在开头添加字段"></a>1.2 在开头添加字段</h4><p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [约束条件] <span class="keyword">FIRST</span>;</span><br></pre></td></tr></table></figure>
<p>FIRST 关键字一般放在语句的末尾<br>2）示例：在user表开头添加字段user_id</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> user_id <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户主键&#x27;</span> <span class="keyword">FIRST</span>;</span><br></pre></td></tr></table></figure>
<h4 id="1-3-在中间添加字段"><a href="#1-3-在中间添加字段" class="headerlink" title="1.3 在中间添加字段"></a>1.3 在中间添加字段</h4><p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [约束条件] AFTER <span class="operator">&lt;</span>已经存在的字段名<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure>
<p>AFTER 的作用是将新字段添加到某个已有字段后面。<br>注意：只能在某个已有字段的后面添加新字段，不能在它的前面添加新字段</p>
<p>2）示例：在user表的user_id字段后添加username字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> username <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span> AFTER `user_id`;</span><br></pre></td></tr></table></figure>
<h3 id="2-修改字段"><a href="#2-修改字段" class="headerlink" title="2. 修改字段"></a>2. 修改字段</h3><h4 id="2-1-修改字段属性"><a href="#2-1-修改字段属性" class="headerlink" title="2.1 修改字段属性"></a>2.1 修改字段属性</h4><p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> MODIFY <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>
<p>2）示例1：修改字段属性</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 将email字段VARCHAR(50)修改成VARCHAR(200)</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> MODIFY email <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;email@163.com&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>注意：修改时如果不带完整性约束条件，原有的约束条件将丢失，如果想保留修改时就得带上完整性约束条件</p>
<p>3）示例2： 将email移到phone后面</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> MODIFY email <span class="type">VARCHAR</span>(<span class="number">50</span>) AFTER `phone`;</span><br></pre></td></tr></table></figure>
<p>4）示例3：放置第一个，保留原完成性约束条件</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>`MODIFY email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;test@163.com&#x27;</span> <span class="keyword">FIRST</span>;</span><br></pre></td></tr></table></figure>
<p>5）示例4：修改成大小写敏感，即查询区分大小写</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> MODIFY username <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="type">BINARY</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="2-2-修改字段名称和属性"><a href="#2-2-修改字段名称和属性" class="headerlink" title="2.2 修改字段名称和属性"></a>2.2 修改字段名称和属性</h4><p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> CHANGE <span class="operator">&lt;</span>原字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>新字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> [约束条件];</span><br></pre></td></tr></table></figure>
<p>2）示例：将username字段修改成user_name</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> CHANGE username user_name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-添加、删除默认值"><a href="#2-3-添加、删除默认值" class="headerlink" title="2.3 添加、删除默认值"></a>2.3 添加、删除默认值</h4><p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加默认值</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="keyword">SET</span> <span class="keyword">DEFAULT</span> <span class="operator">&lt;</span>默认值<span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除默认值</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ALTER</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure>
<p>2）示例：给sex添加默认值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">USER</span> <span class="keyword">ALTER</span> sex <span class="keyword">SET</span> <span class="keyword">DEFAULT</span>  <span class="string">&#x27;难&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>3）示例：删除sex默认值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ALTER</span> sex <span class="keyword">DROP</span> <span class="keyword">DEFAULT</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-添加、删除主键"><a href="#2-4-添加、删除主键" class="headerlink" title="2.4 添加、删除主键"></a>2.4 添加、删除主键</h4><ol>
<li>语法：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> [<span class="keyword">CONSTRAINT</span> <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span>] <span class="keyword">PRIMARY</span> KEY (<span class="operator">&lt;</span>字段名称,...<span class="operator">&gt;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>
2）示例：添加主键<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span>  KEY (user_id)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>3）示例：添加复合主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span>  user_role <span class="keyword">ADD</span> <span class="keyword">PRIMARY</span> KEY (user_id, role_id);</span><br></pre></td></tr></table></figure>
<p>4）示例：删除主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>
<p>5）示例：删除带自增长属性的主键</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 先用MODIFY删除自增长属性，注意MODIFY不能去掉主键属性</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test MODIFY id <span class="type">INT</span> UNSIGNED;</span><br><span class="line"><span class="comment">-- 再来删除主键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> test <span class="keyword">DROP</span> <span class="keyword">PRIMARY</span> KEY;</span><br></pre></td></tr></table></figure>
<h4 id="2-5-添加、删除唯一索引"><a href="#2-5-添加、删除唯一索引" class="headerlink" title="2.5 添加、删除唯一索引"></a>2.5 添加、删除唯一索引</h4><p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 添加唯一性约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">ADD</span> [CONSTANT <span class="operator">&lt;</span>约束名<span class="operator">&gt;</span>] <span class="keyword">UNIQUE</span> [INDEX <span class="operator">|</span> KEY] [索引名称](<span class="operator">&lt;</span>字段名称,...<span class="operator">&gt;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除唯一性约束</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">DROP</span> [INDEX <span class="operator">|</span> KEY] [索引名称];</span><br></pre></td></tr></table></figure>
<p>2）示例：为username添加唯一性约束，如果没有指定索引名称，系统会以字段名建立索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span>(username);</span><br></pre></td></tr></table></figure>
<p>3）示例：为username添加唯一性约束，并指定索引名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">UNION</span> KEY uni_username(username);</span><br></pre></td></tr></table></figure>
<p>4）示例：查看索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<p>5）示例：添加联合UNIQUE</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">ADD</span> <span class="keyword">UNIQUE</span> INDEX uni_nickname_username(nickname, username);</span><br></pre></td></tr></table></figure>
<p>6）示例：删除索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">DROP</span> INDEX username;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">DROP</span> KEY uni_username;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> <span class="keyword">DROP</span> INDEX uni_nickname_username;</span><br></pre></td></tr></table></figure>
<h4 id="2-6-修改表的存储引擎"><a href="#2-6-修改表的存储引擎" class="headerlink" title="2.6 修改表的存储引擎"></a>2.6 修改表的存储引擎</h4><p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> ENGINE<span class="operator">=</span><span class="operator">&lt;</span>存储引擎名称<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure>
<p>2）示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> ENGINE<span class="operator">=</span>MyISAM;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> ENGINE<span class="operator">=</span>INNODB;</span><br></pre></td></tr></table></figure>
<h4 id="2-7-修改自增长值"><a href="#2-7-修改自增长值" class="headerlink" title="2.7 修改自增长值"></a>2.7 修改自增长值</h4><p>1）语法：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> AUTO_INCREMENT<span class="operator">=</span>[值];</span><br></pre></td></tr></table></figure>
<p>2）示例：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> AUTO_INCREMENT<span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure>


<p>博客原文链接：<a href="https://www.cnblogs.com/Jimc/p/12979319.html">https://www.cnblogs.com/Jimc/p/12979319.html</a><br>如有侵权，请联系删除！</p>
]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Canal和Kafka实现数据同步</title>
    <url>/canal-kafka-async/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">


<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>Canal的作用：把自己”伪装”成一个<code>Mysql</code>的<code>slave</code>，不停同步<code>master</code>的<code>binlog</code>数据，再把<code>binlog</code>数据以<code>TCP</code>或者<code>MQ</code>的方式（支持kafka、RabbitMQ、RocketMQ）发送给需要同步数据的项目</p>
<p><code>canal</code>项目地址：<a href="https://github.com/alibaba/canal/releases">https://github.com/alibaba/canal/releases</a> , 2022-05-24发布的最新版1.1.6。</p>
<p>测试需要同步的目标数据库是192.168.44.121上部署的数据库</p>
<h3 id="2-在目标数据库上创建用户和数据库"><a href="#2-在目标数据库上创建用户和数据库" class="headerlink" title="2. 在目标数据库上创建用户和数据库"></a>2. 在目标数据库上创建用户和数据库</h3><p>注意 121 的数据库首先要开启<code>binlog</code>，<code>binlog-format</code>必须是<code>ROW</code></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">log-bin</span>=<span class="string">/var/lib/mysql/mysql-bin</span></span><br><span class="line"><span class="meta">binlog-format</span>=<span class="string">ROW</span></span><br></pre></td></tr></table></figure>
<p>用户和数据库创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 创建canal专用的用户，用于访问master获取binlog</span><br><span class="line">CREATE USER canal IDENTIFIED BY &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line">-- 给canal用户分配查询和复制的权限</span><br><span class="line">GRANT SELECT, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO canal@&#x27;%&#x27;;</span><br><span class="line"></span><br><span class="line">-- 刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br><span class="line">ALTER USER &#x27;canal&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br><span class="line"></span><br><span class="line">-- 创建测试数据库</span><br><span class="line">CREATE DATABASE `canaltest` CHARSET `utf8mb4` COLLATE `utf8mb4_unicode_ci`;</span><br></pre></td></tr></table></figure>

<h3 id="3-安装ZK和kafka"><a href="#3-安装ZK和kafka" class="headerlink" title="3. 安装ZK和kafka"></a>3. 安装ZK和kafka</h3><p>在192.168.44.161机器上安装ZK和kafka, 这里我们安装伪集群版本，具体步骤请参考 <a href="https://xiaoyuge.work/kafka-colony-install/">CentOS Kafka 3.2.0 单机集群安装（伪集群）</a></p>
<h3 id="4-安装canal"><a href="#4-安装canal" class="headerlink" title="4. 安装canal"></a>4. 安装canal</h3><ol>
<li>下载canal<br> 以安装目录:/usr/local/tools/canal 为例。 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/</span><br><span class="line">midir canal</span><br><span class="line">cd canal</span><br><span class="line"></span><br><span class="line">wget https://github.com/alibaba/canal/releases/download/canal-1.1.6/canal.deployer-1.1.6.tar.gz</span><br><span class="line">tar -zxvf canal.deployer-1.1.6.tar.gz</span><br></pre></td></tr></table></figure>
 如果下载慢的话，可以先下载到本地，然后上传到服务器</li>
</ol>
<ol start="2">
<li><p>修改配置：conf/canal.properties</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/canal/conf</span><br><span class="line">vim canal.propertis</span><br></pre></td></tr></table></figure>
<p>修改配置如下：</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">canal.serverMode</span>=<span class="string">kafka</span></span><br><span class="line"><span class="meta">canal.mq.servers</span> = <span class="string">192.168.44.160:9092</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改配置：example/instance.properties</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/canal/example</span><br><span class="line">vim instance.properties</span><br></pre></td></tr></table></figure>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">canal.instance.master.address</span>=<span class="string">192.168.44.121:3306</span></span><br><span class="line"><span class="meta">canal.instance.dbUsername</span>=<span class="string">canal</span></span><br><span class="line"><span class="meta">canal.instance.dbPassword</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment"># 新增</span></span><br><span class="line"><span class="meta">canal.instance.defaultDatabaseName</span>=<span class="string">canaltest</span></span><br><span class="line"><span class="comment"># 这个topic会自动创建</span></span><br><span class="line"><span class="meta">canal.mq.topic</span>=<span class="string">canal-topic</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动canal</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/canal/bin</span><br><span class="line">sh startup.sh</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看实例日志</span></span><br><span class="line">tail -100f /usr/local/tools/canal/logs/canal/canal.log</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-建表测试"><a href="#5-建表测试" class="headerlink" title="5. 建表测试"></a>5. 建表测试</h3><p>在canaltest数据随表建一张表，做增删改的操作。</p>
<p>在Kafka服务器上消费这个topic</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-console-consumer.sh --bootstrap-server 192.168.44.160:9092 --topic canal-topic</span><br></pre></td></tr></table></figure>
<p>kafka相关命令可以查看这篇博客 <a href="https://xiaoyuge.work/kafka-command/">kafka常用命令</a></p>
<p>成功消费到canal发送的消息：<br><img src="/canal-kafka-async/index/1.png"></p>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>Canal</tag>
      </tags>
  </entry>
  <entry>
    <title>TIDB设置sql_mode</title>
    <url>/sql-model/index.html</url>
    <content><![CDATA[<h3 id="1-使用命令查询当前sql-mode"><a href="#1-使用命令查询当前sql-mode" class="headerlink" title="1. 使用命令查询当前sql_mode"></a>1. 使用命令查询当前sql_mode</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> @<span class="variable">@sql</span>_mode</span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">select</span> @<span class="variable">@GLOBAL</span>.sql_mode</span><br></pre></td></tr></table></figure>
<p><img src="/sql-model/index/1.png" alt="sql_mode"></p>
<h5 id="sql-mode常用值："><a href="#sql-mode常用值：" class="headerlink" title="sql_mode常用值："></a>sql_mode常用值：</h5><ul>
<li><p>ONLY_FULL_GROUP_BY<br>对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中</p>
</li>
<li><p>NO_AUTO_VALUE_ON_ZERO<br>该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。如果用户希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。</p>
</li>
<li><p>STRICT_TRANS_TABLES<br>在该模式下，如果一个值不能插入到一个事务中，则中断当前的操作，对非事务表不做限制</p>
</li>
<li><p>NO_ZERO_IN_DATE<br>在严格模式下，不允许日期和月份为零</p>
</li>
<li><p>NO_ZERO_DATE<br>设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告</p>
</li>
<li><p>ERROR_FOR_DIVISION_BY_ZERO<br>在insert或update过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时Mysql返回NULL</p>
</li>
<li><p>NO_AUTO_CREATE_USER<br>禁止GRANT创建密码为空的用户</p>
</li>
<li><p>NO_ENGINE_SUBSTITUTION<br>如果需要的存储引擎被禁用或未编译，那么抛出错误。不设置此值时，用默认的存储引擎替代，并抛出一个异常</p>
</li>
<li><p>PIPES_AS_CONCAT<br>将”||”视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样是，也和字符串的拼接函数Concat想类似</p>
</li>
<li><p>ANSI_QUOTES<br>启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</p>
</li>
</ul>
<h3 id="2-临时设置（新session仍然使用之前的sql-mode）"><a href="#2-临时设置（新session仍然使用之前的sql-mode）" class="headerlink" title="2. 临时设置（新session仍然使用之前的sql_mode）"></a>2. 临时设置（新session仍然使用之前的sql_mode）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> sql_mode<span class="operator">=</span>‘ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES’;</span><br></pre></td></tr></table></figure>

<h3 id="3-全局设置（新session仍然使用修改后的sql-mode）"><a href="#3-全局设置（新session仍然使用修改后的sql-mode）" class="headerlink" title="3. 全局设置（新session仍然使用修改后的sql_mode）"></a>3. 全局设置（新session仍然使用修改后的sql_mode）</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @<span class="variable">@global</span>.sql_mode<span class="operator">=</span><span class="string">&#x27;ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE‘；</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>tidb</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins自动化部署入门教程</title>
    <url>/jenkins/index.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f49499d594137098e3b70331305a1941f042dbe91923dc31137cc1b290df760e"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>13 开源组件</category>
      </categories>
      <tags>
        <tag>jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Java知识系统整理1</title>
    <url>/java-basic/index.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3138de0acb755dd62d4dcc6a12dcf3fb6132f8f39f474cec569c5a3410d129e3">91b4a72afde41933824d9b47e790ab27512af815f571870ab6669de88f4dca4a01f1dd8673e0a7b1d2aa851302adc531b73c67e88a3c1a8f7920c3393e647e8b3ef22b2cc3df7325287cc5b0df457bbe0cb7b2194ee4a008f23c3f496a35c2fe4a3b104901b361f0f6c69abbbb1bccd6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS Kafka 3.2.0 单机集群安装（伪集群）</title>
    <url>/kafka-colony-install/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">


<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h3><p>由于没有那么多台机器，所以在同一台机器上运行多个Kafka服务，只是端口不同</p>
<ol>
<li><p>安装路径： /usr/local/tools ; 服务器IP： 192.168.44.161</p>
</li>
<li><p>基于Kafka单机版安装流程，请查看 <a href="https://xiaoyuge.work/kafka-install/">CentOS安装kafka 3.2.0单机版</a></p>
</li>
<li><p>所有Kafka节点连接到相同的ZK（或ZK集群），需要先安装一个ZK，请参考 <a href="https://xiaoyuge.work/zookeeper-install/">CentOS安装Zookeeper 3.7.1单节点</a> , 在本例中ZK也安装在这台机器上。</p>
</li>
</ol>
<p>注意：单机的kafka和集群的Kafka不要混用一个ZK，否则会出现数据混乱的问题。</p>
<h3 id="2-下载解压kafka"><a href="#2-下载解压kafka" class="headerlink" title="2. 下载解压kafka"></a>2. 下载解压kafka</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools</span><br><span class="line">wget https://dlcdn.apache.org/kafka/3.2.0/kafka_2.12-3.2.0.tgz</span><br><span class="line">tar -xzvf kafka_2.12-3.2.0.tgz</span><br><span class="line">cd kafka_2.12-3.2.0</span><br></pre></td></tr></table></figure>

<h3 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3. 修改配置文件"></a>3. 修改配置文件</h3><p>复制3个配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd config</span><br><span class="line">cp server.properties server1.properties </span><br><span class="line">cp server.properties server2.properties </span><br><span class="line">cp server.properties server3.properties </span><br></pre></td></tr></table></figure>
<p>修改配置文件中的broker.id分别为1、2、3</p>
<p>listeners这一行取消注释，端口号分别为9093、9094、9095</p>
<p>log.dirs分别设置为kafka-logs1、kafka-logs2、kafka-logs3（先创建）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /tmp/kafka-logs1 /tmp/kafka-logs2 /tmp/kafka-logs3</span><br></pre></td></tr></table></figure>
<ul>
<li><p>server1.properties 的配置：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">broker.id=1</span><br><span class="line">listeners=PLAINTEXT://192.168.44.161:9093</span><br><span class="line">log.dirs=/tmp/kafka-logs1</span><br></pre></td></tr></table></figure></li>
<li><p>server2.properties 的配置:</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">broker.id=2</span><br><span class="line">listeners=PLAINTEXT://192.168.44.161:9094</span><br><span class="line">log.dirs=/tmp/kafka-logs2</span><br></pre></td></tr></table></figure></li>
<li><p>server3.properties 的配置：</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">broker.id=3</span><br><span class="line">listeners=PLAINTEXT://192.168.44.161:9095</span><br><span class="line">log.dirs=/tmp/kafka-logs3</span><br></pre></td></tr></table></figure></li>
</ul>
<p>如果listeners取消注释导致topic创建失败，可以修改为</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://:9093</span></span><br><span class="line"><span class="meta">advertised.listeners</span>=<span class="string">PLAINTEXT://10.1.14.159:9093</span></span><br></pre></td></tr></table></figure>
<h3 id="4-启动3个服务"><a href="#4-启动3个服务" class="headerlink" title="4. 启动3个服务"></a>4. 启动3个服务</h3><ol>
<li>启动ZK<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/apache-zookeeper-3.7.1-bin/bin</span><br><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure></li>
<li>启动Kafka <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ../bin</span><br><span class="line">./kafka-server-start.sh -daemon ../config/server1.properties</span><br><span class="line">./kafka-server-start.sh -daemon ../config/server2.properties</span><br><span class="line">./kafka-server-start.sh -daemon ../config/server3.properties</span><br></pre></td></tr></table></figure></li>
</ol>
<p>PS：如果遇到zk node exists的问题，先把brokers节点删掉（临时解决方案）。</p>
<h3 id="5-集群下创建Topic"><a href="#5-集群下创建Topic" class="headerlink" title="5. 集群下创建Topic"></a>5. 集群下创建Topic</h3><p>在bin目录下，创建一个名为ygbtest的<code>topic</code>，只有一个服务本一个分区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic ygbtest</span><br></pre></td></tr></table></figure>

<p>查看一创建的topic：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh kafka-topics.sh -list -zookeeper localhost:2181</span><br></pre></td></tr></table></figure>

<h3 id="6-集群下启动Consumer"><a href="#6-集群下启动Consumer" class="headerlink" title="6. 集群下启动Consumer"></a>6. 集群下启动Consumer</h3><p>在一个新的原车鞥窗口中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh kafka-console-consumer.sh --bootstrap-server 192.168.44.161:9093,192.168.44.161:9094,192.168.44.161:9095 --topic ygbtest --from-beginning</span><br></pre></td></tr></table></figure>
<p>kafka相关命令可以查看这篇博客 <a href="https://xiaoyuge.work/kafka-command/">kafka常用命令</a></p>
<h3 id="7-集群下启动Producer"><a href="#7-集群下启动Producer" class="headerlink" title="7. 集群下启动Producer"></a>7. 集群下启动Producer</h3><p>打开一个新的窗口，在kafka解压目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh kafka-console-producer.sh --broker-list 192.168.44.161:9093,192.168.44.161:9094,192.168.44.161:9095 --topic ygbtest</span><br></pre></td></tr></table></figure>

<h3 id="8-集群下Producer窗口发送消息"><a href="#8-集群下Producer窗口发送消息" class="headerlink" title="8. 集群下Producer窗口发送消息"></a>8. 集群下Producer窗口发送消息</h3><p>在生产者<code>Producer</code>窗口输入hello world 回车</p>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis6.2.6一主二从Sentinel监控配置</title>
    <url>/redis-sentinel/index.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e062e68daef0a67eada325ffad05f6c5e65640efb31937481f454f9b10b29c39"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>07 Redis</category>
      </categories>
      <tags>
        <tag>redis专题</tag>
      </tags>
  </entry>
  <entry>
    <title>RocketMQ 二主二从异步集群部署</title>
    <url>/rocketmq-colony-install/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">


<h3 id="1-节点规划"><a href="#1-节点规划" class="headerlink" title="1. 节点规划"></a>1. 节点规划</h3><ol>
<li><p>第一台机器 <strong>192.168.44.163</strong></p>
<table>
<thead>
<tr>
<th align="left">端口</th>
<th align="left">名称</th>
</tr>
</thead>
<tbody><tr>
<td align="left">9876</td>
<td align="left">NameServer1</td>
</tr>
<tr>
<td align="left">10910</td>
<td align="left">BrokerA-master</td>
</tr>
<tr>
<td align="left">10921</td>
<td align="left">BrokerB-slave</td>
</tr>
</tbody></table>
</li>
</ol>
<ol start="2">
<li><p>第二台机器 <strong>192.168.44.164</strong></p>
<table>
<thead>
<tr>
<th align="left">端口</th>
<th align="left">名称</th>
</tr>
</thead>
<tbody><tr>
<td align="left">9876</td>
<td align="left">NameServer2</td>
</tr>
<tr>
<td align="left">10911</td>
<td align="left">BrokerA-slave</td>
</tr>
<tr>
<td align="left">10920</td>
<td align="left">BrokerB-slave</td>
</tr>
</tbody></table>
</li>
</ol>
<p><img src="/rocketmq-colony-install/index/1.png"></p>
<h3 id="2-下载并解压"><a href="#2-下载并解压" class="headerlink" title="2. 下载并解压"></a>2. 下载并解压</h3><p>具体操作可以查看 <a href="https://xiaoyuge.work/rocketmq-install/">CentOS安装RocketMQ以及常用命令</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools</span><br><span class="line">wget https://dlcdn.apache.org/rocketmq/4.9.4/rocketmq-all-4.9.4-bin-release.zip</span><br><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">unzip rocketmq-all-4.9.4-bin-release.zip </span><br><span class="line"><span class="meta">#</span><span class="bash">改名</span></span><br><span class="line">mv rocketmq-all-4.9.4-bin-release rocketmq</span><br></pre></td></tr></table></figure>
<p>在两台机器上都下载、解压好。<br>在<code>rocketmq/conf</code>目录下，有三种建议配置模式：</p>
<ul>
<li>2m-2s-async(2主2从异步) —— 本文采用这种</li>
<li>2m-2s-sync (2主2从同步)</li>
<li>2m-noslave (2主)</li>
</ul>
<p><img src="/rocketmq-colony-install/index/2.png"><br>现在需要修改两台机器上<code>2m-2s-async</code>这个目录中的文件。<br>配置文件修改之前先备份。</p>
<h3 id="3-配置第一台机器163"><a href="#3-配置第一台机器163" class="headerlink" title="3. 配置第一台机器163"></a>3. 配置第一台机器163</h3><p>192.168.44.163的两个配置文件<br><img src="/rocketmq-colony-install/index/3.png"></p>
<ol>
<li>broker-a.properties <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/rocketmq/conf/2m-2s-async</span><br><span class="line">vim  broker-a.properties</span><br></pre></td></tr></table></figure>
 修改的内容（名字自定义，保持一直，否则不能组成集群） <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">ygb-cluster</span></span><br></pre></td></tr></table></figure>
 增加内容: <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10910</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">192.168.44.163:9876;192.168.44.164:9876</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/usr/local/tools/rocketmq/store/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/usr/local/tools/rocketmq/store/abort</span></span><br></pre></td></tr></table></figure></li>
<li>broker-b-s.properties <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim  broker-b-s.properties</span><br></pre></td></tr></table></figure>
 修改的内容（名字自定义，保持一直，否则不能组成集群） <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">ygb-cluster</span></span><br></pre></td></tr></table></figure>
 增加内容: <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10921</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">192.168.44.163:9876;192.168.44.164:9876</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b-s</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b-s/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b-s/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b-s/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/usr/local/tools/rocketmq/store/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/usr/local/tools/rocketmq/store/abort</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="4-配置第二台机器164"><a href="#4-配置第二台机器164" class="headerlink" title="4. 配置第二台机器164"></a>4. 配置第二台机器164</h3><p>192.168.44.164的两个配置文件; 修改的内容基本一致，主要是注意一下端口号、路径名。<br><img src="/rocketmq-colony-install/index/4.png"></p>
<ol>
<li><p>broker-b.properties</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/rocketmq/conf/2m-2s-async</span><br><span class="line">vim  broker-b.properties</span><br></pre></td></tr></table></figure>
<p> 修改的内容（名字自定义，保持一直，否则不能组成集群）</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">ygb-cluster</span></span><br></pre></td></tr></table></figure>
<p> 增加内容:</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10920</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">192.168.44.163:9876;192.168.44.164:9876</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-b/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/usr/local/tools/rocketmq/store/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/usr/local/tools/rocketmq/store/abort</span></span><br></pre></td></tr></table></figure></li>
<li><p>broker-a-s.properties</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/rocketmq/conf/2m-2s-async</span><br><span class="line">vim broker-a-s.properties</span><br></pre></td></tr></table></figure>
<p> 修改的内容（名字自定义，保持一直，否则不能组成集群）</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">brokerClusterName</span>=<span class="string">ygb-cluster</span></span><br></pre></td></tr></table></figure>
<p> 增加内容:</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10911</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">192.168.44.163:9876;192.168.44.164:9876</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a-s</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a-s/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a-s/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a-s/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/usr/local/tools/rocketmq/store/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/usr/local/tools/rocketmq/store/abort</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-创建数据目录"><a href="#5-创建数据目录" class="headerlink" title="5. 创建数据目录"></a>5. 创建数据目录</h3><ol>
<li><p>在第一台机器163 执行（只需要执行一次）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/tools/rocketmq/store/broker-a /usr/local/tools/rocketmq/store/broker-a/consumequeue /usr/local/tools/rocketmq/store/broker-a/commitlog /usr/local/tools/rocketmq/store/broker-a/index /usr/local/tools/rocketmq/logs /usr/local/tools/rocketmq/store/broker-b-s /usr/local/tools/rocketmq/store/broker-b-s/consumequeue /usr/local/tools/rocketmq/store/broker-b-s/commitlog /usr/local/tools/rocketmq/store/broker-b-s/index</span><br></pre></td></tr></table></figure></li>
<li><p>在第二台机器164 执行（只需要执行一次）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/tools/rocketmq/store/broker-a-s /usr/local/tools/rocketmq/store/broker-a-s/consumequeue /usr/local/tools/rocketmq/store/broker-a-s/commitlog /usr/local/tools/rocketmq/store/broker-a-s/index /usr/local/tools/rocketmq/logs /usr/local/tools/rocketmq/store/broker-b /usr/local/tools/rocketmq/store/broker-b/consumequeue /usr/local/tools/rocketmq/store/broker-b/commitlog /usr/local/tools/rocketmq/store/broker-b/index</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="6-启动两个NameServer"><a href="#6-启动两个NameServer" class="headerlink" title="6. 启动两个NameServer"></a>6. 启动两个NameServer</h3><ol>
<li><p>启动第一台163的NameServer</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sh /usr/local/tools/rocketmq/bin/mqnamesrv &gt;/usr/local/tools/rocketmq/logs/mqnamesrv.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li>
<li><p>启动第二台164的NameServer</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sh /usr/local/tools/rocketmq/bin/mqnamesrv &gt;/usr/local/tools/rocketmq/logs/mqnamesrv.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="7-启动Broker"><a href="#7-启动Broker" class="headerlink" title="7. 启动Broker"></a>7. 启动Broker</h3><ol>
<li><p>启动 163 机器上的<code>broker-a-master</code>（在163上执行）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sh /usr/local/tools/rocketmq/bin/mqbroker -c /usr/local/tools/rocketmq/conf/2m-2s-async/broker-a.properties &gt; /usr/local/tools/rocketmq/logs/broker-a.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>
<p>在虚拟机中可能由于内存不够导致无法启动，日志文件中出现如下错误：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nohup: ignoring input</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM warning: INFO: os::commit_memory(0x00000005c0000000, 8589934592, 0) failed; error=&#x27;Cannot allocate memory&#x27; (errno=12)</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /usr/local/tools/rocketmq/bin/runbroker.sh</span><br></pre></td></tr></table></figure>
<p>把8g和4g改成512m和256m</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">JAVA_OPT</span>=<span class="string">&quot;$&#123;JAVA_OPT&#125; -server -Xms512m -Xmx512m -Xmn256m&quot;</span></span><br></pre></td></tr></table></figure>
<p>再次启动。</p>
</li>
<li><p>启动 164 机器上的<code>broker-a-s</code>（在164上执行）</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">nohup</span> <span class="string">sh /usr/local/tools/rocketmq/bin/mqbroker -c /usr/local/tools/rocketmq/conf/2m-2s-async/broker-a-s.properties &gt; /usr/local/tools/rocketmq/logs/broker-a-s.log 2&gt;&amp;1 &amp;</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动 164 的<code>broker-b-master</code>（在164上执行）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sh /usr/local/tools/rocketmq/bin/mqbroker -c /usr/local/tools/rocketmq/conf/2m-2s-async/broker-b.properties &gt; /usr/local/tools/rocketmq/logs/broker-b.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li>
<li><p>启动 163 机器上的<code>broker-b-s</code>（在163上执行）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup sh /usr/local/tools/rocketmq/bin/mqbroker -c /usr/local/tools/rocketmq/conf/2m-2s-async/broker-b-s.properties &gt; /usr/local/tools/rocketmq/logs/broker-b-s.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></li>
<li><p>查看两台机器的端口启动情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -an|grep 端口号</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>rocketmq</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装Apache Http Server</title>
    <url>/Apache-Http-Server/index.html</url>
    <content><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>Apache Http Server又可以简称为httpd或者Apache，它是Internet使用最广泛的web服务器之一</p>
<p>Httpd是Apache超文本传输协议（HTTP）服务器的主程序。被设计为一个独立运行的后台进程，它会建立一个处理请求的子进程或线程的池。<br>通常，httpd不应该被直接调用，而应该在类Unix系统中由apachectl调用，在Windows中做为服务运行。</p>
<p><strong>Httpd主要特点：</strong></p>
<pre><code>（1）开放源代码
（2）跨平台使用，支持绝大多数硬件平台，支持所有的unix系统和linux系统，支持大多数windows平台
（3）支持多种web编程语言，perl，php，python，java等
（4）模块化设计，根据所需功能去安装不同的模块
（5）运行非常稳定，支持大负载访问的web站点
（6）安全性高，及时修复已发现的漏洞
</code></pre>
<h3 id="1-1-Httpd版本"><a href="#1-1-Httpd版本" class="headerlink" title="1.1 Httpd版本"></a>1.1 Httpd版本</h3><p>主要介绍httpd的两大版本：</p>
<ul>
<li>httpd-2.2</li>
<li>httpd-2.4</li>
</ul>
<p>官网链接：<a href="https://httpd.apache.org/">https://httpd.apache.org/</a></p>
<h3 id="1-2-Httpd特性"><a href="#1-2-Httpd特性" class="headerlink" title="1.2 Httpd特性"></a>1.2 Httpd特性</h3><ul>
<li>httpd-2.2 特性：<ul>
<li>事先创建进程</li>
<li>按需维持适当的进程</li>
<li>模块化设计，核心比较小，各种功能通过模块添加(包括PHP)，支持运行时配置，支持单独编译模块</li>
<li>支持多种方式的虚拟主机配置，如基于ip的虚拟主机，基于端口的虚拟主机，基于域名的虚拟主机等</li>
<li>支持https协议(通过mod_ ssI模块实现)</li>
<li>支持用户认证</li>
<li>支持基于IP或域名的ACL访问控制机制</li>
<li>支持每目录的访问控制(用户访问默认主页时不需要提供用户名和密码，但是用户访问某特定目录时需要提供用户名和支持URL重写</li>
<li>支持MPM (Multi Path Modules,多处理模块)。用于定义httpd的工作模型(单进程、 单进程多线程、多进程、多进程单线程、多进程多线程）</li>
</ul>
</li>
<li>httpd-2.4 特性：<ul>
<li>MPM支持运行DSO机制(Dynamic Share Object,模块的动态装/卸载机制)，以模块形式按需加载</li>
<li>支持event MPM, event MPM模块生产环境可用</li>
<li>支持异步读写</li>
<li>支持每个模块及每个目录分别使用各自的日志级别</li>
<li>每个请求相关的专业配置，使用来配置</li>
<li>增强版的表达式分析器</li>
<li>支持毫秒级的keepalive timeout</li>
<li>基于FQDN的虚拟主机不再需要Name Virtual Host指令</li>
<li>支持用户自定义变量</li>
<li>支持新的指令(Allow Override List)</li>
<li>降低对内存的消耗</li>
</ul>
</li>
</ul>
<h3 id="1-3-httpd自带的工具"><a href="#1-3-httpd自带的工具" class="headerlink" title="1.3 httpd自带的工具"></a>1.3 httpd自带的工具</h3><p><img src="/Apache-Http-Server/index/1.png"></p>
<h2 id="2-源码安装"><a href="#2-源码安装" class="headerlink" title="2. 源码安装"></a>2. 源码安装</h2><ol>
<li><p>下载安装包</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接: https://pan.baidu.com/s/1ip-3yUhY1XYdkD8KejgQkQ </span><br><span class="line">提取码: bcub</span><br><span class="line">   </span><br><span class="line">#第二种：</span><br><span class="line">http://archive.apache.org/dist/apr/apr-1.7.0.tar.gz</span><br><span class="line">http://archive.apache.org/dist/apr/apr-util-1.6.1.tar.gz</span><br><span class="line">https://nchc.dl.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.zip</span><br></pre></td></tr></table></figure></li>
<li><p>上传安装包到服务器目录</p>
</li>
<li><p>配置依赖环境</p>
<ol>
<li><p>配置apr依赖</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash">解压</span></span><br><span class="line"> tar -xf apr-1.7.0.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"> #</span><span class="bash">进入到目录</span></span><br><span class="line"> cd apr-1.7.0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置(设置安装在/usr/<span class="built_in">local</span>/apr)</span></span><br><span class="line">./configure --prefix=./configure --prefix=/usr/local/apr</span><br><span class="line">    </span><br><span class="line"><span class="meta"> #</span><span class="bash">编译并安装</span></span><br><span class="line"> make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li>
<li><p>配置apr-util依赖</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash">解压</span></span><br><span class="line">tar -xf apr-util-1.6.1.tar.gz</span><br><span class="line">    </span><br><span class="line"><span class="meta"> #</span><span class="bash">进入到目录</span></span><br><span class="line"> cd apr-util-1.6.1/</span><br><span class="line">    </span><br><span class="line"><span class="meta"> #</span><span class="bash">配置(设置安装在/usr/<span class="built_in">local</span>/apr-util)</span></span><br><span class="line"> ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr</span><br><span class="line">    </span><br><span class="line"><span class="meta"> #</span><span class="bash">编译并安装</span></span><br><span class="line"> make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li>
<li><p>配置pcre依赖</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">tar -xf pcre-8.44.tar.bz2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入到目录</span></span><br><span class="line">cd pcre-8.44/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置(设置安装在/usr/<span class="built_in">local</span>/pcre)</span></span><br><span class="line">./configure --prefix=/usr/local/pcre</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">编译并安装</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li>
<li><p>配置安装httpd</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">解压</span></span><br><span class="line">tar -xf httpd-2.4.53.tar.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">进入到目录</span></span><br><span class="line">cd httpd-2.4.53/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置(设置安装在/usr/<span class="built_in">local</span>/httpd)</span></span><br><span class="line">./configure --prefix=/usr/local/httpd --with-pcre=/usr/local/pcre --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">编译并安装：</span></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></li>
<li><p>配置环境变量</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &#x27;PATH=/usr/local/httpd/bin:$PATH&#x27; &gt; /etc/profile.d/httpd.sh &amp;&amp; . /etc/profile.d/httpd.sh</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>添加Httpd服务</p>
<ol>
<li>复制到init.d 并重命名为httpd  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /apps/httpd24/bin/apachectl  /etc/rc.d/init.d/httpd</span><br></pre></td></tr></table></figure></li>
<li>建立软连接，通过service命令启动/关闭  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">链接文件的S61是启动时的序号。当init.d目录下有httpd脚本后，我们就可以通过service命令来启动关闭apache了</span></span><br><span class="line">ln -s /etc/rc.d/init.d/httpd  /etc/rc.d/rc3.d/S61httpd</span><br></pre></td></tr></table></figure></li>
<li>编辑httpd脚本，<ul>
<li>在第2行(#!/bin/sh下面)添加如下注释信息（包括#）：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> chkconfig: 2345 85 15</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> description: Apache</span></span><br></pre></td></tr></table></figure>
第一行的3个参数意义分别为：在哪些运行级别启动httpd（3，5）；启动序号（S61）；关闭序号（K61）。注意：第二行的描述必须要写！</li>
<li>通过搜索ServerName（先Esc，在输入:/ServerName） 打开ServerName这一行注释   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># ServerName gives the name and port that the server uses to identify itself.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> This can often be determined automatically, but we recommend you specify</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> it explicitly to prevent problems during startup.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash"><span class="comment"># If your host doesn&#x27;t have a registered DNS name, enter its IP address here.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"></span></span><br><span class="line"><span class="bash">ServerName localhost:80</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>所有开机模式下自启动<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">所有开机模式下自启动，另外chkconfig httpd on 表示345模式下自启动</span></span><br><span class="line">chkconfig --add httpd</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
<li><p>启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">到bin目录开启服务</span></span><br><span class="line">cd /usr/local/httpd/bin</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">开启服务：</span></span><br><span class="line">./apachectl start</span><br><span class="line"><span class="meta">#</span><span class="bash">或者</span> </span><br><span class="line">service httpd start</span><br><span class="line"><span class="meta">#</span><span class="bash">或者</span> </span><br><span class="line">systemctl start httpd.service</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span><span class="bash">查看运行状态</span></span><br><span class="line">systemctl status httpd.service</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查询80端口：</span></span><br><span class="line">netstat -anlp | grep 80</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">打开浏览器输入虚拟机的IP地址如果页面显示 It works! , 则表示安装成功</span></span><br></pre></td></tr></table></figure>
<h2 id="3-rpm安装"><a href="#3-rpm安装" class="headerlink" title="3. rpm安装"></a>3. rpm安装</h2></li>
<li><p>下载rpm文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://repo.almalinux.org/almalinux/9/AppStream/x86_64/os/Packages/</span><br></pre></td></tr></table></figure></li>
<li><p>依次安装依赖包</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/www/html/yum/</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 依次安装以下依赖包</span></span><br><span class="line">rpm -ivh apr-1.4.8-3.el7.x86_64.rpm</span><br><span class="line">rpm -ivh apr-util-1.5.2-6.el7.x86_64.rpm </span><br><span class="line">rpm -ivh mailcap-2.1.41-2.el7.noarch.rpm </span><br><span class="line">rpm -ivh httpd-tools-2.4.6-40.el7.centos.x86_64.rpm </span><br><span class="line">rpm -ivh httpd-2.4.6-40.el7.centos.x86_64.rpm </span><br><span class="line">rpm -ivh postgresql-libs-9.2.13-1.el7_1.x86_64.rpm      #（经测试，不需要）</span><br></pre></td></tr></table></figure></li>
<li><p>启动服务</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status httpd</span><br><span class="line">systemctl start httpd</span><br><span class="line"></span><br><span class="line">systemctl enable httpd</span><br><span class="line">systemctl is-enabled httpd</span><br></pre></td></tr></table></figure></li>
<li><p>配置</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/yum.repos.d/</span><br><span class="line">mkdir bak</span><br><span class="line">mv *.repo bak/</span><br><span class="line">vim local.repo</span><br></pre></td></tr></table></figure>
<p>输入以下内容后保存</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[local_server]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">This is a local repo</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">http://192.168.1.161:80/yum/</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">1</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">0</span></span><br><span class="line"><span class="comment">#gpgkey=0</span></span><br></pre></td></tr></table></figure></li>
<li><p>创建yum仓库</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/www/html/yum/</span><br><span class="line">createrepo ./        </span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用createrepo命令创建yum仓库</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意:配置文件中路径指向到哪一层级，createrepo就在该路径的子目录下执行即可。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 例: 路径在local.repo配置文件中指向/a/b/c，那么就	<span class="built_in">cd</span> /a/b/c   createrepo ./</span></span><br></pre></td></tr></table></figure>
<p><img src="/Apache-Http-Server/index/2.png"></p>
</li>
</ol>
<ol start="6">
<li>清除缓存 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum clean all</span><br></pre></td></tr></table></figure></li>
<li>建立新缓存 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure>
<img src="/Apache-Http-Server/index/3.png"></li>
</ol>
<ol start="8">
<li>查看已建立好的缓存 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum repolist</span><br></pre></td></tr></table></figure>
<img src="/Apache-Http-Server/index/4.png"></li>
</ol>
<ol start="9">
<li>测试 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y sendmail        # 若可以安装，即已安装成功</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="4-yum安装"><a href="#4-yum安装" class="headerlink" title="4. yum安装"></a>4. yum安装</h2><ol>
<li><p>检查是否已经安装httpd</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa httpd</span><br></pre></td></tr></table></figure></li>
<li><p>安装</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> yum -y install httpd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果提示： 没有可用软件包 httpd。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">国内各大源好像把httpd移除， 导致包根本找不到，可以试下下面的命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> yum --disableexcludes=all install -y httpd</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置ServerName</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure>
<p>则：ServerName localhost:80 或者 ServerName 127.0.0.1:80</p>
</li>
<li><p>启动</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service httpd start  #启动httpd</span><br><span class="line">service httpd restart #重启httpd</span><br><span class="line">chkconfig httpd on   #设置开机自动启动：</span><br></pre></td></tr></table></figure></li>
<li><p>测试</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> touch /var/www/html/index.html</span><br><span class="line"><span class="meta">#</span><span class="bash">输入以下内容</span></span><br></pre></td></tr></table></figure>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        Apache Http Server </span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>访问<a href="http://ip:port/hello.html，返回结果&quot;hello&quot;">http://ip:port/hello.html，返回结果&quot;hello&quot;</a> 说明没问题</p>
</li>
</ol>
<ol start="6">
<li>安装目录说明 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.Apache默认将网站的根目录指向/var/www/html 目录</span><br><span class="line">2.默认的主配置文件是/etc/httpd/conf/httpd.conf</span><br><span class="line">3. 配置存储在的/etc/httpd/conf.d/目录</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="5-常见问题"><a href="#5-常见问题" class="headerlink" title="5. 常见问题"></a>5. 常见问题</h2><ol>
<li>AH00534 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /apps/httpd24/conf/httpd.cof</span><br><span class="line"><span class="meta">#</span><span class="bash">加上： LoadModule mpm_prefork_module modules/mod_mpm_prefork.so</span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式 - 七大软件设计原则</title>
    <url>/design-principle/index.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="720a5eb50cba97e04dec53bc7988dcfc3989833b6234be8068f7cb2ca1c261e1"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux安装gitlab</title>
    <url>/gitlab/index.html</url>
    <content><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p> 以前在自己服务器使用的是Gitblit,官网地址：<a href="http://gitblit.github.io/gitblit">http://gitblit.github.io/gitblit</a>,  这个只需要在服务器上启动一个tomcat,然后将下载的Gitblit的war包放置在tomcat容器里面运行即可访问。</p>
<p>但是由于gitblit没有CI/CD的功能，于是自己就在网上找了一些博客搭建gitblit，在这里记录一下搭建的过程。</p>
<h3 id="2-安装步骤"><a href="#2-安装步骤" class="headerlink" title="2. 安装步骤"></a>2. 安装步骤</h3><ol>
<li><p>配置yum源</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/yum.repos.d/gitlab-ce.repo</span><br></pre></td></tr></table></figure></li>
<li><p>增加一下配置</p>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[gitlab-ce]</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">Gitlab CE Repository</span></span><br><span class="line"><span class="attr">baseurl</span>=<span class="string">https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</span></span><br><span class="line"><span class="attr">gpgcheck</span>=<span class="string">0</span></span><br><span class="line"><span class="attr">enabled</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure>
<p> <img src="/gitlab/index/1.png"></p>
</li>
<li><p>更新本地yum缓存</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum makecache</span><br></pre></td></tr></table></figure></li>
<li><p>安装GitLab社区版</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install gitlab-ce                    #自动安装最新版本</span><br><span class="line">   </span><br><span class="line">sudo yum install gitlab-ce-x.x.x         #安装指定版本</span><br></pre></td></tr></table></figure></li>
<li><p>更改默认端口配置(默认为80端口)    </p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>
<p>修改如下配置：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">external_url &#x27;http://ip:8888&#x27;              #填写自己的主机ip</span><br><span class="line">puma[&#x27;port&#x27;] = 8888                       #如果gitlab是13版本之前请求修改  union[&#x27;port&#x27;]=8888</span><br><span class="line">nginx[&#x27;listen_port&#x27;] = 8888</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置gitlab-http.conf </p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /var/opt/gitlab/nginx/conf/gitlab-http.conf</span><br></pre></td></tr></table></figure>
<p> 修改如下：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen *:8888;                   #和上面保持一致</span><br><span class="line">    server_name ip                   #填写自己的ip</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>放开端口</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">开放8888端口</span></span><br><span class="line">sudo firewall-cmd --add-port=8888/tcp --permanent</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重新加载防火墙</span></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure></li>
<li><p>修改配置后重新加载配置文件</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></li>
<li><p>重新gitlab</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>
<p><img src="/gitlab/index/2.png" alt="启动gitlab"></p>
</li>
<li><p>修改管理员登录密码</p>
<ul>
<li>进入gitlab-rails控制台  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-rails console</span><br></pre></td></tr></table></figure></li>
<li>查找root账号(默认只有一个root用户)  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u=User.where(id:1).first</span><br></pre></td></tr></table></figure></li>
<li>修改密码<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u.password=&#x27;xiaoyuge123&#x27;</span><br></pre></td></tr></table></figure></li>
<li>再次确认密码<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u.password_confirmation=&#x27;xiaoyuge123&#x27;</span><br></pre></td></tr></table></figure></li>
<li>保存  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">u.save!</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>浏览器访问：<a href="http://ip:8888/">http://ip:8888</a><br><img src="/gitlab/index/3.png" alt="gitlab登录界面"><br>至此，Gitlab搭建完毕！</p>
</li>
</ol>
<h3 id="3-GitLab常用命令"><a href="#3-GitLab常用命令" class="headerlink" title="3. GitLab常用命令"></a>3. GitLab常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo gitlab-ctl start    # 启动所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl stop        # 停止所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl restart        # 重启所有 gitlab 组件；</span><br><span class="line">sudo gitlab-ctl status        # 查看服务状态；</span><br><span class="line">sudo gitlab-ctl reconfigure        # 启动服务；</span><br><span class="line">sudo vim /etc/gitlab/gitlab.rb        # 修改默认的配置文件；</span><br><span class="line">gitlab-rake gitlab:check SANITIZE=true --trace    # 检查gitlab；</span><br><span class="line">sudo gitlab-ctl tail        # 查看日志；</span><br><span class="line">gitlab-ctl show-config           #查看gitlab配置信息</span><br></pre></td></tr></table></figure>

<h3 id="4-邮件配置"><a href="#4-邮件配置" class="headerlink" title="4. 邮件配置"></a>4. 邮件配置</h3><ol>
<li>修改配置 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>
 新增以下内容 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_enable&#x27;]</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_address&#x27;]</span> = <span class="string">&quot;mail.midea.com&quot;</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_port&#x27;]</span> = <span class="string">994</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_user_name&#x27;]</span> = <span class="string">&quot;发信邮箱&quot;</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_password&#x27;]</span> = <span class="string">&quot;发信邮箱密码&quot;</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_domain&#x27;]</span> = <span class="string">&quot;xxx.com&quot;</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_authentication&#x27;]</span> = <span class="string">&quot;login&quot;</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;]</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;smtp_tls&#x27;]</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">user[&#x27;git_user_email&#x27;]</span> = <span class="string">&quot;发信邮箱&quot;</span></span><br><span class="line"><span class="meta">gitlab_rails[&#x27;gitlab_email_from&#x27;]</span> = <span class="string">&#x27;发信邮箱&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li>测试邮件配置是否生效 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重新加载配置文件</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line">   </span><br><span class="line"><span class="meta">#</span><span class="bash">查看console</span></span><br><span class="line">sudo gitlab-rails console</span><br></pre></td></tr></table></figure>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Ruby: ruby 2.7.2p137 (2020-10-01 revision 5445e04352) [x86_64-linux]</span><br><span class="line">GitLab: 13.7.1 (c97c8073a0e) FOSS</span><br><span class="line">GitLab Shell: 13.14.0</span><br><span class="line">PostgreSQL: 12.4</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Loading production environment (Rails 6.0.3.3)</span><br><span class="line">irb(main):001:0&gt; Notify.test_email(&#x27;xxxx@midea.com&#x27;,&#x27;test&#x27;,&#x27;test&#x27;).deliver_now</span><br><span class="line"><span class="meta">Notify#</span><span class="bash">test_email: processed outbound mail <span class="keyword">in</span> 1.4ms</span></span><br><span class="line">Delivered mail 5ff2cb5082e2b_e45eb53d484754@devops.mail (673.8ms)</span><br><span class="line">Date: Mon, 04 Jan 2021 08:01:20 +0000</span><br><span class="line">From: GitLab &lt;xxx@midea.com&gt;</span><br><span class="line">Reply-To: GitLab &lt;noreply@ip&gt;</span><br><span class="line">To: xxxx@midea.com</span><br><span class="line">Message-ID: &lt;5ff2cb5082e2b_e45eb53d484754@devops.mail&gt;</span><br><span class="line">Subject: test</span><br><span class="line">Mime-Version: 1.0</span><br><span class="line">Content-Type: text/html;</span><br><span class="line">charset=UTF-8</span><br><span class="line">Content-Transfer-Encoding: 7bit</span><br><span class="line">Auto-Submitted: auto-generated</span><br><span class="line">X-Auto-Response-Suppress: All</span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;p&gt;test&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line">=&gt; #&lt;Mail::Message:199260, Multipart: false, Headers: &lt;Date: Mon, 04 Jan 2021 08:01:20 +0000&gt;, &lt;From: GitLab &lt;xxx@midea.com&gt;&gt;, &lt;Reply-To: GitLab &lt;noreply@ip&gt;&gt;, &lt;To: xxxx@midea.com&gt;, &lt;Message-ID: &lt;5ff2cb5082e2b_e45eb53d484754@devops.mail&gt;&gt;, &lt;Subject: test&gt;, &lt;Mime-Version: 1.0&gt;, &lt;Content-Type: text/html; charset=UTF-8&gt;, &lt;Content-Transfer-Encoding: 7bit&gt;, &lt;Auto-Submitted: auto-generated&gt;, &lt;X-Auto-Response-Suppress: All&gt;&gt;</span><br><span class="line">出现以上信息说明配置成功。</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-性能调优"><a href="#5-性能调优" class="headerlink" title="5. 性能调优"></a>5. 性能调优</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>
<p>新增以下内容并保存退出：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">unicorn[&#x27;worker_processes&#x27;]</span> = <span class="string">2                         #官方建议值为CPU核数+1（服务器只部署gitLab的情况下），可提高服务器响应速度，此参数最小值为2，设为1服务器可能卡死</span></span><br><span class="line"><span class="meta">unicorn[&#x27;work_timeout&#x27;]</span> = <span class="string">60                            #设置超时时间</span></span><br><span class="line"><span class="meta">unicorn[&#x27;worker_memory_limit_min&#x27;]</span> = <span class="string">&quot;200 * 1 &lt;&lt; 20&quot;    #减少最小内存</span></span><br><span class="line"><span class="meta">unicorn[&#x27;worker_memory_limit_max&#x27;]</span> = <span class="string">&quot;300 * 1 &lt;&lt; 20&quot;    #减少最大内存</span></span><br><span class="line"><span class="meta">postgresql[&#x27;shared_buffers&#x27;]</span> = <span class="string">&quot;128MB&quot;                  #减少数据库缓存</span></span><br><span class="line"><span class="meta">postgresql[&#x27;max_worker_processes&#x27;]</span> = <span class="string">6                  #减少数据库并发数</span></span><br><span class="line"><span class="meta">sidekiq[&#x27;concurrency&#x27;]</span> = <span class="string">15                             #减少sidekiq并发数</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">每次修改了配置，都需要重新加载</span></span><br><span class="line">sudo gitlab-ctl reconfigure</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">sudo gitlab-ctl restart</span><br></pre></td></tr></table></figure>


<h3 id="6-GitLab使用"><a href="#6-GitLab使用" class="headerlink" title="6. GitLab使用"></a>6. GitLab使用</h3><h4 id="6-1-创建Project"><a href="#6-1-创建Project" class="headerlink" title="6.1 创建Project"></a>6.1 创建Project</h4><ol>
<li><p>安装Git工具</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure></li>
<li><p>生成密钥文件：使用ssh-keygen生成密钥文件 .ssh/id_rsa.pub</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>
<p><img src="/gitlab/index/4.png" alt="生成密钥"><br><img src="/gitlab/index/5.png" alt="密钥"></p>
</li>
<li><p>在Gitlab上创建一个project<br><img src="/gitlab/index/6.png" alt="新建project"><br><img src="/gitlab/index/7.png" alt="新建project"></p>
</li>
<li><p>添加ssh key导入步骤2中生成的密钥文件内容<br><img src="/gitlab/index/8.png" alt="导入密钥文件"><br><img src="/gitlab/index/9.png" alt="导入密钥文件"><br>ssh key添加完成：<br><img src="/gitlab/index/10.png" alt="导入密钥文件"></p>
</li>
</ol>
<h4 id="6-2-配置git"><a href="#6-2-配置git" class="headerlink" title="6.2 配置git"></a>6.2 配置git</h4><ol>
<li>配置Git仓库人员<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;xiaoyuge&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>local（默认，高级优先）：只影响本地仓库</li>
<li>global(中优先级)：只影响所有当前用户的git仓库</li>
<li>system（低优先级）：影响到全系统的git仓库</li>
</ul>
</li>
<li>配置Git仓库人员email<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.email &quot;xiaoyuge0318@qq.com&quot;</span><br></pre></td></tr></table></figure></li>
<li>克隆项目 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone git@fase11h12dsa24fdv3Q:root/test.git</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="6-3-git常用命令"><a href="#6-3-git常用命令" class="headerlink" title="6.3 git常用命令"></a>6.3 git常用命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看某个命令文档</span></span><br><span class="line">git help &lt;command&gt;</span><br><span class="line">git &lt;command&gt; -h</span><br><span class="line">git &lt;command&gt; --help</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">初始化仓库</span></span><br><span class="line">git init </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加文件内容到暂存区（同时文件被跟踪）</span></span><br><span class="line">git add</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加所有文件</span></span><br><span class="line">git add .</span><br><span class="line">true</span><br><span class="line">git rm --cached    				        #仅从暂存区删除</span><br><span class="line">git rm 							#从暂存区与工作目录同时删除</span><br><span class="line">git rm $(git ls-files --deleted)		        #删除所有被跟踪，但是在工作目录被删除的文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git -commit -m &#x27;first commit&#x27; 			        #从暂存区提交 -m：注释</span><br><span class="line">git commit -a -m &#x27;full commit&#x27;			        #从工作区提交</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git log    						#查看提交历史记录</span><br><span class="line"></span><br><span class="line">git log --online</span><br><span class="line">git log --color --graph</span><br><span class="line"></span><br><span class="line">git diff 						#工作区与暂存区的差异</span><br><span class="line">git diff  --cached [&lt;reference&gt;]                        #暂存区与某次提交的差异，默认为HEAD</span><br><span class="line">git diff  [&lt;reference&gt;]  				#工作区与某次提交的差异，默认为HEAD</span><br><span class="line"></span><br><span class="line">git checkout -- &lt;file&gt;  			        #将文件内容从暂存区复制到工作目录</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">撤销暂存区内容</span></span><br><span class="line">git reset HEAD &lt;file&gt;  				        #将文件内容从上次提交复制到缓存区</span><br><span class="line">git checkout HEAD -- &lt;file&gt; 			        #将内容从上次提交复制到工作目录</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">对状态的跟踪:git中有两个状态：内容状态和文件状态，</span></span><br><span class="line"><span class="meta">#</span><span class="bash">内容状态标示内容文件的改变，有三个区域：工作目录，暂存区和提交区</span></span><br><span class="line"><span class="meta">#</span><span class="bash">文件状态有两个状态：已跟踪和未跟踪</span></span><br><span class="line">git status</span><br></pre></td></tr></table></figure>
<p><img src="/gitlab/index/11.png" alt="git status"></p>
<p>分支操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git branch &lt;branchName&gt; 				#创建一个分支</span><br><span class="line">git branch -d &lt;branchName&gt; 			        #删除一个分支</span><br><span class="line">git branch -v 			                        #显示所有分支信息</span><br><span class="line"></span><br><span class="line">git checkout &lt;branchName&gt; 			       #通过移动HEAD检出版本，可用于切换分支</span><br><span class="line">git checkout -b &lt;branchName&gt; 			       #创件一个分支并切换</span><br><span class="line">git checkout &lt;reference&gt; 			       #将其移动到一个引用</span><br><span class="line">git checkout - 			                       #恢复到上一个分支</span><br><span class="line"></span><br><span class="line">git reset   			                       #将当前分支回退到历史某个版本</span><br><span class="line">git reset --mixed &lt;commit&gt; 			       #(默认)</span><br><span class="line">git reset --soft&lt;commit&gt; </span><br><span class="line">git reset --hard &lt;commit&gt;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="7-常见问题"><a href="#7-常见问题" class="headerlink" title="7. 常见问题"></a>7. 常见问题</h3><ol>
<li><p>gitlab本身采用gitlab.example.com:80端口，如安装前服务器有启用80，安装完访问会报错。需更改gitlab的默认端口。<br>修改vim /etc/gitlab/gitlab.rb：external_url ‘<a href="http://localhost:8888/">http://localhost:8888</a></p>
<p> 如果就想用80端口，那没问题。如果更改了端口，后边可以自行调整nginx配置文件进行nginx反向代理设置。</p>
</li>
<li><p>日志位置：/var/log/gitlab 可以进去查看访问日志以及报错日志等，供访问查看以及异常排查。</p>
</li>
<li><p>gitlab内存消耗过大，频繁出现502：  <a href="http://www.360doc.com/content/22/0130/08/65839659_1015422932.shtml">http://www.360doc.com/content/22/0130/08/65839659_1015422932.shtml</a></p>
<p> gitlab-ctl tail #查看所有日志</p>
<p> gitlab-ctl tail nginx/gitlab_access.log #查看nginx访问日</p>
</li>
</ol>
<p>参考博客：<a href="https://blog.csdn.net/yzd524850313/article/details/113118193">https://blog.csdn.net/yzd524850313/article/details/113118193</a><br>参考博客：<a href="https://zhuanlan.zhihu.com/p/338882906">https://zhuanlan.zhihu.com/p/338882906</a></p>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>gitlab</tag>
      </tags>
  </entry>
  <entry>
    <title>jstack命令</title>
    <url>/jstack/index.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e7ac4505aeb3dc8c8977d365932663a2bae1b1e2f683d26155bd5d23d3db9c78"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>jstack</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装</title>
    <url>/docker-01/index.html</url>
    <content><![CDATA[<p>新的服务器没有安装docker，使用docker命令时提示：docker: command not found错误信息</p>
<h5 id="1-更新yum包"><a href="#1-更新yum包" class="headerlink" title="1. 更新yum包"></a>1. 更新yum包</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update</span><br></pre></td></tr></table></figure>

<h5 id="2-安装依赖软件包"><a href="#2-安装依赖软件包" class="headerlink" title="2.安装依赖软件包"></a>2.安装依赖软件包</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure>

<h5 id="3-设置yum源"><a href="#3-设置yum源" class="headerlink" title="3.设置yum源"></a>3.设置yum源</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>
<h5 id="4-安装docker"><a href="#4-安装docker" class="headerlink" title="4.安装docker"></a>4.安装docker</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">默认安装最新的docker稳定版本。</span></span><br><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure>
<h5 id="5-启动docker服务"><a href="#5-启动docker服务" class="headerlink" title="5.启动docker服务"></a>5.启动docker服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
<h5 id="6-设置开机自启动"><a href="#6-设置开机自启动" class="headerlink" title="6.设置开机自启动"></a>6.设置开机自启动</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>
<h5 id="7-查看docker版本信息"><a href="#7-查看docker版本信息" class="headerlink" title="7. 查看docker版本信息"></a>7. 查看docker版本信息</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>
<p><img src="/docker-01/index/1.png" alt="查看docker版本"><br>至此，解决。</p>
<h5 id="8-停止所有容器"><a href="#8-停止所有容器" class="headerlink" title="8. 停止所有容器"></a>8. 停止所有容器</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker stop $(docker ps -a | awk &#x27;&#123; print $1&#125;&#x27; | tail -n +2)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装mysql</title>
    <url>/docker-mysql/index.html</url>
    <content><![CDATA[<h5 id="1-查看所有的镜像"><a href="#1-查看所有的镜像" class="headerlink" title="1.查看所有的镜像"></a>1.查看所有的镜像</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure>
<p><img src="/docker-mysql/index/1.png"></p>
<h5 id="2-拉取最新版本的镜像"><a href="#2-拉取最新版本的镜像" class="headerlink" title="2.拉取最新版本的镜像"></a>2.拉取最新版本的镜像</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">或者指定版本</span></span><br><span class="line">docker pull mysql:8.0.16</span><br></pre></td></tr></table></figure>
<p><img src="/docker-mysql/index/2.png"></p>
<h5 id="3-创建数据目录和配置文件"><a href="#3-创建数据目录和配置文件" class="headerlink" title="3.创建数据目录和配置文件"></a>3.创建数据目录和配置文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/mysql/conf /usr/mysql/data</span><br><span class="line"></span><br><span class="line">chmod -R 777 /usr/mysql/</span><br></pre></td></tr></table></figure>
<h5 id="4-创建配置文件"><a href="#4-创建配置文件" class="headerlink" title="4.创建配置文件"></a>4.创建配置文件</h5><p>在上面创建的配置文件目录/usr/mysql/conf下创建MySQL的配置文件my.cnf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch my.cnf;</span><br><span class="line"></span><br><span class="line">vim /usr/mysql/conf/my.cnf;</span><br></pre></td></tr></table></figure>
<p>添加以下内容到上述创建的配置文件中</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">[client]</span></span><br><span class="line"><span class="comment">#socket = /usr/mysql/mysqld.sock</span></span><br><span class="line"><span class="meta">default-character-set</span> = <span class="string">utf8mb4</span></span><br><span class="line"><span class="attr">[mysqld]</span></span><br><span class="line"><span class="comment">#pid-file        = /var/run/mysqld/mysqld.pid</span></span><br><span class="line"><span class="comment">#socket          = /var/run/mysqld/mysqld.sock</span></span><br><span class="line"><span class="comment">#datadir         = /var/lib/mysql</span></span><br><span class="line"><span class="comment">#socket = /usr/mysql/mysqld.sock</span></span><br><span class="line"><span class="comment">#pid-file = /usr/mysql/mysqld.pid</span></span><br><span class="line"><span class="attr">datadir</span> = <span class="string">/usr/mysql/data</span></span><br><span class="line"><span class="attr">character_set_server</span> = <span class="string">utf8mb4</span></span><br><span class="line"><span class="attr">collation_server</span> = <span class="string">utf8mb4_bin</span></span><br><span class="line"><span class="meta">secure-file-priv</span>= <span class="string">NULL</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line"><span class="meta">symbolic-links</span>=<span class="string">0</span></span><br><span class="line"><span class="comment"># Custom config should go here</span></span><br><span class="line"><span class="comment">!includedir /etc/mysql/conf.d/</span></span><br></pre></td></tr></table></figure>
<h5 id="5-启动创建容器"><a href="#5-启动创建容器" class="headerlink" title="5.启动创建容器"></a>5.启动创建容器</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql</span><br></pre></td></tr></table></figure>
<p>参数解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">–name mysql5.7 容器别名</span><br><span class="line">-p 3307:3306 映射容器端口号和宿主机端口号（本机3307端口映射容器3306端口）</span><br><span class="line">-v /data/mysql/datadir:/var/lib/mysql 目录映射（挂载宿主机目录和 docker容器中的目录，前面是宿主机目录，后面是容器内部目录）</span><br><span class="line">-v /data/mysql/conf.d:/etc/mysql/conf.d 目录映射（mysql配置目录）</span><br><span class="line">-d 后台运行</span><br><span class="line">-e 环境参数，MYSQL_ROOT_PASSWORD设置root用户的密码</span><br></pre></td></tr></table></figure>
<p><img src="/docker-mysql/index/3.png" alt="启动创建容器"><br>执行上述命令后，执行查询容器的命令就可以看到创建的mysql容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<p><img src="/docker-mysql/index/4.png" alt="启动创建容器"></p>
<h5 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h5><h6 id="1-远程无法链接"><a href="#1-远程无法链接" class="headerlink" title="1.远程无法链接"></a>1.远程无法链接</h6><p>上述虽然安装好了mysql，但是使用远程的Navicat连接时提示错误，不能正确连接mysql，此时需要修改按照下面说的步骤修改一下mysql的密码模式以及主机等内容才可以。<br>修改mysql密码以及可访问主机</p>
<ol>
<li>进入容器内部 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it mysql /bin/bash</span><br></pre></td></tr></table></figure></li>
<li>连接mysql <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></li>
<li>使用mysql库 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure></li>
<li>修改访问主机以及密码等，设置为所有主机可访问 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;新密码&#x27;;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">注意： mysql_native_password，mysql8.x版本必须使用这种模式，否则navicate无法正确连接</span></span><br></pre></td></tr></table></figure></li>
<li>刷新 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">exit;</span><br></pre></td></tr></table></figure></li>
<li>远程使用Navicat连接数据库<br><img src="/docker-mysql/index/5.png" alt="连接"></li>
</ol>
<h6 id="2-docker启动mysql容器报错"><a href="#2-docker启动mysql容器报错" class="headerlink" title="2.docker启动mysql容器报错"></a>2.docker启动mysql容器报错</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --restart=unless-stopped -d --name mysql -v /usr/mysql/conf/my.cnf:/etc/mysql/my.cnf -v /usr/mysql/data:/var/lib/mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=xiaoyuge mysql</span><br></pre></td></tr></table></figure>
<p>启动时提示：Error response from daemon: OCI runtime create failed: container_linux.go:380: starting container process caused: process_linux.go:545: container init caused: Running hook #0:: error running hook: signal: segmentation fault (core dumped), stdout: , stderr:: unknown</p>
<p><img src="/docker-mysql/index/6.png"><br>解决方式：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum upgrade</span><br></pre></td></tr></table></figure>
<p>或者可以试下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /usr/mysql/conf/my.cnf</span><br><span class="line">touch /usr/mysql/conf/my.cnf</span><br><span class="line">vim my.cnf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">然后重新配置一下</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker安装nginx</title>
    <url>/docker-nginx/index.html</url>
    <content><![CDATA[<h5 id="1-查看所有的镜像"><a href="#1-查看所有的镜像" class="headerlink" title="1.查看所有的镜像"></a>1.查看所有的镜像</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search nginx</span><br></pre></td></tr></table></figure>
<p><img src="/docker-nginx/index/1.png"></p>
<h5 id="2-拉取最新版本的镜像"><a href="#2-拉取最新版本的镜像" class="headerlink" title="2.拉取最新版本的镜像"></a>2.拉取最新版本的镜像</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">或者指定最新版本</span></span><br><span class="line">docker pull nginx:latest</span><br></pre></td></tr></table></figure>
<p><img src="/docker-nginx/index/2.png"></p>
<h5 id="3-使用命令查看本地镜像，确定nginx镜像已下载到本地"><a href="#3-使用命令查看本地镜像，确定nginx镜像已下载到本地" class="headerlink" title="3.使用命令查看本地镜像，确定nginx镜像已下载到本地"></a>3.使用命令查看本地镜像，确定nginx镜像已下载到本地</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<p><img src="/docker-nginx/index/3.png"></p>
<h5 id="4-创建挂载目录"><a href="#4-创建挂载目录" class="headerlink" title="4. 创建挂载目录"></a>4. 创建挂载目录</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /data/nginx/&#123;conf,conf.d,html,logs&#125;</span><br></pre></td></tr></table></figure>
<h5 id="5-创建配置文件"><a href="#5-创建配置文件" class="headerlink" title="5. 创建配置文件"></a>5. 创建配置文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch nginx.cnf</span><br></pre></td></tr></table></figure>
<h5 id="6-Nginx详情配置请参考：https-xiaoyuge-work-2021-12-05-nginx-02"><a href="#6-Nginx详情配置请参考：https-xiaoyuge-work-2021-12-05-nginx-02" class="headerlink" title="6. Nginx详情配置请参考：https://xiaoyuge.work/2021/12/05/nginx-02/"></a>6. Nginx详情配置请参考：<a href="https://xiaoyuge.work/2021/12/05/nginx-02/">https://xiaoyuge.work/2021/12/05/nginx-02/</a></h5><h5 id="7-查看容器"><a href="#7-查看容器" class="headerlink" title="7. 查看容器"></a>7. 查看容器</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker stop xxx  停止某个容器运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker rm xxx  删除容器</span></span><br></pre></td></tr></table></figure>
<p><img src="/docker-nginx/index/6.png" alt="查看容器"></p>
<h5 id="8-启动容器，挂载配置文件"><a href="#8-启动容器，挂载配置文件" class="headerlink" title="8.启动容器，挂载配置文件"></a>8.启动容器，挂载配置文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run --name mynginx -d -p 80:80 -v /data/nginx/conf/nginx.conf:/etc/nginx/nginx.conf -v /data/nginx/logs:/var/log/nginx -d docker.io/nginx</span><br></pre></td></tr></table></figure>
<p>可以通过命令docker exec -it nginx-test bash进入容器内容修改配置</p>
<p><img src="/docker-nginx/index/4.png"></p>
<h5 id="9-安装完毕，访问地址-http-localhost-8080，出现如下内容，安装成功！！！"><a href="#9-安装完毕，访问地址-http-localhost-8080，出现如下内容，安装成功！！！" class="headerlink" title="9.安装完毕，访问地址 http://localhost:8080，出现如下内容，安装成功！！！"></a>9.安装完毕，访问地址 <a href="http://localhost:8080，出现如下内容，安装成功！！！">http://localhost:8080，出现如下内容，安装成功！！！</a></h5><p><img src="/docker-nginx/index/5.png"></p>
<h5 id="10-域名解析配置"><a href="#10-域名解析配置" class="headerlink" title="10.域名解析配置"></a>10.域名解析配置</h5><p>我买的是阿里云的服务器以及域名，上面操作后，忘记在阿里云控制台中去配置<br><img src="/docker-nginx/index/7.png"><br><img src="/docker-nginx/index/8.png" alt="域名解析"></p>
<h5 id="11-配置多个二级域名"><a href="#11-配置多个二级域名" class="headerlink" title="11.配置多个二级域名"></a>11.配置多个二级域名</h5><p>在第8步的时候将docker容器中的nginx配置映射到了目录/data/nginx/conf下面；<br>修改nginx.conf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    #gzip  on;</span><br><span class="line">    </span><br><span class="line">    #引入conf.d下面所有的配置文件</span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后在conf.d目录下面创建了两个子域名反向代理配置文件,其他的域名代理相同，只要改server_name和proxy_pass代理端口，配置文件需以.conf结尾<br><img src="/docker-nginx/index/8.png" alt="域名解析"></p>
<ul>
<li>note.xiaoyuge520.vip.conf<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">########   Nginx的main(全局配置)文件</span><br><span class="line">#指定nginx运行的用户及用户组,默认为nobody</span><br><span class="line">#user  nobody;</span><br><span class="line">#开启的线程数，一般跟逻辑CPU核数一致</span><br><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">#设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式</span><br><span class="line">#use epoll;</span><br><span class="line">    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">#######Nginx的Http服务器配置,Gzip配置</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #开启高效文件传输模式</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    ########Nginx的server虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #监听端口为 80</span><br><span class="line">        listen       80;</span><br><span class="line">        #设置主机域名</span><br><span class="line">        server_name  note.xiaoyuge520.vip;</span><br><span class="line">        #设置访问的语言编码</span><br><span class="line">        #charset koi8-r;</span><br><span class="line">        #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        #设置虚拟主机的基本信息</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_set_header  Host  $http_host;</span><br><span class="line">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://47.101.130.163:8086/note; # 代理ip:端口</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>record.xiaoyuge520.vip.conf  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">worker_processes  1;</span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">#######Nginx的Http服务器配置,Gzip配置</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  record.xiaoyuge520.vip;</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_set_header  Host  $http_host;</span><br><span class="line">            proxy_set_header  X-Real-IP  $remote_addr;</span><br><span class="line">            proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_pass http://47.101.130.163:8888/record; # 代理ip:端口</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>如果挂载之后容器运行正常却依然不能通过域名访问可尝试以下操作</strong><br>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看所有容器,获取nginx的container 名称</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">向名称为nginx的容器发送脚本命令, mynginx 为容器名称</span></span><br><span class="line">docker exec -it mynginx /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重新加载配置命令</span></span><br><span class="line">cd /etc/nginx/conf.d</span><br><span class="line">service nginx reload</span><br><span class="line"><span class="meta">#</span><span class="bash">检查配置文件路径是否正确</span></span><br></pre></td></tr></table></figure></p>
<p><strong>每一次更改配置文件都需要重启容器</strong><br>  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 重启nginx容器</span></span><br><span class="line">docker restart nginx </span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看容器状态</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta">  </span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果挂载失败，查看nginx容器<span class="built_in">log</span>,显示错误信息，根据错误信息 更改配置文件等</span></span><br><span class="line">docker logs -t nginx</span><br></pre></td></tr></table></figure></p>
<hr>
<p>以上配置完成之后能够通过域名访问网站，但是css样式却被nginx解析成text/plain，打开控制台可看到warn信息</p>
<p><strong>解决nginx将css文件解析为text/plain</strong></p>
<ul>
<li><p>方法一： ngin.conf中http添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">include       /etc/nginx/mime.types;</span><br><span class="line">default_type  application/octet-stream;</span><br></pre></td></tr></table></figure>
<p>注：此办法并不能使我网站的css正确解析，因为在拷贝nginx镜像中的原配置文件时，就已经添加mime.types了。却依然不能正确解析。</p>
</li>
<li><p>方法二：解析成功，原因未知</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">将index.html中<span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span>去掉。</span><br></pre></td></tr></table></figure>
<p>通过域名访问：成功！！</p>
</li>
</ul>
]]></content>
      <categories>
        <category>09 Nginx</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx基础篇（二）安装</title>
    <url>/nginx-02/index.html</url>
    <content><![CDATA[<h2 id="1-Nginx安装"><a href="#1-Nginx安装" class="headerlink" title="1.Nginx安装"></a>1.Nginx安装</h2><ol>
<li><p>安装nginx前首先要确认系统中是否安装了gcc 、pcre-devel、zlib-devel、openssl-devel</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">1、rpm包安装的，可以用 rpm -qa 看到，如果要查找某软件包是否安装，用 rpm -qa | grep <span class="string">&quot;软件或者包的名字&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">2、以deb包安装的，可以用 dpkg -l 看到。如果是查找指定软件包，用 dpkg -l | grep <span class="string">&quot;软件或者包的名字&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">3、yum方法安装的，可以用 yum list installed 查找，如果是查找指定包，用 yum list installed | grep <span class="string">&quot;软件名或者包名&quot;</span></span></span><br><span class="line">yum list installed | grep &quot;gcc&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/nginx-02/index/image-20201210100736952.png" alt="image-20201210103251475"></p>
</li>
<li><p>安装依赖包</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></li>
<li><p>下载并解压安装包</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//创建nginx存放文件夹</span><br><span class="line">cd /usr/local</span><br><span class="line"><span class="meta">#</span><span class="bash">下载tar包</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.23.2.tar.gz</span><br><span class="line">tar -xvf nginx-1.23.2.tar.gz</span><br><span class="line">mv nginx-1.23.2 nginx</span><br><span class="line"><span class="meta">#</span></span><br></pre></td></tr></table></figure></li>
<li><p>配置</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd nginx</span><br><span class="line">mkdir logs</span><br><span class="line">./configure  --prefix=/usr/local/nginx</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li>
<li><p>测试是否安装成功</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx</span><br><span class="line">./sbin/nginx -t</span><br></pre></td></tr></table></figure></li>
<li><p>配置nginx.conf</p>
 <figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">/usr/local/nginx/cong/nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#修改如下</span></span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">  <span class="string">listen</span> <span class="number">80</span><span class="string">;</span></span><br><span class="line">  <span class="string">server_name</span> <span class="string">localhost;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 注意设定 root路径是有dist的， 如果需要配置多个静态资源，只允许有一个root ，其他的使用alias别名</span></span><br><span class="line">  <span class="string">location</span> <span class="string">/</span> &#123;</span><br><span class="line">    <span class="string">root</span> <span class="string">/usr/local/webapp/dist;</span></span><br><span class="line">    <span class="string">index</span> <span class="string">/index.html;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">#配置多个静态资源 其他的使用alias别名</span></span><br><span class="line">  <span class="string">location</span> <span class="string">/log</span> &#123;</span><br><span class="line">    <span class="string">alias</span>   <span class="string">html/log;</span></span><br><span class="line">    <span class="string">index</span>  <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line">    <span class="string">autoindex</span>  <span class="string">on;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="string">location</span> <span class="string">/ruoyi</span> &#123;</span><br><span class="line">    <span class="string">root</span>   <span class="string">/usr/local/nginx/html/dist;</span></span><br><span class="line">    <span class="string">try_files</span> <span class="string">$uri</span> <span class="string">$uri/</span> <span class="string">/index.html;</span></span><br><span class="line">    <span class="string">index</span>  <span class="string">index.html</span> <span class="string">index.htm;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">#跨域 ip和port自行替换</span></span><br><span class="line">  <span class="string">location</span> <span class="string">/adminApi</span> &#123;</span><br><span class="line">    <span class="string">proxy_pass</span> <span class="string">http://ip:port;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li><p>启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动nginx</span></span><br><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure>
</li>
<li><p>常见问题</p>
<ol>
<li>nginx启动提示：nginx: [emerg] bind() to 0.0.0.0:8080 failed (98: Address already in use)</li>
</ol>
<ul>
<li>修改端口  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#首先进入nginx/conf目录（根据自己的目录来写）</span><br><span class="line"># vi /usr/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line">#修改nginx.conf，将8080端口修改为其他端口号</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#更换端口之后，然后重启nginx就可以了</span><br><span class="line">server &#123;</span><br><span class="line">    listen       8888;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>取消占用端口号进程  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看被占用的端口</span></span><br><span class="line">netstat -nlp|grep :8080</span><br><span class="line">tcp      0     0 0.0.0.0:8888       0.0.0.0:*          LISTEN     24594/nginx: master</span><br><span class="line"><span class="meta">#</span><span class="bash">结束进程24594</span></span><br><span class="line">kill -9 24594</span><br><span class="line"><span class="meta">#</span><span class="bash">然后再重启nginx就可以了</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>常用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">修改配置后重新启动</span></span><br><span class="line">./nginx -s reload</span><br><span class="line"><span class="meta">#</span><span class="bash">如果出现：nginx: [error] open() ＂/usr/<span class="built_in">local</span>/nginx/logs/nginx.pid＂ failed</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">再次启动即可</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看nginx进程是否启动</span></span><br><span class="line">ps -ef|grep nginx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">平滑启动nginx</span></span><br><span class="line">kill -HUP</span><br><span class="line"><span class="meta">#</span><span class="bash">主进程号或进程号文件路径 或者使用</span></span><br><span class="line"></span><br><span class="line">/usr/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">注意，修改了配置文件后最好先检查一下修改过的配置文件是否正 确，以免重启后Nginx出现错误影响服务器稳定运行。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">判断Nginx配置是否正确命令如下：</span></span><br><span class="line">nginx -t -c /usr/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">或者使用</span></span><br><span class="line">/usr/nginx/sbin/nginx -t</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重启</span></span><br><span class="line">nginx reload</span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload </span><br><span class="line">service nginx restart</span><br><span class="line"><span class="meta">#</span><span class="bash">检查 nginx.conf 配置文件是否有错</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -t</span><br><span class="line"><span class="meta">#</span><span class="bash">nginx启动命令:</span></span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">指定配置文件启动</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭命令:</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s stop</span><br><span class="line"><span class="meta">#</span><span class="bash">重启命令:</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动</span></span><br><span class="line">./nginx</span><br><span class="line"><span class="meta">#</span><span class="bash">关闭</span></span><br><span class="line">./nginx -s stop</span><br></pre></td></tr></table></figure>
<p> <img src="/nginx-02/index/image-20210606160947369.png" alt="image-20201210103251475"></p>
<p> 启动后访问localhost 效果如下：<br> <img src="/nginx-02/index/image-20201210103251475.png" alt="image-20201210103251475"></p>
</li>
</ol>
<h2 id="2-Nginx配置"><a href="#2-Nginx配置" class="headerlink" title="2.Nginx配置"></a>2.Nginx配置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">...... 全局块</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">true//events 块</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##数据库配置</span></span></span><br><span class="line">stream &#123;</span><br><span class="line">    server &#123;</span><br><span class="line">       listen 3306;</span><br><span class="line">       proxy_pass db;    </span><br><span class="line">    &#125;</span><br><span class="line">    upstream db &#123;</span><br><span class="line">       server 192.168.18.130:3305;</span><br><span class="line">       server 192.168.18.129:3305;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http&#123;</span><br><span class="line">    ##http全局块</span><br><span class="line">true  server+&#123;</span><br><span class="line">truetruelocation +[]</span><br><span class="line">true&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-1配置内容规则"><a href="#2-1配置内容规则" class="headerlink" title="2.1配置内容规则"></a>2.1配置内容规则</h3><p>官网配置教程：<a href="https://nginx.org/en/docs/dirindex.html">https://nginx.org/en/docs/dirindex.html</a><br>变量应用：<a href="https://nginx.org/en/docs/varindex.html">https://nginx.org/en/docs/varindex.html</a></p>
<ul>
<li>用#表示注释</li>
<li>每行配置的结尾需要加上分号</li>
<li>如果配置项值中包括语法符号，比如空格符，那么需要使用单引号或者双引号行括住配置项值，否则ngin x会报语法错误</li>
<li>单位简写：<ul>
<li>K或者k千字节（kilo byte, KB）</li>
<li>M或者m兆字节（megabyte MB）</li>
<li>ms(毫秒)，s(秒)， m(分)， h(小时) ， d (天)， w（周）， M（月，包含30天），y（年）</li>
</ul>
</li>
</ul>
<h3 id="2-2-详细配置内容"><a href="#2-2-详细配置内容" class="headerlink" title="2.2 详细配置内容"></a>2.2 详细配置内容</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">########   Nginx的main(全局配置)文件</span><br><span class="line">#指定nginx运行的用户及用户组,默认为nobody</span><br><span class="line">#user  nobody;</span><br><span class="line"></span><br><span class="line">#开启的线程数，一般跟逻辑CPU核数一致</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#定位全局错误日志文件，级别以notice显示，还有debug,info,warn,error,crit模式，debug输出最多，crir输出最少，根据实际环境而定</span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#指定进程id的存储文件位置</span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line">#指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制</span><br><span class="line">#worker_rlimit_nofile 65535</span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    #设置工作模式为epoll,除此之外还有select,poll,kqueue,rtsig和/dev/poll模式</span><br><span class="line">    #use epoll;</span><br><span class="line"></span><br><span class="line">    #定义每个进程的最大连接数,受系统进程的最大打开文件数量限制。</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line">###数据库的负载均衡</span><br><span class="line">stream &#123;</span><br><span class="line">  upstream mysql_nginx &#123;</span><br><span class="line">      hash $remote_addr consistent;</span><br><span class="line">      server 192.168.18.128:3306 weight=5 max_fails=3 fail_timeout=30s;</span><br><span class="line">      server 192.168.18.129:3306;</span><br><span class="line">      server 192.168.18.130:3306;</span><br><span class="line">      ##last_conn; #最小连接</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">      listen 3306; # 数据库服务器监听端口</span><br><span class="line">      proxy_connect_timeout 10s;</span><br><span class="line">      proxy_timeout 300s; # 设置客户端和代理服务之间的超时时间，如果5分钟内没操作将自动断开。</span><br><span class="line">      proxy_pass mysql_nginx;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">#######Nginx的Http服务器配置,Gzip配置</span><br><span class="line">http &#123;</span><br><span class="line">    #主模块指令，实现对配置文件所包含的文件的设定，可以减少主配置文件的复杂度，DNS主配置文件中的zonerfc1912,acl基本上都是用include语句。</span><br><span class="line">    include       mime.types;</span><br><span class="line"></span><br><span class="line">    #核心模块指令，智力默认设置为二进制流，也就是当文件类型未定义时使用这种方式</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #下面代码为日志格式的设定，main为日志格式的名称，可自行设置，后面引用</span><br><span class="line">    #log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class="line">    #                  &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class="line">    #                  &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class="line"></span><br><span class="line">    #引用日志main， main是log-format的格式，在上面配置了；后面可以加上日志缓冲区大小，写满了就flush到磁盘中buffer = 1M;</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    #设置允许客户端请求的最大的单个文件字节数</span><br><span class="line">    #client_max_body_size 20M;</span><br><span class="line">    #指定来自客户端请求头的headebuffer大小</span><br><span class="line">    #client_header_buffer_size  32k;</span><br><span class="line">    #指定连接请求试图写入缓存文件的目录路径</span><br><span class="line">    #client_body_temp_path /dev/shm/client_body_temp;</span><br><span class="line">    #指定客户端请求中较大的消息头的缓存最大数量和大小，目前设置为4个32KB</span><br><span class="line">    #large client_header_buffers 4 32k;</span><br><span class="line"></span><br><span class="line">    #开启高效文件传输模式</span><br><span class="line">    sendfile        on;</span><br><span class="line">    #开启防止网络阻塞</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line">    #开启防止网络阻塞</span><br><span class="line">    #tcp_nodelay    on;</span><br><span class="line"></span><br><span class="line">    #设置客户端连接保存活动的超时时间</span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #设置客户端请求读取超时时间</span><br><span class="line">    #client_header_timeout 10;</span><br><span class="line">    #设置客户端请求主体读取超时时间</span><br><span class="line">    #client_body_timeout 10;</span><br><span class="line">    #用于设置相应客户端的超时时间</span><br><span class="line">    #send_timeout</span><br><span class="line"></span><br><span class="line">    ####HttpGZip模块配置</span><br><span class="line">    #httpGzip modules</span><br><span class="line">    #开启gzip压缩</span><br><span class="line">    #gzip  on;</span><br><span class="line">    #设置允许压缩的页面最小字节数</span><br><span class="line">    #gzip_min_length 1k;</span><br><span class="line">    #申请4个单位为16K的内存作为压缩结果流缓存</span><br><span class="line">    #gzip_buffers 4 16k;</span><br><span class="line">    #设置识别http协议的版本，默认为1.1</span><br><span class="line">    #gzip_http_version 1.1;</span><br><span class="line">    #指定gzip压缩比，1-9数字越小，压缩比越小，速度越快</span><br><span class="line">    #gzip_comp_level 2;</span><br><span class="line">    #指定压缩的类型</span><br><span class="line">    #gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class="line">    #让前端的缓存服务器进过gzip压缩的页面</span><br><span class="line">    #gzip_vary on;</span><br><span class="line"></span><br><span class="line">    #########Nginx的server虚拟主机配置</span><br><span class="line">    server &#123;</span><br><span class="line">        #监听端口为 80</span><br><span class="line">        listen       80;</span><br><span class="line"></span><br><span class="line">        #设置主机域名</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #设置访问的语言编码</span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        #设置虚拟主机的基本信息</span><br><span class="line">        location / &#123;</span><br><span class="line">            #设置虚拟主机的网站根目录</span><br><span class="line">            root   html;</span><br><span class="line"></span><br><span class="line">            #设置虚拟主机默认访问的网页</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class="line">        # concurs with nginx&#x27;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-3-日志"><a href="#2-3-日志" class="headerlink" title="2.3 日志"></a>2.3 日志</h3><p>在nginx同级目录下logs文件夹</p>
<ul>
<li>access.log  正常日志</li>
<li>error.log 错误日期</li>
</ul>
<p>需要在nginx.conf中的http模块配置access_log</p>
]]></content>
      <categories>
        <category>09 Nginx</category>
      </categories>
      <tags>
        <tag>Nginx专题</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx基础篇（三）实现虚拟主机</title>
    <url>/nginx-03/index.html</url>
    <content><![CDATA[<h3 id="1-虚拟主机Virtual-Host"><a href="#1-虚拟主机Virtual-Host" class="headerlink" title="1. 虚拟主机Virtual Host"></a>1. 虚拟主机Virtual Host</h3><p>一种在单一主机或主机群上，实现多网域服务的方法，可以运行多个网站或服务的技术，虚拟主机之间完全独立，并可由用户自行管理虚拟并非指不存在，而是指空间是由实体的服务器延伸而来，其硬件系统可以是基于服务器群，或者单个服务器</p>
<p>使用域名访问虚拟主机，虚拟主机会给一个文件路径，然后部署自己的内容；访问域名时就会访问改文件夹下的某 个资源</p>
<h3 id="2-使用Nginx配置虚拟主机"><a href="#2-使用Nginx配置虚拟主机" class="headerlink" title="2. 使用Nginx配置虚拟主机"></a>2. 使用Nginx配置虚拟主机</h3><ol>
<li><p>在nginx下建立一个ygb的文件夹，里面新建一个index.html</p>
</li>
<li><p>在nginx.conf配置下http -&gt; server块内配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    #监听端口为 80</span><br><span class="line">    listen       80;</span><br><span class="line">    #设置主机域名</span><br><span class="line">    server_name  www.xiaoyuge.work;</span><br><span class="line">    #设置访问的语言编码</span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #设置虚拟主机访问日志的存放路径及日志的格式为main</span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line">   </span><br><span class="line">    #    这个是域名反问的虚拟主机的文件路径</span><br><span class="line">    root  /usr/local/nginx/data/ygb</span><br><span class="line">    #设置虚拟主机的基本信息</span><br><span class="line">    location / &#123;</span><br><span class="line">        #设置虚拟主机默认访问的网页</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>启动,然后在浏览器访问域名<a href="http://www.xiaoyuge.work/">www.xiaoyuge.work</a></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -c ./nginx.conf</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>09 Nginx</category>
      </categories>
      <tags>
        <tag>Nginx专题</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx基础篇（四）Nginx实现反向代理</title>
    <url>/nginx-04/index.html</url>
    <content><![CDATA[<h3 id="1-正向代理和反向代理"><a href="#1-正向代理和反向代理" class="headerlink" title="1. 正向代理和反向代理"></a>1. 正向代理和反向代理</h3><ol>
<li><p>正向代理：<br>正向代理类似一个跳板机，代理访问外部资源<br>比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个正向代理服务器，请求发到代理服，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了<br><img src="/nginx-04/index/1.png" alt="正向代理"></p>
<p> <strong>正向代理的用途</strong>：</p>
<p> （1）访问原来无法访问的资源，如google</p>
<p> （2） 可以做缓存，加速访问资源</p>
<p> （3）对客户端访问授权，上网进行认证</p>
<p> （4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息</p>
<p> <strong>正向代理即是客户端代理, 代理客户端, 服务端不知道实际发起请求的客户端</strong><br><img src="/nginx-04/index/3.png" alt="正反向代理"></p>
</li>
<li><p>反向代理：<br>反向代理（Reverse Proxy）实际运行方式是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个服务器<br><img src="/nginx-04/index/2.png" alt="反向代理"></p>
<p><strong>反向代理的作用</strong>：</p>
<p>（1）保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网</p>
<p>（2）负载均衡，通过反向代理服务器来优化网站的负载</p>
<p><strong>反向代理即是服务端代理, 代理服务端, 客户端不知道实际提供服务的服务端</strong></p>
</li>
</ol>
<h3 id="2-Nginx配置反向代理"><a href="#2-Nginx配置反向代理" class="headerlink" title="2. Nginx配置反向代理"></a>2. Nginx配置反向代理</h3><p>在http-&gt; server块中配置server_name</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    #监听端口为 80</span><br><span class="line">    listen       80;</span><br><span class="line">    #设置主机域名</span><br><span class="line">    server_name  http://192.168.44.99;</span><br><span class="line">    #设置虚拟主机的基本信息</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://192.168.44.1:9096;      ###最重要的配置，转发到目标地址， 也可以配置服务器组，然后upstream一个服务器组</span><br><span class="line">        proxy_method POST;   #设置转发请求的格式</span><br><span class="line">        #Nginx在header里面增加一个自定义字段 Host， 用于存放当前客户端IP地址</span><br><span class="line">        proxy_set_header  Host $host;</span><br><span class="line">        #获取客户端的真实IP地址设置到header中的字段名为X-Real-IP里面</span><br><span class="line">        proxy_set_header X-Real-IP  $remote_addr;</span><br><span class="line">        #获取所有转发请求的IP信息列表</span><br><span class="line">        proxy_set_header  X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么访问<a href="http://192.168.44.99/">http://192.168.44.99</a> ， nginx会将请求转发给目标服务器<a href="http://192.168.44.1:9096/">http://192.168.44.1:9096</a></p>
<h4 id="2-1-location-匹配规则"><a href="#2-1-location-匹配规则" class="headerlink" title="2.1 location 匹配规则"></a>2.1 location 匹配规则</h4><p>匹配规则从上到下，匹配规则越宽松；</p>
<table>
<thead>
<tr>
<th>模式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>location=/uri</td>
<td>= 表示精确匹配，只有完全匹配才能生效</td>
</tr>
<tr>
<td>location ^~ /uri</td>
<td>^~ 开头对URL路径进行前缀匹配，并且在正则之前</td>
</tr>
<tr>
<td>location ~ pattern</td>
<td>开头表示区分大小写的正则匹配</td>
</tr>
<tr>
<td>location ~* pattern</td>
<td>开头表示不区分大小写的正则匹配</td>
</tr>
<tr>
<td>location /uri</td>
<td>不带任何修饰符，也表示前缀匹配，但是在正则匹配之后</td>
</tr>
<tr>
<td>location /</td>
<td>通用匹配，任何未匹配到其他location的请求都会匹配到，相当于switch中的default</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>09 Nginx</category>
      </categories>
      <tags>
        <tag>Nginx专题</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx基础篇（一）扫盲</title>
    <url>/nginx-md/index.html</url>
    <content><![CDATA[<h3 id="1-Nginx发展史"><a href="#1-Nginx发展史" class="headerlink" title="1.Nginx发展史"></a>1.Nginx发展史</h3><p>作者：logo Sysoev</p>
<ul>
<li>2000年地洞，c语言编写</li>
<li>2004年开源</li>
<li>2011年成立商业公司</li>
<li>2013 发布商业版本Nginx plus</li>
<li>2019.5月F5 Networks收购nginx</li>
<li>2019.12被Rambler集团起诉</li>
</ul>
<h3 id="2-Nginx与其他web服务器对比"><a href="#2-Nginx与其他web服务器对比" class="headerlink" title="2.Nginx与其他web服务器对比"></a>2.Nginx与其他web服务器对比</h3><ol>
<li>Nginx与Apache HTTP server project区别<br>用来响应用户请求的web服务器</li>
<li>Nginx 和tomcat区别<br>Nginx是HTTP Server，主要是用于访问一些静态资源，可以用做代理服务器<br>Tomcat是Application Server应用服务器，用来存放和运行程序；</li>
<li>HTTP Server 和Application Server区别与联系</li>
</ol>
<h3 id="3-HTTP知识"><a href="#3-HTTP知识" class="headerlink" title="3. HTTP知识"></a>3. HTTP知识</h3><h4 id="3-1-IP和端口"><a href="#3-1-IP和端口" class="headerlink" title="3.1 IP和端口"></a>3.1 IP和端口</h4><p>120.77.38.160:80</p>
<p>0为A类，10为B类，110为C类，1110为D类，1111为E类。D类地址供组播使用，E类地址保留。</p>
<p><img src="/nginx-md/index/1.png" alt="img"></p>
<p><img src="/nginx-md/index/2.png" alt="img"></p>
<p>端口是：0～65535</p>
<h4 id="3-2-域名"><a href="#3-2-域名" class="headerlink" title="3.2 域名"></a>3.2 域名</h4><p>协议、子域名、顶级域名、域名类型、资源路径、参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#https 协议默认端口443 可以省略</span><br><span class="line">https://www.baidu.com:443</span><br><span class="line"></span><br><span class="line">#user：子域名， com为域名类型（cn中国， us美国...）； 3623252831 为资源路径</span><br><span class="line">https://user.qzone.qq.com/3623252831</span><br><span class="line"></span><br><span class="line">#？号后面为参数</span><br><span class="line">https://baike.baidu.com/item/测试/232323?fr=asdfasdf</span><br></pre></td></tr></table></figure>
<p><strong>域名(domainName)和IP的关系以及域名的组成</strong></p>
<p>域名：<a href="https://www.baidu.com/member/query?far=adsfad">https://www.baidu.com:443/member/query?far=adsfad</a></p>
<ul>
<li>http/ https: 协议</li>
<li>baidu: 顶级域名</li>
<li>Com： 域名类型</li>
<li>www: 子域名，可以有多级：user.qzone.qq.com/232323</li>
<li>far=asdfa: 参数</li>
<li>member/query: 资源路径<br>DNS(domain name server)将域名转化为ip+port</li>
</ul>
<h5 id="3-3-HTTP协议的特点"><a href="#3-3-HTTP协议的特点" class="headerlink" title="3.3 HTTP协议的特点"></a>3.3 HTTP协议的特点</h5><ul>
<li>简单快速</li>
<li>灵活</li>
<li>无连接（一次请求，连接关闭）</li>
<li>无状态（每次请求都和之前的请求无关）</li>
</ul>
<h5 id="3-4-HTTP协议的请求格式"><a href="#3-4-HTTP协议的请求格式" class="headerlink" title="3.4 HTTP协议的请求格式"></a>3.4 HTTP协议的请求格式</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Request URL: https://prtas.videocc.net/v2/view?pid=1638687363047X1327470&amp;vid=8c8d9388d0b4c16f41ef557fba23dede_8&amp;uid=8c8d9388d0&amp;flow=0&amp;ts=1638688553584&amp;href=aHR0cHM6Ly9rZS5ndXBhb2VkdS5jbi9wbGF5LzI4OD9waGFzZUlkPTU&amp;duration=1278&amp;cts=789&amp;sign=fcf19468eff088e983796d5826268f2d&amp;sd=1190&amp;pd=788&amp;pn=HTML5&amp;pv=v1.15.0&amp;sid=ZDIzZGM4ODUtNDM2My00MTQ3LWJmYTktY2M3MDgwM2U0NDc5&amp;param1=&amp;param2=MTc2MjEyODQ5OTg&amp;param3=&amp;cataid=1591268435818</span><br><span class="line">Request Method: GET</span><br><span class="line">Status Code: 200 </span><br><span class="line">Remote Address: 221.231.81.238:443</span><br><span class="line">Referrer Policy: strict-origin-when-cross-origin</span><br></pre></td></tr></table></figure>
<ul>
<li>请求行</li>
<li>请求类型 Request Method<ol>
<li>GET: 请求指定的页面细腻，并返回尸体主题</li>
<li>HEAD: 类似于GET请求，只不过返回的相应中没有具体的内容，用于获取报头</li>
<li>POST：想指定资源提交数据进行处理请求，数据被高喊在请求体中</li>
<li>PUT: 从客户端想服务器传送的数据取代指定的文档的内容</li>
<li>DELETE: 请求服务器删除指定的页面</li>
<li>CONNECT: HTTP/1.1协议中预留给能够将连接方式改为管道方式的代理服务器</li>
<li>OPTIONS: 允许客户端查看服务器的性能</li>
<li>TRACE: 回显服务器收到的请求，主要用于测试后诊断</li>
</ol>
</li>
<li>请求头</li>
<li>空行和请求数据</li>
</ul>
<h5 id="3-5-HTTP协议的返回格式"><a href="#3-5-HTTP协议的返回格式" class="headerlink" title="3.5 HTTP协议的返回格式"></a>3.5 HTTP协议的返回格式</h5><p>状态行、小洗头、空行和响应正文</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200</span><br><span class="line">Server: nginx/1.20.1</span><br><span class="line">Date: Sun, 05 Dec 2021 07:24:45 GMT</span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Access-Control-Allow-Origin: https://ke.gupaoedu.cn</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Allow-Methods: PUT,POST,GET,DELETE,OPTIONS,PATCH</span><br><span class="line">Access-Control-Allow-Headers: DNT,web-token,app-token,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,token,showerr</span><br><span class="line">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure>

<p><strong>Http格式响应状态码有哪些</strong></p>
<ul>
<li>1xx: informational(信息性状态码) 接受的请求正在处理</li>
<li>2xx: success(成功状态码)  请求正常处理完毕</li>
<li>3xx：redirection（重定向状态码）需要进行复检操作以完成请求</li>
<li>4xx：client error（客户端错误状态码） 服务器无法处理请求</li>
<li>5xx: server error（服务器错误错误状态码） 服务器处理请求出错</li>
</ul>
<h5 id="3-6-通用头字段Common-Header"><a href="#3-6-通用头字段Common-Header" class="headerlink" title="3.6 通用头字段Common Header"></a>3.6 通用头字段Common Header</h5><table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Cache-control</td>
<td>控制缓存的行为</td>
</tr>
<tr>
<td>Connection</td>
<td>控制不再转发给代理的收不字段、管理持久连接</td>
</tr>
<tr>
<td>Date</td>
<td>创建报文的日期时间</td>
</tr>
<tr>
<td>Pragma</td>
<td>报文指令</td>
</tr>
<tr>
<td>Trailer</td>
<td>报文末端的首部一览</td>
</tr>
<tr>
<td>Transfer-Encoding</td>
<td>指定报文主题的传输编码方式</td>
</tr>
<tr>
<td>Upgrade</td>
<td>升级为其他协议</td>
</tr>
<tr>
<td>Via</td>
<td>代理服务器的相关信息</td>
</tr>
<tr>
<td>Warning</td>
<td>错误通知</td>
</tr>
</tbody></table>
<h5 id="3-7-响应头字段Response-Header"><a href="#3-7-响应头字段Response-Header" class="headerlink" title="3.7 响应头字段Response Header"></a>3.7 响应头字段Response Header</h5><table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Accept-Ranges</td>
<td>是否接收字节范围请求</td>
</tr>
<tr>
<td>Age</td>
<td>推算资源创建经过的时间</td>
</tr>
<tr>
<td>ETag</td>
<td>资源的匹配信息</td>
</tr>
<tr>
<td>Location</td>
<td>另客户端重定向至指定的URI</td>
</tr>
<tr>
<td>Proxy-Authenticate</td>
<td>代理服务器对客户端的认证信息</td>
</tr>
<tr>
<td>Retry-After</td>
<td>对再次发起请求的时机要求</td>
</tr>
<tr>
<td>Vary</td>
<td>代理服务器缓存的管理信息</td>
</tr>
<tr>
<td>WWW-Authenticate</td>
<td>服务器对客户端的认证信息</td>
</tr>
</tbody></table>
<h5 id="3-8-实体头字段-Entity-Header"><a href="#3-8-实体头字段-Entity-Header" class="headerlink" title="3.8 实体头字段 Entity Header"></a>3.8 实体头字段 Entity Header</h5><table>
<thead>
<tr>
<th>字段</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>Allow</td>
<td>资源科支持的http方法</td>
</tr>
<tr>
<td>Connect-Encoding</td>
<td>实体主体适用的编码格式</td>
</tr>
<tr>
<td>Content-Language</td>
<td>实体主体的自然语言</td>
</tr>
<tr>
<td>Content-length</td>
<td>实体主体的大小</td>
</tr>
<tr>
<td>Content-Location</td>
<td>替代敌营资源的URI</td>
</tr>
<tr>
<td>Content-MD5</td>
<td>实体主体的报文摘要</td>
</tr>
<tr>
<td>Content-Range</td>
<td>实体主体的位置范围</td>
</tr>
<tr>
<td>Content-Type</td>
<td>实体主体的媒体类型</td>
</tr>
<tr>
<td>Expires</td>
<td>实体主体过期的日期时间</td>
</tr>
<tr>
<td>Last-Modified</td>
<td>资源的最后修改日期时间</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>09 Nginx</category>
      </categories>
      <tags>
        <tag>Nginx专题</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache archiva Maven私有仓库搭建</title>
    <url>/Apache-archiva/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">


<h3 id="1-搭建"><a href="#1-搭建" class="headerlink" title="1. 搭建"></a>1. 搭建</h3><ol>
<li><p>环境准备</p>
<ul>
<li>JDK 1.8</li>
<li>Apache Archiva 2.2.8 </li>
<li>Apache-maven 3.6.3 （ <a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a> ）</li>
</ul>
<p>  <img src="/Apache-archiva/index/image-20220628112607703.png" alt="image-20220628112607703"></p>
</li>
<li><p>Apache Archiva安装文件下载</p>
  <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">archiva官网地址：https:<span class="regexp">//</span>archiva.apache.org/index.cgi<span class="comment">#a</span></span><br><span class="line">下载地址：https:<span class="regexp">//</span>archiva.apache.org<span class="regexp">/download.cgi  （这个太慢了，几K/</span>s，坑）</span><br><span class="line"></span><br><span class="line">镜像仓库：https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/apache/</span>archiva</span><br><span class="line"></span><br><span class="line">建议从镜像仓库拉取！！！</span><br></pre></td></tr></table></figure>

<p>  <img src="/Apache-archiva/index/image-20220628111905504.png" alt="image-20220628111905504"></p>
</li>
<li><p>  将下载的tar.gz包上传到服务器相应位置</p>
</li>
<li><p>解压tar.gz包</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf ./apache-archiva-2.2.8-bin.tar.gz </span><br><span class="line">chmod 775 ./apache-archiva-2.2.8</span><br></pre></td></tr></table></figure></li>
<li><p>修改端口（8080默认），如不需要，请跳过</p>
<p>  <img src="/Apache-archiva/index/image-20220628113033117.png" alt="image-20220628113033117"></p>
</li>
<li><p>启动</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /User/xiaoyuge/maven/apache-archiva-2.2.8/bin</span><br><span class="line">./archiva start 			#执行启动命令，建议第一次启动使用：./archiva console 可以打印启动信息</span><br><span class="line">./archiva stop				#停止命令</span><br></pre></td></tr></table></figure>

<p>  <img src="/Apache-archiva/index/image-20220628114117703.png" alt="image-20220628114117703"></p>
<p>  各版本操作系统下详细安装及服务注册参照：<a href="http://archiva.apache.org/docs/2.2.8/adminguide/standalone.html">http://archiva.apache.org/docs/2.2.8/adminguide/standalone.html</a></p>
</li>
</ol>
<ol start="7">
<li><p>将 <code>archiva</code>在Centos中安装成服务(root执行)</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -sf /Users/xiaoyuge/maven/apache-archiva-2.2.8/bin/archiva /etc/init.d/archiva</span><br></pre></td></tr></table></figure>

<p>  这样就可以通过<code>service</code>启动</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service archiva start</span><br><span class="line">service archiva stop</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="8">
<li><p>启动成功后，访问<code>maven</code>服务器地址: <a href="http://ip:8080/">http://ip:8080</a></p>
<p>  <img src="/Apache-archiva/index/image-20220628114324543.png" alt="image-20220628114324543"></p>
</li>
<li><p>  点击右上角的<code>Create Admin User</code>创建管理员账号</p>
</li>
</ol>
<h2 id="2-上传私有jar包"><a href="#2-上传私有jar包" class="headerlink" title="2. 上传私有jar包"></a>2. 上传私有jar包</h2><ol>
<li><p>访问：<a href="http://localhost:8080/#upload%EF%BC%8C%E4%B8%8A%E4%BC%A0%E7%A7%81%E6%9C%89jar%E5%8C%85%E5%88%B0%E4%BB%93%E5%BA%93">http://localhost:8080/#upload，上传私有jar包到仓库</a></p>
<ul>
<li><code>Repository Id</code> 选择 <code>Archiva Managed Internal Repository </code>则是把依赖作为正式版. 查看地址：<a href="http://host:port/repository/internal">http://host:port/repository/internal</a></li>
<li><code>Repository Id</code> 选择<code>Archiva Managed Snapshot</code>则是把依赖作为快照版.    查看地址：<a href="http://host:port/repository/snapshots">http://host:port/repository/snapshots</a></li>
</ul>
<p>  按照以下步骤依次操作：</p>
<p>  <img src="/Apache-archiva/index/image-20220628133605624.png" alt="image-20220628133605624"></p>
<p>  保存后，提示以下信息表示上传成功！</p>
<p>  <img src="/Apache-archiva/index/image-20220628133705165.png" alt="image-20220628133705165"></p>
<p>  在左侧菜单栏<code>Browse</code>中查看上传的jar ，如下所示：</p>
<p>  <img src="/Apache-archiva/index/image-20220628134114089.png" alt="image-20220628134114089"></p>
</li>
<li><p>也可以通过命令的方式上传（<a href="#setting">需要配置maven 的setting.xml</a>）</p>
<p>  在<code>/Users/xiaoyuge/Desktop</code>有一个junit-4.13.2.jar，使用<code>mvn deploy</code>命令上传如下</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn deploy:deploy-file -Dfile=/Users/xiaoyuge/Desktop/junit-4.13.2.jar -DrepositoryId=archiva-releases -DgroupId=junit -DartifactId=junit -Dversion=4.13.2 -Durl=http://localhost:8080/repository/internal</span><br></pre></td></tr></table></figure>
<p>  命令解释：</p>
<ul>
<li>-Dfile ：要上传到私服的jar包， jar包全路径</li>
<li>-DrepositoryId： 仓库ID，要与maven 的setting.xml配置文件中的server一致，否则401；</li>
<li>-DgroupId： groupId主包名 </li>
<li>-DartifactId： 项目名</li>
<li>-Dversion：版本号</li>
<li>-Durl：远程仓库地址</li>
</ul>
<p>  上传结果如下如所示：</p>
<p>  <img src="/Apache-archiva/index/image-20220628141000055.png" alt="image-20220628141000055"></p>
<p>  同时在私服仓库中可以查看到刚上传的<code>jar</code></p>
<p>  <img src="/Apache-archiva/index/image-20220628141111292.png" alt="image-20220628141111292"></p>
</li>
</ol>
<h2 id="3-项目使用"><a href="#3-项目使用" class="headerlink" title="3. 项目使用"></a>3. 项目使用</h2><p><span id="setting">配置maven中的setting.xml文件，配置如下：</span></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>\Common\my_repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="comment">&lt;!--要和mvn命令中的  -DrepositoryId 一致--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">password</span>&gt;</span>xiaoyuge0318<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span><span class="comment">&lt;!--要和mvn命令中的  -DrepositoryId 一致--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">username</span>&gt;</span>admin<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">password</span>&gt;</span>xiaoyuge0318<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 私服地址 start --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span> <span class="comment">&lt;!-- 正式版 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva-releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>internal<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/repository/internal<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span> <span class="comment">&lt;!-- 快照版 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>archiva-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/repository/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">true <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 正式版 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>internal<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>Archiva Managed Internal Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/repository/internal<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">              <span class="comment">&lt;!-- 快照版 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">id</span>&gt;</span>snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">name</span>&gt;</span>Archiva Managed Snapshots Repository<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/repository/snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">releases</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 私服地址END --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>kafka常用命令</title>
    <url>/kafka-command/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">


<h3 id="1-脚本概览"><a href="#1-脚本概览" class="headerlink" title="1. 脚本概览"></a>1. 脚本概览</h3><p>bin目录下的脚本作用</p>
<table>
<thead>
<tr>
<th align="left">脚本</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">connect-distributed.sh</td>
<td align="left">用于启动多节点的Distributed模式的Kafka Connect组件</td>
</tr>
<tr>
<td align="left">connect-standalone.sh</td>
<td align="left">用于启动单节点的Standalone模式的Kafka Connect组件</td>
</tr>
<tr>
<td align="left">kafka-acls.sh</td>
<td align="left">用于设置Kafka权限，比如设置哪些用户可以访问Kafka的哪些TOPIC的权限</td>
</tr>
<tr>
<td align="left">kafka-broker-api-versions.sh</td>
<td align="left">主要用于验证不同Kafka版本之间服务器和客户端的适配性</td>
</tr>
<tr>
<td align="left">kafka-configs.sh</td>
<td align="left">配置管理脚本</td>
</tr>
<tr>
<td align="left">kafka-console-consumer.sh</td>
<td align="left">kafka消费者控制台</td>
</tr>
<tr>
<td align="left">kafka-console-producer.sh</td>
<td align="left">kafka生产者控制台</td>
</tr>
<tr>
<td align="left">kafka-consumer-groups.sh</td>
<td align="left">kafka消费者组相关信息</td>
</tr>
<tr>
<td align="left">kafka-consumer-perf-test.sh</td>
<td align="left">kafka消费者性能测试脚本</td>
</tr>
<tr>
<td align="left">kafka-delegation-tokens.sh</td>
<td align="left">用于管理Delegation Token。基于Delegation Token的认证是一种轻量级的认证机制，是对SASL认证机制的补充。</td>
</tr>
<tr>
<td align="left">kafka-delete-records.sh</td>
<td align="left">用于删除Kafka的分区消息</td>
</tr>
<tr>
<td align="left">kafka-dump-log.sh</td>
<td align="left">用于查看Kafka消息文件的内容</td>
</tr>
<tr>
<td align="left">kafka-log-dirs.sh</td>
<td align="left">用于查询各个Broker上的各个日志路径的磁盘占用情况</td>
</tr>
<tr>
<td align="left">kafka-mirror-maker.sh</td>
<td align="left">用于在Kafka集群间实现数据镜像</td>
</tr>
<tr>
<td align="left">kafka-preferred-replica-election.sh</td>
<td align="left">用于执行Preferred Leader选举，可以为指定的主题执行更换Leader的操作</td>
</tr>
<tr>
<td align="left">kafka-producer-perf-test.sh</td>
<td align="left">kafka生产者性能测试脚本</td>
</tr>
<tr>
<td align="left">kafka-reassign-partitions.sh</td>
<td align="left">用于执行分区副本迁移以及副本文件路径迁移。</td>
</tr>
<tr>
<td align="left">kafka-replica-verification.sh</td>
<td align="left">复制进度验证脚本</td>
</tr>
<tr>
<td align="left">kafka-run-class.sh</td>
<td align="left">用于执行任何带main方法的Kafka类</td>
</tr>
<tr>
<td align="left">kafka-server-start.sh</td>
<td align="left">启动kafka服务</td>
</tr>
<tr>
<td align="left">kafka-server-stop.sh</td>
<td align="left">停止kafka服务</td>
</tr>
<tr>
<td align="left">kafka-streams-application-reset.sh</td>
<td align="left">用于给Kafka Streams应用程序重设位移，以便重新消费数据</td>
</tr>
<tr>
<td align="left">kafka-topics.sh</td>
<td align="left">topic管理脚本</td>
</tr>
<tr>
<td align="left">kafka-verifiable-consumer.sh</td>
<td align="left">可检验的kafka消费者</td>
</tr>
<tr>
<td align="left">kafka-verifiable-producer.sh</td>
<td align="left">可检验的kafka生产者</td>
</tr>
<tr>
<td align="left">trogdor.sh</td>
<td align="left">Kafka的测试框架，用于执行各种基准测试和负载测试</td>
</tr>
<tr>
<td align="left">zookeeper-server-start.sh</td>
<td align="left">启动zk服务</td>
</tr>
<tr>
<td align="left">zookeeper-server-stop.sh</td>
<td align="left">停止zk服务</td>
</tr>
<tr>
<td align="left">zookeeper-shell.sh</td>
<td align="left">zk客户端</td>
</tr>
</tbody></table>
<h3 id="2-Broker服务"><a href="#2-Broker服务" class="headerlink" title="2. Broker服务"></a>2. Broker服务</h3><p>1、启动服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-server-start.sh ../config/server.properties</span><br></pre></td></tr></table></figure>
<p>2、后台启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-server-start.sh -daemon ../config/server.properties</span><br></pre></td></tr></table></figure>
<p>3、停止服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-server-stop.sh ../config/server.properties</span><br></pre></td></tr></table></figure>


<h3 id="3-元数据"><a href="#3-元数据" class="headerlink" title="3. 元数据"></a>3. 元数据</h3><p>1、创建topic</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic my-test-topic</span><br></pre></td></tr></table></figure>
<p>2、查看所有topic</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-topics.sh --bootstrap-server localhost:9092 --list</span><br></pre></td></tr></table></figure>


<p>从Kafka 2.2版本开始，Kafka社区推荐用–bootstrap-server参数替换–zookeeper参数用于指定Kafka Broker。集群的多个IP端口用逗号,隔开</p>
<p>3、查看topic详细信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic topic_name</span><br></pre></td></tr></table></figure>
<p>4、给topic增加分区（只能增加不能减少）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-topics.sh --bootstrap-server localhost:9092 --alter --topic my-test-topic --partitions 10</span><br></pre></td></tr></table></figure>
<p>5、删除topic（标记删除）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic my-test-topic</span><br></pre></td></tr></table></figure>
<p>6、永久删除需要修改配置文件：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">delete.topic.enable</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure>

<p>7、强制删除TOPIC的方法：</p>
<ul>
<li>手动删除ZooKeeper节点/admin/delete_topics下以待删除TOPIC为名的znode。 </li>
<li>手动删除TOPIC在磁盘上的分区目录。</li>
<li>在ZooKeeper中执行rmr /controller，触发Controller重选举，刷新Controller缓存。可能会造成大面积的分区Leader重选举。可以不执行，只是Controller缓存中没有清空待删除TOPIC，不影响使用。</li>
</ul>
<p>8、修改partition副本数：</p>
<pre><code>先配置一个reassign.json文件，内容：
例如my-test-topic有3个分区，原来只有一个副本，增加到2个副本
</code></pre>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">&quot;version&quot;</span>:<span class="number">1</span>, <span class="attr">&quot;partitions&quot;</span>:[</span><br><span class="line">&#123;<span class="attr">&quot;topic&quot;</span>:<span class="string">&quot;my-test-topic&quot;</span>,<span class="attr">&quot;partition&quot;</span>:<span class="number">0</span>,<span class="attr">&quot;replicas&quot;</span>:[<span class="number">0</span>,<span class="number">1</span>]&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;topic&quot;</span>:<span class="string">&quot;my-test-topic&quot;</span>,<span class="attr">&quot;partition&quot;</span>:<span class="number">1</span>,<span class="attr">&quot;replicas&quot;</span>:[<span class="number">1</span>,<span class="number">2</span>]&#125;,</span><br><span class="line">&#123;<span class="attr">&quot;topic&quot;</span>:<span class="string">&quot;my-test-topic&quot;</span>,<span class="attr">&quot;partition&quot;</span>:<span class="number">2</span>,<span class="attr">&quot;replicas&quot;</span>:[<span class="number">2</span>,<span class="number">0</span>]&#125;</span><br><span class="line">]&#125;</span><br></pre></td></tr></table></figure>
<p>执行kafka-reassign-partitions脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-reassign-partitions.sh --zookeeper localhost:2181 --reassignment-json-file reassign.json --execute</span><br></pre></td></tr></table></figure>
<h3 id="4-生产者"><a href="#4-生产者" class="headerlink" title="4. 生产者"></a>4. 生产者</h3><p>1、发送消息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-console-producer.sh --broker-list localhost:9092 --topic my-test-topic</span><br></pre></td></tr></table></figure>


<h3 id="5-消费者"><a href="#5-消费者" class="headerlink" title="5. 消费者"></a>5. 消费者</h3><p>1、消费消息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic my-test-topic</span><br></pre></td></tr></table></figure>

<p>2、查看消费者组提交的位移数据:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic __consumer_offsets --formatter &quot;kafka.coordinator.group.GroupMetadataManager\$OffsetsMessageFormatter&quot; --from-beginning</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>13 开源组件</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装kafka 3.2.0单机版</title>
    <url>/kafka-install/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">


<h3 id="1-JDK依赖"><a href="#1-JDK依赖" class="headerlink" title="1. JDK依赖"></a>1. JDK依赖</h3><p>请参考这篇博客：<a href="https://xiaoyuge.work/jdk-install/">Linux安装JDK以及配置</a></p>
<h3 id="2-下载解压Kafka"><a href="#2-下载解压Kafka" class="headerlink" title="2. 下载解压Kafka"></a>2. 下载解压Kafka</h3><p>下载地址：<a href="https://kafka.apache.org/downloads%EF%BC%8C">https://kafka.apache.org/downloads，</a>  点击相应的版本，下载Binary 二进制版本而不是源码<br>我这里下载的是3.2.0版本（<a href="https://www.apache.org/dyn/closer.cgi?path=/kafka/3.2.0/kafka_2.12-3.2.0.tgz%EF%BC%89">https://www.apache.org/dyn/closer.cgi?path=/kafka/3.2.0/kafka_2.12-3.2.0.tgz）</a><br><img src="/kafka-install/index/1.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools</span><br><span class="line">wget https://dlcdn.apache.org/kafka/3.2.0/kafka_2.12-3.2.0.tgz</span><br><span class="line">tar -xzvf kafka_2.12-3.2.0.tgz</span><br><span class="line">cd kafka_2.12-3.2.0</span><br></pre></td></tr></table></figure>

<h3 id="3-启动zookeeper-默认端口2181"><a href="#3-启动zookeeper-默认端口2181" class="headerlink" title="3. 启动zookeeper(默认端口2181)"></a>3. 启动zookeeper(默认端口2181)</h3><p>kafka需要依赖ZK，安装包中已经自带了一个ZK，也可以改成指定已运行的ZK。<br>如果改成指定的ZK需要修改修改 kafka 安装目录下的 config/server.properties 文件中的 zookeeper.connect 。这里使用自带的ZK。</p>
<p>后台启动zk</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup ./bin/zookeeper-server-start.sh config/zookeeper.properties &gt;&gt; zookeeper.nohup &amp;</span><br></pre></td></tr></table></figure>
<p>检查zookeeper是否启动成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef|grep zookeeper</span><br></pre></td></tr></table></figure>

<h3 id="4-启动kafka（默认端口9092）"><a href="#4-启动kafka（默认端口9092）" class="headerlink" title="4. 启动kafka（默认端口9092）"></a>4. 启动kafka（默认端口9092）</h3><ol>
<li>修改相关配置 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim config/server.properties</span><br></pre></td></tr></table></figure>
 <figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">broker.id</span>=<span class="string">1                 #Broker ID启动以后就不能改了</span></span><br><span class="line"><span class="attr">listeners</span>=<span class="string">PLAINTEXT://192.168.44.160:9092       #取消注释，改成本机IP：</span></span><br><span class="line"></span><br><span class="line"><span class="meta">num.partitions</span>=<span class="string">1                #num.partitions后面增加2行。</span></span><br><span class="line"><span class="meta">auto.create.topics.enable</span>=<span class="string">true          #发送到不存在topic自动创建</span></span><br><span class="line"><span class="meta">delete.topic.enable</span>=<span class="string">true                #允许永久删除topic</span></span><br></pre></td></tr></table></figure></li>
<li>后台启动kafka <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> nohup ./bin/kafka-server-start.sh ./config/server.properties &amp;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">或者</span></span><br><span class="line">./bin/kafka-server-start.sh -daemon ./config/server.properties</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-创建Topic"><a href="#5-创建Topic" class="headerlink" title="5. 创建Topic"></a>5. 创建Topic</h3><p>创建一个名为<code>gptest</code>的<code>topic</code>，只有一个副本，一个分区：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh bin/kafka-topics.sh --create --bootstrap-server localhost:2181 --replication-factor 1 --partitions 1 --topic gptest</span><br></pre></td></tr></table></figure>
<p>查看已经创建的 topic：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh bin/kafka-topics.sh -list -bootstrap-server localhost:2181</span><br></pre></td></tr></table></figure>
<p>从Kafka 2.2版本开始，Kafka社区推荐用–bootstrap-server参数替换–zookeeper参数用于指定Kafka Broker。集群的多个IP端口用逗号,隔开</p>
<h3 id="5-启动Producer"><a href="#5-启动Producer" class="headerlink" title="5. 启动Producer"></a>5. 启动Producer</h3><p>打开一个窗口，在kafka解压目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh bin/kafka-console-producer.sh --broker-list localhost:9092 --topic gptest</span><br></pre></td></tr></table></figure>


<h3 id="6-启动Consumer"><a href="#6-启动Consumer" class="headerlink" title="6. 启动Consumer"></a>6. 启动Consumer</h3><p>在一个新的远程窗口中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic gptest --from-beginning</span><br></pre></td></tr></table></figure>

<h3 id="7-Producer窗口发送消息"><a href="#7-Producer窗口发送消息" class="headerlink" title="7. Producer窗口发送消息"></a>7. Producer窗口发送消息</h3><p>输入hello world 回车<br><img src="/kafka-install/index/2.png"></p>
<p>消费者收到了消息：<br><img src="/kafka-install/index/3.png"></p>
<h3 id="8-删除kafka全部数据"><a href="#8-删除kafka全部数据" class="headerlink" title="8. 删除kafka全部数据"></a>8. 删除kafka全部数据</h3><p>1、停止每台机器上的kafka；</p>
<p>2、删除kafka存储目录（server.properties文件log.dirs配置，默认为“/tmp/kafka-logs”）全部topic的数据目录；</p>
<p>3、删除zookeeper上与kafka相关的znode节点；除了/zookeeper</p>
<p>4、重启kafka。</p>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装Maven 3.8.6</title>
    <url>/maven-install/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">


<h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><ol>
<li>maven官网地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a> ， 右键复制链接地址，wget下载，或者下载到本地再上传到Centos</li>
<li>可以从镜像仓库下载：<a href="https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.8.6/binaries/">https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.8.6/binaries/</a> ，<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools</span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-解压"><a href="#2-解压" class="headerlink" title="2. 解压"></a>2. 解压</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -zxvf apache-maven-3.8.6-bin.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="3-配置环境变量"><a href="#3-配置环境变量" class="headerlink" title="3. 配置环境变量"></a>3. 配置环境变量</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br></pre></td></tr></table></figure>
<p>在末尾增加两行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export MAVEN_HOME=/usr/local/tools/apache-maven-3.8.6</span><br><span class="line">export PATH=$PATH:$MAVEN_HOME/bin</span><br></pre></td></tr></table></figure>
<p>编译生效</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
<h3 id="4-验证是否配置成功"><a href="#4-验证是否配置成功" class="headerlink" title="4. 验证是否配置成功"></a>4. 验证是否配置成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure>
<p>如果出现版本信息则配置成功</p>
<h3 id="5-配置本地仓库和镜像仓库"><a href="#5-配置本地仓库和镜像仓库" class="headerlink" title="5. 配置本地仓库和镜像仓库"></a>5. 配置本地仓库和镜像仓库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/apache-maven-3.8.6/conf</span><br><span class="line">vim setting.xml</span><br></pre></td></tr></table></figure>
<p>在相应注释位置添加如下两行：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/home/mavenRepository/<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>maven</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7安装RabbitMQ单机版</title>
    <url>/rabbitmq-standalone/index.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="Oh, these decrypted content cannot be verified, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2fef95c850278905a67d9fbf83446f295435443f7cc43a1b145f1072fb71ce01"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">Hey, password is required here.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>rabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker安装RabbitMQ集群</title>
    <url>/rabbitmq/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">


<h3 id="1-安装-Docker"><a href="#1-安装-Docker" class="headerlink" title="1. 安装 Docker"></a>1. 安装 Docker</h3><ol>
<li>更新yum源（如果你的网速慢这一步就别做了） <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure></li>
<li>添加仓库 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li>
<li>查看最新版本 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">如果之前安装了docker，需要卸载旧版本</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br></pre></td></tr></table></figure></li>
<li>安装Docker CE版本 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker-ce -y </span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-安装-RabbitMQ"><a href="#2-安装-RabbitMQ" class="headerlink" title="2. 安装 RabbitMQ"></a>2. 安装 RabbitMQ</h3><p>1个磁盘节点+2个内存节点</p>
<ol>
<li>拉取RabbitMQ镜像（带managment） <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull rabbitmq:3.7.17-management</span><br></pre></td></tr></table></figure></li>
<li>创建docker网络（让容器可以和主机通信） <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker network create rabbitmqnet</span><br></pre></td></tr></table></figure></li>
<li>创建三个容器，端口分别是 5673 5674 5675 ，管理端口是 15673 15674 15675 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">英文引号</span></span><br><span class="line">docker run -d \</span><br><span class="line"> --name=rabbitmq1 \</span><br><span class="line"> -p 5673:5672 \</span><br><span class="line"> -p 15673:15672 \</span><br><span class="line"> -e RABBITMQ_NODENAME=rabbitmq1 \</span><br><span class="line"> -e RABBITMQ_ERLANG_COOKIE=&#x27;GUPAOEDUFORBETTERYOU&#x27; \</span><br><span class="line"> -h rabbitmq1 \</span><br><span class="line"> --net=rabbitmqnet \</span><br><span class="line"> rabbitmq:management</span><br></pre></td></tr></table></figure>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line"> --name=rabbitmq2 \</span><br><span class="line"> -p 5674:5672 \</span><br><span class="line"> -p 15674:15672 \</span><br><span class="line"> -e RABBITMQ_NODENAME=rabbitmq1 \</span><br><span class="line"> -e RABBITMQ_ERLANG_COOKIE=&#x27;GUPAOEDUFORBETTERYOU&#x27; \</span><br><span class="line"> -h rabbitmq2 \</span><br><span class="line"> --net=rabbitmqnet \</span><br><span class="line"> rabbitmq:management</span><br></pre></td></tr></table></figure>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line"> --name=rabbitmq3 \</span><br><span class="line"> -p 5675:5672 \</span><br><span class="line"> -p 15675:15672 \</span><br><span class="line"> -e RABBITMQ_NODENAME=rabbitmq1 \</span><br><span class="line"> -e RABBITMQ_ERLANG_COOKIE=&#x27;GUPAOEDUFORBETTERYOU&#x27; \</span><br><span class="line"> -h rabbitmq3 \</span><br><span class="line"> --net=rabbitmqnet \</span><br><span class="line"> rabbitmq:management</span><br></pre></td></tr></table></figure></li>
<li>后两个节点作为内存节点加入集群 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it rabbitmq2 /bin/bash       #进入容器内部</span><br><span class="line">rabbitmqctl stop_app              #停止rabbitmq 服务 </span><br><span class="line">rabbitmqctl reset           #重置rabbitmq </span><br><span class="line">rabbitmqctl join_cluster --ram rabbitmq1@rabbitmq1          #加入集群</span><br><span class="line">rabbitmqctl start_app         #启动服务</span><br></pre></td></tr></table></figure>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it rabbitmq3 /bin/bash</span><br><span class="line">rabbitmqctl stop_app</span><br><span class="line">rabbitmqctl reset</span><br><span class="line">rabbitmqctl join_cluster --ram rabbitmq1@rabbitmq1</span><br><span class="line">rabbitmqctl start_app</span><br></pre></td></tr></table></figure></li>
<li>访问： <a href="http://ip:15673/">http://ip:15673/</a>; guest/guest登录<br> <img src="/rabbitmq/index/1.png"></li>
</ol>
<h3 id="3-常见问题"><a href="#3-常见问题" class="headerlink" title="3. 常见问题"></a>3. 常见问题</h3><ol>
<li>[error] Bad characters in cookie <figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">到创建容器的时候，docker <span class="builtin-name">run</span> -d <span class="attribute">--name</span>=rabbitmq1 -p 5673:5672 -p 15673:15672 -e <span class="attribute">RABBITMQ_NODENAME</span>=rabbitmq1 -e <span class="attribute">RABBITMQ_ERLANG_COOKIE</span>=‘GoodGoodStudyDayDayUp’ -h rabbitmq1 <span class="attribute">--net</span>=rabbitmqnet rabbitmq:management</span><br><span class="line">由于Cookie的引号是中文引号，所以docker ps -a 时看到Status为Exited</span><br></pre></td></tr></table></figure>
解决方法：移除容器，把cookie的引号改为英文引号再执行就可以了</li>
</ol>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>rabbitMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot参数校验</title>
    <url>/springboot-validate-params/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>在控制器类的方法里自己写校验逻辑代码也可以，只是不够优美，业界有更好的处理方法，主要有以下几种。</p>
<h2 id="2-PathVariable校验"><a href="#2-PathVariable校验" class="headerlink" title="2. PathVariable校验"></a>2. PathVariable校验</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用正则表达式限制group 只能是a-zA-Z0-9_</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/path/&#123;group:[a-zA-Z0-9_]+&#125;/&#123;userid&#125;&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">path</span><span class="params">(<span class="meta">@PathVariable(&quot;group&quot;)</span> String group, <span class="meta">@PathVariable(&quot;userid&quot;)</span> Integer userid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> group + <span class="string">&quot;:&quot;</span> + userid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当请求URI不满足正则表达式时，客户端将收到404错误码，不方便的是，不能通过捕获异常的方式，向前端返回统一的、自定义格式的响应参数</p>
<h2 id="3-方法参数校验"><a href="#3-方法参数校验" class="headerlink" title="3. 方法参数校验"></a>3. 方法参数校验</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/validate&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">validate1</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Size(min = 1, max = 10, message = &quot;姓名长度必须为1到10&quot;)</span> <span class="meta">@RequestParam(&quot;name&quot;)</span> String name,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="meta">@Min(value = 10, message = &quot;年龄最小为10&quot;)</span> <span class="meta">@Max(value = 100, message = &quot;年龄最大为100&quot;)</span> <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name + <span class="string">&quot;:&quot;</span> + age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用@Size 、@Min、@Max等校验注解进行参数校验</p>
<p>如果前端传递的参数不满足规则，则跑出异常，上面代码中@size、@Min、@Max注解来源于validation-api包中。<br>更多注解参 <a href="#index1">参数校验注解</a> 小节。</p>
<h2 id="4-表单对象-VO对象校验"><a href="#4-表单对象-VO对象校验" class="headerlink" title="4.表单对象/VO对象校验"></a>4.表单对象/VO对象校验</h2><p>当参数是VO时，可以在VO类的属性上添加校验注解。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Size(min = 1,max = 10,message = &quot;姓名长度必须为1到10&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotEmpty</span></span><br><span class="line">    <span class="keyword">private</span> String firstName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Min(value = 10,message = &quot;年龄最小为10&quot;)</span><span class="meta">@Max(value = 100,message = &quot;年龄最大为100&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Future</span></span><br><span class="line">    <span class="meta">@JSONField(format=&quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line">    <span class="comment">//。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，@Future注解要求必须是相对当前时间来讲“未来的”某个时间。@Past表示过去的某个时间</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/validate2&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">validate2</span><span class="params">(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-自定义校验规则"><a href="#5-自定义校验规则" class="headerlink" title="5.自定义校验规则"></a>5.自定义校验规则</h2><h3 id="5-1-自定义注解校验"><a href="#5-1-自定义注解校验" class="headerlink" title="5.1 自定义注解校验"></a>5.1 自定义注解校验</h3><p>需要自定义一个注解类和一个校验类。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.Constraint;</span><br><span class="line"><span class="keyword">import</span> javax.validation.Payload;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.PARAMETER,ElementType.FIELD&#125;)</span></span><br><span class="line"><span class="meta">@Constraint(validatedBy = FlagValidatorClass.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FlagValidator &#123;</span><br><span class="line">    <span class="comment">// flag的有效值，多个使用,隔开</span></span><br><span class="line">    <span class="function">String <span class="title">values</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// flag无效时的提示内容</span></span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;flag必须是预定义的那几个值，不能随便写&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Class&lt;?&gt;[] groups() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    Class&lt;? extends Payload&gt;[] payload() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidator;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintValidatorContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlagValidatorClass</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">FlagValidator</span>,<span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * FlagValidator注解规定的那些有效值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String values;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(FlagValidator flagValidator)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.values = flagValidator.values();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户输入的值，必须是FlagValidator注解规定的那些值其中之一。</span></span><br><span class="line"><span class="comment">     * 否则，校验不通过。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 用户输入的值，如从前端传入的某个值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(Object value, ConstraintValidatorContext constraintValidatorContext)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 切割获取值</span></span><br><span class="line">        String[] value_array = values.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        Boolean isFlag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; value_array.length; i++)&#123;</span><br><span class="line">            <span class="comment">// 存在一致就跳出循环</span></span><br><span class="line">            <span class="keyword">if</span> (value_array[i] .equals(value))&#123;</span><br><span class="line">                isFlag = <span class="keyword">true</span>; <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> isFlag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用我们自定义的注解：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 前端传入的flag值必须是1或2或3，否则校验失败</span></span><br><span class="line">    <span class="meta">@FlagValidator(values = &quot;1,2,3&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String flag ;</span><br><span class="line">    <span class="comment">//。。。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="5-2-分组校验"><a href="#5-2-分组校验" class="headerlink" title="5.2 分组校验"></a>5.2 分组校验</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Resume</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Default</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Update</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;id不能为空&quot;, groups = Update.class)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;名字不能为空&quot;, groups = Default.class)</span></span><br><span class="line">    <span class="meta">@Length(min = 4, max = 10, message = &quot;name 长度必须在 &#123;min&#125; - &#123;max&#125; 之间&quot;, groups = Default.class)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;年龄不能为空&quot;, groups = Default.class)</span></span><br><span class="line">    <span class="meta">@Min(value = 18, message = &quot;年龄不能小于18岁&quot;, groups = Default.class)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//。。。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Defaul分组进行验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resume</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/validate5&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">(<span class="meta">@Validated(value = Resume.Default.class)</span> <span class="meta">@RequestBody</span> Resume resume)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;validate5&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用Default、Update分组进行验证</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> resume</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/validate6&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(<span class="meta">@Validated(value = &#123;Resume.Update.class, Resume.Default.class&#125;)</span> <span class="meta">@RequestBody</span> Resume resume)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;validate6&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>建立了两个分组，名称分别为Default、Update。POST方法提交时使用Defaut分组的校验规则，PUT方法提交时同时使用两个分组规则。</p>
<h2 id="6-异常拦截器"><a href="#6-异常拦截器" class="headerlink" title="6. 异常拦截器"></a>6. 异常拦截器</h2><p>通过设置全局异常处理器，统一向前端返回校验失败信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.scj.springbootdemo.WebResult;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.CollectionUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.validation.ObjectError;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.MethodArgumentNotValidException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolation;</span><br><span class="line"><span class="keyword">import</span> javax.validation.ConstraintViolationException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 全局异常处理器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用来处理bean validation异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex 异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(ConstraintViolationException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  WebResult <span class="title">resolveConstraintViolationException</span><span class="params">(ConstraintViolationException ex)</span></span>&#123;</span><br><span class="line">        WebResult errorWebResult = <span class="keyword">new</span> WebResult(WebResult.FAILED);</span><br><span class="line">        Set&lt;ConstraintViolation&lt;?&gt;&gt; constraintViolations = ex.getConstraintViolations();</span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(constraintViolations))&#123;</span><br><span class="line">            StringBuilder msgBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span>(ConstraintViolation constraintViolation :constraintViolations)&#123;</span><br><span class="line">                msgBuilder.append(constraintViolation.getMessage()).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String errorMessage = msgBuilder.toString();</span><br><span class="line">            <span class="keyword">if</span>(errorMessage.length()&gt;<span class="number">1</span>)&#123;</span><br><span class="line">                errorMessage = errorMessage.substring(<span class="number">0</span>,errorMessage.length()-<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            errorWebResult.setInfo(errorMessage);</span><br><span class="line">            <span class="keyword">return</span> errorWebResult;</span><br><span class="line">        &#125;</span><br><span class="line">        errorWebResult.setInfo(ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> errorWebResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebResult <span class="title">resolveMethodArgumentNotValidException</span><span class="params">(MethodArgumentNotValidException ex)</span></span>&#123;</span><br><span class="line">        WebResult errorWebResult = <span class="keyword">new</span> WebResult(WebResult.FAILED);</span><br><span class="line">        List&lt;ObjectError&gt;  objectErrors = ex.getBindingResult().getAllErrors();</span><br><span class="line">        <span class="keyword">if</span>(!CollectionUtils.isEmpty(objectErrors)) &#123;</span><br><span class="line">            StringBuilder msgBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">            <span class="keyword">for</span> (ObjectError objectError : objectErrors) &#123;</span><br><span class="line">                msgBuilder.append(objectError.getDefaultMessage()).append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            String errorMessage = msgBuilder.toString();</span><br><span class="line">            <span class="keyword">if</span> (errorMessage.length() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                errorMessage = errorMessage.substring(<span class="number">0</span>, errorMessage.length() - <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            errorWebResult.setInfo(errorMessage);</span><br><span class="line">            <span class="keyword">return</span> errorWebResult;</span><br><span class="line">        &#125;</span><br><span class="line">        errorWebResult.setInfo(ex.getMessage());</span><br><span class="line">        <span class="keyword">return</span> errorWebResult;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="7-参数校验注解"><a href="#7-参数校验注解" class="headerlink" title="7.参数校验注解"></a>7.<span id="index1">参数校验注解</span></h2><p>Java中参数校验的注解来自三个方面，分别是</p>
<ul>
<li>javax.validation:validation-api，对应包javax.validation.constraints</li>
<li>org.hibernate:hibernate-validator，对应包org.hibernate.validator.constraints</li>
<li>org.springframework:spring-context，对应包org.springframework.validation</li>
</ul>
<p>JSR 303 是Bean验证的规范 ，Hibernate Validator 是该规范的参考实现，它除了实现规范要求的注解外，还额外实现了一些注解。</p>
<h3 id="7-1-validation-api中的注解："><a href="#7-1-validation-api中的注解：" class="headerlink" title="7.1 validation-api中的注解："></a>7.1 validation-api中的注解：</h3><table>
<thead>
<tr>
<th align="left">配置项</th>
<th align="left">说明</th>
<th align="left">适用类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@AssertFalse</td>
<td align="left">限制必须是false</td>
<td align="left">boolean Boolean：not null时才校验</td>
</tr>
<tr>
<td align="left">@AssertTrue</td>
<td align="left">限制必须是true</td>
<td align="left">boolean Boolean：not null时才校验</td>
</tr>
<tr>
<td align="left">@Max(value)</td>
<td align="left">限制必须为一个小于等于value指定值的整数，value是long型</td>
<td align="left">byte/short/int/long/float/double及其对应的包装类；包装类对象not null时才校验</td>
</tr>
<tr>
<td align="left">@Min(value)</td>
<td align="left">限制必须为一个大于等于value指定值的整数，value是long型</td>
<td align="left">byte/short/int/long/float/double及其对应的包装类；包装类对象not null时才校验</td>
</tr>
<tr>
<td align="left">@DecimalMax(value)</td>
<td align="left">限制必须小于等于value指定的值，value是long型</td>
<td align="left">byte/short/int/long/float/double及其对应的包装类；包装类对象not null时才校验</td>
</tr>
<tr>
<td align="left">@DecimalMin(value)</td>
<td align="left">限制必须大于等于value指定的值，value是字符串类型</td>
<td align="left">byte/short/int/long/float/double及其对应的包装类；包装类对象not null时才校验</td>
</tr>
<tr>
<td align="left">@Digits(integer, fraction)</td>
<td align="left">限制必须为一个小数（其实整数也可以），且整数部分的位数不能超过integer，小数部分的位数不能超过fraction。integer和fraction可以是0。</td>
<td align="left">byte/short/int/long/float/double及其对应的包装类；包装类对象not null时才校验</td>
</tr>
<tr>
<td align="left">@Null</td>
<td align="left">限制只能为null</td>
<td align="left">任意对象类型（比如基本数据类型对应的包装类、String、枚举类、自定义类等）；不能是8种基本数据类型</td>
</tr>
<tr>
<td align="left">@NotNull</td>
<td align="left">限制必须不为null</td>
<td align="left">任意类型（包括8种基本数据类型及其包装类、String、枚举类、自定义类等）；但是对于基本数据类型，没有意义</td>
</tr>
<tr>
<td align="left">@Size(min, max)</td>
<td align="left">限制Collection类型或String的长度必须在min到max之间，包含min和max</td>
<td align="left">1.Collection类型（List/Set）<br> 2.String</td>
</tr>
<tr>
<td align="left">@Pattern(regexp)</td>
<td align="left">限制必须符合regexp指定的正则表达式</td>
<td align="left">String</td>
</tr>
<tr>
<td align="left">@Future</td>
<td align="left">限制必须是一个将来的日期</td>
<td align="left">Date/Calendar</td>
</tr>
<tr>
<td align="left">@Past</td>
<td align="left">限制必须是一个过去的日期</td>
<td align="left">Date/Calendar</td>
</tr>
<tr>
<td align="left">@Valid</td>
<td align="left">校验任何非原子类型，标记一个对象，表示校验对象中被注解标记的对象（不支持分组功能）</td>
<td align="left">需要校验成员变量的对象，比如@ModelAttribute标记的接口入参</td>
</tr>
</tbody></table>
<h3 id="7-2-hibernate-validator中的注解："><a href="#7-2-hibernate-validator中的注解：" class="headerlink" title="7.2 hibernate-validator中的注解："></a>7.2 hibernate-validator中的注解：</h3><p>下面列举的注解是hibernate-validator-5.3.6版本的。</p>
<table>
<thead>
<tr>
<th align="left">配置项</th>
<th align="left">说明</th>
<th align="left">适用类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@Length(min,max)</td>
<td align="left">限制String类型长度必须在min和max之间，包含min和max</td>
<td align="left">String, not null时才校验</td>
</tr>
<tr>
<td align="left">@NotBlank</td>
<td align="left">验证注解的元素值不是空白（即不是null，且包含非空白字符）</td>
<td align="left">String</td>
</tr>
<tr>
<td align="left">@NotEmpty</td>
<td align="left">验证注解的元素值不为null且不为空（即字符串非null且长度不为0、集合类型大小不为0）</td>
<td align="left">1.Collection类型（List/Set）<br> 2.String</td>
</tr>
<tr>
<td align="left">@Range(min,max)</td>
<td align="left">验证注解的元素值在最小值和最大值之间</td>
<td align="left">1. String(数字类型的字符串)，非null时才校验 <br>  2. byte/short/int/long/float/double及其包装类，包装类非null时才校验</td>
</tr>
<tr>
<td align="left">@Email(regexp)</td>
<td align="left">验证注解的字符串符合邮箱的正则表达式，可以使用regexp自定义正则表达式</td>
<td align="left">String</td>
</tr>
<tr>
<td align="left">@CreditCardNumber</td>
<td align="left">验证银行借记卡、信用卡的卡号</td>
<td align="left">String（不能包含空格等特殊字符）</td>
</tr>
</tbody></table>
<h3 id="7-3-spring-context中的注解："><a href="#7-3-spring-context中的注解：" class="headerlink" title="7.3 spring-context中的注解："></a>7.3 spring-context中的注解：</h3><table>
<thead>
<tr>
<th align="left">配置项</th>
<th align="left">说明</th>
<th align="left">适用类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@Validated</td>
<td align="left">校验非原子类型对象，或启用类中原子类型参数的校验（支持分组校验；只校验包含指定分组的注解参数）</td>
<td align="left">1. Controller类  <br> 2. @ModelAttribue标记的查询条件对象类 <br>3. @RequestBody标记的请求体对象类</td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td align="left"></td>
</tr>
</tbody></table>
<h3 id="7-4-注解的启用"><a href="#7-4-注解的启用" class="headerlink" title="7.4 注解的启用"></a>7.4 注解的启用</h3><ol>
<li>方法中对象参数中成员变量校验注解的生效条件<ul>
<li>@ModelAttribute标记的查询条件类参数，需要同时用@Valid或@Validated标记，类中的注解校验才会生效</li>
<li>@RequestBody标记的请求体对象参数，需要同时用@Valid或@Validated标记，类中的注解校验才会生效</li>
<li>@Valid或@Validated标记在方法或方法所属类上无效</li>
</ul>
</li>
<li>方法中原子类型参数校验注解的生效条件<ul>
<li>@Validated标记在方法所属类上</li>
</ul>
</li>
<li>按照分组启用<ul>
<li>在注解中使用groups添加启用注解的分组</li>
<li>在@Validated中指定启用的分组</li>
</ul>
</li>
</ol>
<p>博客参考地址：<a href="https://mp.weixin.qq.com/s/0VX6lLS133CA4NFCVOHhhw">https://mp.weixin.qq.com/s/0VX6lLS133CA4NFCVOHhhw</a></p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>VMWare创建虚拟机并设置静态IP</title>
    <url>/static-ip-setting/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h2 id="1-VMware-Centos7-静态IP设置"><a href="#1-VMware-Centos7-静态IP设置" class="headerlink" title="1. VMware+Centos7 静态IP设置"></a>1. VMware+Centos7 静态IP设置</h2><h3 id="1-1-VMware设置"><a href="#1-1-VMware设置" class="headerlink" title="1.1 VMware设置"></a>1.1 VMware设置</h3><p>省略windows安装VMWare的过程。</p>
<ol>
<li>查看虚拟网卡信息虚拟机安装好以后，当前的系统会多出来两个虚拟网卡，一般情况下这两个网卡的命名是 <figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">VMware</span> Virtual Ethernet Adapter for VMnet<span class="number">1</span></span><br><span class="line"><span class="attribute">VMware</span> Virtual Ethernet Adapter for VMnet<span class="number">8</span></span><br></pre></td></tr></table></figure>
我们可以把虚拟机中的系统的静态IP绑定到VMnet8上，所以下一步我们看一下VMnet8的ip地址</li>
</ol>
<ol start="2">
<li><p>查看虚拟网卡IP</p>
<p>在当前操作系统中，输入<code>ipconfig -all</code>显示网卡的IP信息如下<br><img src="/static-ip-setting/index/1.png"><br>记住当前VMnet8网卡的网段，如图所示，网段为:<code>192.168.8</code></p>
</li>
<li><p>虚拟机设置</p>
<p>打开VMware，进入<code>编辑 -&gt; 虚拟机网络编辑器</code><br><img src="/static-ip-setting/index/2.png"><br>选中VMnet8这个网卡，点击<code>NAT</code>设置<br><img src="/static-ip-setting/index/3.png"></p>
<p>在NAT设置中，可以看到子网IP、网关IP等信息。这里我们需要把网关IP记录下来： <code>192.168.8.2</code><br><img src="/static-ip-setting/index/4.png"></p>
</li>
<li><p>设置虚拟机的网络连接方式   </p>
<p>选中创建好的虚拟机，右键<code>设置</code>进入虚拟机设置面板。<br>将网络社配置设置为<code>自定义</code>，选中<code>VMnet8</code>这个网卡保存<br><img src="/static-ip-setting/index/5.png"></p>
</li>
</ol>
<h3 id="1-2-Centos7中的静态ip设置"><a href="#1-2-Centos7中的静态ip设置" class="headerlink" title="1.2 Centos7中的静态ip设置"></a>1.2 Centos7中的静态ip设置</h3><p>前置工作完成之后，就开始进入虚拟机的设置环节了</p>
<ol>
<li><p>找到网卡信息配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ifconfig</span><br></pre></td></tr></table></figure>
<p><img src="/static-ip-setting/index/6.png"><br>找到网卡名称<code>ens33</code>，输入命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure></li>
<li><p>修改配置</p>
<p>这个配置需要修改两个地方 </p>
<ul>
<li>设置BOOTPROTO=“static”</li>
<li>添加IPADDR/NETMASK/DNS1/GATEWAY这几个配置<br><img src="/static-ip-setting/index/7.png"></li>
</ul>
<p>配置说明</p>
<ul>
<li>IPADDR 就是当前虚拟机要设置的固定ip地址，网段要一致，我这边的案例是在8网段(这个网段是<code>VMnet8</code>对应的子网网段，不是真实机上的网段）。</li>
<li>NETMASK 子网掩码 用<code>VMnet8</code>对应的子网掩码值就行</li>
<li>DNS1 在真实机器上通过<code>ipconfig</code>，获得真实机器的网卡对应的DNS地址，填在这个位置</li>
<li>GATEWAY 网关地址，用前面第二个步骤中找到的网关地址： 192.168.8.2</li>
</ul>
</li>
<li><p>重启网络服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service network restart</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="1-3-可能会遇到的问题"><a href="#1-3-可能会遇到的问题" class="headerlink" title="1.3 可能会遇到的问题"></a>1.3 可能会遇到的问题</h3><ol>
<li><p><code>VMnet8</code>的网段和真实机器上的网段不一样</p>
<p>真实机器的网段是8， 而<code>VMnet8</code>的网段是136. 由于网段不一致，就会存在网络不通的问题。所以第一步，应该是把VMnet8这个网卡的网段重新设置，</p>
<p>进入VMware， 找到 <code>编辑 -&gt;虚拟网络编辑器</code><br><img src="/static-ip-setting/index/8.png"></p>
<p>点击<code>更改设置</code></p>
<p><img src="/static-ip-setting/index/9.png"><br>修改子网IP，原本的网段是136， 改成8网段。 保存以后，改网卡会自动重启</p>
</li>
<li><p>真实机器无法Ping通虚拟机</p>
<ul>
<li><p>原因1： 虚拟机的网段设置不正确，这个网段不是真实机器的网段，而是<code>VMnet8</code> NAT模式对应的网段，本案例中的网段是8.</p>
</li>
<li><p>原因2：虚拟机迁移过，原本设置的网段在新的网络中无效，可以在VMware这个工具的如下菜单处</p>
<pre><code>编辑 -&gt; 虚拟网络编辑器
还原默认设置，这个还原操作会重建虚拟网卡， 重建之后，VMware NAT模式的子网地址的网段会发生变化。后续的配置采用这个网段就行
</code></pre>
<p><img src="/static-ip-setting/index/10.png"></p>
</li>
</ul>
</li>
</ol>
<h2 id="2-Mac用VMWare创建虚拟机并设置静态IP"><a href="#2-Mac用VMWare创建虚拟机并设置静态IP" class="headerlink" title="2. Mac用VMWare创建虚拟机并设置静态IP"></a>2. Mac用VMWare创建虚拟机并设置静态IP</h2><p>   参考博客：<a href="https://blog.51cto.com/u_15298624/3033418">https://blog.51cto.com/u_15298624/3033418</a></p>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>ip</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue学习</title>
    <url>/vue-1/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h2 id="1-什么是vue"><a href="#1-什么是vue" class="headerlink" title="1. 什么是vue"></a>1. 什么是vue</h2><p>vue 官网：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a><br>渐进式框架，</p>
<h2 id="2-安装"><a href="#2-安装" class="headerlink" title="2.安装"></a>2.安装</h2><ol>
<li><p>安装 <code>npm</code><br><code>npm</code> 全称为 <code>Node Package Manager</code>，是一个基于<code>Node.js</code>的包管理器，也是整个<code>Node.js</code>社区最流行、支持的第三方模块最多的包管理器。</p>
 <figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">npm</span> -v</span><br></pre></td></tr></table></figure></li>
<li><p>由于网络原因 安装 <code>cnpm</code></p>
 <figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="comment">#旧版，cnpm官方公告将在2022年6月30日停止老域名解析</span></span><br><span class="line">npm install -g cnpm --registry=https:<span class="regexp">//</span>registry.npm.taobao.org</span><br><span class="line">   </span><br><span class="line"><span class="comment">#新版</span></span><br><span class="line">npm install -g cnpm --registry=https:<span class="regexp">//</span>registry.npmmirror.com</span><br></pre></td></tr></table></figure></li>
<li><p>安装 <code>vue-cli</code></p>
 <figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">cnpm install -g <span class="meta">@vue</span>/cli</span><br></pre></td></tr></table></figure></li>
<li><p>安装 <code>webpack</code></p>
<p> <code>webpack</code> 是  <code>JavaScript</code> 打包器(module bundler)</p>
 <figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">cnpm <span class="keyword">install</span> -g webpack</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="3-Vue练习"><a href="#3-Vue练习" class="headerlink" title="3  Vue练习"></a>3  Vue练习</h2><h3 id="3-1-Vue实例"><a href="#3-1-Vue实例" class="headerlink" title="3.1 Vue实例"></a>3.1 Vue实例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt; &#123;&#123; message &#125;&#125; &#123;&#123; name &#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var data = &#123;</span><br><span class="line">        message: &#x27;hello world&#x27;,</span><br><span class="line">        name: &#x27;xiaoyuge&#x27;</span><br><span class="line">    &#125;;</span><br><span class="line">    //view model 数据模型 vm</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        //如果要某一个属性声明式响应，必须在new vue的时候声明</span><br><span class="line">        data: data</span><br><span class="line">    &#125;);</span><br><span class="line">    //vm.$data.message =  data.message == vm.message;</span><br><span class="line">    //实例创建之后，可以通过 vm.$data 访问原始数据对象。Vue 实例也代理了 data 对象上所有的 property，因此访问 vm.message 等价于访问 vm.$data.message</span><br><span class="line">    vm.$watch(&#x27;message&#x27;, function(newVal, oldVal) &#123;</span><br><span class="line">        console.log(newVal, oldVal);</span><br><span class="line">    &#125;)</span><br><span class="line">    //修改值必须放到后面，</span><br><span class="line">    vm.$data.message = &quot;test....&quot;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3-2-数据和方法"><a href="#3-2-数据和方法" class="headerlink" title="3.2 数据和方法"></a>3.2 数据和方法</h3><p>当一个 Vue 实例被创建时，它将 data 对象中的所有的 property 加入到 Vue 的响应式系统中。当这些 property 的值发生改变时，视图将会产生“响应”，即匹配更新为新的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 我们的数据对象</span></span><br><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该对象被加入到一个 Vue 实例中</span></span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">data</span>: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得这个实例上的 property</span></span><br><span class="line"><span class="comment">// 返回源数据中对应的字段</span></span><br><span class="line">vm.a == data.a <span class="comment">// =&gt; true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 property 也会影响到原始数据</span></span><br><span class="line">vm.a = <span class="number">2</span></span><br><span class="line">data.a <span class="comment">// =&gt; 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ……反之亦然</span></span><br><span class="line">data.a = <span class="number">3</span></span><br><span class="line">vm.a <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure>
<p>当这些数据改变时，视图会进行重渲染。值得注意的是只有当实例被创建时就已经存在于 data 中的 property 才是响应式的。也就是说如果你添加一个新的 property，比如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vm.b = &#x27;hi&#x27;</span><br></pre></td></tr></table></figure>
<p>那么对 b 的改动将不会触发任何视图的更新。如果你知道你会在晚些时候需要一个 property，但是一开始它为空或不存在，那么你仅需要设置一些初始值。比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  newTodoText: &#x27;&#x27;,</span><br><span class="line">  visitCount: 0,</span><br><span class="line">  hideCompletedTodos: false,</span><br><span class="line">  todos: [],</span><br><span class="line">  error: null</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里唯一的例外是使用 Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; foo &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;!-- 这里的 `foo` 不会更新！ --&gt;</span><br><span class="line">    &lt;button v-on:click=&quot;foo = &#x27;baz&#x27;&quot;&gt;Change it&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var obj = &#123;</span><br><span class="line">  foo: &#x27;bar&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object.freeze(obj)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  el: &#x27;#app&#x27;,</span><br><span class="line">  data: obj</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>除了数据 property，Vue 实例还暴露了一些有用的实例 property 与方法。它们都有前缀 $，以便与用户定义的 property 区分开来。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var data = &#123; a: 1 &#125;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &#x27;#example&#x27;,</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">vm.$data === data // =&gt; true</span><br><span class="line">vm.$el === document.getElementById(&#x27;example&#x27;) // =&gt; true</span><br><span class="line"></span><br><span class="line">// $watch 是一个实例方法</span><br><span class="line">vm.$watch(&#x27;a&#x27;, function (newValue, oldValue) &#123;</span><br><span class="line">  // 这个回调将在 `vm.a` 改变后调用</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="2-3-生命周期钩子"><a href="#2-3-生命周期钩子" class="headerlink" title="2.3 生命周期钩子"></a>2.3 生命周期钩子</h3><p>Vue 实例从创建到销毁的过程，就是生命周期。也就是从开始创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程，我们称这是 Vue 的生命周期</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            msg: &quot;hi vue&quot;,</span><br><span class="line">        &#125;,</span><br><span class="line">        //在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。</span><br><span class="line">        beforeCreate: function() &#123;</span><br><span class="line">            console.log(&#x27;beforeCreate&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        //在实例创建完成后被立即调用。</span><br><span class="line">        // 在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。</span><br><span class="line">        // 然而，挂载阶段还没开始，$el 属性目前不可见 </span><br><span class="line">        created: function() &#123;</span><br><span class="line">            console.log(&#x27;created&#x27;);</span><br><span class="line">        &#125;,</span><br><span class="line">        //在挂载开始之前被调用：相关的渲染函数首次被调用</span><br><span class="line">        beforeMount: function() &#123;</span><br><span class="line">            console.log(&#x27;beforeMount&#x27;);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        //el 被新创建的 vm.$el 替换, 挂在成功	</span><br><span class="line">        mounted: function() &#123;</span><br><span class="line">            console.log(&#x27;mounted&#x27;);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        //数据更新时调用</span><br><span class="line">        beforeUpdate: function() &#123;</span><br><span class="line">            console.log(&#x27;beforeUpdate&#x27;);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        //组件 DOM 已经更新, 组件更新完毕 </span><br><span class="line">        updated: function() &#123;</span><br><span class="line">            console.log(&#x27;updated&#x27;);</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">          beforeDestroy() &#123;</span><br><span class="line">            console.log(&quot;=========&quot; + &quot;beforeDestroy：销毁之前&quot; + &quot;========&quot;);</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">            console.log(this.$data);</span><br><span class="line">          &#125;,</span><br><span class="line">          destroyed() &#123;</span><br><span class="line">            console.log(&quot;==========&quot; + &quot;destroyed：销毁之后&quot; + &quot;===========&quot;);</span><br><span class="line">            console.log(this.$el);</span><br><span class="line">          &#125;,</span><br><span class="line">          activated() &#123;</span><br><span class="line">            console.log(&quot;&quot;);</span><br><span class="line">          &#125;,</span><br><span class="line">          deactivated() &#123;</span><br><span class="line">            console.log(&quot;&quot;);</span><br><span class="line">          &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    //3秒后修改值，触发beforeUpdate, updated事件</span><br><span class="line">    setTimeout(function() &#123;</span><br><span class="line">        vm.msg = &quot;change ......&quot;;</span><br><span class="line">    &#125;, 3000);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>控制台依次打印：    <br><br>beforeCreate    <br><br>created <br><br>beforeMount <br><br>mounted <br><br>beforeUpdate    <br><br>updated <br></p>
<p>注意事项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">不要在选项 property 或回调上使用箭头函数，比如 created: () =&gt; console.log(this.a) 或 vm.$watch(&#x27;a&#x27;, newValue =&gt; this.myMethod())。</span><br><span class="line">因为箭头函数并没有 this，this 会作为变量一直向上级词法作用域查找，直至找到为止，经常导致 Uncaught TypeError: Cannot read property of undefined </span><br><span class="line">或 Uncaught TypeError: this.myMethod is not a function 之类的错误。</span><br></pre></td></tr></table></figure>
<p><img src="/vue-1/index/instance.png"></p>
<h3 id="3-3-条件与循环"><a href="#3-3-条件与循环" class="headerlink" title="3.3 条件与循环"></a>3.3 条件与循环</h3><ul>
<li>v-if: 控制切换一个元素是否显示  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;vue-app&quot;&gt;</span><br><span class="line">    &lt;p v-if=&quot;seen&quot;&gt;v-if: 如果为false，Dom将不渲染该元素&lt;/p&gt;</span><br><span class="line">    &lt;p v-show=&quot;seen&quot;&gt;show：Dom渲染，只是通过css控制display属性是否显示&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;show: 渲染时开销大；v-if：渲染时开销小；具体场景根据实际情况选定&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#vue-app&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">          seen: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    vm.seen = false;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
  当改变<code>seen</code> 的值为false的时候，<code>v-if</code>绑定的元素Dom元素不渲染<br>  <img src="/vue-1/index/if_each.png"></li>
<li>v-for: 绑定数组的数据来渲染一个项目列表  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> &lt;div id=&quot;vue-app&quot;&gt;</span><br><span class="line">     &lt;!--遍历输出list--&gt;</span><br><span class="line">     &lt;p&gt;遍历输出list&lt;/p&gt;</span><br><span class="line">     &lt;ol&gt;</span><br><span class="line">         &lt;li v-for=&quot;item in list&quot;&gt;</span><br><span class="line">              &#123;&#123; item.name &#125;&#125;</span><br><span class="line">         &lt;/li&gt;</span><br><span class="line">     &lt;/ol&gt;</span><br><span class="line">     &lt;br&gt;</span><br><span class="line">     &lt;p&gt;遍历输出map key value-&lt;/p&gt;</span><br><span class="line">     &lt;ul&gt;</span><br><span class="line">         &lt;li v-for=&quot;value, key in object&quot;&gt;</span><br><span class="line">             &#123;&#123;key&#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line">         &lt;/li&gt;</span><br><span class="line">     &lt;/ul&gt;</span><br><span class="line"> &lt;/div&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">     var vm = new Vue(&#123;</span><br><span class="line">         el: &#x27;#vue-app&#x27;,</span><br><span class="line">         data:&#123;</span><br><span class="line">             list:[</span><br><span class="line">                 &#123;name: &#x27;张三&#x27;&#125;,</span><br><span class="line">                 &#123;name: &#x27;李四&#x27;&#125;,</span><br><span class="line">                 &#123;name: &#x27;王五&#x27;&#125;</span><br><span class="line">             ],</span><br><span class="line">             object: &#123;</span><br><span class="line">truetruetitle: &#x27;How to do lists in Vue&#x27;,</span><br><span class="line">truetrueauthor: &#x27;Jane Doe&#x27;,</span><br><span class="line">truetruepublishedAt: &#x27;2016-04-10&#x27;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;)</span><br><span class="line">     //往数组里面添加元素，页面上响应式渲染</span><br><span class="line">     vm.list.push(&#123;name:&#x27;赵六&#x27;&#125;);</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
  <img src="/vue-1/index/v-for.png"></li>
</ul>
<h3 id="3-4-处理用户输入"><a href="#3-4-处理用户输入" class="headerlink" title="3.4 处理用户输入"></a>3.4 处理用户输入</h3><ul>
<li>v-on: 事件监听器  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;example-1&quot;&gt;</span><br><span class="line">        &lt;!-- 单击事件：计算器加一 --&gt;</span><br><span class="line">        &lt;button v-on:click=&quot;counter += 1&quot;&gt; 数值 : &#123;&#123; counter &#125;&#125; &lt;/button&gt;&lt;br /&gt;</span><br><span class="line">  </span><br><span class="line">        &lt;!-- 双击事件 --&gt;</span><br><span class="line">        &lt;button v-on:dblclick=&quot;greet(&#x27;abc&#x27;, $event)&quot;&gt;Greet&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=&quot;example-2&quot;&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;!-- 单击 --&gt;</span><br><span class="line">        &lt;button v-on:click=&quot;reverseMessage&quot;&gt;反转消息&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            counter: 0,</span><br><span class="line">            name: &quot;vue&quot;,</span><br><span class="line">            message: &#x27;hello world&#x27;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            greet: function(str, e) &#123;</span><br><span class="line">                alert(str);</span><br><span class="line">            &#125;,</span><br><span class="line">            reverseMessage: function() &#123;</span><br><span class="line">                //更新了应用的状态，但没有触碰 DOM。所有的 DOM 操作都由 Vue 来处理，这样我们只需要关注逻辑层面即可</span><br><span class="line">                //this 表示vue实例对象，可以获取相关的数据信息</span><br><span class="line">                this.message = this.message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
<li>v-model: 表单输入和应用状态之间的双向绑定  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id=&quot;example-1&quot;&gt;</span><br><span class="line">        &lt;input v-model=&quot;message&quot; placeholder=&quot;edit me&quot;&gt;</span><br><span class="line">        &lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;textarea v-model=&quot;message2&quot; placeholder=&quot;add multiple lines&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">        &lt;p style=&quot;white-space: pre-line;&quot;&gt;&#123;&#123; message2 &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;div style=&quot;margin-top:20px;&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; id=&quot;jack&quot; value=&quot;Jack&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;jack&quot;&gt;Jack&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; id=&quot;john&quot; value=&quot;John&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;john&quot;&gt;John&lt;/label&gt;</span><br><span class="line">            &lt;input type=&quot;checkbox&quot; id=&quot;mike&quot; value=&quot;Mike&quot; v-model=&quot;checkedNames&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;mike&quot;&gt;Mike&lt;/label&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            &lt;span&gt;Checked names: &#123;&#123; checkedNames &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;br&gt;</span><br><span class="line">        &lt;div style=&quot;margin-top:20px;&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;radio&quot; id=&quot;one&quot; value=&quot;One&quot; v-model=&quot;picked&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;one&quot;&gt;One&lt;/label&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            &lt;input type=&quot;radio&quot; id=&quot;two&quot; value=&quot;Two&quot; v-model=&quot;picked&quot;&gt;</span><br><span class="line">            &lt;label for=&quot;two&quot;&gt;Two&lt;/label&gt;</span><br><span class="line">            &lt;br&gt;</span><br><span class="line">            &lt;span&gt;Picked: &#123;&#123; picked &#125;&#125;&lt;/span&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;button type=&quot;button&quot; @click=&quot;submit&quot;&gt;提交&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &quot;#app&quot;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            //这里可以设置初始值，也可以设置为&#x27;&#x27; 空值</span><br><span class="line">            message: &quot;test&quot;,</span><br><span class="line">            message2: &quot;hi&quot;,</span><br><span class="line">            checkedNames: [&#x27;Jack&#x27;, &#x27;John&#x27;], //多选框，值是数组格式</span><br><span class="line">            picked: &quot;Two&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            submit: function() &#123;</span><br><span class="line">                //this代表的是vue实例对象，可以通过this获取表单数据，如下</span><br><span class="line">                var params = &#123;</span><br><span class="line">                    message: this.message,</span><br><span class="line">                    message2: this.message2,</span><br><span class="line">                    checkedNames: this.checkedNames,</span><br><span class="line">                    picked: this.picked</span><br><span class="line">                &#125;</span><br><span class="line">                console.log(params);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>12 前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装Zookeeper 3.7.1单节点</title>
    <url>/zookeeper-install/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-JDK依赖"><a href="#1-JDK依赖" class="headerlink" title="1. JDK依赖"></a>1. JDK依赖</h3><p>请参考这篇博客：<a href="https://xiaoyuge.work/jdk-install/">Linux安装JDK以及配置</a></p>
<h3 id="2-下载Zookeeper"><a href="#2-下载Zookeeper" class="headerlink" title="2. 下载Zookeeper"></a>2. 下载Zookeeper</h3><p>下载连接：<a href="https://zookeeper.apache.org/releases.html">https://zookeeper.apache.org/releases.html</a>,  找到版本3.7.1下载二进制版本，不需要编译<br><img src="/zookeeper-install/index/2.png"><br>以安装路径 /usr/local/tools 为例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools</span><br><span class="line">wget https://dlcdn.apache.org/zookeeper/zookeeper-3.7.1/apache-zookeeper-3.7.1-bin.tar.gz</span><br></pre></td></tr></table></figure>
<p>如果上面的地址下载比较慢的话，可以试下在apache仓库里面找（<a href="https://archive.apache.org/dist/zookeeper/%EF%BC%89">https://archive.apache.org/dist/zookeeper/）</a><br><img src="/zookeeper-install/index/1.png"></p>
<h3 id="3-解压"><a href="#3-解压" class="headerlink" title="3. 解压"></a>3. 解压</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -xzvf apache-zookeeper-3.7.1-bin.tar.gz</span><br></pre></td></tr></table></figure>
<h3 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4. 修改配置文件"></a>4. 修改配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd apache-zookeeper-3.7.1-bin/conf</span><br><span class="line">cp zoo_sample.cfg zoo.cfg</span><br><span class="line"></span><br><span class="line">vim zoo.cfg</span><br></pre></td></tr></table></figure>
<p><img src="/zookeeper-install/index/3.png"><br>端口号默认2181。</p>
<p>配置文件zoo.cfg里面的dataDir要修改，如果不改，需要创建这个目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /tmp/zookeeper</span><br></pre></td></tr></table></figure>

<h3 id="5-启动ZK"><a href="#5-启动ZK" class="headerlink" title="5. 启动ZK"></a>5. 启动ZK</h3><p>zookeeper默认端口 2181</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd ../bin</span><br><span class="line">./zkServer.sh start</span><br></pre></td></tr></table></figure>
<p>输出日志：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ZooKeeper JMX enabled by default</span><br><span class="line">Using config: /usr/local/tools/apache-zookeeper-3.7.1-bin/bin/../conf/zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure>

<p>其他命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -ef | grep zookeeper     #查看是否启动成功</span><br><span class="line"></span><br><span class="line">./zkServer.sh status      #查看zk的运行状态</span><br><span class="line"></span><br><span class="line">./zkCli.sh              #客户端链接zk</span><br><span class="line"></span><br><span class="line">ls                      #查看节点</span><br><span class="line"></span><br><span class="line">get /name               #get 获取节点数据和更新信息， name为具体的节点名称</span><br><span class="line"></span><br><span class="line">create [-s] [-e] path data acl        #create 创建节点 e 临时节点 s 顺序节点</span><br><span class="line"></span><br><span class="line">delete path [version]           #删除节点</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式消息中间件设计篇</title>
    <url>/distributed-message-middleware1/index.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="12b3dba18d53a6ea714055d2223901da81d78e1781b8d547a4b4d1e8b890e545">91b4a72afde41933824d9b47e790ab276fb896cf66d88c172d81884618061a3a06494a53a06c86388946a43ef7a98e9bfe2600edaa3821977485df16c9c2abafe7ee9dedd47ef8604d05fef1721f860af822ff215ff3de7dbde0391f0342b707de6577cf886cea37f45aa82519670a95255dd3c5db5869ba932048bee6c4eba6e96d3bb17201535148ef3c31323edc1a8f26f85175c8d8b874292c534425c5ad98151261edbffb60fefb06f5fbd37e51119cfc8f381ed87e3b222d585714d1eb</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>05 分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>一文搞明白位运算、补码、反码、原码</title>
    <url>/bitwise-operation/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<p>在平时看各种框架的源码过程中，经常会看到一些位移运算，所以作为一个有经验的Java开发者是一定要掌握位移运算的。</p>
<h3 id="1-正数位移运算"><a href="#1-正数位移运算" class="headerlink" title="1. 正数位移运算"></a>1. 正数位移运算</h3><p>java中有三个位移运算：</p>
<ul>
<li><p>&lt;&lt;：左移</p>
</li>
<li><p>&gt;&gt;：右移</p>
</li>
<li><p>&gt;&gt;&gt;：无符号右移</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println(<span class="number">2</span> &lt;&lt; <span class="number">1</span>); <span class="comment">//4</span></span><br><span class="line">System.out.println(<span class="number">2</span> &gt;&gt; <span class="number">1</span>); <span class="comment">//1</span></span><br><span class="line">System.out.println(<span class="number">2</span> &gt;&gt;&gt; <span class="number">1</span>); <span class="comment">//1</span></span><br><span class="line">System.out.println(-<span class="number">2</span> &lt;&lt; <span class="number">1</span>); <span class="comment">//-4</span></span><br><span class="line">System.out.println(-<span class="number">2</span> &gt;&gt; <span class="number">1</span>); <span class="comment">//-1</span></span><br><span class="line">System.out.println(-<span class="number">2</span> &gt;&gt;&gt; <span class="number">1</span>); <span class="comment">//2147483647</span></span><br></pre></td></tr></table></figure>
<p>下面就来详细解释以下结果是如何运算出来的。</p>
<p>上面Demo中有 <strong>2</strong>和 <strong>-2</strong> ，这两个十进制数，并且是<code>int</code>类型（Java中占4个字节），位元算是基于二进制bit来的，所以我们<strong>需要将十进制转化为二进制之后再进行运算：</strong></p>
<ul>
<li><p><code>2 &lt;&lt; 1</code>：十进制<strong>2</strong>转化为二进制为<code>00000000 00000000 00000000 00000010</code>,再将二进制左移 <strong>1</strong> 位，高位丢弃，低位补0，所以结果为<code>00000000 00000000 00000000 00000100</code>，换算成十进制为<strong>4</strong>（2<sup>n-1</sup> 其中n为非0为下标 ）</p>
</li>
<li><p><code>2 &gt;&gt; 1</code>：十进制<strong>2</strong>转化为二进制为<code>00000000 00000000 00000000 00000010</code>,再将二进制右移 <strong>1</strong> 位，高位补0，低位丢弃，所以结果为<code>00000000 00000000 00000000 00000001</code>，换算成十进制为<strong>1</strong></p>
</li>
</ul>
<p>对于这两种情况都非常好理解，那么什么是<strong>无符号右移</strong>，以及负数是怎么运算的？我们先来看<code>-2 &lt;&lt; 1</code> 和 <code>-2 &gt;&gt; 1</code>，这两个负数的左移与右移操作其实和正数类似，都是先将十进制数转换成二进制数，再将二进制数进行移动，所以现在的关键是负数如何用二进制数进行表示。</p>
<h3 id="2-原码、反码、补码"><a href="#2-原码、反码、补码" class="headerlink" title="2. 原码、反码、补码"></a>2. 原码、反码、补码</h3><p>接下来我们主要介绍十进制数用二进制表示的不同方法，所以为了简洁，我们用一个字节，也就是8个bit来表示二进制数。</p>
<h4 id="2-1-原码"><a href="#2-1-原码" class="headerlink" title="2.1 原码"></a>2.1 原码</h4><table>
<thead>
<tr>
<th align="center">十进制</th>
<th align="center">原码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2</td>
<td align="center">0000 0010</td>
</tr>
<tr>
<td align="center">-2</td>
<td align="center">1000 0010</td>
</tr>
</tbody></table>
<p><ne-text id="u24ca45fc">原码其实是最容易理解的，只不过需要利用<strong>二进制中的第一位来表示符号位，0表示正数，1表示负数</strong>，所以可以看到，一个数字用二进制原码表示的话，取值范围是<code>-111 1111</code> ~ <code>+111 1111</code>，<br>换成十进制就是 <code>-127 ~ 127</code></ne-text></p>
<h4 id="2-2-反码"><a href="#2-2-反码" class="headerlink" title="2.2 反码"></a>2.2 反码</h4><p>在数学中我们有加减乘除，而对于计算机来说最好只有加法，这样计算机会更加简单高效，我们知道在数学中<code>5-3=2</code>，可以使用加法表示：<code>5+(-3)=2</code>，而乘法是加法的累积，除法是减法的累积，所以在计算机中只要有加法就够。</p>
<p>一个数字用原码表示是容易理解的，但是需要单独的一个bit来表示符号位。并且在进行加法时，计算机需要先识别某个二进制原码是正数还是负数，识别出来之后再进行相应的运算。这样效率不高，能不能让计算机在进行运算时不用去管符号位，也就是说让符号位也参与运算，这就要用到反码。</p>
<table>
<thead>
<tr>
<th align="center">十进制</th>
<th align="center">原码</th>
<th align="center">反码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2</td>
<td align="center">0000 0010</td>
<td align="center">0000 0010</td>
</tr>
<tr>
<td align="center">-2</td>
<td align="center">1000 0010</td>
<td align="center">1111 1101</td>
</tr>
</tbody></table>
<p><strong>正数的反码和原码一样，负数的反码就是在原码的基础上符号位保持不变，其他位取反。</strong><br>那么我们来看下，用反码直接运算会怎么样，以<code>5-3</code>为例。<br><code>5 - 3</code>等于<code>5 + （-3）</code></p>
<table>
<thead>
<tr>
<th align="center">十进制</th>
<th align="center">原码</th>
<th align="center">反码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">5</td>
<td align="center">0000 0101</td>
<td align="center">0000 0101</td>
</tr>
<tr>
<td align="center">-3</td>
<td align="center">1000 0011</td>
<td align="center">1111 1100</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>-<span class="number">3</span></span><br><span class="line">=<span class="number">5</span> + (-<span class="number">3</span>)</span><br><span class="line">= <span class="number">0000</span> <span class="number">0101</span>(反码) + <span class="number">1111</span> <span class="number">1100</span> (反码)</span><br><span class="line">= <span class="number">0000</span> <span class="number">0001</span> (反码)</span><br><span class="line">= <span class="number">0000</span> <span class="number">0001</span> （原码）</span><br><span class="line">= <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>结果算出来是1，不合理啊，差了1。</p>
<p>接着看一个特殊的运算：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>-<span class="number">1</span></span><br><span class="line">=<span class="number">1</span> + (-<span class="number">1</span>)</span><br><span class="line">= <span class="number">0000</span> <span class="number">0001</span>(反码) + <span class="number">1111</span> <span class="number">1110</span> (反码)</span><br><span class="line">= <span class="number">1111</span> <span class="number">1111</span> (反码)</span><br><span class="line">= <span class="number">1000</span> <span class="number">0000</span> （原码）</span><br><span class="line">= -<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>再看一个特殊的运算：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>+<span class="number">0</span></span><br><span class="line">= <span class="number">0000</span> <span class="number">0000</span>(反码) + <span class="number">0000</span> <span class="number">0000</span> (反码)</span><br><span class="line">= <span class="number">0000</span> <span class="number">0000</span> (反码)</span><br><span class="line">= <span class="number">0000</span> <span class="number">0000</span> （原码）</span><br><span class="line">= <span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>我们可以看到1000 0000表示-0，0000 0000表示0，虽然-0和0是一样的，但是在用原码和反码表示时是不同的，我们可以理解为在用一个字节表示数字取值范围时，这些数字中多了一个-0，所以导致我们在用反码直接运算时符号位可以直接参加运算，但是结果会不对。</p>
<h4 id="2-3-补码"><a href="#2-3-补码" class="headerlink" title="2.3 补码"></a>2.3 补码</h4><p>为了解决反码的问题就出现来补码</p>
<table>
<thead>
<tr>
<th align="center">十进制</th>
<th align="center">原码</th>
<th align="center">反码</th>
<th align="center">补码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">2</td>
<td align="center">0000 0010</td>
<td align="center">0000 0010</td>
<td align="center">0000 0010</td>
</tr>
<tr>
<td align="center">-2</td>
<td align="center">1000 0010</td>
<td align="center">1111 1101</td>
<td align="center">1111 1110</td>
</tr>
</tbody></table>
<p><strong>正数的补码和原码、反码一样，负数的补码就是反码+1（满2进1）。</strong></p>
<table>
<thead>
<tr>
<th align="center">十进制</th>
<th align="center">原码</th>
<th align="center">反码</th>
<th align="center">补码</th>
</tr>
</thead>
<tbody><tr>
<td align="center">5</td>
<td align="center">0000 0101</td>
<td align="center">0000 0101</td>
<td align="center">0000 0101</td>
</tr>
<tr>
<td align="center">-3</td>
<td align="center">1000 0011</td>
<td align="center">1111 1100</td>
<td align="center">1111 1101</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">5</span>-<span class="number">3</span></span><br><span class="line">=<span class="number">5</span> + (-<span class="number">3</span>)</span><br><span class="line">= <span class="number">0000</span> <span class="number">0101</span>(补码) + <span class="number">1111</span> <span class="number">1101</span> (补码)</span><br><span class="line">= <span class="number">0000</span> <span class="number">0010</span> (补码)</span><br><span class="line">= <span class="number">0000</span> <span class="number">0010</span> （原码）</span><br><span class="line">= <span class="number">2</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>5 - 3= 2 ! 正确</p>
</blockquote>
<p>再来看特殊的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>-<span class="number">1</span></span><br><span class="line">=<span class="number">1</span> + (-<span class="number">1</span>)</span><br><span class="line">= <span class="number">0000</span> <span class="number">0001</span>(补码) + <span class="number">1111</span> <span class="number">1111</span> (补码)</span><br><span class="line">= <span class="number">0000</span> <span class="number">0000</span> (补码)</span><br><span class="line">= <span class="number">0000</span> <span class="number">0000</span> （原码）</span><br><span class="line">= <span class="number">0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>1 - 1 = 0 ! 正确</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>+<span class="number">0</span></span><br><span class="line">= <span class="number">0000</span> <span class="number">0000</span>(补码) + <span class="number">0000</span> <span class="number">0000</span> (补码)</span><br><span class="line">= <span class="number">0000</span> <span class="number">0000</span> (补码)</span><br><span class="line">= <span class="number">0000</span> <span class="number">0000</span> （原码）</span><br><span class="line">= <span class="number">0</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>0 + 0 = 0 ! 正确</p>
</blockquote>
<p>所以，我们可以看到补码解决来反码的问题，对于数字，我们可以使用补码的形式进行二进制表示。</p>
<h3 id="3-负数位移运算"><a href="#3-负数位移运算" class="headerlink" title="3. 负数位移运算"></a>3. 负数位移运算</h3><p>那么接着来看 <code>-2 &lt;&lt; 1</code> 与 <code> -2 &gt;&gt; 1</code><br>其中十进制<code>-2</code>原码、反码、补码分别为：</p>
<ul>
<li>原码：<code>1000000 00000000 00000000 00000010</code></li>
<li>反码：<code>1111111 11111111 11111111 11111101</code></li>
<li>补码：<code>1111111 11111111 11111111 11111110</code></li>
</ul>
<p>那么<code> -2 &lt;&lt; 1</code>表示 -2的补码左移一位后结果为:<code>1111111 11111111 11111111 11111100</code> 该补码对应的反码为</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">1111111 11111111 11111111 11111100</span><br><span class="line">-1</span><br><span class="line">= 1111111 11111111 11111111 11111011</span><br><span class="line"></span><br><span class="line">对应的原码为：1000000 00000000 00000000 00000100， 转化为十进制为： -4</span><br></pre></td></tr></table></figure>
<p>所以 <code> -2 &lt;&lt; 1 = -4</code>， 同理<code> -2 &gt;&gt; 1</code>也是一样的计算方法。</p>
<h3 id="4-无符号右移"><a href="#4-无符号右移" class="headerlink" title="4. 无符号右移"></a>4. 无符号右移</h3><p>上面在进行左移和右移时，我有一点没讲到，就是在对补码进行移动时，符号位是固定不动的，而<strong>无符号右移是指在进行移动时，符号位也会跟着一起移动</strong>。</p>
<p>比如<code> -2 &gt;&gt;&gt; 1</code>:</p>
<ul>
<li>-2原码：<code>1000000 00000000 00000000 00000010</code></li>
<li>-2反码：<code>1111111 11111111 11111111 11111101</code></li>
<li>-2补码：<code>1111111 11111111 11111111 11111110</code></li>
</ul>
<p>右移后的补码对应的反码、原码为：<code>0111111 11111111 11111111 11111111</code> (因为现在的符号位是0表示正数，正数的补、原、反码都是一样的)<br>所以对应的十进制为<code>2147483647</code>，也就是 <code> -2 &gt;&gt;&gt; 1 = 2147483647</code></p>
<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><p>相信看完上面写的小伙伴们，都以发现：</p>
<p>2 &lt;&lt; 1 = 4 = 2 * 2<sup>1<sup></sup></sup></p>
<p>2 &lt;&lt; 2 = 8 = 2 * 2<sup>2<sup></sup></sup></p>
<p>2 &lt;&lt; n = 2 * 2<sup>n<sup></sup></sup></p>
<p>m &lt;&lt; n = m * 2<sup>n<sup></sup></sup></p>
<p>右移则相反，所以大家以后在源码中再看到位运算时，可以参考上面的公式。</p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot代码混淆</title>
    <url>/code-obfuscation/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<p>作为一个有经验的程序员，我们都知道 jar/war里面的.class文件都可以逆向还回来，可以通过 JD-GUI 或者IDEA，那么我们该怎么样预防源码暴露呢？</p>
<p>可以混淆代码，扰乱敌人视线。接下来就一起来看看怎么去实现</p>
<h3 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h3><ol>
<li><p>首先得弄个springBoot项目吧</p>
</li>
<li><p>在项目根路径新建<code>proguard.cfg</code>文件，然后键入以下内容</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#指定Java的版本</span><br><span class="line">-target 1.8</span><br><span class="line">#proguard会对代码进行优化压缩，他会删除从未使用的类或者类成员变量等</span><br><span class="line">-dontshrink</span><br><span class="line">#是否关闭字节码级别的优化，如果不开启则设置如下配置</span><br><span class="line">-dontoptimize</span><br><span class="line">#混淆时不生成大小写混合的类名，默认是可以大小写混合</span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line"># 对于类成员的命名的混淆采取唯一策略</span><br><span class="line">-useuniqueclassmembernames</span><br><span class="line">#混淆时不生成大小写混合的类名，默认是可以大小写混合</span><br><span class="line">-dontusemixedcaseclassnames</span><br><span class="line">#混淆类名之后，对使用Class.forName(&#x27;className&#x27;)之类的地方进行相应替代</span><br><span class="line">-adaptclassstrings</span><br><span class="line"> </span><br><span class="line">#对异常、注解信息予以保留</span><br><span class="line">-keepattributes Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,*Annotation*,EnclosingMethod</span><br><span class="line"># 此选项将保存接口中的所有原始名称（不混淆）--&gt;</span><br><span class="line">-keepnames interface ** &#123; *; &#125;</span><br><span class="line"># 此选项将保存所有软件包中的所有原始接口文件（不进行混淆）</span><br><span class="line">#-keep interface * extends * &#123; *; &#125;</span><br><span class="line">#保留参数名，因为控制器，或者Mybatis等接口的参数如果混淆会导致无法接受参数，xml文件找不到参数</span><br><span class="line">-keepparameternames</span><br><span class="line"># 保留枚举成员及方法</span><br><span class="line">-keepclassmembers enum * &#123; *; &#125;</span><br><span class="line"># 不混淆所有类,保存原始定义的注释-</span><br><span class="line">-keepclassmembers class * &#123;</span><br><span class="line">                        @org.springframework.context.annotation.Bean *;</span><br><span class="line">                        @org.springframework.beans.factory.annotation.Autowired *;</span><br><span class="line">                        @org.springframework.beans.factory.annotation.Value *;</span><br><span class="line">                        @org.springframework.stereotype.Service *;</span><br><span class="line">                        @org.springframework.stereotype.Component *;</span><br><span class="line">                        &#125;</span><br><span class="line"> </span><br><span class="line">#忽略warn消息</span><br><span class="line">-ignorewarnings</span><br><span class="line">#忽略note消息</span><br><span class="line">-dontnote</span><br><span class="line">#打印配置信息</span><br><span class="line">-printconfiguration</span><br><span class="line">   </span><br><span class="line">#这里要看清，不要混淆springboot的启动类</span><br><span class="line">-keep public class com.yugb.Application &#123;</span><br><span class="line">        public static void main(java.lang.String[]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>添加<code>proguard</code>混淆插件</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.wvengen<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>proguard-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 以下配置说明执行mvn的package命令时候，会执行proguard--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>proguard<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 就是输入Jar的名称，我们要知道，代码混淆其实是将一个原始的jar，生成一个混淆后的jar，那么就会有输入输出。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">injar</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">injar</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 输出jar名称，输入输出jar同名的时候就是覆盖，也是比较常用的配置。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outjar</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class="tag">&lt;/<span class="name">outjar</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否混淆 默认是true --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">obfuscate</span>&gt;</span>true<span class="tag">&lt;/<span class="name">obfuscate</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 配置一个文件，通常叫做proguard.cfg,该文件主要是配置options选项，也就是说使用proguard.cfg那么options下的所有内容都可以移到proguard.cfg中 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">proguardInclude</span>&gt;</span>$&#123;project.basedir&#125;/proguard.cfg<span class="tag">&lt;/<span class="name">proguardInclude</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 额外的jar包，通常是项目编译所需要的jar --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">libs</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lib</span>&gt;</span>$&#123;java.home&#125;/lib/rt.jar<span class="tag">&lt;/<span class="name">lib</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lib</span>&gt;</span>$&#123;java.home&#125;/lib/jce.jar<span class="tag">&lt;/<span class="name">lib</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">lib</span>&gt;</span>$&#123;java.home&#125;/lib/jsse.jar<span class="tag">&lt;/<span class="name">lib</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">libs</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 对输入jar进行过滤比如，如下配置就是对META-INFO文件不处理。 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">inLibsFilter</span>&gt;</span>!META-INF/**,!META-INF/versions/9/**.class<span class="tag">&lt;/<span class="name">inLibsFilter</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 这是输出路径配置，但是要注意这个路径必须要包括injar标签填写的jar --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.basedir&#125;/target<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--这里特别重要，此处主要是配置混淆的一些细节选项，比如哪些类不需要混淆，哪些需要混淆--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">options</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 可以在此处写option标签配置，不过我上面使用了proguardInclude，故而我更喜欢在proguard.cfg中配置 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">options</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 这个是启动类路径 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.yugb.Application<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p> 然后就可以看到：<br><img src="/code-obfuscation/index/1.png"></p>
</li>
<li><p>正常执行编译打包流程<br><img src="/code-obfuscation/index/2.png"><br><img src="/code-obfuscation/index/3.png"><br>打包编译+混淆</p>
</li>
<li><p>打开jar包，反编译class<br><img src="/code-obfuscation/index/4.png"><br>这打开一看，这啥东西啊，谁看谁不迷糊啊。接下来反编译走一波。<br><img src="/code-obfuscation/index/5.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>搞定 CompletableFuture</title>
    <url>/completableFuture/index.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="2a5a0935193b2d3490d45c81ad9f5572e988d65d4ecf2b3f764ef2239c0eff29">91b4a72afde41933824d9b47e790ab27dd6bf54facb3caa587357a4247da69dda8218436756d71a48444bb81ff54f3f9acdeb100e60d8f708f8887c1b68579b40eae4d425973df9f7c4164f35b0ba9afddfc65e33cc39a29ec976876dbf6adee</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>注解@ConditionalOnClass的源码实现</title>
    <url>/conditional-on-class/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<p>在Springboot中，支持了很多条件注解，@ConditionalOnClass注解就是其中之一。它主要是<strong>用来判断该注解所指定的某个类或者某些类是否在ClassPath中存在，如果存在则符合条件，如果不存在则不符合</strong>。</p>
<p>注解源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123; ElementType.TYPE, ElementType.METHOD &#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Conditional(OnClassCondition.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ConditionalOnClass &#123;</span><br><span class="line">    Class&lt;?&gt;[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过<code>value</code>和<code>name</code>来指定要判断的类，而真正执行判断的逻辑在<code>OnClassCondition</code>类中。</p>
<ol>
<li><code>ConditionalOnClass</code>注解逻辑在<code>OnClassCondition</code>类中</li>
<li><code>OnClassCondition</code>继承了<code>SpringBootCondition</code>类</li>
<li><code>SpringBootCondition</code>类实现了<code>Condition</code>接口</li>
</ol>
<p>所以Spring在解析条件注解时，就会调用<code>Condition</code>接口的<code>matches()</code>方法，SpringBootCondition类中实现了<code>matches()</code>方法，所以会被先调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootCondition</span> <span class="keyword">implements</span> <span class="title">Condition</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(ConditionContext context,</span></span></span><br><span class="line"><span class="params"><span class="function">                                 AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        String classOrMethodName = getClassOrMethodName(metadata);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ConditionOutcome outcome = getMatchOutcome(context, metadata);</span><br><span class="line">            logOutcome(classOrMethodName, outcome);</span><br><span class="line">            recordEvaluation(context, classOrMethodName, outcome);</span><br><span class="line">            <span class="keyword">return</span> outcome.isMatch();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoClassDefFoundError ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">&quot;Could not evaluate condition on &quot;</span> + classOrMethodName + <span class="string">&quot; due to &quot;</span></span><br><span class="line">                            + ex.getMessage() + <span class="string">&quot; not &quot;</span></span><br><span class="line">                            + <span class="string">&quot;found. Make sure your own configuration does not rely on &quot;</span></span><br><span class="line">                            + <span class="string">&quot;that class. This can also happen if you are &quot;</span></span><br><span class="line">                            + <span class="string">&quot;@ComponentScanning a springframework package (e.g. if you &quot;</span></span><br><span class="line">                            + <span class="string">&quot;put a @ComponentScan in the default package by mistake)&quot;</span>,</span><br><span class="line">                    ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (RuntimeException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line">                    <span class="string">&quot;Error processing condition on &quot;</span> + getName(metadata), ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//....................省略..............</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在matches方法中，会调用<code>getMatchOutcome()</code>方法，并得到<code>ConditionOutcome</code>对象，它表示的就是条件判断的结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionOutcome</span> </span>&#123;</span><br><span class="line">    <span class="comment">//表示条件是否匹配</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> match;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConditionMessage message;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//....................省略..............</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>getMatchOutcome()</code>方法在<code>SpringBootCondition</code>类中是一个抽象方法，在子类<code>OnClassCondition</code>类中才真正实现了<code>getMatchOutcome</code>方法<br>进行条件判断.<br><img src="/conditional-on-class/index/1.png"></p>
<p>所以核心就是这个<code>getMatchOutcome()</code>方法，在这个方法中会先获取<code>@ConditionalOnClass</code>注解的value和name属性的值，这些值就是待判断的类名集合。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//OnClassCondition 类</span></span><br><span class="line"><span class="meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OnClassCondition</span> <span class="keyword">extends</span> <span class="title">SpringBootCondition</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">AutoConfigurationImportFilter</span>, <span class="title">BeanFactoryAware</span>, <span class="title">BeanClassLoaderAware</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//..................省略................</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConditionOutcome <span class="title">getMatchOutcome</span><span class="params">(ConditionContext context,</span></span></span><br><span class="line"><span class="params"><span class="function">                                            AnnotatedTypeMetadata metadata)</span> </span>&#123;</span><br><span class="line">        ClassLoader classLoader = context.getClassLoader();</span><br><span class="line">        ConditionMessage matchMessage = ConditionMessage.empty();</span><br><span class="line">        <span class="comment">//重点：找到所有包含ConditionalOnClass 注解的类</span></span><br><span class="line">        List&lt;String&gt; onClasses = getCandidates(metadata, ConditionalOnClass.class);</span><br><span class="line">        <span class="keyword">if</span> (onClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//然后根据classLoader去加载，判断类是否存在</span></span><br><span class="line">            List&lt;String&gt; missing = getMatches(onClasses, MatchType.MISSING, classLoader);</span><br><span class="line">            <span class="keyword">if</span> (!missing.isEmpty()) &#123;</span><br><span class="line">                <span class="comment">//如果集合不为空，表示类有不存在的，返回不匹配对象</span></span><br><span class="line">                <span class="keyword">return</span> ConditionOutcome</span><br><span class="line">                        .noMatch(ConditionMessage.forCondition(ConditionalOnClass.class)</span><br><span class="line">                                .didNotFind(<span class="string">&quot;required class&quot;</span>, <span class="string">&quot;required classes&quot;</span>)</span><br><span class="line">                                .items(Style.QUOTE, missing));</span><br><span class="line">            &#125;</span><br><span class="line">            matchMessage = matchMessage.andCondition(ConditionalOnClass.class)</span><br><span class="line">                    .found(<span class="string">&quot;required class&quot;</span>, <span class="string">&quot;required classes&quot;</span>).items(Style.QUOTE,</span><br><span class="line">                            getMatches(onClasses, MatchType.PRESENT, classLoader));</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; onMissingClasses = getCandidates(metadata,</span><br><span class="line">                ConditionalOnMissingClass.class);</span><br><span class="line">        <span class="keyword">if</span> (onMissingClasses != <span class="keyword">null</span>) &#123;</span><br><span class="line">            List&lt;String&gt; present = getMatches(onMissingClasses, MatchType.PRESENT,</span><br><span class="line">                    classLoader);</span><br><span class="line">            <span class="keyword">if</span> (!present.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> ConditionOutcome.noMatch(</span><br><span class="line">                        ConditionMessage.forCondition(ConditionalOnMissingClass.class)</span><br><span class="line">                                .found(<span class="string">&quot;unwanted class&quot;</span>, <span class="string">&quot;unwanted classes&quot;</span>)</span><br><span class="line">                                .items(Style.QUOTE, present));</span><br><span class="line">            &#125;</span><br><span class="line">            matchMessage = matchMessage.andCondition(ConditionalOnMissingClass.class)</span><br><span class="line">                    .didNotFind(<span class="string">&quot;unwanted class&quot;</span>, <span class="string">&quot;unwanted classes&quot;</span>).items(Style.QUOTE,</span><br><span class="line">                            getMatches(onMissingClasses, MatchType.MISSING, classLoader));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果都存在则返回匹配的ConditionOutcome对象</span></span><br><span class="line">        <span class="keyword">return</span> ConditionOutcome.match(matchMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getCandidates</span><span class="params">(AnnotatedTypeMetadata metadata,</span></span></span><br><span class="line"><span class="params"><span class="function">                                       Class&lt;?&gt; annotationType)</span> </span>&#123;</span><br><span class="line">        MultiValueMap&lt;String, Object&gt; attributes = metadata.getAllAnnotationAttributes(annotationType.getName(), <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (attributes == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Collections.emptyList();</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;String&gt; candidates = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        addAll(candidates, attributes.get(<span class="string">&quot;value&quot;</span>));</span><br><span class="line">        addAll(candidates, attributes.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> candidates;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来就会逐个判断类名集合中的每个类名，判断逻辑为：<strong>利用MatchType.MISSING来判断某个类是否存在</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; missing = getMatches(onClasses, MatchType.MISSING, classLoader);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getMatches</span><span class="params">(Collection&lt;String&gt; candidates, MatchType matchType,</span></span></span><br><span class="line"><span class="params"><span class="function">			ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; matches = <span class="keyword">new</span> ArrayList&lt;&gt;(candidates.size());</span><br><span class="line">    <span class="keyword">for</span> (String candidate : candidates) &#123;</span><br><span class="line">        <span class="keyword">if</span> (matchType.matches(candidate, classLoader)) &#123;</span><br><span class="line">            matches.add(candidate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> matches;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>MatchType.MISSING就是利用<code>ClassLoader</code>来加载类，如果加载到了表示类存在，没加载到表示类不存在</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">enum</span> <span class="title">MatchType</span> </span>&#123;</span><br><span class="line">    PRESENT &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String className, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> isPresent(className, classLoader);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    MISSING &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String className, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> !isPresent(className, classLoader);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isPresent</span><span class="params">(String className, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (classLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            classLoader = ClassUtils.getDefaultClassLoader();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            forName(className, classLoader);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String className, ClassLoader classLoader)</span><br><span class="line">            <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> classLoader.loadClass(className);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Class.forName(className);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">matches</span><span class="params">(String className, ClassLoader classLoader)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>判断完之后，只要missing集合不为空，那就表示待判断的类中有不存在的，就返回条件不匹配的<code>ConditionOutCome</code>对象，否则就返回条件匹配的<code>ConditionOutCome</code>对象。</p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>String.intern()使用总结</title>
    <url>/intern/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-知识点一"><a href="#1-知识点一" class="headerlink" title="1. 知识点一"></a>1. 知识点一</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">String s1 = s.intern();</span><br><span class="line">System.out.println(s == s1);    <span class="comment">//输出结果为： false</span></span><br></pre></td></tr></table></figure>
<p>对于<code>new String(&quot;1&quot;)</code>会生成两个对象，一个是String类型的对象，它将存储在Java Heap中，另一个字符串常量对象<code>1</code>，它将存储在字符串常量池中、。<br><code>s.inertn()</code>方法会先去字符串常量池中查找是否存在字符串常量<code>1</code>，如果存在则返回该对象的地址，如果不存在则在字符串常量池中生成一个<code>1</code>字符串常量，并返回该对象的地址。</p>
<p>如下图：<br><img src="/intern/index/1.png"><br>变量<code>s</code>指向的是String类型对象，变量<code>s1</code>对象指向的是”1”字符串常量对象，所以 <code>s ==s1</code>结果为false。</p>
<h3 id="2-知识点二"><a href="#2-知识点二" class="headerlink" title="2. 知识点二"></a>2. 知识点二</h3><p>在上面的基础上再定一个s2，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">String s1 = s.intern();</span><br><span class="line">String s2 = <span class="string">&quot;1&quot;</span>;</span><br><span class="line">System.out.println(s == s1);    <span class="comment">//false</span></span><br><span class="line">System.out.println(s1 == s2);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p><code>s1 == s2</code> 为true，表示变量s2是直接指向的字符串常量，如下图所示：<br><img src="/intern/index/2.png"></p>
<h3 id="3-知识点三"><a href="#3-知识点三" class="headerlink" title="3. 知识点三"></a>3. 知识点三</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">String t = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">System.out.println(s == t);   <span class="comment">//false</span></span><br><span class="line">System.out.println(s.intern() == t.intern());   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p><code>s == t</code>为false，这个很明显，变量s 和变量t 指向的是不同的两个String类型的对象。</p>
<p><code>s.intern() == t.intern()</code>为true，因为<code>intern()</code>方法返回的是字符串常量池中的同一个对象<code>1</code>，所以为true<br><img src="/intern/index/3.png"></p>
<h3 id="4-知识点四"><a href="#4-知识点四" class="headerlink" title="4. 知识点四"></a>4. 知识点四</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String x = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">String s3 = <span class="string">&quot;11&quot;</span>;</span><br><span class="line">System.out.println(x == s3);        <span class="comment">//false</span></span><br><span class="line">System.out.println(x.intern() == s3.intern());  <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>变量x为两个String类型对象相加，那x依旧还是一个String类型对象，所以<code>x != s3</code>；调用<code>x.intern()</code>方法将返回<code>11</code>对应的字符串常量，所以<code>x.intern() == s3.intern()</code>为true</p>
<h3 id="5-知识点五"><a href="#5-知识点五" class="headerlink" title="5. 知识点五"></a>5. 知识点五</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String x = <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>) + <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">String x1 = <span class="string">&quot;1&quot;</span> + <span class="keyword">new</span> String(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">String x2 = <span class="string">&quot;1&quot;</span> + <span class="string">&quot;1&quot;</span>;</span><br><span class="line">String s3 = <span class="string">&quot;11&quot;</span>;</span><br><span class="line"></span><br><span class="line">System.out.println(x == s3);    <span class="comment">//false</span></span><br><span class="line">System.out.println(x1 == s3);   <span class="comment">//false</span></span><br><span class="line">System.out.println(x2 == s3);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p><code>x == s3</code>为false，表示x指向String类型对象， s3指向字符串常量；</p>
<p><code>x1 == s3</code>为false，表示x1指向String类型对象， s3指向字符串常量；</p>
<p><code>x2 == s3</code>为true，表示x2指向字符串常量， s3指向字符串常量；</p>
<p>所以可以看到<code>new String(&quot;1&quot;) + &quot;1&quot;</code>返回的是String类型的对象</p>
<h3 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h3><p><strong>现在我们知道<code>intern()</code>方法就是将字符串保存到常量池中，在保存字符串到常量池的过程中会先查看常量池中是否已经存在相等的字符串，如果存在则直接使用该字符串。</strong></p>
<p>所以我们在写业务代码的时候，应该尽量使用字符串常量中的字符串，比如使用<code>String s = &quot;1&quot;</code> 比使用 <code>new String(&quot;1&quot;)</code>更节省内存；</p>
<p>我们也可以使用<code>String s = String类型对象.intern()</code>方法来间接使用字符串常量。 这种做法通常用在你接收到一个String类型的对象而又想节省内存的情况下，当然你完全可以<br><code>String s = String类型对象</code>，但是这么用可能会因为变量s的引用而影响String类型对象的垃圾回收，所以我们可以使用intern方法进行优化，但是需要注意的是<code>intern</code>能节省<br>内存，但是会影响运行速度，因为该方法需要求常量池中查询是否存在某个字符串。</p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis批量插入的5种方式</title>
    <url>/mybatis-batch-insert/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h2 id="1-目录"><a href="#1-目录" class="headerlink" title="1. 目录"></a>1. 目录</h2><p><strong>1. <a href="#part1">准备工作</a></strong><br><strong>2. <a href="#part2">MyBatis利用For循环批量插入</a></strong><br><strong>3. <a href="#part3">MyBatis的手动批量提交</a></strong><br><strong>4. <a href="#part4">MyBatis以集合方式批量新增（推荐）</a></strong><br><strong>5. <a href="#part5">MyBatis-Plus提供的SaveBatch方法</a></strong><br><strong>6. <a href="#part6">MyBatis-Plus提供的InsertBatchSomeColumn方法（推荐）</a></strong></p>
<h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a><span id="part1">1. 准备工作</span></h3><ol>
<li>导入pom.xml依赖 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Mybatis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--Mybatis-Plus依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>配置yml文件 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">mysql用户名</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">mysql密码</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名字?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapping/*.xml</span></span><br></pre></td></tr></table></figure></li>
<li>公用的User类 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="2-MyBatis利用For循环批量插入"><a href="#2-MyBatis利用For循环批量插入" class="headerlink" title="2. MyBatis利用For循环批量插入"></a><span id="part2">2. MyBatis利用For循环批量插入</span></h3><ol>
<li><p>编写<code>UserService</code>服务类，测试插入一万条数据耗时情况</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InsertUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setUsername(<span class="string">&quot;name&quot;</span> + i);</span><br><span class="line">            user.setPassword(<span class="string">&quot;password&quot;</span> + i);</span><br><span class="line">            userMapper.insertUsers(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;一万条数据总耗时：&quot;</span> + (end-start) + <span class="string">&quot;ms&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编写<code>UserMapper</code>接口以及xml文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">insertUsers</span><span class="params">(User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ithuang.demo.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUsers&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO user (username, password)</span><br><span class="line">        VALUES(#&#123;username&#125;, #&#123;password&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>进行单元测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemoApplicationTests</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">        userService.InsertUsers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>结果输出</p>
<blockquote>
<p>一万条数据总耗时：26348ms</p>
</blockquote>
</li>
</ol>
<h3 id="3-MyBatis的手动批量提交"><a href="#3-MyBatis的手动批量提交" class="headerlink" title="3. MyBatis的手动批量提交"></a><span id="part3">3. MyBatis的手动批量提交</span></h3><ol>
<li>其他保持不变，Service层修改<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSessionTemplate;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InsertUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//关闭自动提交</span></span><br><span class="line">        SqlSession sqlSession = sqlSessionTemplate.getSqlSessionFactory().openSession(ExecutorType.BATCH, <span class="keyword">false</span>);</span><br><span class="line">        UserMapper userMapper = sqlSession.getMapper(UserMapper.class);</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            User user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setUsername(<span class="string">&quot;name&quot;</span> + i);</span><br><span class="line">            user.setPassword(<span class="string">&quot;password&quot;</span> + i);</span><br><span class="line">            userMapper.insertUsers(user);</span><br><span class="line">        &#125;</span><br><span class="line">        sqlSession.commit();</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;一万条数据总耗时：&quot;</span> + (end-start) + <span class="string">&quot;ms&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>结果输出<blockquote>
<p>一万条数据总耗时：24516ms</p>
</blockquote>
</li>
</ol>
<h3 id="4-MyBatis以集合方式批量新增（推荐）"><a href="#4-MyBatis以集合方式批量新增（推荐）" class="headerlink" title="4. MyBatis以集合方式批量新增（推荐）"></a><span id="part4">4. MyBatis以集合方式批量新增（推荐）</span></h3><ol>
<li>编写<code>UserService</code>服务类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InsertUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setUsername(<span class="string">&quot;name&quot;</span> + i);</span><br><span class="line">            user.setPassword(<span class="string">&quot;password&quot;</span> + i);</span><br><span class="line">            userList.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        userMapper.insertUsers(userList);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;一万条数据总耗时：&quot;</span> + (end-start) + <span class="string">&quot;ms&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写<code>UserMapper</code>接口以及xml文件<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">Integer <span class="title">insertUsers</span><span class="params">(List&lt;User&gt; userList)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.ithuang.demo.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUsers&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO user (username, password)</span><br><span class="line">        VALUES</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span> =<span class="string">&quot;userList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span> <span class="attr">separator</span> =<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            (#&#123;user.username&#125;, #&#123;user.password&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>输出结果<blockquote>
<p>一万条数据总耗时：521ms</p>
</blockquote>
</li>
</ol>
<h3 id="5-MyBatis-Plus提供的SaveBatch方法"><a href="#5-MyBatis-Plus提供的SaveBatch方法" class="headerlink" title="5.MyBatis-Plus提供的SaveBatch方法"></a><span id="part5">5.MyBatis-Plus提供的SaveBatch方法</span></h3><ol>
<li>编写<code>UserService</code>服务<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">IService</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InsertUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setUsername(<span class="string">&quot;name&quot;</span> + i);</span><br><span class="line">            user.setPassword(<span class="string">&quot;password&quot;</span> + i);</span><br><span class="line">            userList.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        saveBatch(userList);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;一万条数据总耗时：&quot;</span> + (end-start) + <span class="string">&quot;ms&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写<code>UserMapper</code>接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试结果<blockquote>
<p>一万条数据总耗时：24674ms</p>
</blockquote>
</li>
</ol>
<h3 id="6-MyBatis-Plus提供的InsertBatchSomeColumn方法（推荐）"><a href="#6-MyBatis-Plus提供的InsertBatchSomeColumn方法（推荐）" class="headerlink" title="6.MyBatis-Plus提供的InsertBatchSomeColumn方法（推荐）"></a><span id="part6">6.MyBatis-Plus提供的InsertBatchSomeColumn方法（推荐）</span></h3><ol>
<li>编写<code>EasySqlInjector</code>自定义类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EasySqlInjector</span> <span class="keyword">extends</span> <span class="title">DefaultSqlInjector</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;AbstractMethod&gt; <span class="title">getMethodList</span><span class="params">(Class&lt;?&gt; mapperClass, TableInfo tableInfo)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注意：此SQL注入器继承了DefaultSqlInjector(默认注入器)，调用了DefaultSqlInjector的getMethodList方法，保留了mybatis-plus的自带方法</span></span><br><span class="line">        List&lt;AbstractMethod&gt; methodList = <span class="keyword">super</span>.getMethodList(mapperClass, tableInfo);</span><br><span class="line">        methodList.add(<span class="keyword">new</span> InsertBatchSomeColumn(i -&gt; i.getFieldFill() != FieldFill.UPDATE));</span><br><span class="line">        <span class="keyword">return</span> methodList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>定义核心配置类注入Bean<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EasySqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EasySqlInjector();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写<code>UserService</code>服务类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">InsertUsers</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        List&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        User user;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">            user = <span class="keyword">new</span> User();</span><br><span class="line">            user.setUsername(<span class="string">&quot;name&quot;</span> + i);</span><br><span class="line">            user.setPassword(<span class="string">&quot;password&quot;</span> + i);</span><br><span class="line">            userList.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        userMapper.insertBatchSomeColumn(userList);</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;一万条数据总耗时：&quot;</span> + (end-start) + <span class="string">&quot;ms&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写<code>EasyBaseMapper</code>接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EasyBaseMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量插入 仅适用于mysql</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> entityList 实体列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 影响行数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Integer <span class="title">insertBatchSomeColumn</span><span class="params">(Collection&lt;T&gt; entityList)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写UserMapper接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">EasyBaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>测试结果<blockquote>
<p>一万条数据总耗时：575ms</p>
</blockquote>
</li>
</ol>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL语句执行过程</title>
    <url>/sql-execution-process/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-Mysql-逻辑架构"><a href="#1-Mysql-逻辑架构" class="headerlink" title="1. Mysql 逻辑架构"></a>1. Mysql 逻辑架构</h3><p>作为一个有经验的程序员，每天都在和mysql打交道，那么你知道执行一条简单的select语句，需要经历哪些过程？这个就是今天要讲的内容。</p>
<p>在讲sql语句执行过程之前需要了解mysql的架构是怎样的以及它包含哪些组件？<br><img src="/sql-execution-process/index/1.png" alt="mysql逻辑架构图"></p>
<p>分为Server层和存储引擎两部分</p>
<ul>
<li>Server 层包括：连接器、查询缓存、分析器、优化器、执行器等，涵盖Mysql的大多数核心服务功能，以及所有的内置函数（如日期、时间、数据以及加密函数等）,所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。</li>
</ul>
<ul>
<li>存储引擎层：负责数据的存储和提取，其架构模式是插件式的，支持Innodb、MyISAM、Memory等多个存储引擎，Mysql5.5.5后默认存储引擎为Innodb</li>
</ul>
<h3 id="2-SQL语句执行过程"><a href="#2-SQL语句执行过程" class="headerlink" title="2. SQL语句执行过程"></a>2. SQL语句执行过程</h3><ol>
<li><p>连接器</p>
<blockquote>
<p>负责将mysql客户端和服务端建立连接，连接成功后，获取的当前连接用户的权限，这里获取到的权限对整个连接都有效，一旦连接成功后，如果中途管理员更改了权限，那么只有等到该用户下次重连才会更新权限</p>
</blockquote>
</li>
<li><p>查询缓存</p>
<blockquote>
<p>连接成功后，即开始要正式执行select 语句了，但是在执行查询之前，mysql会看下有没有该条语句的缓存内容，如果有缓存直接读取缓存并返回结果，不在执行后面的步骤。</p>
<p>如果没有缓存则继续往后执行，并将执行结果和语句保存到缓存中</p>
</blockquote>
<p> 注意：</p>
<ul>
<li>mysql8 后已经没有查询缓存这个功能了，因为缓存非常容易被清空掉，命中率低，只要对表有一个更新呢，这个表上的所有缓存都会被清空</li>
<li>如果缓存查到结果，在返回结果前需要做权限校验，判断该用户是否有权限查询</li>
</ul>
</li>
<li><p>分析器</p>
<blockquote>
<p>既然没有查到缓存，就要执行sql语句了，在执行之前肯定需要先对sql语句进行解析，分析器主要对sql语句进行语法和语义分析，检查单词是否拼写错误，还有检查这个表或者字段是否存在。</p>
</blockquote>
<p> 假如分析器检测出错误，会出现以下错误信息：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ‘xxxxxx’ at line 1</span><br><span class="line">一般语法错误会提示第一个出现错误的位置，所以你要关注的是紧接“use near”的内容。</span><br></pre></td></tr></table></figure>
<p> 并且停止查询操作。</p>
</li>
<li><p>优化器</p>
<blockquote>
<p>在经过分析器后，mysql就理解了你所要执行的操作了，基本上对于同一个sql语句，mysql内部或许有好几种执行方案，例如存在多个索引的情况下，应该选择哪个索引？多张表有关联查询时，如何确认各表的连接顺序。</p>
<p>这些方案的执行结果都一样，但是执行效率不一样，所以在mysql执行之前都要尝试找出一个最优的方案来，这就是优化器主要工作。</p>
</blockquote>
</li>
<li><p>执行器</p>
<blockquote>
<p>经过优化器选定一个方案后，执行器就按照这个方案执行sql语句，在执行语句之前会先判断是否有权限，如果没有权限就会return，并提示没有权限</p>
</blockquote>
<p> 权限校验完毕，继续打开表，然后调用存储引擎所提供的接口去查询，最后返回结果数据。</p>
</li>
</ol>
<p>到这，一条sql语句就执行完了，这里知识讲了大致的流程，具体在mysql底层实现是非常复杂的。</p>
]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>sql</tag>
      </tags>
  </entry>
  <entry>
    <title>破解LIMIT和OFFSET分页性能瓶颈</title>
    <url>/limit-offset/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-分页方法分类"><a href="#1-分页方法分类" class="headerlink" title="1. 分页方法分类"></a>1. 分页方法分类</h3><ol>
<li>LIMIT X <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- LIMIT X 表示: 读取 X 条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">20</span></span><br></pre></td></tr></table></figure></li>
<li>LIMIT Y OFFSET X <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- LIMIT Y OFFSET X 表示: 跳过 X 条数据，读取 Y 条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">20</span> <span class="keyword">OFFSET</span> <span class="number">10</span></span><br><span class="line"><span class="comment">-- 从第10+1 行开始读取20条数据</span></span><br></pre></td></tr></table></figure></li>
<li>LIMIT X, Y <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 跳过 X 条数据，读取 Y 条数据</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">20</span> , <span class="number">10</span></span><br></pre></td></tr></table></figure></li>
</ol>
<p>对于简单的小型应用程序和数据量不是很大的场景，这种方式还是没有问题的，但是一旦数据量过大，这种分页方式存在瓶颈。</p>
<h3 id="2-LIMIT和OFFSET-的问题"><a href="#2-LIMIT和OFFSET-的问题" class="headerlink" title="2. LIMIT和OFFSET 的问题"></a>2. LIMIT和OFFSET 的问题</h3><p>OFFSET 和 LIMIT 对于数据量少的项目来说是没有问题的，但是，当数据库里的数据量超过服务器内存能够存储的能力，并且需要对所有数据进行分页，问题就会出现，为了实现分页，每次收到分页请求时，数据库都需要进行低效的全表遍历</p>
<blockquote>
<p>全表遍历就是一个全表扫描的过程，就是根据双向链表把磁盘上的数据页加载到磁盘的缓存页里去，然后在缓存页内部查找那条数据，这个过程是非常满的，所以说当数据量大的时候，全表遍历的性能非常低，时间特别长，应该尽量避免全表遍历</p>
</blockquote>
<p>为了获取一页的数据：10万行中的第50000行到第50020行需要先获取 5 万行，这么做非常低效！</p>
<h3 id="3-初探LIMIT查询效率"><a href="#3-初探LIMIT查询效率" class="headerlink" title="3. 初探LIMIT查询效率"></a>3. 初探LIMIT查询效率</h3><h4 id="3-1-建表"><a href="#3-1-建表" class="headerlink" title="3.1 建表"></a>3.1 建表</h4><p>测试数据库采用的是（存储引擎采用InnoDB）<br><img src="/limit-offset/index/1.png"><br>表结构如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `age` <span class="type">int</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure>
<p><img src="/limit-offset/index/2.png"></p>
<h4 id="3-2-插入数据"><a href="#3-2-插入数据" class="headerlink" title="3.2 插入数据"></a>3.2 插入数据</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建存储过程， 参数param1 为int 类型</span></span><br><span class="line"><span class="keyword">CREATE</span> DEFINER<span class="operator">=</span>`root`@`localhost` <span class="keyword">PROCEDURE</span> `insert_limit_test`(param1 <span class="type">int</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"> <span class="comment">-- for循环遍历 插入 350万条数据</span></span><br><span class="line">    WHILE param1 <span class="operator">&lt;</span> <span class="number">3500000</span> DO</span><br><span class="line">          <span class="comment">-- 插入表数据</span></span><br><span class="line">            <span class="keyword">INSERT</span> <span class="keyword">INTO</span> `<span class="keyword">user</span>` ( `name`, `age` ) <span class="keyword">VALUES</span> (CONCAT(<span class="string">&#x27;name_&#x27;</span>,param1)  , (param1 <span class="operator">%</span> <span class="number">4</span>)<span class="operator">+</span><span class="number">10</span> );</span><br><span class="line">          <span class="keyword">SET</span> param1 <span class="operator">=</span> param1 <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用存储过程</span></span><br><span class="line"><span class="keyword">CALL</span> insert_limit_test(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3499999</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.11</span> sec)</span><br></pre></td></tr></table></figure>
<h4 id="3-3-开始测试"><a href="#3-3-开始测试" class="headerlink" title="3.3 开始测试"></a>3.3 开始测试</h4><p>首先偏移量设置为0，取20条数据(中间输出省略)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">0</span>,<span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> name    <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> name_1  <span class="operator">|</span>   <span class="number">11</span> <span class="operator">|</span></span><br><span class="line">#...中间输出省略</span><br><span class="line"><span class="operator">|</span> <span class="number">18</span> <span class="operator">|</span> name_18 <span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">19</span> <span class="operator">|</span> name_19 <span class="operator">|</span>   <span class="number">13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">20</span> <span class="operator">|</span> name_20 <span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+---------+------+</span></span><br><span class="line"><span class="number">20</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>可以看到查询时间基本忽略不计，于是我们要一步一步的加大这个偏移量然后进行测试，先将偏移量改为10000(中间输出省略)：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">10000</span>,<span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span> id    <span class="operator">|</span> name       <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10001</span> <span class="operator">|</span> name_10001 <span class="operator">|</span>   <span class="number">11</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10002</span> <span class="operator">|</span> name_10002 <span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"> #...中间输出省略</span><br><span class="line"><span class="operator">|</span> <span class="number">10018</span> <span class="operator">|</span> name_10018 <span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10019</span> <span class="operator">|</span> name_10019 <span class="operator">|</span>   <span class="number">13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">10020</span> <span class="operator">|</span> name_10020 <span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">-------+------------+------+</span></span><br><span class="line"><span class="number">20</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<p>可以看到查询时间还是非常短的，几乎可以忽略不计，于是我们将偏移量直接上到340W(中间输出省略)：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">3400000</span>,<span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> name         <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3400001</span> <span class="operator">|</span> name_3400001 <span class="operator">|</span>   <span class="number">11</span> <span class="operator">|</span></span><br><span class="line">#...中间输出省略</span><br><span class="line"><span class="operator">|</span> <span class="number">3400018</span> <span class="operator">|</span> name_3400018 <span class="operator">|</span>   <span class="number">12</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3400019</span> <span class="operator">|</span> name_3400019 <span class="operator">|</span>   <span class="number">13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3400020</span> <span class="operator">|</span> name_3400020 <span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+------+</span></span><br><span class="line"><span class="number">20</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.48</span> sec)</span><br></pre></td></tr></table></figure>
<p>这个时候就可以看到非常明显的变化了，查询时间增到了0.48s。</p>
<h4 id="3-4-分析原因"><a href="#3-4-分析原因" class="headerlink" title="3.4 分析原因"></a>3.4 分析原因</h4><p>根据下面的结果可以看到三条查询语句都进行了全表扫描：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">0</span>,<span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>    <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">3493299</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">10000</span>, <span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>    <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">3493299</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.01</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> limit <span class="number">3400000</span>, <span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type <span class="operator">|</span> possible_keys <span class="operator">|</span> key  <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>    <span class="operator">|</span> filtered <span class="operator">|</span> Extra <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">3493299</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+------+---------------+------+---------+------+---------+----------+-------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>此时就可以知道的是，在偏移量非常大的时候，就像案例中的LIMIT 3400000,20这样的查询。<br>此时MySQL就需要查询3400020行数据，然后在返回最后20条数据。<br>前边查询的340W数据都将被抛弃，这样的执行结果可不是我们想要的。<br>接下来就是优化大偏移量的性能问题</p>
<h3 id="4-优化"><a href="#4-优化" class="headerlink" title="4. 优化"></a>4. 优化</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> id<span class="operator">&gt;</span><span class="number">10</span> limit <span class="number">20</span></span><br></pre></td></tr></table></figure>
<p>这是一种<strong>基于指针</strong>的分页。你要在本地保存上一次接收到的主键 (通常是一个 ID) 和 LIMIT，而不是 OFFSET 和 LIMIT，那么每一次的查询可能都与此类似。<br>为什么？因为通过显式告知数据库最新行，数据库就确切地知道从哪里开始搜索（基于有效的索引），而不需要考虑目标范围之外的记录。<br>我们再来一次测试(中间输出省略)：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>  <span class="keyword">where</span> id <span class="operator">&gt;</span> <span class="number">3400000</span> limit <span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+------+</span></span><br><span class="line"><span class="operator">|</span> id      <span class="operator">|</span> name         <span class="operator">|</span> age  <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+------+</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3400001</span> <span class="operator">|</span> name_3400001 <span class="operator">|</span>   <span class="number">11</span> <span class="operator">|</span></span><br><span class="line">#....中间输出省略</span><br><span class="line"><span class="operator">|</span> <span class="number">3400019</span> <span class="operator">|</span> name_3400019 <span class="operator">|</span>   <span class="number">13</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> <span class="number">3400020</span> <span class="operator">|</span> name_3400020 <span class="operator">|</span>   <span class="number">10</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">---------+--------------+------+</span></span><br><span class="line"><span class="number">20</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> EXPLAIN <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">WHERE</span> id<span class="operator">&gt;</span><span class="number">3400000</span> LIMIT <span class="number">20</span>;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+--------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span> <span class="operator">|</span> partitions <span class="operator">|</span> type  <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>   <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+--------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> SIMPLE      <span class="operator">|</span> <span class="keyword">user</span>  <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">range</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">198326</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> <span class="keyword">where</span> <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+-------+------------+-------+---------------+---------+---------+------+--------+----------+-------------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>返回同样的结果，第一个查询使用了<code>0.48</code> sec，而第二个仅用了<code>0.00</code> sec。</p>
<p><strong>注意</strong>：如果我们的表没有主键，比如是具有多对多关系的表，那么就使用传统的 OFFSET/LIMIT 方式，只是这样做存在潜在的慢查询问题。所以建议在需要分页的表中使用自动递增的主键，即使只是为了分页。</p>
<h4 id="继续优化"><a href="#继续优化" class="headerlink" title="继续优化"></a>继续优化</h4><p>类似于查询 <code>SELECT * FROM table_name WHERE id &gt; 3400000 LIMIT 20;</code> 这样的效率非常快,因为主键上是有索引的,但是这样有个缺点,就是ID必须是连续的,并且查询不能有WHERE语句,因为WHERE语句会造成过滤数据。那使用场景就非常的局限了，于是我们可以这样</p>
<h4 id="使用覆盖索引优化"><a href="#使用覆盖索引优化" class="headerlink" title="使用覆盖索引优化"></a>使用覆盖索引优化</h4><p>mysql的查询完全命中索引的时候，称为覆盖索引，是非常快的，因为查询只需要在索引上进行查找，之后就可以直接返回，而不用再回数据表那数据，因此我们可以先查处索引的ID，然后根据ID取数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- user 为表名</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> <span class="keyword">user</span> LIMIT <span class="number">3400000</span>,<span class="number">20</span>) a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">user</span> b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.id;</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> <span class="keyword">user</span> LIMIT <span class="number">3400000</span>,<span class="number">20</span>) a <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> <span class="keyword">user</span> b <span class="keyword">ON</span> a.id <span class="operator">=</span> b.id;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+------+---------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>      <span class="operator">|</span> partitions <span class="operator">|</span> type   <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>    <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+------+---------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="operator">&lt;</span>derived2<span class="operator">&gt;</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">3400020</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> b          <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> eq_ref <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> a.id <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> DERIVED     <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">3493299</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+------+---------+----------+-------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>或者是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> <span class="keyword">user</span> LIMIT <span class="number">3400000</span>,<span class="number">20</span>) b <span class="keyword">USING</span> (id);</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> explain <span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> <span class="keyword">user</span> a <span class="keyword">INNER</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> <span class="keyword">user</span> LIMIT <span class="number">3400000</span>,<span class="number">20</span>) b <span class="keyword">USING</span> (id);</span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+------+---------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> select_type <span class="operator">|</span> <span class="keyword">table</span>      <span class="operator">|</span> partitions <span class="operator">|</span> type   <span class="operator">|</span> possible_keys <span class="operator">|</span> key     <span class="operator">|</span> key_len <span class="operator">|</span> <span class="keyword">ref</span>  <span class="operator">|</span> <span class="keyword">rows</span>    <span class="operator">|</span> filtered <span class="operator">|</span> Extra       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+------+---------+----------+-------------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> <span class="operator">&lt;</span>derived2<span class="operator">&gt;</span> <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> <span class="keyword">ALL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span>    <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">3400020</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> <span class="keyword">PRIMARY</span>     <span class="operator">|</span> a          <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> eq_ref <span class="operator">|</span> <span class="keyword">PRIMARY</span>       <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> b.id <span class="operator">|</span>       <span class="number">1</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">NULL</span>        <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> DERIVED     <span class="operator">|</span> <span class="keyword">user</span>       <span class="operator">|</span> <span class="keyword">NULL</span>       <span class="operator">|</span> index  <span class="operator">|</span> <span class="keyword">NULL</span>          <span class="operator">|</span> <span class="keyword">PRIMARY</span> <span class="operator">|</span> <span class="number">4</span>       <span class="operator">|</span> <span class="keyword">NULL</span> <span class="operator">|</span> <span class="number">3493299</span> <span class="operator">|</span>   <span class="number">100.00</span> <span class="operator">|</span> <span class="keyword">Using</span> index <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+-------------+------------+------------+--------+---------------+---------+---------+------+---------+----------+-------------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span>, <span class="number">1</span> warning (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>

<h3 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h3><ol>
<li>数据量大的时候不能使用OFFSET/LIMIT来进行分页，因为OFFSET越大，查询时间越久。</li>
<li>当然不能说所有的分页都不可以，如果你的数据就那么几千、几万条，那就很无所谓，随便使用。</li>
<li>如果我们的表没有主键，比如是具有多对多关系的表，那么就使用传统的 OFFSET/LIMIT 方式。</li>
<li>这种方法适用于要求ID为数值类型，并且查出的数据ID连续的场景且不能有其他字段的排序。</li>
</ol>
]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>select ... for update表锁还是行锁</title>
    <url>/select-for-update/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-概要"><a href="#1-概要" class="headerlink" title="1. 概要"></a>1. 概要</h3><p>Select 查询语句是不会枷锁的，但是Select … for update 除了有查询语句的作用，还是加锁，而且是悲观锁。</p>
<ul>
<li>使用索引： 行锁</li>
<li>未使用索引：表锁</li>
</ul>
<h3 id="2-建表"><a href="#2-建表" class="headerlink" title="2. 建表"></a>2. 建表</h3><p><img src="/select-for-update/index/0.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--建表语句</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t_user (</span><br><span class="line">    id <span class="type">INT</span> ( <span class="number">11</span> ) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span> ( <span class="number">255</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    age <span class="type">INT</span> ( <span class="number">11</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    addr <span class="type">VARCHAR</span> ( <span class="number">255</span> ) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY ( id ), <span class="comment">-- 主键索引</span></span><br><span class="line">    KEY idx_age ( age ) <span class="keyword">USING</span> BTREE    <span class="comment">-- 唯一索引</span></span><br><span class="line">) ENGINE <span class="operator">=</span> INNODB AUTO_INCREMENT <span class="operator">=</span> <span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user (name, age, addr) <span class="keyword">VALUES</span> (<span class="string">&#x27;张三&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;上海&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user (name, age, addr) <span class="keyword">VALUES</span> (<span class="string">&#x27;李四&#x27;</span>, <span class="number">31</span>, <span class="string">&#x27;广东&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user (name, age, addr) <span class="keyword">VALUES</span> (<span class="string">&#x27;王五&#x27;</span>, <span class="number">32</span>, <span class="string">&#x27;南昌&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> t_user (name, age, addr) <span class="keyword">VALUES</span> (<span class="string">&#x27;赵六&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;广东&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>需要关闭自动提交，通过<code>set @@autocommit = 0;</code>设置为手动提交，0代表手动提交，1代表自动提交<br><img src="/select-for-update/index/1.png" alt="关闭自动提交"></p>
<h3 id="3-验证"><a href="#3-验证" class="headerlink" title="3. 验证"></a>3. 验证</h3><h4 id="3-1-场景一"><a href="#3-1-场景一" class="headerlink" title="3.1 场景一"></a>3.1 场景一</h4><p>使用<strong>主键id为1</strong>条件去查询，然后开启另一个事务对<strong>主键id为1</strong>对数据进行更新；</p>
<p>第一个事务使用select … for update查询，没有提交事务；<br><img src="/select-for-update/index/2.png"><br>第二个事务，去更新主键id为1的数据，被阻塞了，长时间拿不到锁导致报错<br><img src="/select-for-update/index/3.png"><br><u>结论：使用主键字段进行select … for update操作会锁住当前记录。</u></p>
<h4 id="3-2-场景二"><a href="#3-2-场景二" class="headerlink" title="3.2 场景二"></a>3.2 场景二</h4><p>使用<strong>主键id=1</strong>为条件查询，开启另一个事务对<strong>主键id=2</strong>的数据进行更新</p>
<p>第一个事务使用select … for update查询，没有提交事务；<br><img src="/select-for-update/index/2.png"><br>第二个事务对另一条id为2的数据更新，可以看到更新成功。<br><img src="/select-for-update/index/4.png"><br><u>结论：使用主键字段进行select … for update操作会锁住当前记录，其他行数据可以进行正常的更新操作。</u></p>
<h4 id="3-3-场景三"><a href="#3-3-场景三" class="headerlink" title="3.3 场景三"></a>3.3 场景三</h4><p>使用 <strong>唯一索引age12</strong> 查询，开启另一个事务对 <strong>唯一索引age=12</strong> 的数据进行更新</p>
<p>第一个事务使用select … for update查询，没有提交事务；<br><img src="/select-for-update/index/5.png"><br>第二个事务对age=12的数据更新，被阻塞了。<br><img src="/select-for-update/index/6.png"><br><u>结论：使用唯一索引字段进行select … for update操作会锁住当前记录，其他数据可以进行正常的更新操作。</u></p>
<h4 id="3-4-场景四"><a href="#3-4-场景四" class="headerlink" title="3.4 场景四"></a>3.4 场景四</h4><p><strong>使用普通字段 addr 进行操作</strong></p>
<p>第一个事务使用select … for update查询，没有提交事务；<br><img src="/select-for-update/index/7.png"><br>第二个事务<strong>进行任何数据更新操作</strong>，被阻塞了。<br><img src="/select-for-update/index/8.png"><br><u>结论：使用非索引字段进行select … for update操作都会锁表，没有commit之前任何更新操作无法获取锁。</u></p>
]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>13种锁的实现方式</title>
    <url>/lock-granularity/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-悲观锁"><a href="#1-悲观锁" class="headerlink" title="1. 悲观锁"></a>1. 悲观锁</h3><blockquote>
<p>它是指对数据修改时持保守态度，认为其他人也会修改数据。因此在操作数据时，会把数据锁住，直到操作完成。悲观锁大多数情况下依靠数据库的锁机制实现，以保证操作最大程度的独占性。如果加锁的时间过长，其他用户长时间无法访问，影响程序的并发访问性，同时这样对数据库性能开销影响也很大，特别是长事务而言，这样的开销往往无法承受</p>
</blockquote>
<p>如果时单机系统，我们可以采用<code>synchronized</code>关键字，添加到方法或者同步代码块上锁住资源，如果时分布式系统，可以借助数据库自身的锁机制来实现</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> id<span class="operator">=</span> #&#123;id&#125; <span class="keyword">for</span> update</span><br></pre></td></tr></table></figure>
<p>使用悲观锁的时候，我们要注意锁的级别，MySQL innodb 在加锁时，只有明确的<strong>指定主键或（索引字段）才会使用行锁</strong>；否则，会执行<strong>表锁</strong>，将整个表锁住，此时性能会很差。在使用悲观锁时，我们必须关闭 MySQL 数据库的自动提交属性，因为mysql默认使用自动提交模式。</p>
<p>悲观锁适用于写多的场景，而且并发性能要求不高</p>
<h3 id="2-乐观锁"><a href="#2-乐观锁" class="headerlink" title="2. 乐观锁"></a>2. 乐观锁</h3><blockquote>
<p>在操作数据时非常乐观，认为别人不会同时修改数据，因此乐观锁不会上锁 只是在 提交更新 时，才会正式对数据的冲突与否进行检测。如果发现冲突了，则返回错误信息，让用户决定如何去做，fail-fast 机制 。否则，执行本次操作。</p>
</blockquote>
<p>分为三个阶段：数据读取、写入校验、数据写入</p>
<ul>
<li><p>单机系统：可以基于Java的CAS来实现，它是一种原子操作，借助硬件的比较并交换来实现</p>
</li>
<li><p>分布式系统: 可以在数据库增加一个版本号<code>version</code>字段</p>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update 表</span><br><span class="line"><span class="keyword">set</span> ... , version <span class="operator">=</span> version <span class="operator">+</span><span class="number">1</span></span><br><span class="line"><span class="keyword">where</span> id<span class="operator">=</span> #&#123;id&#125; <span class="keyword">and</span> version <span class="operator">=</span> #&#123;version&#125;</span><br></pre></td></tr></table></figure>
<p>  操作前，先读入记录的版本号，更新时，比较版本号是否一致，如果一致则更新数据，否则再次读取版本号，重复上面的操作。</p>
</li>
</ul>
<h3 id="3-分布式锁"><a href="#3-分布式锁" class="headerlink" title="3. 分布式锁"></a>3. 分布式锁</h3><p>Java中的 <code>synchronized</code>、<code>ReentrantLock</code>等，都是解决单体应用单机部署的资源互斥问题；当单体应用演化为分布式集群后，多线程、多进程分布在不同的机器上，原来的并发控制策略实效</p>
<p>此时，我们需要引入<code>分布式锁</code>，解决跨机器的互斥机制来控制共享资源的访问</p>
<p>分布式锁需要具备以下条件：</p>
<ol>
<li>与单机系统一样的资源互斥功能</li>
<li>高性能获取、释放锁</li>
<li>高可用</li>
<li>可重入性</li>
<li>有锁实效机制，防止死锁</li>
<li>非阻塞，不管是否获得锁，要能快速返回</li>
</ol>
<p>实现的方式有多种，基于<code>数据库</code>、<code>Redis</code>、以及<code>Zookeeper</code>等；这里主要讲下主路的基于Redis的实现方式：</p>
<ol>
<li>加锁 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SET key unique_value  [EX seconds] [PX milliseconds] [NX|XX]</span><br></pre></td></tr></table></figure>
通过原子命令，如果执行成功返回1，表示加锁成功哦难过，注意：unique_value是客户端生成的唯一标识，区分来自不同客户端的锁操作，<br>解锁要注意，先判断<code>unique_value</code>是不是加锁的客户端，是的化才允许解锁；</li>
<li>解锁：有两个命令操作，需要借助Lua脚本来保证原子性 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 先比较 unique_value 是否相等，避免锁的误释放</span><br><span class="line">if redis.call(&quot;get&quot;,KEYS[1]) == ARGV[1] then</span><br><span class="line">    return redis.call(&quot;del&quot;,KEYS[1])</span><br><span class="line">else</span><br><span class="line">    return 0</span><br><span class="line">end</span><br></pre></td></tr></table></figure></li>
</ol>
<p>借助 Redis 的高性能，Redis 实现分布式锁也是目前主流实现方式。但任何事情有利有弊，如果加锁的服务器宕机了，当slave 节点还没来得及数据备份，那不是别的客户端也可以获得锁。</p>
<p>为了解决这个问题，Redis 官方设计了一个分布式锁 <code>Redlock</code>。</p>
<p><strong>基本思路</strong>：让客户端与多个独立的 Redis 节点并行请求申请加锁，如果能在半数以上的节点成功地完成加锁操作，那么我们就认为，客户端成功地获得分布式锁，否则加锁失败。</p>
<h3 id="4-可重入锁"><a href="#4-可重入锁" class="headerlink" title="4. 可重入锁"></a>4. 可重入锁</h3><blockquote>
<p>可重入锁，也较递归锁，是指在同一个线程在掉外层方法获取锁的时候，在进入内层方法会自动获取锁</p>
</blockquote>
<p>对象锁或类锁内部有计数器，一个线程每获得一次锁，计数器 +1；解锁时，计数器 -1。</p>
<blockquote>
<p>有多少次加锁，就要对应多少次解锁，加锁与解锁成对出现。</p>
</blockquote>
<p>JAVA 中的 <code>ReentrantLock</code> 和 <code>synchronized</code> 都是 可重入锁。可重入锁的一个好处是可一定程度避免死锁。</p>
<h3 id="5-自旋锁"><a href="#5-自旋锁" class="headerlink" title="5. 自旋锁"></a>5. 自旋锁</h3><blockquote>
<p>自旋锁是采用让当前线程不停地在循环体内执行，当循环的条件被其他线程改变时才进入临界区。自旋锁只是将当前线程不停地执行循环体，<br>不进行线程状态的改变，所以响应速度更快。但当线程数不断增加时，性能下降明显，因为每个新城都需要执行，占用CPU时间片，如果线程竞争不激烈，并且保持锁的时间短，适合使用自旋锁</p>
</blockquote>
<p>自旋锁缺点：</p>
<ul>
<li>可能引发死锁</li>
<li>可能占用CPU时间过长</li>
</ul>
<p>可以设置一个<code>循环时间</code>或<code>循环次数</code>，超出阈值时，让线程进入阻塞状态，防止长时间占用CPU资源，JUC并发包中的CAS就是采用自旋锁，compareAndSet是CAS操作的核心，底层采用<code>Unsafe</code>对象实现的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果内存中 var1 对象的var2字段值等于预期的 var5，则将该位置更新为新值（var5 + var4），否则不进行任何操作，一直重试，直到操作成功为止。</p>
<blockquote>
<p>CAS包含了Compare和Swap两个操作，CAS是由CPU支持的原子操作，其原子性在硬件层面进行控制</p>
</blockquote>
<p>特别注意，CAS可能会导致ABA问题，我们可以引入递增版本号来解决</p>
<h3 id="6-独享锁-排他锁"><a href="#6-独享锁-排他锁" class="headerlink" title="6. 独享锁/排他锁"></a>6. 独享锁/排他锁</h3><blockquote>
<p>独享锁也叫排他锁，无论是读操作还是写操作，只能有一个线程获得锁，其他线程处于阻塞状态</p>
</blockquote>
<p>缺点：读操作不会修改数据，而且大部份的系统都是<code>读多写少</code>，如果读读之间互斥，大大降低系统的性能<br>像Java中的<code>Reentrantlock</code>、<code>Synchronized</code>都是独享锁</p>
<h3 id="7-共享锁"><a href="#7-共享锁" class="headerlink" title="7. 共享锁"></a>7. 共享锁</h3><blockquote>
<p>共享锁是指允许多个线程同时持有锁，一般在读锁上。读锁的共享锁可保证并发读是非常搞笑的，读写，写读，写写之间则是互斥的。<br>独享锁和共享锁是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享</p>
</blockquote>
<p><strong>读写锁<code>ReentrantReadWriteLock</code> 中读锁是共享锁，写锁是独享锁</strong></p>
<h3 id="8-读锁-写锁"><a href="#8-读锁-写锁" class="headerlink" title="8. 读锁/写锁"></a>8. 读锁/写锁</h3><blockquote>
<p>如果对某个资源是读操作，那多个线程之间并不会相互影响，可以通过添加读锁实现共享，如果有修改操作，为了保证数据的并发安全<br>， 此时只能有一个线程获得锁我们称之为写锁。</p>
</blockquote>
<p><strong>读读是共享的，读写、写读 、写写 则是互斥的</strong></p>
<h3 id="9-公平锁-非公平锁"><a href="#9-公平锁-非公平锁" class="headerlink" title="9. 公平锁/非公平锁"></a>9. 公平锁/非公平锁</h3><p><strong>公平锁</strong>：多个线程按照申请锁的顺序去多额锁，所有线程都在队列中排队，<strong>先来先获取的公平性原则</strong></p>
<ul>
<li>优点： 所有的线程都能得到资源，不会饿死在队列中</li>
<li>缺点：吞吐量会下降很多，队列里面处理第一个线程，其他的线程都会阻塞，CPU唤醒下一个阻塞线程有系统开销<br><img src="/lock-granularity/index/1.png" alt="公平锁"></li>
</ul>
<p><strong>非公平锁</strong>：多个线程不按照申请锁的顺序去获得锁，而是同时以插队方式直接尝试获取锁，获取不到（插队失败），会进入队列等待（失败则乖乖排队），如果能获取到（插队成功），就直接获取到锁。</p>
<ul>
<li>优点：可以减少CPU唤醒线程的开销，整体的吞吐效率会高点</li>
<li>缺点：可能导致线程中排队的线程一直获取不到锁或者长时间获取不到锁</li>
</ul>
<p>Java多线程并发操作，大多是基于<code>Sync</code>本身去实现的，而sync本身却是<code>ReentrantLock</code>的一个内部类，sync继承<code>AbstractQueuedSynchronizer</code>，<br>像<code>ReentrantLock</code>默认是非公平锁，我们可以在构造函数中传入true来创建公平锁</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="10-可中断锁-不可中断锁"><a href="#10-可中断锁-不可中断锁" class="headerlink" title="10. 可中断锁/不可中断锁"></a>10. 可中断锁/不可中断锁</h3><blockquote>
<p>可中断锁：指一个线程因为没有获得锁在阻塞等待过程中，可以中断自己阻塞的状态</p>
<p>不可中断锁：如果锁被其他线程获取后，当前线程只能阻塞等待，入股持有锁的线程一直不释放锁，那其他想获取锁的线程就会一直阻塞</p>
</blockquote>
<blockquote>
<p>内置锁 synchronized 是不可中断锁，而 ReentrantLock 是可中断锁。</p>
</blockquote>
<p>ReentrantLock获取锁定有三种方式：</p>
<ul>
<li>lock()， 如果获取了锁立即返回，如果别的线程持有锁，当前线程则一直处于阻塞状态，直到该线程获取锁</li>
<li>tryLock()， 如果获取了锁立即返回true，如果别的线程正持有锁，立即返回false</li>
<li>tryLock(long timeout,TimeUnit unit)， 如果获取了锁定立即返回true，如果别的线程正持有锁，会等待参数给定的时间，在等待的过程中，如果获取了锁定，就返回true，如果等待超时，返回false；</li>
<li>lockInterruptibly()，如果获取了锁定立即返回；如果没有获取锁，线程处于阻塞状态，直到获取锁或者线程被别的线程中断</li>
</ul>
<h3 id="11-分段锁"><a href="#11-分段锁" class="headerlink" title="11. 分段锁"></a>11. 分段锁</h3><blockquote>
<p>分段锁其实是一种锁的设计，目的是细化锁的粒度，并不是具体的一种锁，对于<code>ConcurrentHashMap</code>而言，其并发的失信就是通过分段锁的形式来实现搞笑的并发操作。</p>
</blockquote>
<p><code>ConcurrentHashMap</code>中的分段锁称为segment，历史与Hashmap（Jdk7）的结构，即内部拥有一个Entry数组，数组中的每一个元素又是一个链表，同时又是一个ReentrantLock（Segment继承来ReentrantLock.<br>当需要put元素的时候，并不是对整个HashMap加锁，而是先通过hashcode知道要放在哪一个分段中，然后对这个分段加锁，所以当多线程put时，只要不是放在同一个分段中，可支持并行插入。</p>
<h3 id="12-锁升级（无锁-偏向锁-轻量级锁-重量级锁）"><a href="#12-锁升级（无锁-偏向锁-轻量级锁-重量级锁）" class="headerlink" title="12. 锁升级（无锁|偏向锁|轻量级锁|重量级锁）"></a>12. 锁升级（无锁|偏向锁|轻量级锁|重量级锁）</h3><p>JDK 1.6之前，<code>synchronized</code> 还是一个重量级锁，效率比较低。但是在JDK 1.6后，JVM为了提高锁的获取与释放效率对 <code>synchronized</code> 进行了优化，引入了偏向锁和轻量级锁 ，从此以后锁的状态就有了四种：<strong>无锁、偏向锁、轻量级锁、重量级锁</strong>。这四种状态会随着竞争的情况逐渐升级，而且是不可降级。<br><img src="/lock-granularity/index/2.png" alt="锁升级"></p>
<ol>
<li><strong>无锁</strong> 无锁并不会对资源锁定，所有的线程都可以访问并修改同一个资源，但同时只有一个线程能修改成功。也就是我们常说的乐观锁。</li>
</ol>
<ol start="2">
<li><strong>偏向锁</strong> 偏向于第一个访问锁的线程，初次执行synchronized代码块时，通过 CAS 修改对象头里的锁标志位，锁对象变成偏向锁。<br>
<br>
 当一个线程访问同步代码块并获取锁时，会在 Mark Word 里存储锁偏向的线程 ID。在线程进入和退出同步块时不再通过 CAS 操作来加锁和解锁，而是检测 Mark Word 里是否存储着指向当前线程的偏向锁。轻量级锁的获取及释放依赖多次 CAS 原子指令，而偏向锁只需要在置换 ThreadID 的时候依赖一次 CAS 原子指令即可。
<br>
<br>
 执行完同步代码块后，线程并不会主动释放偏向锁。当线程第二次再执行同步代码块时，线程会判断此时持有锁的线程是否就是自己（持有锁的线程ID也在对象头里），如果是则正常往下执行。由于之前没有释放锁，这里不需要重新加锁，偏向锁几乎没有额外开销，性能极高。
 <br>
 <br>
 偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程是不会主动释放偏向锁的。关于偏向锁的撤销，需要等待全局安全点，即在某个时间点上没有字节码正在执行时，它会先暂停拥有偏向锁的线程，然后判断锁对象是否处于被锁定状态。如果线程不处于活动状态，则将对象头设置成无锁状态，并撤销偏向锁，恢复到无锁（标志位为01）或轻量级锁（标志位为00）的状态。
 > 偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗。</li>
<li><strong>轻量级锁</strong> 当前锁是偏向锁，此时有多个线程同时来竞争锁，偏向锁会升级为轻量级锁。轻量级锁认为虽然竞争是存在的，但是理想情况下竞争的程度很低，通过自旋方式来获取锁。<br> <br><br><br>轻量级锁的获取有两种情况：<ul>
<li>当关闭偏向锁功能</li>
<li>多个线程竞争偏向锁导致偏向锁升级为轻量级锁，一旦有第二个线程加入锁竞争，偏向锁就会升级为轻量级锁（自旋锁）</li>
</ul>
 在轻量级锁状态下继续锁竞争，没有抢到锁的线程将自旋，不停地循环判断是否能够被成功获取。获取锁的操作，其实就是通过CAS修改对象里面的锁标识位，先比较当前锁标志位是否位”释放”，如果是则将其设置为”锁定”，此过程是原子性；如果抢到锁，线程将当前锁的持有者信息修改为自己。</li>
</ol>
<ol start="4">
<li><p><strong>重量级锁</strong></p>
<p> 如果线程的竞争很激励，线程的自旋超过了一定次数（默认循环10次，可以通过虚拟机参数更改），将轻量级锁升级为重量级锁（依然是 CAS  修改锁标志位，但不修改持有锁的线程ID），当后续线程尝试获取锁时，发现被占用的锁是重量级锁，则直接将自己挂起（而不是忙等），等待将来被唤醒。<br> <br><br><br> 重量级锁是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。简言之，就是所有的控制权都交给了操作系统，由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资。</p>
</li>
</ol>
<h3 id="13-锁优化（锁粗化、锁消除）"><a href="#13-锁优化（锁粗化、锁消除）" class="headerlink" title="13. 锁优化（锁粗化、锁消除）"></a>13. 锁优化（锁粗化、锁消除）</h3><p><strong>锁粗化</strong> 就是告诉我们任何事情都有个度，有些情况下我们反而希望把很多次锁的请求合并成一个请求，以降低短时间内大量锁请求、同步、释放带来的性能损耗。</p>
<p>举个例子：有个循环体</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">        ...业务处理，省略</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>经过锁粗化的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;size;i++)&#123;</span><br><span class="line">        ...业务处理，省略</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>锁消除</strong> 指的是在某些情况下，JVM 虚拟机如果检测不到某段代码被共享和竞争的可能性，就会将这段代码所属的同步锁消除掉，从而到底提高程序性能的目的。</p>
<p>锁消除的依据是逃逸分析的数据支持，如 <code>StringBuffer</code> <code>的 append()</code> 方法，或 <code>Vector</code> 的 <code>add()</code> 方法，在很多情况下是可以进行锁消除的，比如以下这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;i:&quot;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码经过编译之后的字节码如下：<br><img src="/lock-granularity/index/3.png"><br>从上述结果可以看出，之前我们写的线程安全的加锁的<code>StringBuffer</code>对象，在生成字节码之后就被替换成了不加锁不安全的 StringBuilder 对象了，原因是 <code>StringBuffer</code> 的变量属于一个局部变量，并且不会从该方法中逃逸出去，所以我们可以使用锁消除（不加锁）来加速程序的运行。</p>
<hr>
<p>博客摘录于Tom哥的<a href="https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&mid=2247499926&idx=1&sn=e08e2adb2be69398a3c7ae4494c48914&scene=21#wechat_redirect">聊聊13种锁的实现方式</a></p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>过滤器Filter与拦截器区别</title>
    <url>/filter-interceptor/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h2 id="1-过滤器（Filter）"><a href="#1-过滤器（Filter）" class="headerlink" title="1. 过滤器（Filter）"></a><span class="tit-h2">1. 过滤器（Filter）</span></h2><p>Servlet中的过滤器Filter实现了<code>javax.servlet.Filter</code>接口的服务器端程序，主要用途是<strong>设置字符集（CharacterEncodingFilter）</strong>、<strong>控制权限</strong>、<strong>控制转向</strong>、<strong>用户是否已经登陆</strong>、<strong>有没有权限访问该页面</strong>等。其工作原理是，只要你在<code>web.xml</code>文件配置好要拦截的客户端请求，它都会帮你拦截到请求，此时，其实你可以对请求或响应(Request、response)统一设置编码；</p>
<p>它web应用启动而启动，只初始化一次，以后就可以拦截相关请求，只有当你的web应用停止或重新部署的时候才销毁。</p>
<ol>
<li>Filter可以认为是Servlet的一种”加强版”，它主要用于对<strong>用户请求进行预处理</strong>，也可以对HttpServletResponse进行后处理，是个典型的处理链。</li>
<li>Filter可以对用户请求生成响应，和Servlet相同</li>
<li>处理流程：用户请求-&gt;Filter预处理-&gt;Servlet处理请求生成响应-&gt;Filter对响应进行后处理</li>
</ol>
<h3 id="1-1-Filter用处"><a href="#1-1-Filter用处" class="headerlink" title="1.1 Filter用处"></a>1.1 Filter用处</h3><ul>
<li>在<code>HttpServletRequest</code>到达<code>Servlet</code>之前，拦截客户的<code>HttpServletRequest</code>。</li>
<li>根据需要检查<code>HttpServletRequest</code>，也可以修改<code>HttpServletRequest</code>头和数据。</li>
<li>在<code>HttpServletResponse</code>到达客户端之前，拦截<code>HttpServletResponse</code>。</li>
<li>根据需要检查<code>HttpServletResponse</code>，也可以修改<code>HttpServletResponse</code>头和数据。<br>Filter有如下几个种类。</li>
</ul>
<h3 id="1-2-Filter种类"><a href="#1-2-Filter种类" class="headerlink" title="1.2 Filter种类"></a>1.2 Filter种类</h3><ul>
<li>用户授权的Filter：Filter负责检查用户请求，根据请求过滤用户非法请求。</li>
<li>日志Filter：详细记录某些特殊的用户请求。</li>
<li>负责解码的Filter:包括对非标准编码的请求解码。</li>
<li>能改变XML内容的XSLT Filter等。</li>
<li>Filter可以负责拦截多个请求或响应；一个请求或响应也可以被多个Filter拦截。</li>
</ul>
<h3 id="1-3-创建Filter步骤"><a href="#1-3-创建Filter步骤" class="headerlink" title="1.3 创建Filter步骤"></a>1.3 创建Filter步骤</h3><ol>
<li>创建<code>Filter</code>处理类，并实现<code>javax.servlet.Filter</code>接口</li>
<li><code>web.xml</code>文件中配置Filter（或者使用@WebFilter注解）</li>
</ol>
<p><code>javax.servlet.Filter</code>接口中中定义的三个方法：</p>
<ul>
<li>void init(FilterConfig config):用于完成Filter的初始化。</li>
<li>void destory():用于Filter销毁前，完成某些资源的回收。</li>
<li>void doFilter(ServletRequest request,ServletResponse response,FilterChain chain):实现过滤功能，该方法就是对每个请求及响应增加的额外处理。该方法可以实现对用户请求进行预处理(ServletRequest request)，也可实现对服务器响应进行后处理(ServletResponse response)—它们的分界线为是否调用了chain.doFilter(),执行该方法之前，即对用户请求进行预处理；执行该方法之后，即对服务器响应进行后处理。</li>
</ul>
<h2 id="2-拦截器（Interceptor）"><a href="#2-拦截器（Interceptor）" class="headerlink" title="2. 拦截器（Interceptor）"></a><span class="tit-h2">2. 拦截器（Interceptor）</span></h2><p>拦截器是在面向切面变成中应用的，就是service或一个方法前/后调用一个方法。是基础java的放射机制。拦截是不是在<code>web.xml</code></p>
<p>在AOP（Aspect-Oriented Programming)中用于某个方法或字段被访问之前，进行拦截，然后在之前或之后加入某些操作，甚至在抛出异常的时候做业务逻辑的操作。拦击器是AOP的一种实现策略。</p>
<h3 id="2-1-拦截器的实现方式"><a href="#2-1-拦截器的实现方式" class="headerlink" title="2.1 拦截器的实现方式"></a>2.1 拦截器的实现方式</h3><p>SpringMVC中的Interceptor拦截请求是通过<code>HandlerInterceptor</code>来实现的，在SpringMVC中定义Interceptor主要有两种方式：</p>
<ol>
<li>实现Spring的<code>HandlerInterceptor</code>接口或者继承了实现<code>HandlerInterceptor</code>接口的类（比如 HandlerInterceptorAdapter ）</li>
<li>实现Spring的<code>WebRequestInterceptor</code>接口，或者继承了实现<code>WebRequestInterceptor</code>接口的类</li>
</ol>
<p><code>Interceptor</code>中的方法：</p>
<ul>
<li><p>preHandle (HttpServletRequest request, HttpServletResponse response, Object handle) 方法，顾名思义，该方法将在请求处理之前进行调用。SpringMVC 中的Interceptor 是链式的调用的，在一个应用中或者说是在一个请求中可以同时存在多个Interceptor 。每个Interceptor 的调用会依据它的声明顺序依次执行，而且最先执行的都是Interceptor 中的preHandle 方法，所以可以在这个方法中进行一些前置初始化操作或者是对当前请求的一个预处理，也可以在这个方法中进行一些判断来决定请求是否要继续进行下去。该方法的返回值是布尔值Boolean类型的，当它返回为false 时，表示请求结束，后续的Interceptor 和Controller 都不会再执行；当返回值为true 时就会继续调用下一个Interceptor 的preHandle 方法，如果已经是最后一个Interceptor 的时候就会是调用当前请求的Controller 方法</p>
</li>
<li><p>postHandle (HttpServletRequest request, HttpServletResponse response, Object handle, ModelAndView modelAndView) 方法，由preHandle 方法的解释我们知道这个方法包括后面要说到的afterCompletion 方法都只能是在当前所属的Interceptor 的preHandle 方法的返回值为true 时才能被调用。postHandle 方法，顾名思义就是在当前请求进行处理之后，也就是Controller 方法调用之后执行，但是它会在DispatcherServlet 进行视图返回渲染之前被调用，所以我们可以在这个方法中对Controller 处理之后的ModelAndView 对象进行操作。postHandle 方法被调用的方向跟preHandle 是相反的，也就是说先声明的Interceptor 的postHandle 方法反而会后执行，这和Struts2 里面的Interceptor 的执行过程有点类型。Struts2 里面的Interceptor 的执行过程也是链式的，只是在Struts2 里面需要手动调用ActionInvocation 的invoke 方法来触发对下一个Interceptor 或者是Action 的调用，然后每一个Interceptor 中在invoke 方法调用之前的内容都是按照声明顺序执行的，而invoke 方法之后的内容就是反向的。</p>
</li>
<li><p>afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handle, Exception ex) 方法，该方法也是需要当前对应的Interceptor 的preHandle 方法的返回值为true 时才会执行。顾名思义，该方法将在整个请求结束之后，也就是在DispatcherServlet 渲染了对应的视图之后执行。这个方法的主要作用是用于进行资源清理工作的</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExecuteTimeInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(ExecuteTimeInterceptor.class);</span><br><span class="line">    <span class="comment">//before the actual handler will be executed</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="params"><span class="function">        HttpServletResponse response, Object handler)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        request.setAttribute(<span class="string">&quot;startTime&quot;</span>, startTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//after the handler is executed</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = (Long)request.getAttribute(<span class="string">&quot;startTime&quot;</span>);</span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//统计耗时</span></span><br><span class="line">        <span class="keyword">long</span> executeTime = endTime - startTime;</span><br><span class="line">        <span class="comment">//modified the exisitng modelAndView</span></span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;executeTime&quot;</span>,executeTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//log it</span></span><br><span class="line">        <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</span><br><span class="line">           logger.debug(<span class="string">&quot;[&quot;</span> + handler + <span class="string">&quot;] executeTime : &quot;</span> + executeTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>非Springboot项目<br>使用mvc:interceptors标签来声明需要加入到SpringMVC拦截器链中的拦截器</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!-- 使用bean定义一个Interceptor，直接定义在mvc:interceptors根下面的Interceptor将拦截所有的请求 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.company.app.web.interceptor.AllInterceptor&quot;</span>/&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/parent/**&quot;</span>/&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.company.authorization.interceptor.SecurityInterceptor&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/parent/**&quot;</span>/&gt;</span>  </span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.company.authorization.interceptor.SecuritySystemInterceptor&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以利用mvc:interceptors标签声明一系列的拦截器，然后它们就可以形成一个拦截器链，拦截器的执行顺序是按声明的先后顺序执行的，先声明的拦截器中的preHandle方法会先执行，然而它的postHandle方法和afterCompletion方法却会后执行。</p>
<p>  在mvc:interceptors标签下声明interceptor主要有两种方式：</p>
<ul>
<li>直接定义一个Interceptor实现类的bean对象。使用这种方式声明的Interceptor拦截器将会对所有的请求进行拦截。</li>
<li>使用mvc:interceptor标签进行声明。使用这种方式进行声明的Interceptor可以通过mvc:mapping子标签来定义需要进行拦截的请求路径。<br>经过上述两步之后，定义的拦截器就会发生作用对特定的请求进行拦截了</li>
</ul>
</li>
<li><p>Springboot项目<br> 配置拦截器</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//@Configurationpublic</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 配置拦截器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 多个拦截器组成一个拦截器链</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> ExecuteTimeInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//API限流拦截</span></span><br><span class="line">        registry.addInterceptor(accessLimitAjaxInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/static/**&quot;</span>,<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">        registry.addInterceptor(accessInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/static/**&quot;</span>,<span class="string">&quot;/login.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-2-拦截器（interceptor）使用"><a href="#2-2-拦截器（interceptor）使用" class="headerlink" title="2.2 拦截器（interceptor）使用"></a>2.2 拦截器（interceptor）使用</h3><ol>
<li>请求到达DispatcherServlet</li>
<li>DispatcherServlet发送至Interceptor，执行preHandler</li>
<li>请求到达Controller</li>
<li>请求结束后，执行postHandler</li>
</ol>
<h2 id="3-过滤器（Filter）与-拦截器（Interceptor）的区别"><a href="#3-过滤器（Filter）与-拦截器（Interceptor）的区别" class="headerlink" title="3. 过滤器（Filter）与 拦截器（Interceptor）的区别"></a>3. 过滤器（Filter）与 拦截器（Interceptor）的区别</h2><p>Spring的Interceptor(拦截器)与Servlet的Filter有相似之处，比如二者都是AOP编程思想的体现，都能实现权限检查、日志记录等。不同的是：</p>
<table>
<thead>
<tr>
<th>Filter</th>
<th>Interceptor</th>
<th>Summary</th>
</tr>
</thead>
<tbody><tr>
<td>Filter 接口定义在 javax.servlet 包中</td>
<td>接口 HandlerInterceptor 定义在org.springframework.web.servlet 包中</td>
<td></td>
</tr>
<tr>
<td>Filter 定义在 web.xml 中</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Filter在只在 Servlet 前后起作用。Filters 通常将 请求和响应（request/response） 当做黑盒子，Filter 通常不考虑servlet 的实现。</td>
<td>拦截器能够深入到方法前后、异常抛出前后等，因此拦截器的使用具有更大的弹性。允许用户介入（hook into）请求的生命周期，在请求过程中获取信息，Interceptor 通常和请求更加耦合。</td>
<td>在Spring架构的程序中，优先使用拦截器，几乎所有的Filter能够做的事情，Interceptor都可以实现</td>
</tr>
<tr>
<td>Filter 是 Servlet 规范规定的。</td>
<td>而拦截器既可以用于Web程序，也可以用于Application、Swing程序中。</td>
<td>使用范围不同</td>
</tr>
<tr>
<td>Filter 是在 Servlet 规范中定义的，是 Servlet 容器支持的。</td>
<td>而拦截器是在 Spring容器内的，是Spring框架支持的。</td>
<td>规范不同</td>
</tr>
<tr>
<td>Filter 不能够使用 Spring 容器资源</td>
<td>拦截器是一个Spring的组件，归Spring管理，配置在Spring文件中，因此能使用Spring里的任何资源、对象，例如 Service对象、数据源、事务管理等，通过IoC注入到拦截器即可</td>
<td>Spring使用interceptor更容易</td>
</tr>
<tr>
<td>Filter 是被 Server(like Tomcat) 调用</td>
<td>Interceptor 是被 Spring 调用</td>
<td>Filter优先于interceptor执行</td>
</tr>
</tbody></table>
<h3 id="3-1-执行顺序"><a href="#3-1-执行顺序" class="headerlink" title="3.1 执行顺序"></a>3.1 执行顺序</h3><p><strong>用户请求 -&gt; 过滤前 -&gt; 拦截前 -&gt; Action处理 -&gt; 拦截后 -&gt; 过滤后 -&gt; 响应</strong><br><img src="/filter-interceptor/index/1.png" alt="filter与intercepor的执行顺序"><br><img src="/filter-interceptor/index/2.png" alt="filter与intercepor的执行顺序"></p>
<h2 id="4-过滤器（Filter）与-拦截器（Interceptor）常见用途"><a href="#4-过滤器（Filter）与-拦截器（Interceptor）常见用途" class="headerlink" title="4. 过滤器（Filter）与 拦截器（Interceptor）常见用途"></a>4. 过滤器（Filter）与 拦截器（Interceptor）常见用途</h2><ul>
<li>Authentication Filters</li>
<li>Logging and Auditing Filtersx</li>
<li>Image conversion Filters</li>
<li>Data compression Filters</li>
<li>Encryption Filters</li>
<li>Tokenizing Filters</li>
<li>Filters that trigger resource access events</li>
<li>XSL/T filters</li>
<li>Mime-type chain Filter</li>
</ul>
<p>Request Filters 可以:</p>
<ul>
<li>执行安全检查 perform security checks</li>
<li>格式化请求头和主体 reformat request headers or bodies</li>
<li>审查或者记录日志 audit or log requests</li>
<li>根据请求内容授权或者限制用户访问 Authentication-Blocking requests based on user identity.</li>
<li>根据请求频率限制用户访问</li>
</ul>
<p>Response Filters 可以:</p>
<ul>
<li>压缩响应内容,比如让下载的内容更小 Compress the response stream</li>
<li>追加或者修改响应 append or alter the response stream</li>
<li>创建或者整体修改响应 create a different response altogether</li>
<li>根据地方不同修改响应内容 Localization-Targeting the request and response to a particular locale.</li>
</ul>
<h2 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h2><ol>
<li><p>过滤器：所谓过滤器顾名思义是用来过滤的，在java web中，你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，然后再传入servlet或者struts的action进行业务逻辑，比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,或者在传入servlet或者struts的action前统一设置字符集，或者去除掉一些非法字符（聊天室经常用到的，一些骂人的话）。filter 流程是线性的， url传来之后，检查之后，可保持原来的流程继续向下执行，被下一个filter, servlet接收等.</p>
</li>
<li><p>java的拦截器 主要是用在插件上，扩展件上比如 hibernate spring struts2等 有点类似面向切片的技术，在用之前先要在配置文件即xml文件里声明一段的那个东西。</p>
</li>
<li><p>拦截器（Interceptor）是基于Java的反射机制，而过滤器（Filter）是基于函数回调。从灵活性上说拦截器功能更强大些，Filter能做的事情，都能做，而且可以在请求前，请求后执行，比较灵活。Filter主要是针对URL地址做一个编码的事情、过滤掉没用的参数、安全校验（比较泛的，比如登录不登录之类），太细的话，还是建议用interceptor。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mysql重置密码</title>
    <url>/mysql-forget-pwd/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<p>Mysql 安装的时候忘记保存默认密码，需要重置密码；<br><img src="/mysql-forget-pwd/index/1.png" alt="忘记密码"></p>
<h3 id="1-跳过Mysql密码认证"><a href="#1-跳过Mysql密码认证" class="headerlink" title="1. 跳过Mysql密码认证"></a>1. 跳过Mysql密码认证</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>
<p>在文档内<code>[mysqld]</code>第一行添加<code>skip-grant-tables</code>用来跳过密码验证的过程<br><img src="/mysql-forget-pwd/index/2.png" alt="跳过密码认证"></p>
<h3 id="2-重启Mysql"><a href="#2-重启Mysql" class="headerlink" title="2. 重启Mysql"></a>2. 重启Mysql</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysqld restart</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">或者</span></span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure>
<p>然后再输入<code>mysql -uroot -p</code> 一直按<code>enter</code> 就可以顺利进入数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line">use mysql;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure>
<p><img src="/mysql-forget-pwd/index/3.png" alt="跳过密码认证"></p>
<h3 id="3-创建用户"><a href="#3-创建用户" class="headerlink" title="3. 创建用户"></a>3. 创建用户</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> <span class="keyword">identity</span> <span class="keyword">by</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- lolcahost表示本地，mysql登陆的时候不用指定IP登陆</span></span><br><span class="line"><span class="comment">-- 如果需要外网访问，则将localhost改成 % </span></span><br></pre></td></tr></table></figure>
<p>此步骤可能会报以下错误，没报错的跳过第4步</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> ERROR 1290 (HY000): The MySQL server is running with the --skip-grant-tables option so it cannot execute this statement</span></span><br><span class="line"><span class="meta">#</span><span class="bash">输入</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;刷新配置</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 再次创建用户</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identity by <span class="string">&#x27;123456&#x27;</span>;</span></span><br></pre></td></tr></table></figure>
<p><img src="/mysql-forget-pwd/index/4.png" alt="创建用户"><br>再次报错，这步没报错的也是直接跳到赋予权限那一步，报错的以下操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> drop user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> create user <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> identified by <span class="string">&#x27;123456&#x27;</span>;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-赋予root权限"><a href="#4-赋予root权限" class="headerlink" title="4. 赋予root权限"></a>4. 赋予root权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> WITH GRANT OPTION;</span> </span><br><span class="line"><span class="meta">#</span><span class="bash">赋予所有库所有表操作权限</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> flush privileges;</span></span><br><span class="line"><span class="meta">mysql&gt;</span><span class="bash"> <span class="built_in">exit</span>;</span></span><br></pre></td></tr></table></figure>
<p><img src="/mysql-forget-pwd/index/5.png" alt="赋予权限"><br>再次查询<code>user</code>表，会发现用户表新建了一个root用户</p>
<h3 id="5-修改配置文件"><a href="#5-修改配置文件" class="headerlink" title="5. 修改配置文件"></a>5. 修改配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#删除配置</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">skip-grant-table=1</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#保存并重启mysql</span></span></span><br><span class="line">service myqld restart</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>Tidb查询优化</title>
    <url>/tidb-optimization/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-tidb查询优化"><a href="#1-tidb查询优化" class="headerlink" title="1. tidb查询优化"></a>1. tidb查询优化</h3><p> tidb数据库查询3亿条数据需要花费20s以上，然后按照下面的优化方式执行过后，查询只需要1.5s；</p>
<ol>
<li>查看表的健康度<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">show</span> stats_healthy <span class="keyword">where</span> table_name<span class="operator">=</span><span class="string">&#x27;xxxx&#x27;</span>;</span><br><span class="line">   ```                        </span><br><span class="line"><span class="number">2.</span> 查看自动统计状态            </span><br><span class="line">    ```<span class="keyword">sql</span></span><br><span class="line">    <span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%auto_analyze%&#x27;</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>tidb_auto_analyze_start_time和tidb_auto_analyze_end_time控制了自动收集统计信息的窗口；</li>
<li>tidb_auto_analyze_ratio 控制了可以进行自动收集统计信息的阈值，默认为0.5，如果后续表的数据量增加，可以酌情调整这个参数到0.3或者0.2，意味着这张表的数据修改超过总表行数的30%或者20%就会自动收集，会更敏感一些</li>
</ul>
 官方文档：<a href="https://docs.pingcap.com/zh/tidb/dev/statistics#%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0">https://docs.pingcap.com/zh/tidb/dev/statistics#%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0</a></li>
<li>调整自动收集统计信息的阈值<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> tidb_auto_analyze_ratio <span class="operator">=</span> <span class="number">0.2</span>;</span><br></pre></td></tr></table></figure></li>
<li>查看健康度低于阈值的表信息<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> stats_healthy <span class="keyword">where</span> healthy<span class="operator">&lt;</span><span class="number">80</span>;</span><br></pre></td></tr></table></figure></li>
<li>低于80的重新收集统计信息 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">analyze <span class="keyword">table</span> xxx</span><br></pre></td></tr></table></figure></li>
<li>加快索引添加速度 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> variables <span class="keyword">like</span> <span class="string">&#x27;tidb_ddl_reorg_%&#x27;</span>;</span><br><span class="line">   </span><br><span class="line"># 记录原来的数值， 添加完索引后记得改回去</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> tidb_ddl_reorg_batch_size <span class="operator">=</span> <span class="number">1024</span>;</span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> tidb_ddl_reorg_worker_cnt <span class="operator">=</span> <span class="number">16</span>;</span><br></pre></td></tr></table></figure>
如果某张表因为业务需求导入了大量的数据，而这些数据在达到tidb_auto_analyze_start_time之前就需要使用SQL进行查询，此时建议对导入的表进行手动的收集；<br>我们也可以分析业务的行为，如果某张表有定时任务会自动插入大量数据，自动任务完成后需要产生报表的需求，也建议在自动任务结束后手动对相关的表进行手动收集；</li>
</ol>
]]></content>
      <categories>
        <category>06 数据库</category>
      </categories>
      <tags>
        <tag>tidb</tag>
      </tags>
  </entry>
  <entry>
    <title>实现异步的8种方式</title>
    <url>/async/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h3><p>异步执行对于开发者来说并不陌生，在实际的开发过程中，很多场景多会使用到异步，相比同步执行，异步可以大大缩短请求链路耗时时间，比如：「发送短信、邮件、异步更新等」，这些都是典型的可以通过异步实现的场景</p>
<p>首先我们先看一个常见的用户下单的场景：<br><img src="/async/index/1.png"></p>
<p>在同步操作中，我们执行到 <strong>「发送短信」</strong> 的时候，我们必须等待 <strong>「赠送积分」</strong> 这个操作彻底执行完才能执行，如果 <strong>「赠送积分」</strong> 这个动作执行时间较长，发送短信需要等待，这就是典型的同步场景。</p>
<p>实际上，<strong>发送短信</strong>和<strong>赠送积分</strong>没有任何的依赖关系，通过异步，我们可以实现赠送积分和发送短信这两个操作能够同时进行，比如<br><img src="/async/index/2.png"></p>
<h3 id="2-异步的8种实现方式"><a href="#2-异步的8种实现方式" class="headerlink" title="2. 异步的8种实现方式"></a>2. 异步的8种实现方式</h3><ol>
<li><p>线程Thread</p>
</li>
<li><p>Future</p>
</li>
<li><p>异步框架CompletableFuture</p>
</li>
<li><p>Spring注解@Async</p>
</li>
<li><p>Spring ApplicationEvent事件</p>
</li>
<li><p>消息队列</p>
</li>
<li><p>第三方异步框架(比如 Hutool的ThreadUtil)</p>
</li>
<li><p>Guava异步</p>
</li>
</ol>
<h3 id="3-异步案例代码"><a href="#3-异步案例代码" class="headerlink" title="3. 异步案例代码"></a>3. 异步案例代码</h3><h4 id="3-1-线程异步"><a href="#3-1-线程异步" class="headerlink" title="3.1 线程异步"></a>3.1 线程异步</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;current thread name:&quot;</span>+Thread.currentThread().getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        AsyncThread asyncThread = <span class="keyword">new</span> AsyncThread();</span><br><span class="line">        asyncThread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然如果每次都创建一个<code>Thread</code>线程，频繁的创建、销毁，浪费系统资源，可以采用线程池：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncThreadPool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line">        executorService.submit(() -&gt; System.out.println(<span class="string">&quot;执行业务逻辑......&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以将业务逻辑封装到Runnable或Callable中，交由线程池来执行。</p>
<h4 id="3-2-Future异步"><a href="#3-2-Future异步" class="headerlink" title="3.2 Future异步"></a>3.2 Future异步</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">executeDemo</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">        Future&lt;String&gt; future = executorService.submit(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot; --- task start --- &quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot; --- task finish ---&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;this is future execute final result!!!&quot;</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//这里需要返回值时会阻塞主线程</span></span><br><span class="line">        <span class="keyword">return</span> future.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FutureDemo demo = <span class="keyword">new</span> FutureDemo();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(demo.executeDemo());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> --- task start --- </span><br><span class="line"> --- task finish ---</span><br><span class="line">this is future execute final result!!!</span><br></pre></td></tr></table></figure>

<p><strong>Future的不足之处:</strong></p>
<ol>
<li><strong>无法被动接收异步任务的计算结果：</strong> 虽然我们可以主动将异步任务提交给线程池中的线程来执行，但是待异步任务执行结束之后，主线程无法得到任务完成与否的通知，它需要通过get方法主动获取任务执行的结果</li>
</ol>
<ol start="2">
<li><strong>Future间彼此孤立：</strong> 有时某一个耗时很长的异步任务执行结束之后，你想利用它返回的结果再做进一步的运算，该运算也会是一个异步任务，两者之间的关系需要程序开发人员手动进行绑定赋予，Future并不能将其形成一个任务流（pipeline），每一个Future都是彼此之间都是孤立的，所以才有了后面的CompletableFuture，CompletableFuture就可以将多个Future串联起来形成任务流。</li>
</ol>
<ol start="3">
<li><strong>Future没有很好的错误处理机制：</strong> 截止目前，如果某个异步任务在执行发的过程中发生了异常，调用者无法被动感知，必须通过捕获get方法的异常才知晓异步任务执行是否出现了错误，从而在做进一步的判断处理</li>
</ol>
<h4 id="3-3-CompletableFuture实现异步"><a href="#3-3-CompletableFuture实现异步" class="headerlink" title="3.3 CompletableFuture实现异步"></a>3.3 CompletableFuture实现异步</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompletableFutureDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">thenRunAsync</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        CompletableFuture&lt;Integer&gt; cf1 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; cf1 do something&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Integer&gt; cf2 = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; cf2 do something&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;cf1执行结果 -&gt;&quot;</span> + cf1.get());</span><br><span class="line">        System.out.println(<span class="string">&quot;cf2执行结果 -&gt;&quot;</span> + cf2.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            thenRunAsync();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException | InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ForkJoinPool.commonPool-worker-1 cf1 do something</span><br><span class="line">ForkJoinPool.commonPool-worker-1 cf2 do something</span><br><span class="line">cf1执行结果 -&gt;1</span><br><span class="line">cf2执行结果 -&gt;2</span><br></pre></td></tr></table></figure>
<p>我们不需要显式使用ExecutorService，<code>CompletableFuture</code> 内部使用了ForkJoinPool来处理异步任务，如果在某些业务场景我们想自定义自己的异步线程池也是可以的。</p>
<h4 id="3-4-Spring的-Async异步"><a href="#3-4-Spring的-Async异步" class="headerlink" title="3.4 Spring的@Async异步"></a>3.4 Spring的@Async异步</h4><ol>
<li><p>自定义线程池</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableAsync</span>        <span class="comment">//异步调用@Async注解生效。</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskPoolConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;taskExcutor&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Executor <span class="title">takExecutor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//返回可用处理器的Java虚拟机的数量</span></span><br><span class="line">        <span class="keyword">int</span> i = Runtime.getRuntime().availableProcessors();</span><br><span class="line">        System.out.println(<span class="string">&quot;系统最大线程数：&quot;</span>+i);</span><br><span class="line">        ThreadPoolTaskExecutor executor = <span class="keyword">new</span> ThreadPoolTaskExecutor();</span><br><span class="line">        executor.setCorePoolSize(<span class="number">16</span>);   <span class="comment">//核心线程池大小</span></span><br><span class="line">        executor.setMaxPoolSize(<span class="number">20</span>); <span class="comment">//最大线程数</span></span><br><span class="line">        executor.setKeepAliveSeconds(<span class="number">60</span>);<span class="comment">//活跃时间</span></span><br><span class="line">        executor.setQueueCapacity(<span class="number">9999</span>); <span class="comment">//配置缓存队列容量，默认值为：Integer.MAX_VALUE</span></span><br><span class="line">        executor.setThreadNamePrefix(<span class="string">&quot;async Excutor -&quot;</span>);<span class="comment">//线程名前缀</span></span><br><span class="line">        executor.setAwaitTerminationSeconds(<span class="number">60</span>);  <span class="comment">//等待的时间</span></span><br><span class="line">        <span class="comment">//调度器shutdown被调用时等待当前被调度的任务完成, 就是等待所有的任务结束后再关闭线程池</span></span><br><span class="line">        executor.setWaitForTasksToCompleteOnShutdown(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">// 线程池对拒绝任务（无线程可用）的处理策略，目前只支持AbortPolicy、CallerRunsPolicy；默认为后者</span></span><br><span class="line">        executor.setRejectedExecutionHandler(<span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        executor.initialize();</span><br><span class="line">        <span class="keyword">return</span> executor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>AsyncService</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line">    <span class="function">MessageResult <span class="title">sendSms</span><span class="params">(String callPrefix, String mobile, String actionType, String content)</span></span>;</span><br><span class="line">    <span class="function">MessageResult <span class="title">sendEmail</span><span class="params">(String email, String subject, String content)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncServiceImpl</span> <span class="keyword">implements</span> <span class="title">AsyncService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IMessageHandler mesageHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Async(&quot;taskExecutor&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageResult <span class="title">sendSms</span><span class="params">(String callPrefix, String mobile, String actionType, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            mesageHandler.sendSms(callPrefix, mobile, actionType, content);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发送短信异常 -&gt; &quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Async(&quot;taskExecutor&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">sendEmail</span><span class="params">(String email, String subject, String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            mesageHandler.sendsendEmail(email, subject, content);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;发送email异常 -&gt; &quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>在实际项目中，使用<code>@Async</code>调用线程池，推荐的方式是使用自定义线程池的模式，不推荐直接使用<code>@Async</code>实现异步</p>
<h4 id="3-5-Spring-ApplicationEvent事件实现异步"><a href="#3-5-Spring-ApplicationEvent事件实现异步" class="headerlink" title="3.5 Spring ApplicationEvent事件实现异步"></a>3.5 Spring ApplicationEvent事件实现异步</h4><ol>
<li>定义事件 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncSendEmailEvent</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮箱</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 主题</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String subject;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内容</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收者</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String targetUserId;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">//------省略getter/setter方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>定义事件处理器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AsyncSendEmailEventHandler</span> <span class="keyword">implements</span> <span class="title">ApplicationListener</span>&lt;<span class="title">AsyncSendEmailEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IMessageHandler messageHandler;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Async(&quot;taskExecutor&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(AsyncSendEmailEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (event == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String email = event.getEmail();</span><br><span class="line">        String subject = event.getSubject();</span><br><span class="line">        String content = event.getContent();</span><br><span class="line">        String targetUserId = event.getTargetUserId();</span><br><span class="line">        messageHandler.sendsendEmailSms(email, subject, content, targerUserId);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>另外，可能有些时候采用ApplicationEvent实现异步的使用，当程序出现异常错误的时候，需要考虑补偿机制，那么这时候可以结合Spring Retry重试来帮助我们避免这种异常造成数据不一致问题</p>
<h4 id="3-6-消息队列"><a href="#3-6-消息队列" class="headerlink" title="3.6 消息队列"></a>3.6 消息队列</h4><ol>
<li><p>配置</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="comment">####连接地址</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.92</span></span><br><span class="line">    <span class="comment">####端口号</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br><span class="line">    <span class="comment">####账号</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">xiaoyuge</span></span><br><span class="line">    <span class="comment">####密码</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="comment">### 地址</span></span><br><span class="line">    <span class="attr">virtual-host:</span> <span class="string">/mytest1205</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String EXCHANGE_SPRINGBOOT_NAME = <span class="string">&quot;springboot_topic_exchange&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 短信队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String FANOUT_SMS_QUEUE = <span class="string">&quot;springboot_topic_sms_queue&quot;</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 邮件队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String FANOUT_SMS_EMAIL = <span class="string">&quot;springboot_topic_email_queue&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建短信队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">smsQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(FANOUT_SMS_QUEUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建邮件队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">emailQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(FANOUT_SMS_EMAIL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建交换机</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">topicExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(EXCHANGE_SPRINGBOOT_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义短信队列绑定交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">smsBindingExchange</span><span class="params">(Queue smsQueue, TopicExchange topicExchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(smsQueue).to(topicExchange).with(<span class="string">&quot;my.sms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义邮件队列绑定交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">emailBindingExchange</span><span class="params">(Queue emailQueue, TopicExchange topicExchange)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(emailQueue).to(topicExchange).with(<span class="string">&quot;my.#&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>回调事件消息生产者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//&lt;dependency&gt;</span></span><br><span class="line"><span class="comment">//   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">//   &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">//&lt;/dependency&gt;</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(CallbackDTO callbackDTO, <span class="keyword">final</span> <span class="keyword">long</span> delay)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;生产者发送消息，callbackDTO,&#123;&#125;&quot;</span>, callbackDTO);</span><br><span class="line">        <span class="comment">// 参数1:交换机名称 、参数2: 路由key  参数3:消息</span></span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;springboot_topic_exchange&quot;</span>,<span class="string">&quot;my.time&quot;</span>,<span class="string">&quot;this is a message&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>回调事件消息消费者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;springboot_topic_email_queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallbackConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">(String mesg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;邮件消费者接收到消息:&quot;</span>+mesg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;springboot_topic_sms_queue&quot;)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FanoutSmsConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;短信消费者收到消息：&quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-7-ThreadUtil异步工具类"><a href="#3-7-ThreadUtil异步工具类" class="headerlink" title="3.7 ThreadUtil异步工具类"></a>3.7 ThreadUtil异步工具类</h4><ol>
<li>ThreadUtil.execAsync<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadUtils</span> </span>&#123;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">    *     &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">    *     &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">    *     &lt;version&gt;5.7.4&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    * &lt;/dependency&gt;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            ThreadUtil.execAsync(() -&gt; &#123;</span><br><span class="line">                ThreadLocalRandom threadLocalRandom = ThreadLocalRandom.current();</span><br><span class="line">                <span class="keyword">int</span> number = threadLocalRandom.nextInt(<span class="number">20</span>) + <span class="number">1</span>;</span><br><span class="line">                System.out.println(number);</span><br><span class="line">            &#125;);</span><br><span class="line">           System.out.println(<span class="string">&quot;当前第：&quot;</span> + i + <span class="string">&quot;个线程&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;task finish!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出结果：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当前第：0个线程</span><br><span class="line">当前第：1个线程</span><br><span class="line">当前第：2个线程</span><br><span class="line">task finish!</span><br><span class="line">3</span><br><span class="line">11</span><br><span class="line">10</span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="2">
<li>ThreadUtil.execute<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        CountDownLatch countDownLatch = ThreadUtil.newCountDownLatch(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; countDownLatch.getCount(); i++) &#123;</span><br><span class="line">            ThreadUtil.execute(()-&gt;&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">2000</span>); <span class="comment">//休眠2秒</span></span><br><span class="line">                    ThreadLocalRandom threadLocalRandom = ThreadLocalRandom.current();</span><br><span class="line">                    <span class="keyword">int</span> number = threadLocalRandom.nextInt(<span class="number">20</span>) + <span class="number">1</span>;</span><br><span class="line">                    System.out.println(number);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            System.out.println(<span class="string">&quot;第&quot;</span>+ i +<span class="string">&quot;个线程&quot;</span> );</span><br><span class="line">            <span class="comment">//调用线程计数器 - 1</span></span><br><span class="line">            countDownLatch.countDown();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//唤醒主线程</span></span><br><span class="line">        countDownLatch.await();</span><br><span class="line">        System.out.println(<span class="string">&quot; finish &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出结果：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">第0个线程</span><br><span class="line">第1个线程</span><br><span class="line">第2个线程</span><br><span class="line">//这里等了2s</span><br><span class="line">18</span><br><span class="line">13</span><br><span class="line">5</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-8-Guava异步"><a href="#3-8-Guava异步" class="headerlink" title="3.8 Guava异步"></a>3.8 Guava异步</h4><p>Guava的ListenableFuture顾名思义就是可以监听的Future，是对java原生Future的扩展增强。我们知道Future表示一个异步计算任务，当任务完成时可以得到计算结果。如果我们希望一旦计算完成就拿到结果展示给用户或者做另外的计算，就必须使用另一个线程不断的查询计算状态。这样做，代码复杂，而且效率低下。使用<strong>「Guava ListenableFuture」</strong>可以帮我们检测Future是否完成了，不需要再通过get()方法苦苦等待异步的计算结果，如果完成就自动调用回调函数，这样可以减少并发程序的复杂度</p>
<p><code>ListenableFuture</code>是一个接口，它从jdk的Future接口继承，添加了<code>void addListener(Runnable listener, Executor executor)</code>方法。</p>
<p>看下如何使用ListenableFuture。首先需要定义ListenableFuture的实例:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ListeningExecutorService executorService = MoreExecutors.listeningDecorator(Executors.newCachedThreadPool());</span><br><span class="line">        <span class="keyword">final</span> ListenableFuture&lt;Integer&gt; listenableFuture = executorService.submit(<span class="keyword">new</span> Callable&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                log.info(<span class="string">&quot;callable execute...&quot;</span>)</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>首先通过<code>MoreExecutors</code>类的静态方法<code>listeningDecorator</code>方法初始化一个<code>ListeningExecutorService</code>的方法，然后使用此实例的submit方法即可初始化<code>ListenableFuture</code>对象。</p>
<p><code>ListenableFuture</code>要做的工作，在Callable接口的实现类中定义，这里只是休眠了1秒钟然后返回一个数字1，有了<code>ListenableFuture</code>实例，可以执行此Future并执行Future完成之后的回调函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Futures.addCallback(listenableFuture, <span class="keyword">new</span> FutureCallback&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Integer result)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//成功执行...</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Get listenable future&#x27;s result with callback &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Throwable t)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//异常情况处理...</span></span><br><span class="line">        t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>


<p>本博文摘录自：<strong>austin流川枫</strong>的<a href="https://juejin.cn/post/7165147306688249870">实现异步的8种方式</a> </p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式系统 - 全局唯一ID实现方案</title>
    <url>/global-unique-id/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<blockquote>
<p>常见的分布式ID生成方式，大致分类的话可以分为两类：一种是类DB型的，根据设置不同起始值和步长来实现趋势递增，需要考虑服务的容错性和可用性; 另一种是类snowflake型，这种就是将64位划分为不同的段，每段代表不同的涵义，基本就是时间戳、机器ID和序列数。这种方案就是需要考虑时钟回拨的问题以及做一些 buffer的缓冲设计提高性能。@pdai</p>
</blockquote>
<h2 id="1-为什么需要全局唯一ID"><a href="#1-为什么需要全局唯一ID" class="headerlink" title="1. 为什么需要全局唯一ID"></a>1. 为什么需要全局唯一ID</h2><p>传统的单体架构时，我们基本上是单库然后业务单表的结构，每个业务表的ID一般我们都是从1增，通过<code>AUTO_INCREMENT=1</code>设置自增起始值，但是在分布式服务架构模式下分库分表的设计，使得多个库或者多个表存储相同的业务数据，这种情况根据数据库的自增ID就会产生相同的ID，不能保证主键的唯一性。<br><img src="/global-unique-id/index/1.png"></p>
<h2 id="2-UUID"><a href="#2-UUID" class="headerlink" title="2. UUID"></a>2. UUID</h2><p>UUID(Universally Unique Identifier)，通用唯一识别码的缩写，UUID是由一组32为的16进制的数字组成的，所以理论上UUID的总数为：<code>16^32 = 2^128</code>，如果每纳秒产生1兆个UUID，要花完全部UUID需要100亿年。</p>
<p>生成的UUID是由<code>8-4-4-4-12</code>格式的数据组成，其中32个字符和4个连接符’-‘,一般使用的时候会将连接符删除<code>uuid.toString().replaceAll(&quot;-&quot;,&quot;&quot;)</code>。</p>
<p>目前UUID创建方式有5个版本，每个版本的算法不同，应用范围也不同。</p>
<ul>
<li><p><strong>版本1-基于时间的UUID：</strong> 这个一般是通过当前时间，随机数，和本地Mac地址来计算出来，可以通过 org.apache.logging.log4j.core.util包中的 UuidUtil.getTimeBasedUuid()来使用或者其他包中工具。由于使用了MAC地址，因此能够确保唯一性，但是同时也暴露了MAC地址，私密性不够好</p>
</li>
<li><p><strong>版本2-DCE安全的UUID：</strong> DCE（Distributed Computing Environment）安全的UUID和基于时间的UUID算法相同，但会把时间戳的前4位置换为POSIX的UID或GID。这个版本的UUID在实际中较少用到</p>
</li>
<li><p><strong>版本3-基于名字的UUID（MD5）：</strong> 基于名字的UUID通过计算名字和名字空间的MD5散列值得到。这个版本的UUID保证了：相同名字空间中不同名字生成的UUID的唯一性；不同名字空间中的UUID的唯一性；相同名字空间中相同名字的UUID重复生成是相同的</p>
</li>
<li><p><strong>版本4-随机UUID：</strong> 根据随机数，或者伪随机数生成UUID。这种UUID产生重复的概率是可以计算出来的，但是重复的可能性可以忽略不计，因此该版本也是被经常使用的版本。JDK中使用的就是这个版本</p>
</li>
<li><p><strong>版本5-基于名字的UUID（SHA1）：</strong> 和基于名字的UUID算法类似，只是散列值计算使用SHA1（Secure Hash Algorithm 1）算法。</p>
</li>
</ul>
<p>Java中JDK自带的UUID产生方式就是版本4根据随机数生成的UUID和版本3基于名字的UUID</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取一个版本4根据随机字节数组的UUID。</span></span><br><span class="line">    UUID uuid = UUID.randomUUID();</span><br><span class="line">    System.out.println(uuid.toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取一个版本3(基于名称)根据指定的字节数组的UUID。</span></span><br><span class="line">    <span class="keyword">byte</span>[] nbyte = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line">    UUID uuidFromBytes = UUID.nameUUIDFromBytes(nbyte);</span><br><span class="line">    System.out.println(uuidFromBytes.toString().replaceAll(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">59f51e7ea5ca453bbfaf2c1579f09f1d</span><br><span class="line">7f49b84d0bbc38e9a493718013baace6</span><br></pre></td></tr></table></figure>
<p>虽然UUID生成方便，本地也没有网络消耗，但是使用起来有一些缺点：</p>
<ul>
<li><p><strong>不易于存储</strong>：UUID太长，16字节128位，通常以36长度的字符串表示，很多场景不适用</p>
</li>
<li><p><strong>信息不安全</strong>：基于MAC地址生成UUID的算法可能会造成MAC地址泄露，暴露使用者的位置</p>
</li>
<li><p><strong>对Mysql索引不利</strong>：如果作为数据库主键，在InnoDB引擎下，UUID的无序性可能会引起数据位置频繁变动，严重影响性能</p>
</li>
</ul>
<h2 id="3-数据库生成"><a href="#3-数据库生成" class="headerlink" title="3. 数据库生成"></a>3. 数据库生成</h2><p>由于分布式数据库的起始自增值一样所以才会有冲突的情况发生，那么我们将分布式系统中数据库的同一个业务表的自增ID设计成不一样的起始值，然后设置固定的步长，步长的值即为分库的数量或分表的数量。</p>
<p>以MySQL举例，利用给字段设置<code>auto_increment_increment</code>和<code>auto_increment_offset</code>来保证ID自增。</p>
<ul>
<li><code>auto_increment_offset</code>：表示自增长字段从哪个数开始，他的取值范围是1 .. 65535</li>
<li><code>auto_increment_increment</code>：表示自增长字段每次递增的量，其默认值是1，取值范围是1 .. 65535。</li>
</ul>
<p>假设有三台机器，则DB1中order表的起始ID值为1，DB2中order表的起始值为2，DB3中order表的起始值为3，它们自增的步长都为3，则它们的ID生成范围如下图所示：<br><img src="/global-unique-id/index/2.png"></p>
<p>通过这种方式明显的优势就是依赖于数据库自身不需要其他资源，并且ID号单调自增，可以实现一些对ID有特殊要求的业务</p>
<p>但是缺点也很明显，首先<strong>它强依赖DB</strong>，当DB异常时整个系统不可用。虽然配置主从复制可以尽可能地增加可用性，但是<strong>数据一致性在特殊情况下难以保证</strong>。主从切换时的不一致可能会导致重复发号。还有就是ID发号性能瓶颈限制在单台MySQL的读写性能</p>
<h2 id="4-基于Redis"><a href="#4-基于Redis" class="headerlink" title="4. 基于Redis"></a>4. 基于Redis</h2><p>Redis实现分布式唯一ID主要是通过<code>INCR</code>和<code>INCRBY</code> 这样的自增原子命令，由于Redis自身的单线程的特点所以能保证生成的ID可肯定是唯一有序的。</p>
<p>但是单机存在性能瓶颈，无法满足高并发的业务需求，所以可以采用集群的方式来实现。集群的方式又会涉及到和数据库集群同样的问题i，所以也需要<strong>设置分段和步长来实现</strong>。</p>
<p>为了避免长期自增后数字过大可以通过与当前时间戳组合使用，另外为了确保并发和业务多线程的问题可以采用<code>Redis + LUA</code>的方式进行编码保证安全。</p>
<p>Redis 实现分布式全局唯一ID，它的性能比较高，生成的数据是有序的，对排序业务有利，但是同样它依赖于redis，需要系统引进redis组件，增加了系统的配置复杂性。</p>
<p>当然现在Redis的使用性很普遍，所以如果其他业务已经引进了Redis集群，则可以资源利用考虑使用Redis来实现。</p>
<h2 id="5-雪花算法-Snowflake"><a href="#5-雪花算法-Snowflake" class="headerlink" title="5. 雪花算法-Snowflake"></a>5. 雪花算法-Snowflake</h2><p>Snowflake雪花算法是由Twitter开源的分布式ID生成算法，以划分命名空间的方式将64-bit位分割成多个部分，每个部分代表不同的含义。而Java中64bit的整数是Long类型，所以Java中snowFlake算法生成的ID就是long来存储的。</p>
<p>一个SnowflakesID有64位：</p>
<ul>
<li>第1位： Java中long的最高位是符号位，正数为0，负数是1，一般生成的ID都是正数，所以默认为0</li>
<li>第2-42位：时间戳，表示了自选定的时期以来的毫秒数</li>
<li>第43-52位：计算机ID，表示机器数，即2^10 = 1024台机器，防止冲突，如果我们对IDC（互联网数据中心）有需求，还可以将 10-bit 分 5-bit 给 IDC，分5-bit给工作机器</li>
<li>第53-64位：每台及其上生成ID的序列号，这允许在同一毫秒内创建多个Snowflake ID</li>
</ul>
<p>这样的划分之后相当于在一毫秒一个数据中心的一台机器上可产生4096个有序的不重复的ID。但是我们 IDC 和机器数肯定不止一个，所以毫秒内能生成的有序ID数是翻倍的。</p>
<p><img src="/global-unique-id/index/3.png"></p>
<p>Snowflake 的Twitter官方原版是用Scala写的，对Scala语言有研究的同学可以去阅读下，以下是 Java 版本的写法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jajian.demo.distribute;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Twitter_Snowflake&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的结构如下(每部分用-分开):&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 &lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 1位标识，由于long基本类型在Java中是带符号的，最高位是符号位，正数是0，负数是1，所以id一般是正数，最高位是0&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 41位时间截(毫秒级)，注意，41位时间截不是存储当前时间的时间截，而是存储时间截的差值（当前时间截 - 开始时间截)</span></span><br><span class="line"><span class="comment"> * 得到的值），这里的的开始时间截，一般是我们的id生成器开始使用的时间，由我们程序来指定的（如下下面程序IdWorker类的startTime属性）。41位的时间截，可以使用69年，年T = (1L &lt;&lt; 41) / (1000L * 60 * 60 * 24 * 365) = 69&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 10位的数据机器位，可以部署在1024个节点，包括5位datacenterId和5位workerId&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 12位序列，毫秒内的计数，12位的计数顺序号支持每个节点每毫秒(同一机器，同一时间截)产生4096个ID序号&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * 加起来刚好64位，为一个Long型。&lt;br&gt;</span></span><br><span class="line"><span class="comment"> * SnowFlake的优点是，整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞(由数据中心ID和机器ID作区分)，并且效率较高，经测试，SnowFlake每秒能够产生26万ID左右。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowflakeDistributeId</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Fields===========================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间截 (2015-01-01)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> twepoch = <span class="number">1420041600000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器id所占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据标识id所占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterIdBits = <span class="number">5L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的最大数据标识id，结果是31</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxDatacenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列在id中占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器ID向左移12位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据标识id向左移17位(12+5)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间截向左移22位(5+5+12)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作机器ID(0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据中心ID(0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 毫秒内序列(0~4095)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//==============================Constructors=====================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workerId     工作ID (0~31)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datacenterId 数据中心ID (0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowflakeDistributeId</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> datacenterId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ==============================Methods==========================================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SnowflakeId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    String.format(<span class="string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="comment">//毫秒内序列溢出</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//时间戳改变，毫秒内序列重置</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//上次生成ID的时间截</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="comment">//</span></span><br><span class="line">                | (datacenterId &lt;&lt; datacenterIdShift) <span class="comment">//</span></span><br><span class="line">                | (workerId &lt;&lt; workerIdShift) <span class="comment">//</span></span><br><span class="line">                | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间(毫秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SnowflakeDistributeId idWorker = <span class="keyword">new</span> SnowflakeDistributeId(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">long</span> id = idWorker.nextId();</span><br><span class="line"><span class="comment">//      System.out.println(Long.toBinaryString(id));</span></span><br><span class="line">        System.out.println(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>雪花算法提供了一个很好的设计思想，雪花算法生成的ID是趋势递增，不依赖数据库等第三方系统，以服务的方式部署，稳定性更高，生成ID的性能也是非常高的，而且可以根据自身业务特性分配bit位，非常灵活。</strong></p>
<p>但是雪花算法<strong>强依赖机器时钟</strong>，如果机器上时钟回拨，会导致发号重复或者服务会处于不可用状态。如果恰巧回退前生成过一些ID，而时间回退后，生成的ID就有可能重复。官方对于此并没有给出解决方案，而是简单的抛错处理，这样会造成在时间被追回之前的这段时间服务不可用。</p>
<h2 id="6-百度-UidGenerator"><a href="#6-百度-UidGenerator" class="headerlink" title="6. 百度-UidGenerator"></a>6. 百度-UidGenerator</h2><blockquote>
<p>百度的 <code>UidGenerator</code> 是百度开源基于Java语言实现的唯一ID生成器，是在雪花算法 snowflake 的基础上做了一些改进。UidGenerator以组件形式工作在应用项目中, 支持自定义workerId位数和初始化策略，适用于docker等虚拟化环境下实例自动重启、漂移等场景。</p>
</blockquote>
<p>在实现上，UidGenerator提供了两种生成唯一ID方式，分别是<code>DefaultUidGenerator</code>和<code>CachedUidGenerator</code>，官方建议如果有性能考虑的话使用<code>CacheUidGeneraotr</code>方式实现。</p>
<p><code>UidGenerator</code>依赖是以划分命名空间的方式将64bit位分割成多个部分，只不过它的默认划分方式有别于雪花算法Snowflake。它默认是由<code>1-28-22-13</code>的格式进行划分的，可以根据不同的业务自己调整各个字段占用的位数。</p>
<ul>
<li><p>第1位仍然占用1bit，其值始终是0。</p>
</li>
<li><p>第2开始的28位是时间戳，可以表示2^28个数，这里不再是以毫秒而是以秒作为单位。</p>
</li>
<li><p>第29开始的22位是workId（数据中心+工作机器，可以是其他组成方式），可表示 2^22 = 4194304个工作ID。</p>
</li>
<li><p>最后13bit构成自增序列</p>
</li>
</ul>
<p><img src="/global-unique-id/index/4.png" alt="百度UidGenerator"></p>
<p>其中 workId（机器 id），最多可支持约420w次机器启动。<strong>内置实现为在启动时由数据库分配（表名为 WORKER_NODE），默认分配策略为用后即弃，后续可提供复用策略。</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">ROP <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> WORKER_NODE;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> WORKER_NODE(</span><br><span class="line">    ID <span class="type">BIGINT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;auto increment id&#x27;</span>,</span><br><span class="line">    HOST_NAME <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;host name&#x27;</span>,</span><br><span class="line">    PORT <span class="type">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;port&#x27;</span>,</span><br><span class="line">    TYPE <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;node type: ACTUAL or CONTAINER&#x27;</span>,</span><br><span class="line">    LAUNCH_DATE <span class="type">DATE</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;launch date&#x27;</span>,</span><br><span class="line">    MODIFIED <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;modified time&#x27;</span>,</span><br><span class="line">    CREATED <span class="type">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;created time&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY(ID)</span><br><span class="line">) COMMENT<span class="operator">=</span><span class="string">&#x27;DB WorkerID Assigner for UID Generator&#x27;</span>,ENGINE <span class="operator">=</span> INNODB;</span><br></pre></td></tr></table></figure>

<h3 id="6-1-DefaultUidGenerator实现"><a href="#6-1-DefaultUidGenerator实现" class="headerlink" title="6.1 DefaultUidGenerator实现"></a>6.1 DefaultUidGenerator实现</h3><p><code>DefaultUidGenerator</code>就是正常的根据时间戳和机器位还有序列号的生成方式，和雪花算法很相似，对于时钟回拨也只是抛异常处理，仅有一些不同，如以秒位单位而不再是毫秒，且支持Docker等虚拟化环境。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> currentSecond = getCurrentSecond();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Clock moved backwards, refuse to generate uid</span></span><br><span class="line">    <span class="keyword">if</span> (currentSecond &lt; lastSecond) &#123;</span><br><span class="line">        <span class="keyword">long</span> refusedSeconds = lastSecond - currentSecond;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UidGenerateException(<span class="string">&quot;Clock moved backwards. Refusing for %d seconds&quot;</span>, refusedSeconds);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// At the same second, increase sequence</span></span><br><span class="line">    <span class="keyword">if</span> (currentSecond == lastSecond) &#123;</span><br><span class="line">        sequence = (sequence + <span class="number">1</span>) &amp; bitsAllocator.getMaxSequence();</span><br><span class="line">        <span class="comment">// Exceed the max sequence, we wait the next second to generate uid</span></span><br><span class="line">        <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">            currentSecond = getNextSecond(lastSecond);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// At the different second, sequence restart from zero</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sequence = <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lastSecond = currentSecond;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Allocate bits for UID</span></span><br><span class="line">    <span class="keyword">return</span> bitsAllocator.allocate(currentSecond - epochSeconds, workerId, sequence);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你要使用 DefaultUidGenerator 的实现方式的话，以上划分的占用位数可通过 spring 进行参数配置。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;defaultUidGenerator&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.baidu.fsg.uid.impl.DefaultUidGenerator&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;workerIdAssigner&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;disposableWorkerIdAssigner&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Specified bits &amp; epoch as your demand. No specified the default value will be used --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;timeBits&quot;</span> <span class="attr">value</span>=<span class="string">&quot;29&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;workerBits&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;seqBits&quot;</span> <span class="attr">value</span>=<span class="string">&quot;13&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;epochStr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2016-09-20&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="6-2-CachedUidGenerator实现"><a href="#6-2-CachedUidGenerator实现" class="headerlink" title="6.2 CachedUidGenerator实现"></a>6.2 CachedUidGenerator实现</h3><p>官方建议的性能较高的 <code>CachedUidGenerator</code> 生成方式，是使用 <code>RingBuffer</code> 缓存生成的id。数组每个元素成为一个slot。RingBuffer容量，默认为Snowflake算法中sequence最大值（2^13 = 8192）。可通过 boostPower 配置进行扩容，以提高 RingBuffer 读写吞吐量。Tail指针、Cursor指针用于环形数组上读写slot</p>
<ul>
<li><p>Tail指针 表示Producer生产的最大序号(此序号从0开始，持续递增)。Tail不能超过Cursor，即生产者不能覆盖未消费的slot。当Tail已赶上curosr，此时可通过rejectedPutBufferHandler指定PutRejectPolicy</p>
</li>
<li><p>Cursor指针 表示Consumer消费到的最小序号(序号序列与Producer序列相同)。Cursor不能超过Tail，即不能消费未生产的slot。当Cursor已赶上tail，此时可通过rejectedTakeBufferHandler指定TakeRejectPolicy</p>
</li>
</ul>
<p><img src="/global-unique-id/index/5.png" alt="百度UidGenerator"></p>
<p>CachedUidGenerator采用了双RingBuffer，Uid-RingBuffer用于存储Uid、Flag-RingBuffer用于存储Uid状态(是否可填充、是否可消费)。</p>
<p>由于数组元素在内存中是连续分配的，可最大程度利用CPU cache以提升性能。但同时会带来「伪共享」FalseSharing问题，为此在Tail、Cursor指针、Flag-RingBuffer中采用了CacheLine 补齐方式。</p>
<p>RingBuffer填充时机</p>
<ul>
<li><strong>初始化预填充:</strong> RingBuffer初始化时，预先填充满整个RingBuffer。</li>
<li><strong>即时填充:</strong> Take消费时，即时检查剩余可用slot量(tail - cursor)，如小于设定阈值，则补全空闲slots。阈值可通过paddingFactor来进行配置，请参考Quick Start中CachedUidGenerator配置。</li>
<li><strong>周期填充:</strong> 通过Schedule线程，定时补全空闲slots。可通过scheduleInterval配置，以应用定时填充功能，并指定Schedule时间间隔。#</li>
</ul>
<h2 id="7-美团Leaf"><a href="#7-美团Leaf" class="headerlink" title="7. 美团Leaf"></a>7. 美团Leaf</h2><blockquote>
<p>Leaf是美团基础研发平台推出的一个分布式ID生成服务，名字取自德国哲学家、数学家莱布尼茨的著名的一句话：“There are no two identical leaves in the world”，世间不可能存在两片相同的叶子。</p>
</blockquote>
<p>Leaf 也提供了两种ID生成的方式，分别是 <code>Leaf-segment</code> 数据库方案和 <code>Leaf-snowflake</code> 方案。</p>
<h3 id="7-1-Leaf-segment-数据库方案"><a href="#7-1-Leaf-segment-数据库方案" class="headerlink" title="7.1 Leaf-segment 数据库方案"></a>7.1 Leaf-segment 数据库方案</h3><p>Leaf-segment 数据库方案，是在上文描述的在使用数据库的方案上，做了如下改变：</p>
<ul>
<li><p>原方案每次获取ID都得读写一次数据库，造成数据库压力大。改为利用<code>proxy server</code>批量获取，每次获取一个segment(step决定大小)号段的值。用完之后再去数据库获取新的号段，可以大大的减轻数据库的压力。</p>
</li>
<li><p>各个业务不同的发号需求用 <code>biz_tag</code>字段来区分，每个<code>biz-tag</code>的ID获取相互隔离，互不影响。如果以后有性能需求需要对数据库扩容，不需要上述描述的复杂的扩容操作，只需要对biz_tag分库分表就行。</p>
</li>
</ul>
<p>数据库表设计如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `leaf_alloc` (</span><br><span class="line">  `biz_tag` <span class="type">varchar</span>(<span class="number">128</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;业务key&#x27;</span>,</span><br><span class="line">  `max_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;当前已经分配了的最大id&#x27;</span>,</span><br><span class="line">  `step` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;初始步长，也是动态调整的最小步长&#x27;</span>,</span><br><span class="line">  `description` <span class="type">varchar</span>(<span class="number">256</span>)  <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;业务key的描述&#x27;</span>,</span><br><span class="line">  `update_time` <span class="type">timestamp</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> UPDATE <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`biz_tag`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB;</span><br></pre></td></tr></table></figure>
<p>原来获取ID每次都需要写数据库，现在只需要把step设置得足够大，比如1000。那么只有当1000个号被消耗完了之后才会去重新读写一次数据库。读写数据库的频率从1减小到了1/step，大致架构如下图所示：<br><img src="/global-unique-id/index/7.png"></p>
<p>同时Leaf-segment 为了解决 TP999（满足千分之九百九十九的网络请求所需要的最低耗时）数据波动大，当号段使用完之后还是会hang在更新数据库的I/O上，TP999 数据会出现偶尔的尖刺的问题，提供了双buffer优化。简单的说就是，Leaf 取号段的时机是在号段消耗完的时候进行的，也就意味着号段临界点的ID下发时间取决于下一次从DB取回号段的时间，并且在这期间进来的请求也会因为DB号段没有取回来，导致线程阻塞。如果请求DB的网络和DB的性能稳定，这种情况对系统的影响是不大的，但是假如取DB的时候网络发生抖动，或者DB发生慢查询就会导致整个系统的响应时间变慢。为了DB取号段的过程能够做到无阻塞，不需要在DB取号段的时候阻塞请求线程，即当号段消费到某个点时就异步的把下一个号段加载到内存中，而不需要等到号段用尽的时候才去更新号段。这样做就可以很大程度上的降低系统的 TP999 指标。详细实现如下图所示：</p>
<p>采用双buffer的方式，Leaf服务内部有两个号段缓存区segment。当前号段已下发10%时，如果下一个号段未更新，则另启一个更新线程去更新下一个号段。当前号段全部下发完后，如果下个号段准备好了则切换到下个号段为当前segment接着下发，循环往复。</p>
<ul>
<li><p>每个biz-tag都有消费速度监控，通常推荐segment长度设置为服务高峰期发号QPS的600倍（10分钟），这样即使DB宕机，Leaf仍能持续发号10-20分钟不受影响。</p>
</li>
<li><p>每次请求来临时都会判断下个号段的状态，从而更新此号段，所以偶尔的网络抖动不会影响下个号段的更新。</p>
</li>
</ul>
<p>对于这种方案依然存在一些问题，它仍然依赖 DB的稳定性，需要采用主从备份的方式提高 DB的可用性，还有 Leaf-segment方案生成的ID是趋势递增的，这样ID号是可被计算的，例如订单ID生成场景，通过订单id号相减就能大致计算出公司一天的订单量，这个是不能忍受的</p>
<h3 id="7-2-Leaf-snowflake方案"><a href="#7-2-Leaf-snowflake方案" class="headerlink" title="7.2 Leaf-snowflake方案"></a>7.2 Leaf-snowflake方案</h3><p>Leaf-snowflake方案完全沿用 snowflake 方案的bit位设计，对于workerID的分配引入了Zookeeper持久顺序节点的特性自动对snowflake节点配置 wokerID。避免了服务规模较大时，动手配置成本太高的问题。</p>
<p>Leaf-snowflake是按照下面几个步骤启动的：</p>
<ul>
<li><p>启动Leaf-snowflake服务，连接Zookeeper，在leaf_forever父节点下检查自己是否已经注册过（是否有该顺序子节点）。</p>
</li>
<li><p>如果有注册过直接取回自己的workerID（zk顺序节点生成的int类型ID号），启动服务。</p>
</li>
<li><p>如果没有注册过，就在该父节点下面创建一个持久顺序节点，创建成功后取回顺序号当做自己的workerID号，启动服务。</p>
</li>
</ul>
<p>为了减少对 Zookeeper的依赖性，会在本机文件系统上缓存一个workerID文件。当ZooKeeper出现问题，恰好机器出现问题需要重启时，能保证服务能够正常启动。</p>
<p>上文阐述过在类 snowflake算法上都存在时钟回拨的问题，Leaf-snowflake在解决时钟回拨的问题上是通过校验自身系统时间与 leaf_forever/${self}节点记录时间做比较然后启动报警的措施。</p>
<p>美团官方建议是由于强依赖时钟，对时间的要求比较敏感，在机器工作时NTP同步也会造成秒级别的回退，建议可以直接关闭NTP同步。要么在时钟回拨的时候直接不提供服务直接返回ERROR_CODE，等时钟追上即可。或者做一层重试，然后上报报警系统，更或者是发现有时钟回拨之后自动摘除本身节点并报警。</p>
<p>在性能上官方提供的数据目前 Leaf 的性能在4C8G 的机器上QPS能压测到近5w/s，TP999 1ms</p>
<h2 id="8-Mist薄雾算法"><a href="#8-Mist薄雾算法" class="headerlink" title="8. Mist薄雾算法"></a>8. Mist薄雾算法</h2>]]></content>
      <categories>
        <category>05 分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java SPI机制详解</title>
    <url>/spi/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h2 id="1-什么是SPI机制"><a href="#1-什么是SPI机制" class="headerlink" title="1. 什么是SPI机制"></a>1. 什么是SPI机制</h2><blockquote>
<p>SPI（Service Provider Interface），是JDK内置的一种服务提供发现机制，可以用来启动框架扩展和和替换组建</p>
</blockquote>
<p>比如<code>java.sql.Driver</code>接口，其他不同厂商够可以针对统一接口做出不同的实现，<code>Mysql</code>和<code>PostgreSQL</code>都有不同的实现提供给用户，而Java的SPI机制可以为某个接口寻找服务发现。</p>
<p>Java中SPI机制的主要是想是将装配的控制权移到程序之外，在模块化设计中这个机制尤其重要，其核心思想就是：<strong>解耦</strong></p>
<p>SPI 整体机制图如下：<br><img src="/spi/index/1.png"></p>
<p>当服务的提供者提供一种接口的实现之后，需要在<code>classpath</code>下的<code>META-INF/services/</code>目录里创建和一个以服务接口命名的文件，这个文件里的内容就是这个接口的实现类。当前他的程序需要这个服务时，就可以通过查找这个jar包（一般都是以jar包做依赖）的<br><code>META-INF/servies</code>中的配置文件，配置文件中有这个接口的具体实现类名，可以根据这个类名进行加载实例化，就可以使用该服务了，JDK查找服务的实现工具类时：<code>java.util.ServiceLoader</code>。</p>
<h2 id="2-SPI机制的简单示例"><a href="#2-SPI机制的简单示例" class="headerlink" title="2. SPI机制的简单示例"></a>2. SPI机制的简单示例</h2><p>先定一个内容搜索接口，搜索的实现可能时基于文件系统的搜索，也可能是基于数据库的搜索</p>
<ol>
<li><p>定义接口</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Search</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;String&gt; <span class="title">searchDoc</span><span class="params">(String keyword)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>文件搜索实现</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileSearch</span> <span class="keyword">implements</span> <span class="title">Search</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">searchDoc</span><span class="params">(String keyword)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;文件搜索&quot;</span>+keyword);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>数据库搜索实现</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DatabaseSearch</span> <span class="keyword">implements</span> <span class="title">Search</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">searchDoc</span><span class="params">(String keyword)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据库搜索&quot;</span>+keyword);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>配置<code>META-INF/services</code></p>
<blockquote>
<p>在resources下新建 META-INF/services目录，然后新建接口全限定名的文件<code>com.ygb.Search</code>，里面添加需要用到的实现类</p>
</blockquote>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.ygb.FileSearch</span><br><span class="line">com.ygb.DatabaseSearch</span><br></pre></td></tr></table></figure>

<p> <img src="/spi/index/2.png"></p>
</li>
<li><p>测试</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSPI</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ServiceLoader&lt;Search&gt; service = ServiceLoader.load(Search.class);</span><br><span class="line">        Iterator&lt;Search&gt; iterator = service.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            Search search = iterator.next();</span><br><span class="line">            search.searchDoc(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在services目录下配置了两个实现类，那么会输出：</span></span><br><span class="line"><span class="comment">// 文件搜索hello world</span></span><br><span class="line"><span class="comment">// 数据库搜索hello world</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>总结</p>
<p> <code>ServiceLoader.load(Search.class)</code>在加载某接口时，会去<code>META-INF/services</code>下查找接口的全限定名文件，再根据里面的内容加载相应的实现类。</p>
<p> 这就是SPI思想，接口的实现由provider实现，provider只用在提交的jar包里面的<code>META-INF/services</code>下根据平台定义的接口新建文件，并添加相应的实现内容就可以。</p>
</li>
</ol>
<h2 id="3-SPI机制的应用"><a href="#3-SPI机制的应用" class="headerlink" title="3. SPI机制的应用"></a>3. SPI机制的应用</h2><h3 id="3-1-JDBC-DriverManger"><a href="#3-1-JDBC-DriverManger" class="headerlink" title="3.1. JDBC DriverManger"></a>3.1. JDBC DriverManger</h3><blockquote>
<p>JDBC4.0之前，我们开发连接数据库的时候，通常会用Class.forName(“com.mysql.jdbc.Driver”)这句先加载数据库驱动，然后在获取数据库连接等操作。</p>
<p>JDBC4.0之后，直接获取连接即可，不需要采用Class.forName这种方式。</p>
</blockquote>
<h4 id="3-1-1-JDBC接口定义"><a href="#3-1-1-JDBC接口定义" class="headerlink" title="3.1.1. JDBC接口定义"></a>3.1.1. JDBC接口定义</h4><p>首先在Java中定义了接口<code>java.sql.Driver</code>，并没有具体的实现，具体的都是根据不同的厂商来提供的</p>
<h4 id="3-1-2-Mysql实现"><a href="#3-1-2-Mysql实现" class="headerlink" title="3.1.2. Mysql实现"></a>3.1.2. Mysql实现</h4><p>在mysql的jar包<code>mysql-connector-java-6.0.6.jar</code>中，可以找到<code>META-INF/services</code>目录，该目录下会有一个名字为java.sql.Driver的文件，文件内容是com.mysql.cj.jdbc.Driver，这里面的内容就是针对Java中定义的接口的实现。#</p>
<h4 id="3-1-3-Postgresql实现"><a href="#3-1-3-Postgresql实现" class="headerlink" title="3.1.3. Postgresql实现"></a>3.1.3. Postgresql实现</h4><p>同样在<code>postgresql</code>的jar包<code>postgresql-42.0.0.jar</code>中，也可以找到同样的配置文件，文件内容是<code>org.postgresql.Driver</code>，这是<code>postgresql</code>对Java的java.sql.Driver的实现。</p>
<h4 id="3-1-4-使用方法"><a href="#3-1-4-使用方法" class="headerlink" title="3.1.4. 使用方法"></a>3.1.4. 使用方法</h4><p>上面说了，现在使用SPI扩展来加载具体的驱动，我们在使用数据库连接代码时，不需要再使用<code>Class.forName()</code>来加载驱动来，而是使用以下嗲吗</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String url = <span class="string">&quot;jdbc:mysq://192.168.0.1:3306/db&quot;</span>;</span><br><span class="line">Connection conn = DriverManger.getConnnection(url, username,password);</span><br></pre></td></tr></table></figure>
<p>这里并没有涉及到SPI的实现，接着看下面的解析。</p>
<h4 id="3-1-5-源码实现"><a href="#3-1-5-源码实现" class="headerlink" title="3.1.5. 源码实现"></a>3.1.5. 源码实现</h4><p>上面的代码没有来加载驱动的代码，怎么去确定使用那个数据库连接的驱动呢？这里就涉及到Java的SPI扩展机制来查找相关驱动的东西来，<br>关于驱动的查找其实都在<code>DriverManager</code>中，在<code>DriverManager</code>有一个静态代码块如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Load the initial JDBC drivers by checking the System property</span></span><br><span class="line"><span class="comment">* jdbc.properties and then use the &#123;<span class="doctag">@code</span> ServiceLoader&#125; mechanism</span></span><br><span class="line"><span class="comment">* 通过检查System属性jdbc.properties和然后使用&#123;<span class="doctag">@code</span> ServiceLoader&#125;机制来加载初始JDBC驱动程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    loadInitialDrivers();</span><br><span class="line">    println(<span class="string">&quot;JDBC DriverManager initialized&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到是加载实例化驱动的，接着看loadInitialDrivers方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadInitialDrivers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String drivers;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            drivers = AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;String&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> System.getProperty(<span class="string">&quot;jdbc.drivers&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            drivers = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//使用SPI的ServiceLoader来加载接口的实现</span></span><br><span class="line">                <span class="comment">//这里没有去META-INF/services目录下查找配置文件，也没有加载具体实现类，做的事情就是封装了我们的接口类型和类加载器，并初始化了一个迭代器</span></span><br><span class="line">                ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);</span><br><span class="line">                <span class="comment">//获取迭代器</span></span><br><span class="line">                Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    <span class="comment">//遍历所有的驱动实现</span></span><br><span class="line">                    <span class="comment">//搜索classpath下以及jar包中所有的META-INF/services目录下的java.sql.Driver文件，并找到文件中的实现类的名字，此时并没有实例化具体的实现类</span></span><br><span class="line">                    <span class="keyword">while</span>(driversIterator.hasNext()) &#123;</span><br><span class="line">                        <span class="comment">//这里会根据驱动名字具体实例化各个实现类</span></span><br><span class="line">                        driversIterator.next();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span>(Throwable t) &#123;</span><br><span class="line">                <span class="comment">// Do nothing</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        println(<span class="string">&quot;DriverManager.initialize: jdbc.drivers = &quot;</span> + drivers);</span><br><span class="line">        <span class="keyword">if</span> (drivers == <span class="keyword">null</span> || drivers.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] driversList = drivers.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        println(<span class="string">&quot;number of Drivers:&quot;</span> + driversList.length);</span><br><span class="line">        <span class="keyword">for</span> (String aDriver : driversList) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                println(<span class="string">&quot;DriverManager.Initialize: loading &quot;</span> + aDriver);</span><br><span class="line">                Class.forName(aDriver, <span class="keyword">true</span>,</span><br><span class="line">                        ClassLoader.getSystemClassLoader());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                println(<span class="string">&quot;DriverManager.Initialize: load failed: &quot;</span> + ex);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码主要步骤时：</p>
<ol>
<li><p>从系统变量中获取有关驱动的定义</p>
</li>
<li><p>使用SPI来获取驱动的实现</p>
</li>
<li><p>便利使用SPI获取到的具体实现，实例话各个实现类</p>
</li>
<li><p>根据第一步获取到的驱动列表来实例话具体实现类</p>
</li>
</ol>
<h3 id="3-2-Common-Logging"><a href="#3-2-Common-Logging" class="headerlink" title="3.2. Common-Logging"></a>3.2. Common-Logging</h3><blockquote>
<p>common-logging(Jakarta Commons Logging,缩写JCL)是常用的日志库门面，可以看下它是怎么解耦的</p>
</blockquote>
<p>首先，日志示例是通过<code>LogFactory</code>的<code>getLog(String)</code>方法创建的</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//private Log log =  LogFactory.getLog(TestSPI.class);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Log <span class="title">getLog</span><span class="params">(Class clazz)</span> <span class="keyword">throws</span> LogConfigurationException </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> getFactory().getInstance(clazz);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LogFactory是一个抽象类，它负责加载具体的日志实现，分析其Factory getFactory()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LogFactory <span class="title">getFactory</span><span class="params">()</span> <span class="keyword">throws</span> LogConfigurationException </span>&#123;</span><br><span class="line">        <span class="comment">// Identify the class loader we will be using</span></span><br><span class="line">        ClassLoader contextClassLoader = getContextClassLoaderInternal();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (contextClassLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// This is an odd enough situation to report about. This</span></span><br><span class="line">            <span class="comment">// output will be a nuisance on JDK1.1, as the system</span></span><br><span class="line">            <span class="comment">// classloader is null in that environment.</span></span><br><span class="line">            <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">                logDiagnostic(<span class="string">&quot;Context classloader is null.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Return any previously registered factory for this class loader</span></span><br><span class="line">        LogFactory factory = getCachedFactory(contextClassLoader);</span><br><span class="line">        <span class="keyword">if</span> (factory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> factory;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">            logDiagnostic(</span><br><span class="line">                    <span class="string">&quot;[LOOKUP] LogFactory implementation requested for the first time for context classloader &quot;</span> +</span><br><span class="line">                    objectId(contextClassLoader));</span><br><span class="line">            logHierarchy(<span class="string">&quot;[LOOKUP] &quot;</span>, contextClassLoader);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// classpath根目录下寻找commons-logging.properties</span></span><br><span class="line">        Properties props = getConfigurationFile(contextClassLoader, FACTORY_PROPERTIES);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Determine whether we will be using the thread context class loader to</span></span><br><span class="line">        <span class="comment">// load logging classes or not by checking the loaded properties file (if any).</span></span><br><span class="line">        <span class="comment">// classpath根目录下commons-logging.properties是否配置use_tccl</span></span><br><span class="line">        ClassLoader baseClassLoader = contextClassLoader;</span><br><span class="line">        <span class="keyword">if</span> (props != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String useTCCLStr = props.getProperty(TCCL_KEY);</span><br><span class="line">            <span class="keyword">if</span> (useTCCLStr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (Boolean.valueOf(useTCCLStr).booleanValue() == <span class="keyword">false</span>) &#123;</span><br><span class="line">                    baseClassLoader = thisClassLoader;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里真正开始决定使用哪个factory</span></span><br><span class="line">        <span class="comment">// 首先，尝试查找vm系统属性org.apache.commons.logging.LogFactory，其是否指定factory</span></span><br><span class="line">        <span class="comment">// Determine which concrete LogFactory subclass to use.</span></span><br><span class="line">        <span class="comment">// First, try a global system property</span></span><br><span class="line">        <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">            logDiagnostic(<span class="string">&quot;[LOOKUP] Looking for system property [&quot;</span> + FACTORY_PROPERTY +</span><br><span class="line">                          <span class="string">&quot;] to define the LogFactory subclass to use...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String factoryClass = getSystemProperty(FACTORY_PROPERTY, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">if</span> (factoryClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">                    logDiagnostic(<span class="string">&quot;[LOOKUP] Creating an instance of LogFactory class &#x27;&quot;</span> + factoryClass +</span><br><span class="line">                                  <span class="string">&quot;&#x27; as specified by system property &quot;</span> + FACTORY_PROPERTY);</span><br><span class="line">                &#125;</span><br><span class="line">                factory = newFactory(factoryClass, baseClassLoader, contextClassLoader);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">                    logDiagnostic(<span class="string">&quot;[LOOKUP] No system property [&quot;</span> + FACTORY_PROPERTY + <span class="string">&quot;] defined.&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">                logDiagnostic(<span class="string">&quot;[LOOKUP] A security exception occurred while trying to create an&quot;</span> +</span><br><span class="line">                              <span class="string">&quot; instance of the custom factory class&quot;</span> + <span class="string">&quot;: [&quot;</span> + trim(e.getMessage()) +</span><br><span class="line">                              <span class="string">&quot;]. Trying alternative implementations...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// ignore</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">                logDiagnostic(<span class="string">&quot;[LOOKUP] An exception occurred while trying to create an&quot;</span> +</span><br><span class="line">                              <span class="string">&quot; instance of the custom factory class&quot;</span> + <span class="string">&quot;: [&quot;</span> +</span><br><span class="line">                              trim(e.getMessage()) +</span><br><span class="line">                              <span class="string">&quot;] as specified by a system property.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 第二，尝试使用java spi服务发现机制，载META-INF/services下寻找org.apache.commons.logging.LogFactory实现</span></span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">                logDiagnostic(<span class="string">&quot;[LOOKUP] Looking for a resource file of name [&quot;</span> + SERVICE_ID +</span><br><span class="line">                              <span class="string">&quot;] to define the LogFactory subclass to use...&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// META-INF/services/org.apache.commons.logging.LogFactory, SERVICE_ID</span></span><br><span class="line">                <span class="keyword">final</span> InputStream is = getResourceAsStream(contextClassLoader, SERVICE_ID);</span><br><span class="line">                <span class="keyword">if</span>( is != <span class="keyword">null</span> ) &#123;</span><br><span class="line">     </span><br><span class="line">                    BufferedReader rd;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        rd = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (java.io.UnsupportedEncodingException e) &#123;</span><br><span class="line">                        rd = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(is));</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    String factoryClassName = rd.readLine();</span><br><span class="line">                    rd.close();</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (factoryClassName != <span class="keyword">null</span> &amp;&amp; ! <span class="string">&quot;&quot;</span>.equals(factoryClassName)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">                            logDiagnostic(<span class="string">&quot;[LOOKUP]  Creating an instance of LogFactory class &quot;</span> +</span><br><span class="line">                                          factoryClassName +</span><br><span class="line">                                          <span class="string">&quot; as specified by file &#x27;&quot;</span> + SERVICE_ID +</span><br><span class="line">                                          <span class="string">&quot;&#x27; which was present in the path of the context classloader.&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                        factory = newFactory(factoryClassName, baseClassLoader, contextClassLoader );</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// is == null</span></span><br><span class="line">                    <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">                        logDiagnostic(<span class="string">&quot;[LOOKUP] No resource file with name &#x27;&quot;</span> + SERVICE_ID + <span class="string">&quot;&#x27; found.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">                    logDiagnostic(</span><br><span class="line">                        <span class="string">&quot;[LOOKUP] A security exception occurred while trying to create an&quot;</span> +</span><br><span class="line">                        <span class="string">&quot; instance of the custom factory class&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;: [&quot;</span> + trim(ex.getMessage()) +</span><br><span class="line">                        <span class="string">&quot;]. Trying alternative implementations...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// ignore</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Third try looking into the properties file read earlier (if found)</span></span><br><span class="line">       <span class="comment">// 第三，尝试从classpath根目录下的commons-logging.properties中查找org.apache.commons.logging.LogFactory属性指定的factory</span></span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (props != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">                    logDiagnostic(</span><br><span class="line">                        <span class="string">&quot;[LOOKUP] Looking in properties file for entry with key &#x27;&quot;</span> + FACTORY_PROPERTY +</span><br><span class="line">                        <span class="string">&quot;&#x27; to define the LogFactory subclass to use...&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                String factoryClass = props.getProperty(FACTORY_PROPERTY);</span><br><span class="line">                <span class="keyword">if</span> (factoryClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">                        logDiagnostic(</span><br><span class="line">                            <span class="string">&quot;[LOOKUP] Properties file specifies LogFactory subclass &#x27;&quot;</span> + factoryClass + <span class="string">&quot;&#x27;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    factory = newFactory(factoryClass, baseClassLoader, contextClassLoader);</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// <span class="doctag">TODO:</span> think about whether we need to handle exceptions from newFactory</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">                        logDiagnostic(<span class="string">&quot;[LOOKUP] Properties file has no entry specifying LogFactory subclass.&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">                    logDiagnostic(<span class="string">&quot;[LOOKUP] No properties file available to determine&quot;</span> + <span class="string">&quot; LogFactory subclass from..&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Fourth, try the fallback implementation class</span></span><br><span class="line">        <span class="comment">// 最后，使用后备factory实现，org.apache.commons.logging.impl.LogFactoryImpl</span></span><br><span class="line">        <span class="keyword">if</span> (factory == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isDiagnosticsEnabled()) &#123;</span><br><span class="line">                logDiagnostic(</span><br><span class="line">                    <span class="string">&quot;[LOOKUP] Loading the default LogFactory implementation &#x27;&quot;</span> + FACTORY_DEFAULT +</span><br><span class="line">                    <span class="string">&quot;&#x27; via the same classloader that loaded this LogFactory&quot;</span> +</span><br><span class="line">                    <span class="string">&quot; class (ie not looking in the context classloader).&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            factory = newFactory(FACTORY_DEFAULT, thisClassLoader, contextClassLoader);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (factory != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * Always cache using context class loader.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            cacheFactory(contextClassLoader, factory);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (props != <span class="keyword">null</span>) &#123;</span><br><span class="line">                Enumeration names = props.propertyNames();</span><br><span class="line">                <span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">                    String name = (String) names.nextElement();</span><br><span class="line">                    String value = props.getProperty(name);</span><br><span class="line">                    factory.setAttribute(name, value);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>可以看出，抽象类LogFactory加载具体实现的步骤如下：</p>
<ul>
<li>从vm系统属性org.apache.commons.logging.LogFactory</li>
<li>使用SPI服务发现机制，发现org.apache.commons.logging.LogFactory的实现</li>
<li>查找classpath根目录commons-logging.properties的org.apache.commons.logging.LogFactory属性是否指定factory实现</li>
<li>使用默认factory实现，org.apache.commons.logging.impl.LogFactoryImpl</li>
</ul>
<blockquote>
<p>LogFactory的getLog()方法返回类型是org.apache.commons.logging.Log接口，提供了从trace到fatal方法。可以确定，如果日志实现提供者只要实现该接口，并且使用继承自org.apache.commons.logging.LogFactory的子类创建Log，必然可以构建一个松耦合的日志系统。</p>
</blockquote>
<h3 id="3-3-Spring中的SPI机制"><a href="#3-3-Spring中的SPI机制" class="headerlink" title="3.3. Spring中的SPI机制"></a>3.3. Spring中的SPI机制</h3><p>在springboot的自动装配过程中，最终会加载<code>META-INF/spring.factories</code>文件，而加载的过程是由<code>SpringFactoriesLoader</code>加载的。从<code>CLASSPATH</code>下的每个Jar包中搜寻所有<code>META-INF/spring.factories</code>配置文件，然后将解析properties文件，找到指定名称的配置后返回。需要注意的是，其实这里不仅仅是会去ClassPath路径下查找，会扫描所有路径下的Jar包，只不过这个文件只会在Classpath下的jar包中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FACTORIES_RESOURCE_LOCATION = <span class="string">&quot;META-INF/spring.factories&quot;</span>;</span><br><span class="line"><span class="comment">// spring.factories文件的格式为：key=value1,value2,value3</span></span><br><span class="line"><span class="comment">// 从所有的jar包中找到META-INF/spring.factories文件</span></span><br><span class="line"><span class="comment">// 然后从文件中解析出key=factoryClass类名称的所有value值</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">loadFactoryNames</span><span class="params">(Class&lt;?&gt; factoryClass, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    String factoryClassName = factoryClass.getName();</span><br><span class="line">    <span class="comment">// 取得资源文件的URL</span></span><br><span class="line">    Enumeration&lt;URL&gt; urls = (classLoader != <span class="keyword">null</span> ? classLoader.getResources(FACTORIES_RESOURCE_LOCATION) : ClassLoader.getSystemResources(FACTORIES_RESOURCE_LOCATION));</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="comment">// 遍历所有的URL</span></span><br><span class="line">    <span class="keyword">while</span> (urls.hasMoreElements()) &#123;</span><br><span class="line">        URL url = urls.nextElement();</span><br><span class="line">        <span class="comment">// 根据资源文件URL解析properties文件，得到对应的一组@Configuration类</span></span><br><span class="line">        Properties properties = PropertiesLoaderUtils.loadProperties(<span class="keyword">new</span> UrlResource(url));</span><br><span class="line">        String factoryClassNames = properties.getProperty(factoryClassName);</span><br><span class="line">        <span class="comment">// 组装数据，并返回</span></span><br><span class="line">        result.addAll(Arrays.asList(StringUtils.commaDelimitedListToStringArray(factoryClassNames)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="4-SPI机制深入理解"><a href="#4-SPI机制深入理解" class="headerlink" title="4. SPI机制深入理解"></a>4. SPI机制深入理解</h2><h4 id="4-1-SPI机制通常怎么使用"><a href="#4-1-SPI机制通常怎么使用" class="headerlink" title="4.1. SPI机制通常怎么使用"></a>4.1. SPI机制通常怎么使用</h4><p>看完上面的几个例子解析，应该都知道大致的流程了：</p>
<ul>
<li><p>组织或公司定义标准</p>
<ul>
<li>就是定义接口，比如<code>java.sql.Driver</code></li>
</ul>
</li>
<li><p>具体厂商或框架开发者实现</p>
<ul>
<li>在<code>META-INF/services</code>目录下定一个名字为接口全限定名的文件，文件内容是具体实现类的全限定名，比如<code>com.cj.mysql.Driver</code></li>
</ul>
</li>
<li><p>使用</p>
<ul>
<li>引用jar来实现功能<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServiceLoader&lt;Driver&gt; loadedDrivers = ServiceLoader.load(Driver.class);</span><br><span class="line"> <span class="comment">//获取迭代器</span></span><br><span class="line">Iterator&lt;Driver&gt; driversIterator = loadedDrivers.iterator();</span><br><span class="line"> <span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">while</span>(driversIterator.hasNext()) &#123;</span><br><span class="line">     driversIterator.next();</span><br><span class="line">     <span class="comment">//可以做具体的业务逻辑</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>规范</p>
<ul>
<li>总结以下jdk中SPI需要遵循的规范<br><img src="/spi/index/3.png"></li>
</ul>
</li>
</ul>
<h4 id="4-2-SPI和API的区别"><a href="#4-2-SPI和API的区别" class="headerlink" title="4.2. SPI和API的区别"></a>4.2. SPI和API的区别</h4><p><strong>SPI：</strong> “接口”位于调用方所在的包中</p>
<ul>
<li><p>概念上更依赖调用方</p>
</li>
<li><p>位于调用方所在的包中</p>
</li>
<li><p>实现位于独立的包中</p>
</li>
<li><p>常见的例子：插件模式的插件</p>
</li>
</ul>
<p><strong>API：</strong> “接口”位于实现方所在的包中</p>
<ul>
<li><p>概念上更接近实现方</p>
</li>
<li><p>位于实现方所在的包中</p>
</li>
<li><p>实现和接口在一个包中</p>
</li>
</ul>
<p><img src="/spi/index/4.png"></p>
<p><img src="/spi/index/5.png"></p>
<h4 id="4-3-SPI机制实现原理"><a href="#4-3-SPI机制实现原理" class="headerlink" title="4.3. SPI机制实现原理"></a>4.3. SPI机制实现原理</h4><p>看下JDK中<code>ServiceLoader&lt;S&gt;</code>方法的具体实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ServiceLoader实现了Iterable接口，可以遍历所有的服务实现者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ServiceLoader</span>&lt;<span class="title">S</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Iterable</span>&lt;<span class="title">S</span>&gt;</span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找配置文件的目录</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PREFIX = <span class="string">&quot;META-INF/services/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表示要被加载的服务的类或接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;S&gt; service;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个ClassLoader用来定位，加载，实例化服务提供者</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader loader;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 访问控制上下文</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AccessControlContext acc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 缓存已经被实例化的服务提供者，按照实例化的顺序存储</span></span><br><span class="line">    <span class="keyword">private</span> LinkedHashMap&lt;String,S&gt; providers = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 迭代器</span></span><br><span class="line">    <span class="keyword">private</span> LazyIterator lookupIterator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重新加载，就相当于重新创建ServiceLoader了，用于新的服务提供者安装到正在运行的Java虚拟机中的情况。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reload</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//清空缓存中所有已实例化的服务提供者</span></span><br><span class="line">        providers.clear();</span><br><span class="line">        <span class="comment">//新建一个迭代器，该迭代器会从头查找和实例化服务提供者</span></span><br><span class="line">        lookupIterator = <span class="keyword">new</span> LazyIterator(service, loader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造器</span></span><br><span class="line">    <span class="comment">//使用指定的类加载器和服务创建服务加载器</span></span><br><span class="line">    <span class="comment">//如果没有指定类加载器，使用系统类加载器，就是应用类加载器。</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ServiceLoader</span><span class="params">(Class&lt;S&gt; svc, ClassLoader cl)</span> </span>&#123;</span><br><span class="line">        service = Objects.requireNonNull(svc, <span class="string">&quot;Service interface cannot be null&quot;</span>);</span><br><span class="line">        loader = (cl == <span class="keyword">null</span>) ? ClassLoader.getSystemClassLoader() : cl;</span><br><span class="line">        acc = (System.getSecurityManager() != <span class="keyword">null</span>) ? AccessController.getContext() : <span class="keyword">null</span>;</span><br><span class="line">        reload();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析失败处理的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fail</span><span class="params">(Class&lt;?&gt; service, String msg, Throwable cause)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServiceConfigurationError</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServiceConfigurationError(service.getName() + <span class="string">&quot;: &quot;</span> + msg,</span><br><span class="line">                                            cause);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fail</span><span class="params">(Class&lt;?&gt; service, String msg)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServiceConfigurationError</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServiceConfigurationError(service.getName() + <span class="string">&quot;: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fail</span><span class="params">(Class&lt;?&gt; service, URL u, <span class="keyword">int</span> line, String msg)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServiceConfigurationError</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        fail(service, u + <span class="string">&quot;:&quot;</span> + line + <span class="string">&quot;: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析服务提供者配置文件中的一行</span></span><br><span class="line">    <span class="comment">//首先去掉注释校验，然后保存</span></span><br><span class="line">    <span class="comment">//返回下一行行号</span></span><br><span class="line">    <span class="comment">//重复的配置项和已经被实例化的配置项不会被保存</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">parseLine</span><span class="params">(Class&lt;?&gt; service, URL u, BufferedReader r, <span class="keyword">int</span> lc,</span></span></span><br><span class="line"><span class="params"><span class="function">                          List&lt;String&gt; names)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ServiceConfigurationError</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//读取一行</span></span><br><span class="line">        String ln = r.readLine();</span><br><span class="line">        <span class="keyword">if</span> (ln == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//#号代表注释行</span></span><br><span class="line">        <span class="keyword">int</span> ci = ln.indexOf(<span class="string">&#x27;#&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (ci &gt;= <span class="number">0</span>) ln = ln.substring(<span class="number">0</span>, ci);</span><br><span class="line">        ln = ln.trim();</span><br><span class="line">        <span class="keyword">int</span> n = ln.length();</span><br><span class="line">        <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((ln.indexOf(<span class="string">&#x27; &#x27;</span>) &gt;= <span class="number">0</span>) || (ln.indexOf(<span class="string">&#x27;\t&#x27;</span>) &gt;= <span class="number">0</span>))</span><br><span class="line">                fail(service, u, lc, <span class="string">&quot;Illegal configuration-file syntax&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> cp = ln.codePointAt(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (!Character.isJavaIdentifierStart(cp))</span><br><span class="line">                fail(service, u, lc, <span class="string">&quot;Illegal provider-class name: &quot;</span> + ln);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = Character.charCount(cp); i &lt; n; i += Character.charCount(cp)) &#123;</span><br><span class="line">                cp = ln.codePointAt(i);</span><br><span class="line">                <span class="keyword">if</span> (!Character.isJavaIdentifierPart(cp) &amp;&amp; (cp != <span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">                    fail(service, u, lc, <span class="string">&quot;Illegal provider-class name: &quot;</span> + ln);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!providers.containsKey(ln) &amp;&amp; !names.contains(ln))</span><br><span class="line">                names.add(ln);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lc + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解析配置文件，解析指定的url配置文件</span></span><br><span class="line">    <span class="comment">//使用parseLine方法进行解析，未被实例化的服务提供者会被保存到缓存中去</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Iterator&lt;String&gt; <span class="title">parse</span><span class="params">(Class&lt;?&gt; service, URL u)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServiceConfigurationError</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        InputStream in = <span class="keyword">null</span>;</span><br><span class="line">        BufferedReader r = <span class="keyword">null</span>;</span><br><span class="line">        ArrayList&lt;String&gt; names = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = u.openStream();</span><br><span class="line">            r = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in, <span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            <span class="keyword">int</span> lc = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> ((lc = parseLine(service, u, r, lc, names)) &gt;= <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> names.iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//服务提供者查找的迭代器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyIterator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">S</span>&gt;</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;S&gt; service;<span class="comment">//服务提供者接口</span></span><br><span class="line">        ClassLoader loader;<span class="comment">//类加载器</span></span><br><span class="line">        Enumeration&lt;URL&gt; configs = <span class="keyword">null</span>;<span class="comment">//保存实现类的url</span></span><br><span class="line">        Iterator&lt;String&gt; pending = <span class="keyword">null</span>;<span class="comment">//保存实现类的全名</span></span><br><span class="line">        String nextName = <span class="keyword">null</span>;<span class="comment">//迭代器中下一个实现类的全名</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">LazyIterator</span><span class="params">(Class&lt;S&gt; service, ClassLoader loader)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.service = service;</span><br><span class="line">            <span class="keyword">this</span>.loader = loader;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasNextService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (nextName != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (configs == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    String fullName = PREFIX + service.getName();</span><br><span class="line">                    <span class="keyword">if</span> (loader == <span class="keyword">null</span>)</span><br><span class="line">                        configs = ClassLoader.getSystemResources(fullName);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        configs = loader.getResources(fullName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> ((pending == <span class="keyword">null</span>) || !pending.hasNext()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!configs.hasMoreElements()) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                pending = parse(service, configs.nextElement());</span><br><span class="line">            &#125;</span><br><span class="line">            nextName = pending.next();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> S <span class="title">nextService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!hasNextService())</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">            String cn = nextName;</span><br><span class="line">            nextName = <span class="keyword">null</span>;</span><br><span class="line">            Class&lt;?&gt; c = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                c = Class.forName(cn, <span class="keyword">false</span>, loader);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!service.isAssignableFrom(c)) &#123;</span><br><span class="line">                fail(service, <span class="string">&quot;Provider &quot;</span> + cn  + <span class="string">&quot; not a subtype&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                S p = service.cast(c.newInstance());</span><br><span class="line">                providers.put(cn, p);</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (acc == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> hasNextService();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                PrivilegedAction&lt;Boolean&gt; action = <span class="keyword">new</span> PrivilegedAction&lt;Boolean&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Boolean <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> hasNextService(); &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">return</span> AccessController.doPrivileged(action, acc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> S <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (acc == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> nextService();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                PrivilegedAction&lt;S&gt; action = <span class="keyword">new</span> PrivilegedAction&lt;S&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> S <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nextService(); &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">return</span> AccessController.doPrivileged(action, acc);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取迭代器</span></span><br><span class="line">    <span class="comment">//返回遍历服务提供者的迭代器</span></span><br><span class="line">    <span class="comment">//以懒加载的方式加载可用的服务提供者</span></span><br><span class="line">    <span class="comment">//懒加载的实现是：解析配置文件和实例化服务提供者的工作由迭代器本身完成</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator&lt;S&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Iterator&lt;S&gt;() &#123;</span><br><span class="line">            <span class="comment">//按照实例化顺序返回已经缓存的服务提供者实例</span></span><br><span class="line">            Iterator&lt;Map.Entry&lt;String,S&gt;&gt; knownProviders</span><br><span class="line">                = providers.entrySet().iterator();</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (knownProviders.hasNext())</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">return</span> lookupIterator.hasNext();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> S <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (knownProviders.hasNext())</span><br><span class="line">                    <span class="keyword">return</span> knownProviders.next().getValue();</span><br><span class="line">                <span class="keyword">return</span> lookupIterator.next();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为指定的服务使用指定的类加载器来创建一个ServiceLoader</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service,</span></span></span><br><span class="line"><span class="params"><span class="function">                                            ClassLoader loader)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServiceLoader&lt;&gt;(service, loader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用线程上下文的类加载器来创建ServiceLoader</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">load</span><span class="params">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class="line">        ClassLoader cl = Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">return</span> ServiceLoader.load(service, cl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用扩展类加载器为指定的服务创建ServiceLoader</span></span><br><span class="line">    <span class="comment">//只能找到并加载已经安装到当前Java虚拟机中的服务提供者，应用程序类路径中的服务提供者将被忽略</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function">ServiceLoader&lt;S&gt; <span class="title">loadInstalled</span><span class="params">(Class&lt;S&gt; service)</span> </span>&#123;</span><br><span class="line">        ClassLoader cl = ClassLoader.getSystemClassLoader();</span><br><span class="line">        ClassLoader prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cl != <span class="keyword">null</span>) &#123;</span><br><span class="line">            prev = cl;</span><br><span class="line">            cl = cl.getParent();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ServiceLoader.load(service, prev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;java.util.ServiceLoader[&quot;</span> + service.getName() + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>首先，ServiceLoader实现了Iterable接口，所以它有迭代器的属性，这里主要都是实现了迭代器的hasNext和next方法。这里主要都是调用的lookupIterator的相应hasNext和next方法，lookupIterator是懒加载迭代器。</p>
</li>
<li><p>其次，LazyIterator中的hasNext方法，静态变量PREFIX就是”META-INF/services/”目录，这也就是为什么需要在classpath下的META-INF/services/目录里创建一个以服务接口命名的文件。</p>
</li>
<li><p>最后，通过反射方法Class.forName()加载类对象，并用newInstance方法将类实例化，并把实例化后的类缓存到providers对象中，(LinkedHashMap&lt;String,S&gt;类型）然后返回实例对象</p>
</li>
</ol>
<h4 id="4-4-SPI缺陷"><a href="#4-4-SPI缺陷" class="headerlink" title="4.4. SPI缺陷"></a>4.4. SPI缺陷</h4><p>通过上面的解析，可以发现，我们使用SPI机制的缺陷：</p>
<ol>
<li><p>不能按需加载，需要遍历所有的实现，并实例话，然后在循环中才能找到我们需要的实现，如果不像用某些实现类，或则某些类实例化很耗时，它也被载入实例化，造成浪费</p>
</li>
<li><p>获取某个实现类的方式不够灵活，只能通过<code>Iterator</code>形式获取，不能根据某个参数来获取对应的实现类</p>
</li>
<li><p>多个并发多线程使用<code>ServiceLoader</code>类的示例是不安全的</p>
</li>
</ol>
<p>参考文章：<a href="https://pdai.tech/md/java/advanced/java-advanced-spi.html">Java常用机制 - SPI机制详解</a></p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>Java机制</tag>
      </tags>
  </entry>
  <entry>
    <title>mycat学习</title>
    <url>/mycat/index.html</url>
    <content><![CDATA[<h1 id="Mycat-分库分表中间件"><a href="#Mycat-分库分表中间件" class="headerlink" title="Mycat(分库分表中间件)"></a>Mycat(分库分表中间件)</h1><h2 id="1-数据库优化策略"><a href="#1-数据库优化策略" class="headerlink" title="1. 数据库优化策略"></a>1. 数据库优化策略</h2><ol>
<li> 重启：释放资源</li>
<li> SQL与索引</li>
<li> 表与存储引擎（字段类型选择，长度设置，是否需要分表、分区）</li>
<li> 数据库与应用架构（考虑使用缓存服务器，减轻是数据库压力；可以数据库分布式，读写分离，主从复制）</li>
<li> 数据库与操作系统配置（修改mysql配置，使用单独服务器部署数据库）</li>
<li> 硬件</li>
</ol>
<h2 id="2-数据库演化"><a href="#2-数据库演化" class="headerlink" title="2. 数据库演化"></a>2. 数据库演化</h2><p>根据业务需要、数据量变化，随之而来的数据库的变化</p>
<ol>
<li><p> 数据库与应用部署在同一台服务器<br><img src="/mycat/index/image-20201104204430049.png" alt="mycat"></p>
</li>
<li><p>单体应用架构，单数据库（数据库服务器和应用服务器分离，但是业务系统越做越大）<br> <img src="/mycat/index/image-20201104204624925.png" alt="mycat"></p>
</li>
<li><p>多应用单数据库（应用解耦）<br> <img src="/mycat/index/image-20201104204933409.png" alt="mycat"></p>
</li>
<li><p>多应用 独立数据库<br> <img src="/mycat/index/image-20201104205054233.png" alt="mycat"></p>
</li>
<li><p>但应用多数据库(分表)<br> <img src="/mycat/index/image-20201104205319372.png" alt="mycat"></p>
</li>
</ol>
<h2 id="3-如何分库分表"><a href="#3-如何分库分表" class="headerlink" title="3. 如何分库分表"></a>3. 如何分库分表</h2><p><img src="/mycat/index/image-20201104205653611.png" alt="mycat"></p>
<ul>
<li><p>垂直切分</p>
<ul>
<li><p>单库<br>  <img src="/mycat/index/image-20201104205756827.png" alt="mycat"></p>
</li>
<li><p>多库<br>  <img src="/mycat/index/image-20201104210008624.png" alt="mycat"></p>
</li>
</ul>
</li>
<li><p>水平切分</p>
<ul>
<li><p>按照月分表或者分成实时、历史表等<br>  <img src="/mycat/index/image-20201104210117373.png" alt="mycat"></p>
</li>
<li><p>分成多库<br>  <img src="/mycat/index/image-20201104210416994.png" alt="mycat"></p>
</li>
</ul>
</li>
</ul>
<h2 id="4-分库分表带来的问题"><a href="#4-分库分表带来的问题" class="headerlink" title="4. 分库分表带来的问题"></a>4. 分库分表带来的问题</h2><ol>
<li><p>跨库关联查询</p>
<ul>
<li>  增加冗余字段（违反了第三范式：表中的所有数据元素不但要能唯一地被主关键字所标识,而且它们之间还必须相互独立,不存在其他的函数关系）</li>
<li>  跨数据库的同步（canal、Mq（最好）、ETL、kettle、ogg）(在某个库中同步其他数据库中表的数据，避免跨库关联查询)</li>
<li>  全局表(广播表)：比如行政区划表，所有的系统都是一样的；</li>
<li>  API</li>
</ul>
</li>
<li><p>分布式事务</p>
<ul>
<li>  Local</li>
</ul>
</li>
<li><p>排序、翻页、函数计算</p>
<p> -</p>
</li>
<li><p>全局主键</p>
<ul>
<li>  雪花算法leaf</li>
<li>  redis(int 类型可以设置incby)</li>
<li>  ZookKeeper</li>
<li>  uuid(数据过长， 影响索引存储)</li>
</ul>
</li>
<li><p>多数据源连接（动态数据源）<br> <img src="/mycat/index/image-20201104213343204.png" alt="mycat"></p>
</li>
</ol>
<h2 id="5-Mycat分库分表中间件"><a href="#5-Mycat分库分表中间件" class="headerlink" title="5. Mycat分库分表中间件"></a>5. Mycat分库分表中间件</h2><p><strong>官网地址</strong>：<a href="http://www.mycat.org.cn/">http://www.mycat.org.cn/</a></p>
<p>从阿里cobar升级而来，完全实现了mysql协议，可以当作一个mysql数据库来使用，通过JDBC支持其他数据库实现分库分表，解决了<strong>多表join、分布式事务、全局序列号、翻页查询、函数计算</strong>的问题</p>
<ul>
<li>  一个彻底开源的，面向企业应用开发的大数据库集群</li>
<li>  支持事务、ACID、可以替代MySQL的加强版数据库</li>
<li>  一个可以视为MySQL集群的企业级数据库，用来替代昂贵的Oracle集群</li>
<li>  一个融合内存缓存技术、NoSQL技术、HDFS大数据的新型SQL Server</li>
<li>  结合传统数据库和新型分布式数据仓库的新一代企业级数据库产品</li>
<li>  一个新颖的数据库中间件产品</li>
</ul>
<p>华为云的DDM其实也是根据mycat做的</p>
<h3 id="5-1-核心概念"><a href="#5-1-核心概念" class="headerlink" title="5.1 核心概念"></a>5.1 核心概念</h3><p><img src="/mycat/index/image-20201104215015366.png" alt="image-20201104215015366"></p>
<h3 id="5-2-Mycat安装与配置"><a href="#5-2-Mycat安装与配置" class="headerlink" title="5.2 Mycat安装与配置"></a>5.2 Mycat安装与配置</h3><h4 id="5-2-1-Mycat安装"><a href="#5-2-1-Mycat安装" class="headerlink" title="5.2.1 Mycat安装"></a>5.2.1 Mycat安装</h4><p>从官网下载安装版本，解压到文件(官网建议安装在/usr/local/Mycat)后页面如下图所示：<br><img src="/mycat/index/image-20201127094703483.png" alt="image-20201127094703483"></p>
<p>目录解释如下：</p>
<ul>
<li><strong>bin：</strong>存放window版和linux版本除了提供封装成服务的版本之外，也提供了nowrap的shell脚本命令，方便选择和修改；Linux下运行:./mycat console， 首先要chmod + x*;(mycat支持的命令console、start、stop、restart、status、dump)</li>
<li><strong>conf：</strong>server.xml是mycat服务器参数调整和用户授权的配置文件，schema.xml是逻辑库定义和表以及分片定义的配置文件，rule.xml是分片规则的配置文件，分片规则的具体一些参数信息单独存放为文件，也在这个目录下，配置文件修改，需要重启mycat或者通过9066端口reload</li>
<li>**lib:**主要存放mycat依赖的一些jar文件</li>
<li><strong>logs:<strong>日志存放在mycat.log中，每天一个文件，日志的配置是在conf/log4j.xml中，根据自己的需要，可以调整输出级别为debug，方便排查问题；注意Linux下部署安装mysql，默认不忽略，需要手动到/etc/my.cnf下配置</strong>lower_case_table_names=1</strong>使Linux环境下MySQL忽略表明大小写，否则使用mycat的时候会提示找不到表的错误</li>
</ul>
<h4 id="5-2-2-服务启动与配置"><a href="#5-2-2-服务启动与配置" class="headerlink" title="5.2.2 服务启动与配置"></a>5.2.2 服务启动与配置</h4><p>Mycat在Linux中部署启动时，首先需要在Linux系统的环境变量中配置MYCAT_HOE,操作方式如下：</p>
<ol>
<li><p>vi /etc/profile，在系统环境变量文件中增加MYCAT_HOME=/usr/lib/tools/mycat<br><img src="/mycat/index/image-20201127103212598.png" alt="image-20201127103212598"></p>
</li>
<li><p>执行 source/etc/profile命令，使环境变量生效。如果是多台Linux系统中组件Mycat集群，那需要在mycat Server所在的服务器配置对其他ip和主机名的映射，配置方式如下：<br><img src="/mycat/index/image-20201127104159580.png" alt="image-20201127104159580"></p>
<p>经过以上两个步骤的配置，就可以到/usr/lib/tools/mycat/bin目录下执行./mycat start启动mycat服务；使用mycat status查看mycat的运行状态；如下图<br><img src="/mycat/index/image-20201128135953635.png" alt="image-20201128135953635"></p>
</li>
</ol>
<h5 id="5-2-2-1-安装遇到的问题"><a href="#5-2-2-1-安装遇到的问题" class="headerlink" title="5.2.2.1 安装遇到的问题"></a>5.2.2.1 安装遇到的问题</h5><ol>
<li><p>schema TESTDB refered by user root is not exist!<img src="/mycat/index/image-20201215152125176.png" alt="image-20201215152125176"></p>
<p>解决方式：</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在conf/server.xml文件中schemas中配置schema.xml文件中的schema的name值--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--user中的name为mycat服务的用户名--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--这个是mycat服务连接的密码--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>xiaoyuge<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="5-2-3日志分析"><a href="#5-2-3日志分析" class="headerlink" title="5.2.3日志分析"></a>5.2.3日志分析</h4><p>mycat的日志文件配置为MYCAT_HOME/conf/log4j.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">log4j</span>:configuration <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;log4j.dtd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j:configuration</span> <span class="attr">xmlns:log4j</span>=<span class="string">&quot;http://jakarta.apache.org/log4j/&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;ConsoleAppender&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;MM-dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;FILE&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--日志文件存放的目录--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;MYCAT_HOME&#125;/logs/mycat.log&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;Append&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;MaxFileSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000KB&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;MaxBackupIndex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;encoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">layout</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param</span> <span class="attr">name</span>=<span class="string">&quot;ConversionPattern&quot;</span> <span class="attr">value</span>=<span class="string">&quot;%d&#123;MM/dd HH:mm:ss.SSS&#125; %5p [%t] (%F:%L) -%m%n&quot;</span> /&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--level是日志级别，生产环境下加以将级别调整为info/ware，如果是研究测试，碰到异常设置为debug--&gt;</span></span><br><span class="line">truetrue<span class="tag">&lt;<span class="name">level</span> <span class="attr">value</span>=<span class="string">&quot;debug&quot;</span> /&gt;</span></span><br><span class="line">truetrue<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;ConsoleAppender&quot;</span> /&gt;</span></span><br><span class="line">true<span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">log4j:configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="5-2-3-1-warpper日志"><a href="#5-2-3-1-warpper日志" class="headerlink" title="5.2.3.1 warpper日志"></a>5.2.3.1 warpper日志</h5><p>目前mycat的启动时经过warpper封装成启动脚本，所以日志也会有其相关的日志文件：${MYCAT_HOME}/logs/warapper.log， 在启动的时候如果系统环境配置错误或缺少配置时，导致mycat无法启动，可以通过查看wrapper.log查看具体错误原因。</p>
<ol>
<li><p>正常启动</p>
 <figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">STATUS | wrapper | <span class="number">2015</span>/<span class="number">04</span>/<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">00</span> | --&gt; Wrapper Started as Daemon</span><br><span class="line">STATUS | wrapper | <span class="number">2015</span>/<span class="number">04</span>/<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">00</span> | Launching a JVM...</span><br><span class="line">INFO | jvm <span class="number">1</span> | <span class="number">2015</span>/<span class="number">04</span>/<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">01</span> | Wrapper (Version <span class="number">3</span><span class="variable">.2</span><span class="variable">.3</span>) http:<span class="comment">//wrapper.tanukisoftware.org</span></span><br><span class="line">INFO | jvm <span class="number">1</span> | <span class="number">2015</span>/<span class="number">04</span>/<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">01</span> | Copyright <span class="number">1999</span>-<span class="number">2006</span> Tanuki Software, Inc. AllRights Reserved.</span><br><span class="line">INFO | jvm <span class="number">1</span> | <span class="number">2015</span>/<span class="number">04</span>/<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">01</span> |</span><br><span class="line">INFO | jvm <span class="number">1</span> | <span class="number">2015</span>/<span class="number">04</span>/<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">01</span> | log4j <span class="number">2015</span>-<span class="number">04</span>-<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">01</span> [./conf/log4j<span class="variable">.xml</span>]load completed.</span><br><span class="line">INFO | jvm <span class="number">1</span> | <span class="number">2015</span>/<span class="number">04</span>/<span class="number">12</span> <span class="number">15</span>:<span class="number">05</span>:<span class="number">02</span> | MyCAT Server startup successfully. see logs in logs/mycat<span class="variable">.log</span></span><br></pre></td></tr></table></figure></li>
<li><p>启动异常</p>
 <figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">STATUS | wrapper | <span class="number">2015</span>/<span class="number">02</span>/<span class="number">14</span> <span class="number">01</span>:<span class="number">43</span>:<span class="number">44</span> | --&gt; Wrapper Started as Daemon</span><br><span class="line">STATUS | wrapper | <span class="number">2015</span>/<span class="number">02</span>/<span class="number">14</span> <span class="number">01</span>:<span class="number">43</span>:<span class="number">44</span> | Launching a JVM...</span><br><span class="line">INFO | jvm <span class="number">1</span> | <span class="number">2015</span>/<span class="number">02</span>/<span class="number">14</span> <span class="number">01</span>:<span class="number">43</span>:<span class="number">45</span> | Error: Exception thrown by the agent : java<span class="variable">.rmi</span><span class="variable">.server</span><span class="variable">.ExportException</span>:</span><br><span class="line">Port already in <span class="keyword">use</span>: <span class="number">1984</span>; nested exception is:</span><br><span class="line">INFO | jvm <span class="number">1</span> | <span class="number">2015</span>/<span class="number">02</span>/<span class="number">14</span> <span class="number">01</span>:<span class="number">43</span>:<span class="number">45</span> | java<span class="variable">.net</span><span class="variable">.BindException</span>: Address already in <span class="keyword">use</span></span><br><span class="line">ERROR | wrapper | <span class="number">2015</span>/<span class="number">02</span>/<span class="number">14</span> <span class="number">01</span>:<span class="number">43</span>:<span class="number">45</span> | JVM exited <span class="keyword">while</span> loading the application.</span><br><span class="line">    </span><br><span class="line"># 日志显示异常原因为 java<span class="variable">.net</span><span class="variable">.BindException</span>: Address already in <span class="keyword">use</span>,也就是端口占用，很有可能是原有服</span><br><span class="line">务未停止，或者 Mycat 默认端口被其他程序占用，正常启动成功后会有 mycat<span class="variable">.log</span> 日志，如果服务未启动成功不会有对应的日志。 也可以去修改 conf 文件夹里的 wrapper<span class="variable">.conf</span> 里的 wrapper<span class="variable">.java</span><span class="variable">.additional</span><span class="variable">.7</span>=-Dcom<span class="variable">.sun</span><span class="variable">.management</span><span class="variable">.jmxremote</span><span class="variable">.port</span>=<span class="number">1984</span>，server<span class="variable">.xml</span> 的&lt;<span class="keyword">property</span> name=<span class="string">&quot;serverPort&quot;</span>&gt;<span class="number">8066</span>&lt;/<span class="keyword">property</span>&gt;和</span><br><span class="line">&lt;<span class="keyword">property</span> name=<span class="string">&quot;managerPort&quot;</span>&gt;<span class="number">9066</span>&lt;/<span class="keyword">property</span>&gt;，这方法适</span><br><span class="line">合一台机器上两个 mycat 或者 <span class="number">1984</span>,<span class="number">8066</span>,<span class="number">9066</span> 端口被其它应用占用的情况</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="5-2-3-2-mycat日志"><a href="#5-2-3-2-mycat日志" class="headerlink" title="5.2.3.2 mycat日志"></a>5.2.3.2 mycat日志</h5><h4 id="5-2-4-mycat防火墙设置"><a href="#5-2-4-mycat防火墙设置" class="headerlink" title="5.2.4 mycat防火墙设置"></a>5.2.4 mycat防火墙设置</h4><p>白名单和SQL黑名单说明：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在 server.xml 中配置：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">firewall</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--ip 白名单列表，可以配置多个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">whitehost</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--ip 白名单 用户对应的可以访问的 ip 地址--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">host</span> <span class="attr">user</span>=<span class="string">&quot;mycat&quot;</span> <span class="attr">host</span>=<span class="string">&quot;127.0.0.1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">host</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">whitehost</span>&gt;</span></span><br><span class="line">     &lt;!-是否开启检查黑名单列表--&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">blacklist</span> <span class="attr">check</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--黑名单允许的 权限 后面为默认--&gt;</span></span><br><span class="line">    	<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;selelctAllow&quot;</span>&gt;</span>false<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">blacklist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">firewall</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>黑名单配置拦截明细如下：</strong></p>
<table>
<thead>
<tr>
<th align="center">配置项</th>
<th align="center">缺省值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">rollbackAllow</td>
<td align="center">true</td>
<td align="center">是否允许执行 roll back 操作,如果把 selectIntoAllow、deleteAllow、updateAllow、insertAllow、mergeAllow 都设置为 false，这就是一个只读数据源了。</td>
</tr>
<tr>
<td align="center">selectAllow</td>
<td align="center">true</td>
<td align="center">是否运行执行SELECT语句</td>
</tr>
<tr>
<td align="center">selectAllColumnAllow</td>
<td align="center">true</td>
<td align="center">是否允许执行 SELECT * FROM T 这样的语句。如果设置为 false，不允许执行 select * from t，但 select * from (select id, name from t) a。这个选项是防御程序通过调用 select *获得数据表的结构信息</td>
</tr>
<tr>
<td align="center">selectIntoAllow</td>
<td align="center">true</td>
<td align="center">SELECT 查询中是否允许 INTO 字句</td>
</tr>
<tr>
<td align="center">deleteAllow</td>
<td align="center">true</td>
<td align="center">是否允许执行 DELETE 语句</td>
</tr>
<tr>
<td align="center">updateAllow</td>
<td align="center">true</td>
<td align="center">是否允许执行 UPDATE 语句</td>
</tr>
<tr>
<td align="center">insertAllow</td>
<td align="center">true</td>
<td align="center">是否允许执行 INSERT 语句</td>
</tr>
<tr>
<td align="center">replaceAllow</td>
<td align="center">true</td>
<td align="center">是否允许执行 REPLACE 语句</td>
</tr>
<tr>
<td align="center">mergeAllow</td>
<td align="center">true</td>
<td align="center">是否允许执行 MERGE 语句，这个只在 Oracle 中有用</td>
</tr>
<tr>
<td align="center">callAllow</td>
<td align="center">true</td>
<td align="center">是否允许通过 jdbc 的 call 语法调用存储过程</td>
</tr>
<tr>
<td align="center">setAllow</td>
<td align="center">true</td>
<td align="center">是否允许使用 SET 语法</td>
</tr>
<tr>
<td align="center">truncateAllow</td>
<td align="center">true</td>
<td align="center">truncate 语句是危险，缺省打开，若需要自行关闭</td>
</tr>
<tr>
<td align="center">createTableAllow</td>
<td align="center">true</td>
<td align="center">是否允许创建表</td>
</tr>
<tr>
<td align="center">alterTableAllow</td>
<td align="center">true</td>
<td align="center">是否允许执行 Alter Table 语句</td>
</tr>
<tr>
<td align="center">dropTableAllow</td>
<td align="center">true</td>
<td align="center">是否允许修改表</td>
</tr>
<tr>
<td align="center">commentAllow</td>
<td align="center">false</td>
<td align="center">是否允许语句中存在注释，Oracle 的用户不用担心，Wall 能够识别 hints和注释的区别</td>
</tr>
<tr>
<td align="center">noneBaseStatementAllow</td>
<td align="center">false</td>
<td align="center">是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项 就能够屏蔽 DDL。</td>
</tr>
<tr>
<td align="center">multiStatementAllow</td>
<td align="center">false</td>
<td align="center">是否允许一次执行多条语句，缺省关闭</td>
</tr>
<tr>
<td align="center">useAllow</td>
<td align="center">true</td>
<td align="center">是否允许执行 mysql 的 use 语句，缺省打开</td>
</tr>
<tr>
<td align="center">describeAllow</td>
<td align="center">true</td>
<td align="center">是否允许执行 mysql 的 describe 语句，缺省打开</td>
</tr>
<tr>
<td align="center">showAllow</td>
<td align="center">true</td>
<td align="center">是否允许执行 mysql 的 show 语句，缺省打开</td>
</tr>
<tr>
<td align="center">commitAllow</td>
<td align="center">true</td>
<td align="center">是否允许执行 commit 操作</td>
</tr>
</tbody></table>
<p><strong>拦截配置=-永真条件：</strong></p>
<table>
<thead>
<tr>
<th align="center">配置项</th>
<th align="center">缺省值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">selectWhereAlwayTrueCheck</td>
<td align="center">true</td>
<td align="center">检查 SELECT 语句的 WHERE 子句是否是一个永真条件</td>
</tr>
<tr>
<td align="center">selectHavingAlwayTrueCheck</td>
<td align="center">true</td>
<td align="center">检查 SELECT 语句的 HAVING 子句是否是一个永真条件</td>
</tr>
<tr>
<td align="center">deleteWhereAlwayTrueCheck</td>
<td align="center">true</td>
<td align="center">检查 DELETE 语句的 WHERE 子句是否是一个永真条件</td>
</tr>
<tr>
<td align="center">deleteWhereNoneCheck</td>
<td align="center">false</td>
<td align="center">检查 DELETE 语句是否无 where 条件，这是有风险的，但不是 SQL 注入类型的风险</td>
</tr>
<tr>
<td align="center">updateWhereAlayTrueCheck</td>
<td align="center">true</td>
<td align="center">检查 UPDATE 语句的 WHERE 子句是否是一个永真条件</td>
</tr>
<tr>
<td align="center">updateWhereNoneCheck</td>
<td align="center">false</td>
<td align="center">检查 UPDATE 语句是否无 where 条件，这是有风险的，但不是SQL 注入类型的风险</td>
</tr>
<tr>
<td align="center">conditionAndAlwayTrueAllow</td>
<td align="center">false</td>
<td align="center">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永真条件</td>
</tr>
<tr>
<td align="center">conditionAndAlwayFalseAllow</td>
<td align="center">false</td>
<td align="center">检查查询条件(WHERE/HAVING 子句)中是否包含 AND 永假条件</td>
</tr>
<tr>
<td align="center">conditionLikeTrueAllow</td>
<td align="center">true</td>
<td align="center">检查查询条件(WHERE/HAVING 子句)中是否包含 LIKE 永真条件</td>
</tr>
</tbody></table>
<p><strong>其他拦截配置：</strong></p>
<table>
<thead>
<tr>
<th align="center">配置项</th>
<th align="left">缺省值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">selectIntoOutfileAllow</td>
<td align="left">false</td>
<td align="center">SELECT … INTO OUTFILE 是否允许，这个是 mysql 注入攻击的常见手段，缺省是禁止的</td>
</tr>
<tr>
<td align="center">selectUnionCheck</td>
<td align="left">true</td>
<td align="center">检测 SELECT UNION</td>
</tr>
<tr>
<td align="center">selectMinusCheck</td>
<td align="left">true</td>
<td align="center">检测 SELECT MINUS</td>
</tr>
<tr>
<td align="center">selectExceptCheck</td>
<td align="left">true</td>
<td align="center">检测 SELECT EXCEPT</td>
</tr>
<tr>
<td align="center">selectIntersectCheck</td>
<td align="left">true</td>
<td align="center">检测 SELECT INTERSECT</td>
</tr>
<tr>
<td align="center">mustParameterized</td>
<td align="left">false</td>
<td align="center">是否必须参数化，如果为 True，则不允许类似 WHERE ID = 1 这种不参数化的 SQL</td>
</tr>
<tr>
<td align="center">strictSyntaxCheck</td>
<td align="left">true</td>
<td align="center">是否进行严格的语法检测，Druid SQL Parser 在某些场景不能覆盖所有的，SQL 语法，出现解析 SQL 出错，可以临时把这个选项设置为 false，同时把 SQL 反馈给 Druid 的开发者</td>
</tr>
<tr>
<td align="center">conditionOpXorAllow</td>
<td align="left">false</td>
<td align="center">查询条件中是否允许有 XOR 条件。XOR 不常用，很难判断永真或者永假，缺省不允许。</td>
</tr>
<tr>
<td align="center">conditionOpBitwseAllow</td>
<td align="left">true</td>
<td align="center">查询条件中是否允许有”&amp;”、”~”、”</td>
</tr>
<tr>
<td align="center">conditionDoubleConstAllow</td>
<td align="left">false</td>
<td align="center">查询条件中是否允许连续两个常量运算表达式</td>
</tr>
<tr>
<td align="center">minusAllow</td>
<td align="left">true</td>
<td align="center">是否允许 SELECT * FROM A MINUS SELECT * FROM B 这样的语句</td>
</tr>
<tr>
<td align="center">intersectAllow</td>
<td align="left">true</td>
<td align="center">是否允许 SELECT * FROM A INTERSECT SELECT * FROM B 这样的语句</td>
</tr>
<tr>
<td align="center">constArithmeticAllow</td>
<td align="left">true</td>
<td align="center">拦截常量运算的条件，比如说 WHERE FID = 3 - 1，其中”3 - 1”是常量运算表达式。</td>
</tr>
<tr>
<td align="center">limitZeroAllow</td>
<td align="left">false</td>
<td align="center">是否允许 limit 0 这样的语句</td>
</tr>
</tbody></table>
<p><strong>禁用对象检测配置：</strong></p>
<table>
<thead>
<tr>
<th align="center">配置项</th>
<th align="center">缺省值</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">tableCheck</td>
<td align="center">true</td>
<td align="center">检测是否使用了禁用的表</td>
</tr>
<tr>
<td align="center">schemaCheck</td>
<td align="center">true</td>
<td align="center">检测是否使用了禁用的 Schema</td>
</tr>
<tr>
<td align="center">functionCheck</td>
<td align="center">true</td>
<td align="center">检测是否使用了禁用的函数</td>
</tr>
<tr>
<td align="center">objectCheck</td>
<td align="center">true</td>
<td align="center">检测是否使用了“禁用对对象”</td>
</tr>
<tr>
<td align="center">variantCheck</td>
<td align="center">true</td>
<td align="center">检测是否使用了“禁用的变量”</td>
</tr>
<tr>
<td align="center">readOnlyTables</td>
<td align="center">空</td>
<td align="center">指定的表只读，不能够在 SELECT INTO、DELETE、UPDATE、INSERT、MERGE 中作为”被修改表”出现</td>
</tr>
</tbody></table>
<h4 id="5-2-5-mycat配置文件"><a href="#5-2-5-mycat配置文件" class="headerlink" title="5.2.5 mycat配置文件"></a>5.2.5 mycat配置文件</h4><h5 id="5-2-5-1-schema-xml配置"><a href="#5-2-5-1-schema-xml配置" class="headerlink" title="5.2.5.1 schema.xml配置"></a>5.2.5.1 schema.xml配置</h5><p>schema.xml作为mycat中重要的配置文件之一，管理者mycat的逻辑库、表、分片规则、DataNode以及DataSource。</p>
<h5 id="5-2-5-2-scheme标签"><a href="#5-2-5-2-scheme标签" class="headerlink" title="5.2.5.2 scheme标签"></a>5.2.5.2 scheme标签</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>schema标签用于定义mycat实例中的逻辑库，mycat可以由多个逻辑库，每个逻辑库都有自己的相关配置，可以使用schema标签来划分这些不同的逻辑库。如果不配置schema标签，所有的表配置，会属于同一个默认的逻辑库。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--逻辑库TESTDB--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;travelrecord&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1,dn2,dn3&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--USERDB--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;USERDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">true<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;company&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn10,dn11,dn12&quot;</span> <span class="attr">rule</span>=<span class="string">&quot;auto-sharding-long&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	逻辑库的概念和MySQL数据库中的database概念相同，我们在查询这两个不同的逻辑库中表的时候需要切换到该逻辑库下才可以查询到所需要的表</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p>在server.xml中可以配置不同的用户能够使用的schema</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;root&quot;</span> <span class="attr">defaultAccount</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--No MyCAT Database selected 错误前会尝试使用该schema作为schema，不设置则为null,报错 --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 表级 DML 权限设置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        &lt;privileges check=&quot;false&quot;&gt;</span></span><br><span class="line"><span class="comment">                &lt;schema name=&quot;TESTDB&quot; dml=&quot;0110&quot; &gt;</span></span><br><span class="line"><span class="comment">                        &lt;table name=&quot;tb01&quot; dml=&quot;0000&quot;&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">                        &lt;table name=&quot;tb02&quot; dml=&quot;1111&quot;&gt;&lt;/table&gt;</span></span><br><span class="line"><span class="comment">                &lt;/schema&gt;</span></span><br><span class="line"><span class="comment">        &lt;/privileges&gt;</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span>user<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;schemas&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;readOnly&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultSchema&quot;</span>&gt;</span>TESTDB<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">user</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img src="/mycat/index/image-20201129110838590.png"></p>
<p>schema标签的相关属性：</p>
<table>
<thead>
<tr>
<th align="center">属性名</th>
<th align="center">值</th>
<th align="center">数量限制</th>
</tr>
</thead>
<tbody><tr>
<td align="center">dataNode</td>
<td align="center">任意string</td>
<td align="center">（0..1）</td>
</tr>
<tr>
<td align="center">checkSQLschema</td>
<td align="center">Boolean</td>
<td align="center">（1）</td>
</tr>
<tr>
<td align="center">sqlMaxLimit</td>
<td align="center">Integer</td>
<td align="center">（1）</td>
</tr>
</tbody></table>
<h6 id="5-2-5-2-1-dataNode"><a href="#5-2-5-2-1-dataNode" class="headerlink" title="5.2.5.2.1  dataNode"></a>5.2.5.2.1  dataNode</h6><p>该属性用于绑定逻辑库到某个具体的database上，1.3版本如果配置了dataNode,则不可以配置分片表，1.4可以配置默认分片，只需要配置需要分片的表即可，具体配置如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.3版本配置--&gt;</span><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;USERDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>&gt;</span>&lt;!—里面不能配置任何表--&gt;<span class="tag">&lt;/<span class="name">schema</span>&gt;</span><span class="comment">&lt;!--1.4版本配置--&gt;</span><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;USERDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn2&quot;</span>&gt;</span>&lt;!—配置需要分片的表--&gt;	<span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">“tuser”</span> <span class="attr">dataNode</span>=<span class="string">”dn1”/</span>&gt;</span><span class="tag">&lt;/<span class="name">schema</span>&gt;</span><span class="comment">&lt;!-- 	那么现在tuser就绑定到dn1所配置的具体database上，可以直接访问这个database，没有配置的表则会走默认的节点dn2，这里注意没有配置在分片里面的表工具查看无法显示，但是可以正常使用。--&gt;</span></span><br></pre></td></tr></table></figure>

<h6 id="5-2-5-2-2-checkSQLschema"><a href="#5-2-5-2-2-checkSQLschema" class="headerlink" title="5.2.5.2.2 checkSQLschema"></a>5.2.5.2.2 checkSQLschema</h6><p>当改制设置为true时，我们执行“SELECT * FROM TESTDB.travelrecord；”则mycat会把语句修改为“SELECT * FROM travelrecord;”即把表示schema的字符去掉，避免发送到后端数据库执行报ERROR 1146：Table ‘testdb.travelrecord’ doest’t exist.不过，即使设置该值为 true ，如果语句所带的是并非是 schema 指定的名字，例如：<strong>select * from db1.travelrecord;</strong> 那么 MyCat 并不会删除 db1 这个字段，如果没有定义该库的话则会报错，所以在提供 SQL语句的最好是不带这个字段。</p>
<h6 id="5-2-5-2-3-sqlMaxLimit"><a href="#5-2-5-2-3-sqlMaxLimit" class="headerlink" title="5.2.5.2.3 sqlMaxLimit"></a>5.2.5.2.3 sqlMaxLimit</h6><p>当该值设置为某个数值时。每条执行的 SQL 语句，如果没有加上 limit 语句，MyCat 也会自动的加上所对应的值。例如设置值为 100，执行**select * from TESTDB.travelrecord;<strong>的效果为和执行</strong>select * from TESTDB.travelrecord limit 100;**相同。</p>
<p>设置该值的话，MyCat 默认会把查询到的信息全部都展示出来，造成过多的输出。所以，在正常使用中，还是建议加上一个值，用于减少过多的数据返回。</p>
<p>当然 SQL 语句中也显式的指定 limit 的大小，不受该属性的约束。</p>
<p>需要注意的是，如果运行的 schema 为非拆分库的，那么该属性不会生效。需要手动添加 limit 语句。</p>
<h3 id="5-2-分配规则"><a href="#5-2-分配规则" class="headerlink" title="5.2 分配规则"></a>5.2 分配规则</h3><p><img src="/mycat/index/image-20201104222632963.png" alt="image-20201104222632963"><br><img src="/mycat/index/image-20201104221336437.png" alt="image-20201104221336437"></p>
<ul>
<li><p>  范围分片：根据某个字设置auto-sharding-long，如果这个primaryKey超出了范围会报错</p>
</li>
<li><p>  取模分片：</p>
</li>
<li><p>ER分片（将父子表有关联的数据放在一个data-node里面）</p>
<p>  <img src="/mycat/index/image-20201104221659540.png" alt="image-20201104221659540"></p>
</li>
<li><p>  全局表：所有dataNode存储相同的数据，查询的时候是随机查询某个表 type=global，查询的时候随机从某个datanode获取</p>
</li>
<li><p>  非分片表：只在某个dataNode上存储,指定一个dataNode并且不写分片规则</p>
</li>
<li><p>  单库分表：有个bug在实际数据库中必须要创建mycat中一摸一样的数据表，而且truncat的时候要现在dataNode先删除，才能删除的掉mycat的数据</p>
</li>
</ul>
<h3 id="5-3-全局ID"><a href="#5-3-全局ID" class="headerlink" title="5.3 全局ID"></a>5.3 全局ID</h3><p><img src="/mycat/index/image-20201104223246735.png" alt="image-20201104223246735"></p>
<ul>
<li>  文件方式—0</li>
<li>  数据库方式—1</li>
<li>  本地时间戳—-2</li>
<li>  ZK方式—-3</li>
</ul>
<h2 id="6-Mycat分片策略详解"><a href="#6-Mycat分片策略详解" class="headerlink" title="6. Mycat分片策略详解"></a>6. Mycat分片策略详解</h2><p>连续分片与离散分片</p>
<p><img src="/mycat/index/image-20201107201442912.png" alt="image-20201107201442912"></p>
<p><strong>连续分片</strong>：</p>
<ul>
<li>  范围分片</li>
<li>  日期/事件</li>
</ul>
<p>缺点：</p>
<ul>
<li>  存在数据热点的可能性</li>
<li>  并发访问能力受限于单一或少量DataNode（访问集中），并不能分摊数据库访问的压力</li>
</ul>
<p><strong>离散</strong>：</p>
<ul>
<li><p>  取模（partioncount 的总数必须和分片总数相同）</p>
</li>
<li><p>  枚举</p>
</li>
<li><p>  一致性哈希(qs-murmur)</p>
</li>
<li><p>固定分片哈希</p>
<ul>
<li><p>  partitionCount: 2, 1表示有三个分片必须和节点数量一致，否则会报错，前面两个一样长</p>
</li>
<li><p>  partitionLength: 256, 512表示长度为256和512</p>
</li>
<li><p>  综合在一起就是前面2个分片长度为256， 最后一个为512，结果如下图所示（注意partitionCount和partitionLength的数量一定要一致）</p>
</li>
<li><p><img src="/mycat/index/image-20201219103201836.png" alt="image-20201219103201836"></p>
<p>  <img src="/mycat/index/image-20201219102742172.png" alt="image-20201219102742172"></p>
</li>
</ul>
</li>
<li><p>  取模范围(sharting-by-pattern)：先取模PartitionByPattern后分片</p>
</li>
<li><p>范围取模: PartitionByRangeMod(partition-rane-mod.txt)</p>
<ul>
<li>```txt<br>  0-2000=1        #范围在2000以内的在第一个节点（取模的结果还是本身）<br>  2001-4000=2        #范围在2001到4000以内的再模2，结果为0在第一个节点，结果为1在第三个节点  <figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">-   其他</span><br><span class="line"></span><br><span class="line">优点：</span><br><span class="line"></span><br><span class="line">-   并发访问能力增强（负载到不同的节点）</span><br><span class="line">-   范围条件查询性能提升（并行计算）</span><br><span class="line"></span><br><span class="line">缺点：</span><br><span class="line"></span><br><span class="line">-   数据扩容比较困难，设计到数据迁移问题</span><br><span class="line">-   数据库连接消耗比较多</span><br><span class="line"></span><br><span class="line">分片策略的选择：</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>） 确定分片表</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>） 找出分片键</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>） 考虑容量、增速、业务用户</span><br><span class="line"></span><br><span class="line">如果在查询语句中没有携带分片建，那么mycat会将sql发布到所有的节点上</span><br><span class="line"></span><br><span class="line">## <span class="number">7.</span> Mycat扩缩容</span><br><span class="line"></span><br><span class="line">### <span class="number">7.1</span> 在线不停机扩缩容（双写）</span><br><span class="line"></span><br><span class="line">![image<span class="number">-20201107205855474</span>](./mycat/image<span class="number">-20201107205855474.</span>png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### <span class="number">7.2</span> 离线扩缩容</span><br><span class="line"></span><br><span class="line">#### <span class="number">7.2</span><span class="number">.1</span>Mysql Dump</span><br><span class="line"></span><br><span class="line">```shell</span><br><span class="line">mysqldump -uroot -p123456 -h127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span> -p3306 -c -t --skip-extended-insert 数据库名称 &gt; mysql<span class="number">.11</span><span class="number">.11</span>.sql</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h4 id="7-2-2-Mycat自带工具"><a href="#7-2-2-Mycat自带工具" class="headerlink" title="7.2.2 Mycat自带工具"></a>7.2.2 Mycat自带工具</h4><ol>
<li> mycat所在环境安装mysql客户端程序</li>
<li> mycat的lib目录下添加mysql的jdbc驱动包（mysql-connector-java-5.7.1.jar）</li>
<li> 对扩容缩容的表所有节点数据进行备份</li>
<li> 复制schema.xml、rule.xml并重命名为newSchema.xml、newRule.xml</li>
<li> 修改newSchema.xml和newRule.xml配置文件为扩容缩容后的参数</li>
<li> 在conf/migrateTable.properties配置文件中配置分片库和分片表如：imall=table_test1</li>
<li> dataMigrate.sh配置mysqldump路径</li>
<li> 停止mycat服务</li>
<li> 执行bin/dataMigrate.sh脚本（不能用openjdk）</li>
<li> 替换schema.xml、rule.xml</li>
</ol>
<p><strong>注意事项：</strong></p>
<ul>
<li>  保证分片表迁移数据前后路由规则一致（取模–&gt;取模）</li>
<li>  保证分片表歉意数据前后分片字段一致</li>
<li>  全局表将被忽略</li>
<li>  不要将非分片表配置到migrateTables.properties文件中</li>
<li>  暂时只支持分片表使用Mysql作为数据源的扩容缩容</li>
</ul>
<h2 id="8-Mycat读写分离"><a href="#8-Mycat读写分离" class="headerlink" title="8. Mycat读写分离"></a>8. Mycat读写分离</h2><h3 id="8-1-主从复制"><a href="#8-1-主从复制" class="headerlink" title="8.1 主从复制"></a>8.1 主从复制</h3><ol>
<li> 数据备份回复</li>
<li> 负载均衡（读写分离）</li>
<li> 高可用HA</li>
</ol>
<h3 id="8-2-主从复制形式"><a href="#8-2-主从复制形式" class="headerlink" title="8.2 主从复制形式;"></a>8.2 主从复制形式;</h3><p><img src="/mycat/index/image-20201107212552852.png" alt="image-20201107212552852"></p>
<h4 id="binlog-Binary-log-二进制日志"><a href="#binlog-Binary-log-二进制日志" class="headerlink" title="binlog(Binary log 二进制日志)"></a>binlog(Binary log 二进制日志)</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--查看binglog: SHOW binlog events in &#x27;mysql-bin.000001&#x27;</span></span><br><span class="line"><span class="comment">--show variables like &#x27;max_blog_max&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="binlog配置"><a href="#binlog配置" class="headerlink" title="binlog配置"></a>binlog配置</h4><ul>
<li>  STATEMENT: 记录每一天修改数据的sql语句（减少日志量，节约IO）</li>
<li>  ROW: 记录哪条数据被修改了，修改成什么样子了（5.7以后默认）</li>
<li>  MIXED: 结合两种方式，一般语句用STATEMENT,函数之类的使用ROW</li>
</ul>
<p><strong>binlog</strong>格式（mysql-bin.00001等）</p>
<p><strong>查看binlog</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> binlog events <span class="keyword">in</span> <span class="string">&#x27;mysql-bin.00001&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h3><p>SQL Thread是单线程的， 这也是所有的主从复制延迟的原因，那么relay log接受master节点的sql语句主要是用于缓冲</p>
<p><img src="/mycat/index/image-20201107213638624.png" alt="image-20201107213638624"></p>
<h3 id="mycat读写分离配置"><a href="#mycat读写分离配置" class="headerlink" title="mycat读写分离配置"></a>mycat读写分离配置</h3><p><img src="/mycat/index/image-20201107213859155.png" alt="image-20201107213859155"></p>
<h3 id="8-5-Mycat注解（hint）"><a href="#8-5-Mycat注解（hint）" class="headerlink" title="8.5 Mycat注解（hint）"></a>8.5 Mycat注解（hint）</h3><p>注解用法：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">/*!mycat:sql=注解sql语句*/真正执行的SQL</span><br><span class="line"></span><br><span class="line">比如说在mycat上创建表无法创建成功，可以使用注解</span><br><span class="line">/*!mycat:sql=select * from table<span class="built_in">_</span>1 where id = 1*/create table test2(id int);</span><br><span class="line">主要注解sql可以确认mycat可以路由到子结点上，就可以执行后面的真正执行的sql语句</span><br></pre></td></tr></table></figure>

<p>注解用途：</p>
<ul>
<li>  跨库关联查询</li>
<li>  DDL或存储过程</li>
<li>  自定义分片</li>
<li>  读写分离</li>
</ul>
<h3 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h3><p>基于XA协议的两阶段提交</p>
<p><img src="/mycat/index/image-20201107215437139.png" alt="image-20201107215437139"></p>
<h4 id="XA角色"><a href="#XA角色" class="headerlink" title="XA角色"></a>XA角色</h4><p><img src="/mycat/index/image-20201107215605251.png" alt="image-20201107215605251"></p>
<h4 id="XA实现"><a href="#XA实现" class="headerlink" title="XA实现"></a>XA实现</h4><p><img src="/mycat/index/image-20201107220049532.png" alt="image-20201107220049532"></p>
<h2 id="9-Mycat核心流程"><a href="#9-Mycat核心流程" class="headerlink" title="9. Mycat核心流程"></a>9. Mycat核心流程</h2><h3 id="9-1-架构图"><a href="#9-1-架构图" class="headerlink" title="9.1 架构图"></a>9.1 架构图</h3><p><img src="/mycat/index/image-20201220170713526.png" alt="image-20201220170713526"></p>
<h3 id="9-2-启动流程"><a href="#9-2-启动流程" class="headerlink" title="9.2 启动流程"></a>9.2 启动流程</h3><ol>
<li> MycatServer启动，解析配置文件，包括服务器、分片规则等</li>
<li> 创建工作线程，建立前端连接和后端连接</li>
</ol>
<h3 id="9-3-执行SQL流程"><a href="#9-3-执行SQL流程" class="headerlink" title="9.3 执行SQL流程"></a>9.3 执行SQL流程</h3><ol>
<li> 前端连接接收mysql命令</li>
<li> 解析MySQL，mycat用的是Druid的DruidParser</li>
<li> 获取路由</li>
<li> 改写MySQL，例如两个条件在两个节点上，则变成两条单独的sql</li>
<li> 与后端数据库建立连接</li>
<li> 发送sql语句到MySQL执行</li>
<li> 获取返回结果</li>
<li> 处理返回结果，例如排序、计算等等</li>
<li> 返回给客户端</li>
</ol>
<h2 id="Mycat高可用"><a href="#Mycat高可用" class="headerlink" title="Mycat高可用"></a>Mycat高可用</h2><p><img src="/mycat/index/image-20201220172406074.png" alt="image-20201220172406074"></p>
]]></content>
      <categories>
        <category>13 开源组件</category>
      </categories>
      <tags>
        <tag>mycat</tag>
      </tags>
  </entry>
  <entry>
    <title>Java线程的生命周期状态</title>
    <url>/thread-status/index.html</url>
    <content><![CDATA[<h2 id="1-Java线程分类"><a href="#1-Java线程分类" class="headerlink" title="1. Java线程分类"></a>1. Java线程分类</h2><p>在Java中线程分别对应不同的状态，从创建线程的 NEW 到销毁时的 TERMINATED状态， 我们从Thread类中的内部枚举类State中可以看到线程的6种状态；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread which has not yet started.</span></span><br><span class="line"><span class="comment">     * 尚未启动的线程的线程状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NEW,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a runnable thread.  A thread in the runnable state is executing in the Java virtual machine but it may</span></span><br><span class="line"><span class="comment">     * be waiting for other resources from the operating system such as processor.</span></span><br><span class="line"><span class="comment">     * 可运行线程的线程状态。处于可运行状态的线程正在Java虚拟机中执行，但它可能正在等待来自操作系统的其他资源，例如处理器。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    RUNNABLE,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a thread blocked waiting for a monitor lock. A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .</span></span><br><span class="line"><span class="comment">     * 等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    BLOCKED,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:</span></span><br><span class="line"><span class="comment">     * 1.Object.wait() with no timeout </span></span><br><span class="line"><span class="comment">     * 2.Thread.join() with no timeout </span></span><br><span class="line"><span class="comment">     * 3.LockSupport.park()</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * A thread in the waiting state is waiting for another thread to perform a particular action.</span></span><br><span class="line"><span class="comment">     * For example, a thread that has called Object.wait() on an object is waiting for another thread to call</span></span><br><span class="line"><span class="comment">     * Object.notify or Object.notifyAll() on that object. A thread that has called Thread.join()</span></span><br><span class="line"><span class="comment">     * is waiting for a specified thread to terminate.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WAITING,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a waiting thread with a specified waiting time. A thread is in the timed waiting state due to calling one of</span></span><br><span class="line"><span class="comment">     * the following methods with a specified positive waiting time:</span></span><br><span class="line"><span class="comment">     * 1.Thread.sleep()</span></span><br><span class="line"><span class="comment">     * 2.Object.wait() with timeout</span></span><br><span class="line"><span class="comment">     * 3.Thread.join() with timeout</span></span><br><span class="line"><span class="comment">     * 4.LockSupport.parkNanos()</span></span><br><span class="line"><span class="comment">     * 5.LockSupport.parkUntil()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TIMED_WAITING,</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Thread state for a terminated thread. The thread has completed execution.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    TERMINATED;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-1-状态1：-NEW"><a href="#1-1-状态1：-NEW" class="headerlink" title="1.1 状态1： NEW"></a>1.1 状态1： NEW</h3><p>当线程被创建出来还没有被调用 start()时候的状态</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方描述：Thread state for a thread which has not yet started.</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>);</span><br><span class="line">        System.out.println(thread.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出： NEW</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-状态2：-RUNNABLE"><a href="#1-2-状态2：-RUNNABLE" class="headerlink" title="1.2 状态2： RUNNABLE"></a>1.2 状态2： RUNNABLE</h3><p>当线程被调用start()，且处于等待操作系统分配资源（如CPU）、等待IO连接、正在运行状态，即表示Running状态和Ready状态。<br>注：调用了start()不一定会立即改变状态，还有一些准备工作，这个时候线程状态是不确定的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方描述：</span><br><span class="line">Thread state for a runnable thread.  A thread in the runnable state is executing in the Java virtual machine but it may</span><br><span class="line">be waiting for other resources from the operating system such as processor.</span><br></pre></td></tr></table></figure>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadStateTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>);</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(thread.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出： RUNNABLE</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-状态3：-BLOCKED"><a href="#1-3-状态3：-BLOCKED" class="headerlink" title="1.3 状态3： BLOCKED"></a>1.3 状态3： BLOCKED</h3><p>等待监视器锁而被阻塞的线程的状态。当进入synchronized块/方法 或者在调用wait()被唤醒/超时之后重新进入synchronized块/方法，但是锁被其他线程占有，这个时候被操作系统挂起，状态为<strong>阻塞状态 BLOCKED</strong>。</p>
<p><strong>阻塞状态的线程，即使调用interrupt()方法也不会改变其状态</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方描述：</span><br><span class="line">Thread state for a thread blocked waiting for a monitor lock. </span><br><span class="line">A thread in the blocked state is waiting for a monitor lock to enter a synchronized block/method or reenter a synchronized block/method after calling Object.wait() .</span><br><span class="line">译文：等待监视器锁定的被阻止线程的线程状态。处于阻塞状态的线程正在等待监视器锁进入同步块/方法，或在调用对象后重新进入同步块/方法。</span><br></pre></td></tr></table></figure>

<p>阻塞(BLOCKED)：阻塞状态是指线程因为某种原因放弃了cpu 使用权，也即让出了cpu timeslice，暂时停止运行。直到线程进入可运行(runnable)状态，才有机会再次获得cpu timeslice 转到运行(running)状态。阻塞的情况分三种：</p>
<ul>
<li>等待阻塞：运行(running)的线程执行o.wait()方法，JVM会把该线程放入等待队列(waitting queue)中。</li>
<li>同步阻塞：运行(running)的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池(lock pool)中。</li>
<li>其他阻塞：运行(running)的线程执行Thread.sleep(long ms)或t.join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入可运行(runnable)状态。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlockedState</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String lock = <span class="string">&quot;锁&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123;</span><br><span class="line">                    <span class="comment">//死循环导致thread1一直持有lock对象锁</span></span><br><span class="line">                    <span class="keyword">while</span> (<span class="keyword">true</span>) ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//休眠1秒，让thread1先启动</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread2&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock) &#123; <span class="comment">//@1</span></span><br><span class="line">                    System.out.println(<span class="string">&quot;thread2&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread2.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class="line">        System.out.println(<span class="string">&quot;thread2.state:&quot;</span> + thread2.getState());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//while (true) 死循环导致thread1持有lock对象锁一直没有释放，而thread2也想获取lock对象锁，但是锁一直被thread1持有着，导致thread2被阻塞在@1处，</span></span><br><span class="line">        <span class="comment">//此时thread2就处于BLOCKED状态</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出： thread1.state:RUNNABLE</span></span><br><span class="line"><span class="comment">//      thread2.state:BLOCKED</span></span><br></pre></td></tr></table></figure>
<p>查看2个线程的堆栈信息，包括：线程状态、线程目前执行到哪段代码等</p>
<ol>
<li><p>jps命令查看需要打印线程栈的进程号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jps</span><br></pre></td></tr></table></figure>
<p><img src="/thread-status/index/02.png"></p>
</li>
<li><p>jstack命令生成java虚拟机当前时刻的线程快照</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jstack 46622  #找到BlockedState线程的</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;thread2&quot; #13 prio=5 os_prio=31 tid=0x00007f81c387e800 nid=0xa703 waiting for monitor entry [0x000070000bbbd000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">      at org.example.thread.BlockedState$2.run(BlockedState.java:26)</span><br><span class="line">         - waiting to lock &lt;0x0000000715916c40&gt; (a java.lang.String)</span><br><span class="line"></span><br><span class="line">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007f81b3d9b800 nid=0x5503 runnable [0x000070000b9b7000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">      at org.example.thread.BlockedState$1.run(BlockedState.java:14)</span><br><span class="line">          - locked &lt;0x0000000715916c40&gt; (a java.lang.String)</span><br></pre></td></tr></table></figure>
<p>输出内容释义：</p>
<ul>
<li>thread1：线程名称</li>
<li>#11：当前线程ID，从 main线程开始，JVM 根据线程创建的顺序为线程编号</li>
<li>prio：是 priority 优先级的缩写，表明了当前线程的优先级，取值范围【1～10】，默认为 5，在虚拟机进行线程调度的时候会参考该优先级为线程分配计算资源，数值越小优先级越高，一般不设置直接使用默认的优先级。</li>
<li>os_prio：线程对应系统的优先级</li>
<li>nid： 本地线程编号， NativeID的缩写，对应JVM虚拟机中线程映射在操作系统中的线程编号，可以通过 top 命令查看进程对应的线程情况进行相关映射</li>
</ul>
</li>
</ol>
<h3 id="1-4-状态4：-WAITING"><a href="#1-4-状态4：-WAITING" class="headerlink" title="1.4 状态4： WAITING"></a>1.4 状态4： WAITING</h3><p>无条件等待，当线程调用wait()/join()/LockSupport.park()不加超时时间的方法之后所处的状态，如果没有被唤醒或等待的线程没有结束，那么将一直等待，当前状态的线程不会被分配CPU资源和持有锁。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方描述：</span><br><span class="line"></span><br><span class="line">Thread state for a waiting thread. A thread is in the waiting state due to calling one of the following methods:</span><br><span class="line">1.Object.wait with no timeout </span><br><span class="line">2.Thread.join with no timeout </span><br><span class="line">3.LockSupport.park</span><br><span class="line"></span><br><span class="line">A thread in the waiting state is waiting for another thread to perform a particular action.</span><br><span class="line">For example, a thread that has called Object.wait() on an object is waiting for another thread to call</span><br><span class="line">Object.notify or Object.notifyAll() on that object. A thread that has called Thread.join()</span><br><span class="line">is waiting for a specified thread to terminate.</span><br></pre></td></tr></table></figure>
<h4 id="方式一：Object-wait"><a href="#方式一：Object-wait" class="headerlink" title="方式一：Object.wait()"></a>方式一：Object.wait()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (WaitingState.class)&#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        WaitingState.class.wait();</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//模拟休眠1秒，让thread1运行到wait方法处</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread.state:&quot;</span>+thread1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出： thread1.state:WAITING</span></span><br></pre></td></tr></table></figure>
<p>打印线程thread1堆栈信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007fc57b877800 nid=0x5503 in Object.wait() [0x0000700011529000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">true  at java.lang.Object.wait(Native Method)</span><br><span class="line">true    - waiting on &lt;0x0000000715916c40&gt; (a java.lang.Class for org.example.thread.WaitingState)</span><br><span class="line">true  at java.lang.Object.wait(Object.java:502)</span><br><span class="line">true  at org.example.thread.WaitingState$1.run(WaitingState.java:12)</span><br><span class="line">true    - locked &lt;0x0000000715916c40&gt; (a java.lang.Class for org.example.thread.WaitingState)</span><br></pre></td></tr></table></figure>
<h4 id="方式二：Thread-join"><a href="#方式二：Thread-join" class="headerlink" title="方式二：Thread.join()"></a>方式二：Thread.join()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">               <span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//join方法会让当前主线程等待thread1结束</span></span><br><span class="line">        thread1.join();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码导致主线程处于WAITING状态，下面是主线程堆栈信息，第二行显示主线程处于WAITING状态，第五行表示因为调用了Thread.join导致线程WAITING</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;main&quot; #1 prio=5 os_prio=31 tid=0x00007fea7b01b800 nid=0xe03 in Object.wait() [0x0000700008b43000]</span><br><span class="line">   java.lang.Thread.State: WAITING (on object monitor)</span><br><span class="line">trueat java.lang.Object.wait(Native Method)</span><br><span class="line">true  - waiting on &lt;0x000000071591c4c8&gt; (a org.example.thread.WaitingState$1)</span><br><span class="line">trueat java.lang.Thread.join(Thread.java:1252)</span><br><span class="line">true  - locked &lt;0x000000071591c4c8&gt; (a org.example.thread.WaitingState$1)</span><br><span class="line">trueat java.lang.Thread.join(Thread.java:1326)</span><br><span class="line">trueat org.example.thread.WaitingState.main(WaitingState.java:17)</span><br></pre></td></tr></table></figure>

<h4 id="方式三：LockSupport-park"><a href="#方式三：LockSupport-park" class="headerlink" title="方式三：LockSupport.park()"></a>方式三：LockSupport.park()</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>)&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                LockSupport.park();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread.state:&quot;</span>+thread1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出： thread.state:WAITING</span></span><br></pre></td></tr></table></figure>
<p>打印线程thread1的堆栈信息如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007f7baf82d000 nid=0x5503 waiting on condition [0x000070000b2b9000]</span><br><span class="line">   java.lang.Thread.State: WAITING (parking)</span><br><span class="line">trueat sun.misc.Unsafe.park(Native Method)</span><br><span class="line">trueat java.util.concurrent.locks.LockSupport.park(LockSupport.java:304)</span><br><span class="line">trueat org.example.thread.WaitingState$1.run(WaitingState.java:11)</span><br></pre></td></tr></table></figure>

<h3 id="1-5-状态5：-TIMED-WAITING"><a href="#1-5-状态5：-TIMED-WAITING" class="headerlink" title="1.5 状态5： TIMED_WAITING"></a>1.5 状态5： TIMED_WAITING</h3><p>有条件的等待，区别于上面的WAITING(无条件等待)，当线程调用以下方法之后所处的状态，在指定的时间没有被唤醒或者等待线程没有结束，会被系统自动唤醒，正常退出。</p>
<ul>
<li>sleep(睡眠时间)</li>
<li>wait(等待时间) </li>
<li>join(等待时间) </li>
<li>LockSupport.parkNanos(等待时间) </li>
<li>LockSupport.parkUntil(等待时间)</li>
</ul>
<p>TIMED_WAITING： 有期限的等待</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方描述：</span><br><span class="line">Thread state for a waiting thread with a specified waiting time. </span><br><span class="line">A thread is in the timed waiting state due to calling one of the following methods with a specified positive waiting time:</span><br><span class="line">1.Thread.sleep</span><br><span class="line">2.Object.wait with timeout</span><br><span class="line">3.Thread.join with timeout</span><br><span class="line">4.LockSupport.parkNanos</span><br><span class="line">5.LockSupport.parkUntil</span><br></pre></td></tr></table></figure>
<h4 id="方式一：Thread-sleep-seconds"><a href="#方式一：Thread-sleep-seconds" class="headerlink" title="方式一：Thread.sleep(seconds)"></a>方式一：Thread.sleep(seconds)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeWaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//休眠500秒 = 500000毫秒</span></span><br><span class="line">                    Thread.sleep(<span class="number">500</span> * <span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//模拟休眠1秒，让thread1运行到sleep方法处</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出： thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>
<p>打印线程thread1的堆栈信息，可以看出是线程sleep方法(第三行)导致线程等待</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007fddf71ae800 nid=0x5503 waiting on condition [0x000070000b11c000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (sleeping)</span><br><span class="line">trueat java.lang.Thread.sleep(Native Method)</span><br><span class="line">trueat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br></pre></td></tr></table></figure>
<h4 id="方式二：Object-wait-seconds"><a href="#方式二：Object-wait-seconds" class="headerlink" title="方式二：Object.wait(seconds)"></a>方式二：Object.wait(seconds)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeWaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (TimeWaitingState.class) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        TimeWaitingState.class.wait(<span class="number">500</span> * <span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//模拟休眠1秒，让thread1运行到sleep方法处</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出； thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>
<p>打印线程 thread1 堆栈信息，从堆栈信息第三行中可以看出是线程 wait 方法导致线程等待的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007f80a0129800 nid=0x5503 in Object.wait() [0x000070000856b000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (on object monitor)</span><br><span class="line">trueat java.lang.Object.wait(Native Method)</span><br><span class="line">true- waiting on &lt;0x0000000715916d28&gt; (a java.lang.Class for org.example.thread.TimeWaitingState)</span><br><span class="line">trueat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br><span class="line">true- locked &lt;0x0000000715916d28&gt; (a java.lang.Class for org.example.thread.TimeWaitingState)</span><br></pre></td></tr></table></figure>
<h4 id="方式三：Thread-join-seconds"><a href="#方式三：Thread-join-seconds" class="headerlink" title="方式三：Thread.join(seconds)"></a>方式三：Thread.join(seconds)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeWaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//Thread.join 会让当前主线程等待thread1结束，需要等待500s</span></span><br><span class="line">        thread1.join(<span class="number">500</span> * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Thread.join 会让当前主线程等待thread1结束，所以我们查看主线程堆栈信息: </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;main&quot; #1 prio=5 os_prio=31 tid=0x00007fa6d7009000 nid=0xd03 in Object.wait() [0x000070000feb9000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (on object monitor)</span><br><span class="line">trueat java.lang.Object.wait(Native Method)</span><br><span class="line">true- waiting on &lt;0x000000071591c138&gt; (a org.example.thread.TimeWaitingState$1)</span><br><span class="line">trueat java.lang.Thread.join(Thread.java:1260)</span><br><span class="line">true- locked &lt;0x000000071591c138&gt; (a org.example.thread.TimeWaitingState$1)</span><br><span class="line">trueat org.example.thread.TimeWaitingState.main(TimeWaitingState.java:14)</span><br></pre></td></tr></table></figure>
<h4 id="方式四：LockSupport-parkNanos-seconds"><a href="#方式四：LockSupport-parkNanos-seconds" class="headerlink" title="方式四：LockSupport.parkNanos(seconds)"></a>方式四：LockSupport.parkNanos(seconds)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeWaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//等待500秒</span></span><br><span class="line">                LockSupport.parkNanos(TimeUnit.SECONDS.toNanos(<span class="number">500</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//模拟休眠1秒，让thread1运行到parkNanos方法处</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出： thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>
<p>线程 thread1 堆栈信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007fb71b07a000 nid=0x5503 waiting on condition [0x0000700001da8000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (parking)</span><br><span class="line">trueat sun.misc.Unsafe.park(Native Method)</span><br><span class="line">trueat java.util.concurrent.locks.LockSupport.parkNanos(LockSupport.java:338)</span><br><span class="line">trueat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br></pre></td></tr></table></figure>
<h4 id="方式五：LockSupport-parkUntil-seconds"><a href="#方式五：LockSupport-parkUntil-seconds" class="headerlink" title="方式五：LockSupport.parkUntil(seconds)"></a>方式五：LockSupport.parkUntil(seconds)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeWaitingState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//等待500秒</span></span><br><span class="line">                LockSupport.parkUntil(System.currentTimeMillis() + TimeUnit.SECONDS.toMillis(<span class="number">500</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//模拟休眠1秒，让thread1运行到parkNanos方法处</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread1.state:&quot;</span> + thread1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出： thread1.state:TIMED_WAITING</span></span><br></pre></td></tr></table></figure>
<p>线程 thread1 堆栈信息</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&quot;thread1&quot; #11 prio=5 os_prio=31 tid=0x00007ff41d076000 nid=0x5503 waiting on condition [0x00007000094df000]</span><br><span class="line">   java.lang.Thread.State: TIMED_WAITING (parking)</span><br><span class="line">trueat sun.misc.Unsafe.park(Native Method)</span><br><span class="line">trueat java.util.concurrent.locks.LockSupport.parkUntil(LockSupport.java:372)</span><br><span class="line">trueat org.example.thread.TimeWaitingState$1.run(TimeWaitingState.java:12)</span><br></pre></td></tr></table></figure>

<h3 id="1-6-状态6：-TERMINATED"><a href="#1-6-状态6：-TERMINATED" class="headerlink" title="1.6 状态6： TERMINATED"></a>1.6 状态6： TERMINATED</h3><p>执行完了 run()方法。其实这只是 Java 语言级别的一种状态，在操作系统内部可能已经注销了相应的线程，或者将它复用给其他需要使用线程的请求，而在 Java 语言级别只是通过 Java 代码看到的线程状态而已</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">官方描述：</span><br><span class="line">Thread state for a terminated thread. The thread has completed execution.</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TerminatedState</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="string">&quot;thread1&quot;</span>) &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(Thread.currentThread());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        <span class="comment">//休眠1秒，等待thread1执行完毕</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;thread1 state:&quot;</span> + thread1.getState());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：Thread[thread1,5,main]</span></span><br><span class="line"><span class="comment">//     thread1 state:TERMINATED</span></span><br></pre></td></tr></table></figure>

<h2 id="2-状态转化"><a href="#2-状态转化" class="headerlink" title="2.状态转化"></a>2.状态转化</h2><p><img src="/thread-status/index/03.png" alt="线程的状态"><br><img src="/thread-status/index/01.jpg" alt="线程的状态"></p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>vue学习</title>
    <url>/vue/index.html</url>
    <content><![CDATA[<p>Object.freeze()，这会阻止修改现有的 property，也意味着响应系统无法再追踪变化。</p>
<h3 id="1-export"><a href="#1-export" class="headerlink" title="1. export"></a>1. export</h3><hr>
<p>用于规定模块的对外接口，export输出变量和方法、类</p>
<ul>
<li><p>变量</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// profile.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">&#x27;Michael&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">&#x27;Jackson&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简写--优先使用</span></span><br><span class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>方法</p>
  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果想为输入的变量重新命名， 可以使用AS 关键字重新命名</span></span><br><span class="line"><span class="keyword">import</span> &#123; buildMenus <span class="keyword">as</span> buildMenus&#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/menu&#x27;</span>;</span><br><span class="line"><span class="comment">//import命令接受一对大括号，里面指定要从其他模块导入的变量名。大括号里面的变量名，必须与被导入模块（profile.js）对外接口的名称相同</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-export-default"><a href="#2-export-default" class="headerlink" title="2. export default"></a>2. export default</h3><p>为模块指定默认输出， 使用import命令的时候，用户需要知道所要加载的变量名和函数名，否则无法加载；了解模块有哪些方法和属性比较麻烦，使用export default命令，为模块指定默认输出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// export-default.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;foo&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面代码是一个模块文件export-default.js。默认输出1个函数；</p>
<p>与export命令的区别：其他模块加载该模块是，import命令可以为该匿名函数指定任意名字</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// import-default.js</span></span><br><span class="line"><span class="keyword">import</span> customName <span class="keyword">from</span> <span class="string">&#x27;./export-default&#x27;</span>;</span><br><span class="line">customName(); <span class="comment">// &#x27;foo&#x27;</span></span><br></pre></td></tr></table></figure>

<p>上面代码的<code>import</code>命令，可以用任意名称指向<code>export-default.js</code>输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，这时<code>import</code>命令后面，不使用大括号。</p>
<p>本质上，<code>export default</code>就是输出一个叫做<code>default</code>的变量或方法，然后系统允许你为它取任意名字。所以，下面的写法是有效的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// modules.js</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x * y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;add <span class="keyword">as</span> <span class="keyword">default</span>&#125;;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="comment">// export default add;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> foo &#125; <span class="keyword">from</span> <span class="string">&#x27;modules&#x27;</span>;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="comment">// import foo from &#x27;modules&#x27;;</span></span><br></pre></td></tr></table></figure>

<p>正是因为<code>export default</code>命令其实只是输出一个叫做<code>default</code>的变量，所以它后面不能跟变量声明语句。</p>
<p><strong>总结：</strong></p>
<ul>
<li><p>  export命令对外接口是有名称的且<code>import</code>命令从模块导入的变量名与被导入模块对外接口的名称相同，而export default命令对外输出的变量名可以是任意的，这时<code>import</code>命令后面，不使用大括号。</p>
</li>
<li><p>  <code>export default</code>命令用于指定模块的默认输出。显然，一个模块只能有一个默认输出，因此<code>export default</code>命令只能使用一次。所以，import命令后面才不用加大括号，因为只可能唯一对应<code>export default</code>命令。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//menu.js</span></span><br><span class="line"><span class="comment">//get请求获取所有的菜单信息</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">buildMenus</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;api/menus/build&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//post 请求保存数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;api/menus&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//delete 请求删除数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">del</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;api/menus/&#x27;</span> + id,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;delete&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//put请求修改数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">edit</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;api/menus&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;put&#x27;</span>,</span><br><span class="line">    data</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//app.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; buildMenus &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/menu&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h3 id="3-Const、var、let"><a href="#3-Const、var、let" class="headerlink" title="3. Const、var、let"></a>3. Const、var、let</h3><p> ES5 中作用域有：全局作用域、函数作用域。没有块作用域的概念。</p>
<p> ES6 中新增了块级作用域。块作用域由 { } 包括，if语句和 for语句里面的{ }也属于块作用域</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 通过var定义的变量可以跨块作用域访问到。</span></span><br><span class="line"></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// console.log(b); // 报错，</span></span><br><span class="line"><span class="comment">// 可见，通过var定义的变量不能跨函数作用域访问到</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++) &#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="number">5</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 4   (循环结束i已经是4，所以此处i为4)</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// 5</span></span><br><span class="line"><span class="comment">// if语句和for语句中用var定义的变量可以在外面访问到，</span></span><br><span class="line"><span class="comment">// 可见，if语句和for语句属于块作用域，不属于函数作用域</span></span><br></pre></td></tr></table></figure>

<p>三者的区别：</p>
<ol>
<li> var定义的变量，没有块的概念，可以跨块访问, 不能跨函数访问。</li>
<li> let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。</li>
<li> const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，而且不能修改。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 块作用域</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">const</span> c = <span class="number">3</span>;</span><br><span class="line">  <span class="comment">// c = 4; // 报错</span></span><br><span class="line">  <span class="keyword">var</span> aa;</span><br><span class="line">  <span class="keyword">let</span> bb;</span><br><span class="line">  <span class="comment">// const cc; // 报错</span></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line">  <span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line">  <span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br><span class="line">  <span class="built_in">console</span>.log(aa); <span class="comment">// undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(bb); <span class="comment">// undefined</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="comment">// console.log(b); // 报错</span></span><br><span class="line"><span class="comment">// console.log(c); // 报错</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数作用域</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> d = <span class="number">5</span>;</span><br><span class="line">  <span class="keyword">let</span> e = <span class="number">6</span>;</span><br><span class="line">  <span class="keyword">const</span> f = <span class="number">7</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(d); <span class="comment">// 5</span></span><br><span class="line">  <span class="built_in">console</span>.log(e); <span class="comment">// 6  </span></span><br><span class="line">  <span class="built_in">console</span>.log(f); <span class="comment">// 7 </span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="comment">// console.log(d); // 报错</span></span><br><span class="line"><span class="comment">// console.log(e); // 报错</span></span><br><span class="line"><span class="comment">// console.log(f); // 报错</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>注意：<strong>const定义的对象属性是否可以改变</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span> : <span class="string">&#x27;jiuke&#x27;</span>,</span><br><span class="line">  <span class="attr">sex</span> : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">person.name = <span class="string">&#x27;test&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name)<span class="comment">//person对象的name属性确实被修改了</span></span><br></pre></td></tr></table></figure>

<p>因为对象是引用类型的，person中保存的仅是对象的指针，这就意味着，const仅保证指针不发生改变，修改对象的属性不会改变对象的指针，所以是被允许的。也就是说const定义的引用类型只要指针不发生改变，其他的不论如何改变都是允许的。</p>
<p>然后我们试着修改一下指针，让person指向一个新对象，果然报错</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">   <span class="attr">name</span> : <span class="string">&#x27;jiuke&#x27;</span>,</span><br><span class="line">   <span class="attr">sex</span> : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">person = &#123;</span><br><span class="line">   <span class="attr">name</span> : <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">   <span class="attr">sex</span> : <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//报错</span></span><br></pre></td></tr></table></figure>

<h3 id="4-promise"><a href="#4-promise" class="headerlink" title="4. promise"></a>4. promise</h3><p>promise用途：异步编程的一种解决方案。</p>
<p>优点：比传统的解决方案——回调函数和事件——更合理和更强大。</p>
<p>三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基本用法：</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(value);<span class="comment">//表示异步操作成功</span></span><br><span class="line">    reject(error);<span class="comment">//表示异步操作失败</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//promise常用的几个方法</span></span><br><span class="line"><span class="comment">//1. 异步状态为成功时调用第一个函数，为失败时调用第二个函数。then方法的第二个参数可选。</span></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;&#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 异步状态为失败时调用。</span></span><br><span class="line">promise.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. promise异步状态为失败时或then方法中抛出错误都会执行catch方法。</span></span><br><span class="line">promise.then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;&#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;&#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 不管状态如何都会执行的操作。</span></span><br><span class="line">promise.finally(<span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="5-生命周期"><a href="#5-生命周期" class="headerlink" title="5. 生命周期"></a>5. 生命周期</h3><img src="https://cn.vuejs.org/images/lifecycle.png" alt="img" style="zoom:50%;">

<h3 id="6-模版语法"><a href="#6-模版语法" class="headerlink" title="6. 模版语法"></a>6. 模版语法</h3><h4 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h4><p>执行一次性插值，当数据变化的时候，该内容不会更新；可能会影响该节点其他的数据绑定</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>这个将不会改变: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a>v-html</h4><p>双大括号会将数据解释为普通文本，而非 HTML 代码。为了输出真正的 HTML，你需要使用v-html;</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">var rawHtml = &quot;<span class="tag">&lt;<span class="name">span</span>&gt;</span>这是个使用v-htmls<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&quot;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">&quot;rawHtml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a><a href="https://cn.vuejs.org/v2/guide/syntax.html#Attribute">Attribute</a></h4><p>Mustache ({}) 语法不能作用在 HTML attribute 上，遇到这种情况应该使用 <a href="https://cn.vuejs.org/v2/api/#v-bind"><code>v-bind</code> 指令</a>：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;dynamicId&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//isButtonDisabled 的值是 null、undefined 或 false，则 disabled attribute 甚至不会被包含在渲染出来的 <span class="tag">&lt;<span class="name">button</span>&gt;</span> 元素中</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-bind:disabled</span>=<span class="string">&quot;isButtonDisabled&quot;</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; number + 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; ok ? &#x27;YES&#x27; : &#x27;NO&#x27; &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>=<span class="string">&quot;&#x27;list-&#x27; + id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//这些表达式会在所属 Vue 实例的数据作用域下作为 JavaScript 被解析。有个限制就是，每个绑定都只能包含单个表达式，所以下面的例子都不会生效。</span><br><span class="line"><span class="comment">&lt;!-- 这是语句，不是表达式 --&gt;</span></span><br><span class="line">&#123;&#123; var a = 1 &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 流控制也不会生效，请使用三元表达式 --&gt;</span></span><br><span class="line">&#123;&#123; if (ok) &#123; return message &#125; &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7-指令Directives"><a href="#7-指令Directives" class="headerlink" title="7. 指令Directives"></a>7. 指令Directives</h3><p>指令 (Directives) 是带有 <code>v-</code> 前缀的特殊 attribute。指令 attribute 的值预期是<strong>单个 JavaScript 表达式</strong> (<code>v-for</code> 是例外情况，稍后我们再讨论)。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//v-if 指令将根据表达式 seen 的值的真假来插入/移除 <span class="tag">&lt;<span class="name">p</span>&gt;</span> 元素。</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">&quot;seen&quot;</span>&gt;</span>现在你看到我了<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>一些指令能够接收一个“参数”，在指令名称之后以冒号表示。例如，<code>v-bind</code> 指令可以用于响应式地更新 HTML attribute</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//href 是参数，告知 v-bind 指令将该元素的 href attribute 与表达式 url 的值绑定</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="动态参数"><a href="#动态参数" class="headerlink" title="动态参数"></a>动态参数</h4><p> 2.6.0 开始，可以用方括号括起来的 JavaScript 表达式作为一个指令的参数</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:</span>[<span class="attr">attributeName</span>] = <span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	这里的attributeName会被作为一个javascript表达式进行动态赋值，求得的值会作为最终的参数来使用</span></span><br><span class="line"><span class="comment">如果VUE实例有一个data. property. attributeName， 其值为href， 那么绑定将等价于v-bind:href</span></span><br><span class="line"><span class="comment">---&gt;</span></span><br></pre></td></tr></table></figure>

<p>绑定处理函数：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:</span>[<span class="attr">eventName</span>]=<span class="string">&quot;dosomething&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>对动态参数的值的约束</p>
<p>  动态参数预期会求出一个字符串，异常情况下值为 <code>null</code>。这个特殊的 <code>null</code> 值可以被显性地用于移除绑定。任何其它非字符串类型的值都将会触发一个警告。</p>
</li>
<li><p>对动态参数表达式的约束</p>
<p>  动态参数表达式有一些语法约束，因为某些字符，如空格和引号，放在 HTML attribute 名里是无效的。例如：</p>
</li>
</ul>
<h4 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h4><p>修饰符（modifier）是以半角句号<code>.</code> 指明的特殊后缀，用于指出一个指令应该以特殊方式绑定；例如<code> .prevent</code>修饰符告诉v-on指令对触发的事件调用event.preventDefault();</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span> = <span class="string">&quot;onSubmit&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:</span>[<span class="attr">key</span>]=<span class="string">&quot;url&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;doSomething&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动态参数的缩写 (2.6.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @[<span class="attr">event</span>]=<span class="string">&quot;doSomething&quot;</span>&gt;</span> ... <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>:</code> 与 <code>@</code> 对于 attribute 名来说都是合法字符，在所有支持 Vue 的浏览器都能被正确地解析。而且，它们不会出现在最终渲染的标记中。</p>
<h3 id="8-计算属性"><a href="#8-计算属性" class="headerlink" title="8. 计算属性"></a>8. 计算属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  &#123;&#123; message.split(&#x27;&#x27;).reverse().join(&#x27;&#x27;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里是想要显示变量 <code>message</code> 的翻转字符串。当你想要在模板中的多处包含此翻转字符串时，就会更加难以处理。</p>
<p>所以，对于任何复杂逻辑，你都应当使用<strong>计算属性</strong></p>
<p>例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: &quot;&#123;&#123; message &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: &quot;&#123;&#123; reversedMessage &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#example&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 计算属性的 getter</span></span><br><span class="line">    <span class="attr">reversedMessage</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//页面显示：</span></span><br><span class="line"><span class="comment">//Original message: &quot;Hello&quot;</span></span><br><span class="line"><span class="comment">//Computed reversed message: &quot;olleH&quot;</span></span><br></pre></td></tr></table></figure>

<p>声明了一个计算属性<code>reversedMessage</code>；我们提供的函数将用作property <code>vm.reversedMessage</code>的getter函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(vm.reversedMessage) <span class="comment">// olleH</span></span><br><span class="line">vm.message = <span class="string">&#x27;Goodbye&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(vm.reversedMessage) <span class="comment">// =&gt; &#x27;eybdooG&#x27;</span></span><br></pre></td></tr></table></figure>

<p>你可以打开浏览器的控制台，自行修改例子中的 vm。<code>vm.reversedMessage</code> 的值始终取决于 <code>vm.message</code> 的值。</p>
<p>你可以像绑定普通 property 一样在模板中绑定计算属性。Vue 知道 <code>vm.reversedMessage</code> 依赖于 <code>vm.message</code>，因此当 <code>vm.message</code> 发生改变时，所有依赖 <code>vm.reversedMessage</code> 的绑定也会更新。以声明的方式创建了这种依赖关系：计算属性的 getter 函数是没有副作用 (side effect) 的。</p>
<h4 id="计算属性-VS-方法"><a href="#计算属性-VS-方法" class="headerlink" title="计算属性 VS 方法"></a>计算属性 VS 方法</h4><p>使用表达式中调用方法同样可以达到上面的结果</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Reversed message: &quot;&#123;&#123; reversedMessage() &#125;&#125;&quot;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在组件中</span></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="attr">reversedMessage</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.message.split(<span class="string">&#x27;&#x27;</span>).reverse().join(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以将同一函数定义为一个方法而不是一个计算属性。两种方式的最终结果确实是完全相同的。然而，不同的是<strong>计算属性是基于它们的响应式依赖进行缓存的</strong>。只在相关响应式依赖发生改变时它们才会重新求值。这就意味着只要 <code>message</code> 还没有发生改变，多次访问 <code>reversedMessage</code> 计算属性会立即返回之前的计算结果，而不必再次执行函数。</p>
<p>这也同样意味着下面的计算属性将不再更新，因为 <code>Date.now()</code> 不是响应式依赖：</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  now: <span class="keyword">function</span> <span class="title"></span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="type">Date.now()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相比之下，每当触发重新渲染时，调用方法将<strong>总会</strong>再次执行函数。</p>
<p>我们为什么需要缓存？假设我们有一个性能开销比较大的计算属性 <strong>A</strong>，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 <strong>A</strong>。如果没有缓存，我们将不可避免的多次执行 <strong>A</strong> 的 getter！如果你不希望有缓存，请用方法来替代。</p>
<h4 id="计算属性-VS-侦听属性"><a href="#计算属性-VS-侦听属性" class="headerlink" title="计算属性 VS 侦听属性"></a>计算属性 VS 侦听属性</h4><p>侦听属性：vue提供了一种更通用的方式来观察和响应vue实例上的数据变动；当有一些数据需要随着其他数据变动而变动时；很容易滥用watch;<strong>通常更好的做法是使用计算属性而不是命令式的watch回调</strong>；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#demo&#x27;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">    <span class="attr">fullName</span>: <span class="string">&#x27;Foo Bar&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//侦听属性watch </span></span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">firstName</span>: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.fullName = val + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">lastName</span>: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.fullName = <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//计算属性</span></span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="attr">fullName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="计算属性的setter"><a href="#计算属性的setter" class="headerlink" title="计算属性的setter"></a>计算属性的setter</h4><p>计算属性默认只有getter，自己可以提供一个setter</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  <span class="attr">fullName</span>: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    <span class="attr">set</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">      <span class="built_in">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="built_in">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>现在再运行 <code>vm.fullName = &#39;John Doe&#39;</code> 时，setter 会被调用，<code>vm.firstName</code> 和 <code>vm.lastName</code> 也会相应地被更新。</p>
<h3 id="9-侦听器"><a href="#9-侦听器" class="headerlink" title="9. 侦听器"></a>9. 侦听器</h3><p>当需要在数据变化时执行异步或开销较大的操作时，watch是最有用的；同时也可以自定义侦听器；</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;watch-example&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Ask a yes/no question:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;question&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; answer &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!-- 因为 AJAX 库和通用工具的生态已经相当丰富，Vue 核心代码没有重复 --&gt;</span><br><span class="line">&lt;!-- 提供这些功能以保持精简。这也可以让你自由选择自己更熟悉的工具。 --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios@0.12.0/dist/axios.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/lodash@4.13.1/lodash.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml"><span class="keyword">var</span> watchExampleVM = <span class="keyword">new</span> Vue(&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">el</span>: <span class="string">&#x27;#watch-example&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">data</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">question</span>: <span class="string">&#x27;&#x27;</span>,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">answer</span>: <span class="string">&#x27;I cannot give you an answer until you ask a question!&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">watch</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 如果 `question` 发生改变，这个函数就会运行</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">question</span>: <span class="function"><span class="keyword">function</span> (<span class="params">newQuestion, oldQuestion</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.answer = <span class="string">&#x27;Waiting for you to stop typing...&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.debouncedGetAnswer()</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// `_.debounce` 是一个通过 Lodash 限制操作频率的函数。</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 在这个例子中，我们希望限制访问 yesno.wtf/api 的频率</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// AJAX 请求直到用户输入完毕才会发出。想要了解更多关于</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// `_.debounce` 函数 (及其近亲 `_.throttle`) 的知识，</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 请参考：https://lodash.com/docs#debounce</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">this</span>.debouncedGetAnswer = _.debounce(<span class="built_in">this</span>.getAnswer, <span class="number">500</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;,</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="attr">getAnswer</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">if</span> (<span class="built_in">this</span>.question.indexOf(<span class="string">&#x27;?&#x27;</span>) === -<span class="number">1</span>) &#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">this</span>.answer = <span class="string">&#x27;Questions usually contain a question mark. ;-)&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="keyword">return</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="built_in">this</span>.answer = <span class="string">&#x27;Thinking...&#x27;</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      <span class="keyword">var</span> vm = <span class="built_in">this</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">      axios.get(<span class="string">&#x27;https://yesno.wtf/api&#x27;</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          vm.answer = _.capitalize(response.data.answer)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="comment">//异常捕获</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">          vm.answer = <span class="string">&#x27;Error! Could not reach the API. &#x27;</span> + error</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        &#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">  &#125;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">&#125;)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>使用 <code>watch</code> 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的</p>
<h3 id="10-class与style绑定"><a href="#10-class与style绑定" class="headerlink" title="10. class与style绑定"></a>10. class与style绑定</h3><p>将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时，Vue.js 做了专门的增强。表达式结果的类型除了字符串之外，还可以是对象或数组</p>
<h4 id="10-1-绑定html-class"><a href="#10-1-绑定html-class" class="headerlink" title="10.1 绑定html class"></a>10.1 绑定html class</h4><h5 id="10-1-1对象语法"><a href="#10-1-1对象语法" class="headerlink" title="10.1.1对象语法"></a>10.1.1对象语法</h5><p>方式一：内联</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;static&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-bind:class</span>=<span class="string">&quot;&#123; active: isActive, &#x27;text-danger&#x27;: hasError &#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//data</span><br><span class="line">data: &#123;</span><br><span class="line">  isActive: true,</span><br><span class="line">  hasError: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式二：绑定的数据对象不必内联定义在模板里</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">//vue data</span><br><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: true,</span><br><span class="line">    &#x27;text-danger&#x27;: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方式三：绑定一个返回对象的计算属性（常用）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">&quot;classObject&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//vue data</span><br><span class="line">data: &#123;</span><br><span class="line">  isActive: true,</span><br><span class="line">  error: null</span><br><span class="line">&#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  classObject: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      active: this.isActive &amp;&amp; !this.error,</span><br><span class="line">      &#x27;text-danger&#x27;: this.error &amp;&amp; this.error.type === &#x27;fatal&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="10-1-2-数组语法"><a href="#10-1-2-数组语法" class="headerlink" title="10.1.2 数组语法"></a>10.1.2 数组语法</h5>]]></content>
      <categories>
        <category>12 前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>LockSupport线程工具类</title>
    <url>/locksupport/index.html</url>
    <content><![CDATA[<h3 id="1-概要"><a href="#1-概要" class="headerlink" title="1. 概要"></a>1. 概要</h3><p>LockSupport位于java.util.concurrent（简称juc）包中，是一个编程工具类， 主要是为了阻塞和唤醒线程用的。所有的方法都是静态方法，可以让线程在任意位置阻塞，也可以在任意位置唤醒</p>
<p>主要的方法： </p>
<ul>
<li>park(阻塞线程)  和 </li>
<li>unpark(启动唤醒线程)</li>
</ul>
<p>关于线程等待/唤醒的方法：</p>
<ul>
<li>方式1：使用Object中的wait()方法让线程等待，使用Object中的notify()方法唤醒线程</li>
<li>使用juc包中Condition的await()方法让线程等待，使用signal()方法唤醒线程</li>
</ul>
<h3 id="2-wait-notify"><a href="#2-wait-notify" class="headerlink" title="2. wait/notify"></a>2. wait/notify</h3><ol>
<li>示例1 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: &quot;</span>+System.currentTimeMillis()+<span class="string">&quot; start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: &quot;</span>+System.currentTimeMillis()+<span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠5秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            lock.notify();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 输出： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t1: 1667620040963 start</span><br><span class="line">t1: 1667620045967 被唤醒</span><br></pre></td></tr></table></figure>
 t1 线程调用<code>lock.wait()</code>方法让t1线程等待，主线程休眠5s后，调用<code>lock.notify()</code>方法唤醒t1线程，然后输出信息，程序正常退出。</li>
</ol>
<ol start="2">
<li><p>示例2</p>
<p>如果将上面代码块中的两个<code>synchronized</code>去掉，发现调用<code>wait()</code>方法和<code>notify()</code>方法都会报错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + System.currentTimeMillis() + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                lock.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: &quot;</span> + System.currentTimeMillis() + <span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;thread1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠5秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        lock.notify();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">thread1: 1667624638968 start</span><br><span class="line">Exception in thread &quot;thread1&quot; java.lang.IllegalMonitorStateException</span><br><span class="line">    at java.lang.Object.wait(Native Method)</span><br><span class="line">    at java.lang.Object.wait(Object.java:502)</span><br><span class="line">    at org.example.ObjectDemo.lambda$main$0(ObjectDemo.java:13)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalMonitorStateException</span><br><span class="line">    at java.lang.Object.notify(Native Method)</span><br><span class="line">    at org.example.ObjectDemo.main(ObjectDemo.java:27)</span><br></pre></td></tr></table></figure>
<p><strong>原因： Object类中的wait、notify、notifyAll用于线程等待和唤醒的方法，都必须在同步代码块中运行（必须使用关键字synchronized）</strong></p>
</li>
</ol>
<ol start="3">
<li><p>示例3 </p>
<p>唤醒方法在等待方法之前</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Object lock = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: &quot;</span>+System.currentTimeMillis()+<span class="string">&quot; start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;: &quot;</span>+System.currentTimeMillis()+<span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;thread1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠5秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">            lock.notify();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;lock.notify 执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">lock.notify 执行完毕</span><br><span class="line">thread1: 1667625571660 start</span><br></pre></td></tr></table></figure>
<p>输出上面2行之后，程序一直无法结束，t1线程调用<code>wait()</code>方法之前先调用了<code>notify()</code>方法，导致等待的线程无法被唤醒了<br><strong>唤醒方法在等待方法之前执行，线程无法被唤醒</strong>，将上面休眠1s的时间改成大于线程中休眠的时间即可；</p>
</li>
</ol>
<p>关于Object类中的用户线程等待和唤醒的方法，总结一下：</p>
<ol>
<li><p>wait()/notify()/notifyAll()方法都必须放在同步代码（必须在synchronized内部执行）中执行，需要先获取锁</p>
</li>
<li><p>线程唤醒的方法（notify、notifyAll）需要在等待的方法（wait）之后执行，等待中的线程才可能会被唤醒，否则无法唤醒</p>
</li>
</ol>
<h3 id="3-condition实现线程等待和唤醒"><a href="#3-condition实现线程等待和唤醒" class="headerlink" title="3. condition实现线程等待和唤醒"></a>3. condition实现线程等待和唤醒</h3><ol>
<li><p>示例1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            lock.lock();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.await();  <span class="comment">//进入等待</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠5秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            condition.signal(); <span class="comment">//唤醒 t1线程</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t1:1667712939347 start</span><br><span class="line">t1:1667712944350 被唤醒</span><br></pre></td></tr></table></figure>
<p>t1 线程制动之后，调用<code>condition.await()</code>方法将线程处于等待中，主线程休眠5秒之后调用<code>condition.signal()</code>方法将t1线程唤醒；</p>
</li>
<li><p>示例2</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.await();  <span class="comment">//进入等待</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠5秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        condition.signal(); <span class="comment">//唤醒 t1线程</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t1:1667713155895 start</span><br><span class="line">Exception in thread &quot;t1&quot; java.lang.IllegalMonitorStateException</span><br><span class="line">    at java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:151)</span><br><span class="line">    at java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1261)</span><br><span class="line">    at java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:457)</span><br><span class="line">    at org.example.ConditionDemo.lambda$main$0(ConditionDemo.java:23)</span><br><span class="line">    at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Exception in thread &quot;main&quot; java.lang.IllegalMonitorStateException</span><br><span class="line">    at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.signal(AbstractQueuedSynchronizer.java:1939)</span><br><span class="line">    at org.example.ConditionDemo.main(ConditionDemo.java:30)</span><br></pre></td></tr></table></figure>
<p>有异常发生， condition.await();和 condition.signal();都触发了 IllegalMonitorStateException异常。<br><strong>原因：调用condition中线程等待和唤醒的方法的前提是必须要先获取lock的锁。</strong></p>
</li>
<li><p>示例3</p>
<p>唤醒代码在等待之前执行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConditionDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    <span class="keyword">static</span> Condition condition = lock.newCondition();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;进入线程t1&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                lock.lock();</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    condition.await();  <span class="comment">//进入等待</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠5秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        lock.lock();</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           condition.signal(); <span class="comment">//唤醒 t1线程</span></span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">           lock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line">        System.out.println(System.currentTimeMillis() +<span class="string">&quot; condition.signal;执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">进入线程t1</span><br><span class="line">1667714134893 condition.signal;执行完毕</span><br><span class="line">t1:1667714138893 start</span><br></pre></td></tr></table></figure>
<p>输出上面2行之后，程序无法结束，代码结合输出可以看出signal()方法在await()方法之前执行的，最终t1线程无法被唤醒，导致程序无法结束。</p>
</li>
</ol>
<p>关于Condition中方法使用总结：</p>
<ul>
<li><p>使用Condition中的线程等待和唤醒方法之前，需要先获取锁。否者会报 IllegalMonitorStateException异常</p>
</li>
<li><p>signal()方法先于await()方法之前调用，线程无法被唤醒</p>
</li>
</ul>
<h4 id="Object和Condition的局限性"><a href="#Object和Condition的局限性" class="headerlink" title="Object和Condition的局限性"></a>Object和Condition的局限性</h4><p>Object和Condition的局限性<br>关于Object和Condtion中线程等待和唤醒的局限性，有以下几点：</p>
<ol>
<li><p>2种方式中的让线程等待和唤醒的方法能够执行的先决条件是：线程需要先获取锁</p>
</li>
<li><p>唤醒方法需要在等待方法之后调用，线程才能够被唤醒</p>
</li>
</ol>
<p>关于这2点，LockSupport都不需要，就能实现线程的等待和唤醒。下面我们来说一下LockSupport类。</p>
<h3 id="4-LockSupport"><a href="#4-LockSupport" class="headerlink" title="4. LockSupport"></a>4. LockSupport</h3><p>LockSupport类可以阻塞当前线程以及唤醒指定被阻塞的线程，主要是通过<code>park()</code>和<code>unpark(thread)</code>方法来实现阻塞和唤醒线程操作的</p>
<blockquote>
<p>每个线程都有一个许可（permit），permit只有两个值 1 和 0（默认）</p>
<ol>
<li>当调用unpark(thread)方法，就会将thread线程的许可permit设置为1（多次调用结果一致）</li>
<li>当嗲用park()方法，如果当前线程的permit是1， 那么将permit 设置为0，并立即返回；如果当前park方法会被唤醒，然后会将permit再次设置为0，并返回；</li>
</ol>
<p>注意：因为permit默认是0，所以一开始调用park()方法，线程必定会被阻塞。调用unpark(thread)方法后，会自动唤醒thread线程，即park方法立即返回。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//源码</span></span><br><span class="line"><span class="keyword">package</span> java.util.concurrent.locks;</span><br><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSupport</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LockSupport</span><span class="params">()</span> </span>&#123;&#125; <span class="comment">// Cannot be instantiated.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setBlocker</span><span class="params">(Thread t, Object arg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Even though volatile, hotspot doesn&#x27;t need a write barrier here.</span></span><br><span class="line">        UNSAFE.putObject(t, parkBlockerOffset, arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> thread the thread to unpark, or &#123;<span class="doctag">@code</span> null&#125;, in which case</span></span><br><span class="line"><span class="comment">     *        this operation has no effect</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">unpark</span><span class="params">(Thread thread)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (thread != <span class="keyword">null</span>)</span><br><span class="line">            UNSAFE.unpark(thread);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞当前线程</span></span><br><span class="line"><span class="comment">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blocker the synchronization object responsible for this</span></span><br><span class="line"><span class="comment">     *        thread parking</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">(Object blocker)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="comment">//setBlocker作用是记录t线程是被broker阻塞的</span></span><br><span class="line">        setBlocker(t, blocker);</span><br><span class="line">        <span class="comment">//UNSAFE是一个非常强大的类，他的的操作是基于底层的</span></span><br><span class="line">        UNSAFE.park(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">        setBlocker(t, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停当前线程，有超时时间</span></span><br><span class="line"><span class="comment">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blocker the synchronization object responsible for this</span></span><br><span class="line"><span class="comment">     *        thread parking</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nanos the maximum number of nanoseconds to wait</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkNanos</span><span class="params">(Object blocker, <span class="keyword">long</span> nanos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Thread t = Thread.currentThread();</span><br><span class="line">            setBlocker(t, blocker);</span><br><span class="line">            UNSAFE.park(<span class="keyword">false</span>, nanos);</span><br><span class="line">            setBlocker(t, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停当前线程，知道某个时间</span></span><br><span class="line"><span class="comment">     * blocker是用来记录线程被阻塞时被谁阻塞的。用于线程监控和分析工具来定位原因的。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> blocker the synchronization object responsible for this</span></span><br><span class="line"><span class="comment">     *        thread parking</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deadline the absolute time, in milliseconds from the Epoch,</span></span><br><span class="line"><span class="comment">     *        to wait until</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkUntil</span><span class="params">(Object blocker, <span class="keyword">long</span> deadline)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        setBlocker(t, blocker);</span><br><span class="line">        UNSAFE.park(<span class="keyword">true</span>, deadline);</span><br><span class="line">        setBlocker(t, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the blocker object supplied to the most recent</span></span><br><span class="line"><span class="comment">     * invocation of a park method that has not yet unblocked, or null</span></span><br><span class="line"><span class="comment">     * if not blocked.  The value returned is just a momentary</span></span><br><span class="line"><span class="comment">     * snapshot -- the thread may have since unblocked or blocked on a</span></span><br><span class="line"><span class="comment">     * different blocker object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> t the thread</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the blocker</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> NullPointerException if argument is null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.6</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBlocker</span><span class="params">(Thread t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        <span class="keyword">return</span> UNSAFE.getObjectVolatile(t, parkBlockerOffset);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无期限暂停当前线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">park</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UNSAFE.park(<span class="keyword">false</span>, <span class="number">0L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停当前线程，不过有超时时间限制</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkNanos</span><span class="params">(<span class="keyword">long</span> nanos)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nanos &gt; <span class="number">0</span>)</span><br><span class="line">            UNSAFE.park(<span class="keyword">false</span>, nanos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 暂停当前线程，知道某个时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> deadline 暂停结束时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">parkUntil</span><span class="params">(<span class="keyword">long</span> deadline)</span> </span>&#123;</span><br><span class="line">        UNSAFE.park(<span class="keyword">true</span>, deadline);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the pseudo-randomly initialized or updated secondary seed.</span></span><br><span class="line"><span class="comment">     * Copied from ThreadLocalRandom due to package access restrictions.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">nextSecondarySeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        <span class="keyword">if</span> ((r = UNSAFE.getInt(t, SECONDARY)) != <span class="number">0</span>) &#123;</span><br><span class="line">            r ^= r &lt;&lt; <span class="number">13</span>;   <span class="comment">// xorshift</span></span><br><span class="line">            r ^= r &gt;&gt;&gt; <span class="number">17</span>;</span><br><span class="line">            r ^= r &lt;&lt; <span class="number">5</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((r = java.util.concurrent.ThreadLocalRandom.current().nextInt()) == <span class="number">0</span>)</span><br><span class="line">            r = <span class="number">1</span>; <span class="comment">// avoid zero</span></span><br><span class="line">        UNSAFE.putInt(t, SECONDARY, r);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Hotspot implementation via intrinsics API</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe UNSAFE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> parkBlockerOffset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SEED;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> PROBE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SECONDARY;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            UNSAFE = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">            Class&lt;?&gt; tk = Thread.class;</span><br><span class="line">            parkBlockerOffset = UNSAFE.objectFieldOffset</span><br><span class="line">                (tk.getDeclaredField(<span class="string">&quot;parkBlocker&quot;</span>));</span><br><span class="line">            SEED = UNSAFE.objectFieldOffset</span><br><span class="line">                (tk.getDeclaredField(<span class="string">&quot;threadLocalRandomSeed&quot;</span>));</span><br><span class="line">            PROBE = UNSAFE.objectFieldOffset</span><br><span class="line">                (tk.getDeclaredField(<span class="string">&quot;threadLocalRandomProbe&quot;</span>));</span><br><span class="line">            SECONDARY = UNSAFE.objectFieldOffset</span><br><span class="line">                (tk.getDeclaredField(<span class="string">&quot;threadLocalRandomSecondarySeed&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="4-1-示例"><a href="#4-1-示例" class="headerlink" title="4.1 示例"></a>4.1 示例</h4><ol>
<li><p>示例一</p>
<p>主线程线程等待5秒之后，唤醒t1线程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSupportDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; start&quot;</span>);</span><br><span class="line">            LockSupport.park();<span class="comment">//阻塞当前线程</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + System.currentTimeMillis() + <span class="string">&quot; 被唤醒&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        t1.setName(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        <span class="comment">//休眠5秒</span></span><br><span class="line">        TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">        LockSupport.unpark(t1);</span><br><span class="line">        System.out.println(System.currentTimeMillis() + <span class="string">&quot; lock.unpart 执行完毕&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">t1:1667727256993 start</span><br><span class="line">1667727261994 lock.unpart 执行完毕</span><br><span class="line">t1:1667727261994 被唤醒</span><br></pre></td></tr></table></figure>
<p>t1 中调用<code>LockSupport.park()</code>方法让当前线程t1等待，主线程休眠5秒后，调用<code>LockSupport.unpart(t1)</code>将线程唤醒<br><code>LockSupport.park();</code>无参数，内部直接会让当前线程处于等待中；unpark方法传递了一个线程对象作为参数，表示将对应的线程唤醒。</p>
</li>
</ol>
<h4 id="4-3-先interrupt在park"><a href="#4-3-先interrupt在park" class="headerlink" title="4.3 先interrupt在park"></a>4.3 先interrupt在park</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockSupportTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(getName() + <span class="string">&quot;进入线程&quot;</span>);</span><br><span class="line">            LockSupport.park();</span><br><span class="line">            System.out.println(<span class="string">&quot;运行结束&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;是否中断：&quot;</span>+Thread.currentThread().isInterrupted());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        thread.start();</span><br><span class="line">        System.out.println(<span class="string">&quot;线程启动了，但是在内部进行了park&quot;</span>);</span><br><span class="line">        thread.interrupt();</span><br><span class="line">        System.out.println(<span class="string">&quot;main 线程结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//       线程启动了，但是在内部进行了park</span></span><br><span class="line"><span class="comment">//       main 线程结束</span></span><br><span class="line"><span class="comment">//       Thread-0进入线程</span></span><br><span class="line"><span class="comment">//       运行结束</span></span><br></pre></td></tr></table></figure>
<h4 id="4-2-先park在interrupt"><a href="#4-2-先park在interrupt" class="headerlink" title="4.2 先park在interrupt"></a>4.2 先park在interrupt</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;进入线程&quot;</span>);</span><br><span class="line">        LockSupport.park();</span><br><span class="line">        System.out.println(<span class="string">&quot;运行结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输出：</span></span><br><span class="line"><span class="comment"> * 线程启动了，但是在内部进行了park</span></span><br><span class="line"><span class="comment"> * main 线程结束</span></span><br><span class="line"><span class="comment"> * Thread-0进入线程</span></span><br><span class="line"><span class="comment"> * 运行结束</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
<h3 id="5-线程等待和唤醒方式对比"><a href="#5-线程等待和唤醒方式对比" class="headerlink" title="5. 线程等待和唤醒方式对比"></a>5. 线程等待和唤醒方式对比</h3><ul>
<li><p>方式1：Object中的wait、notify、notifyAll方法</p>
</li>
<li><p>方式2：juc中Condition接口提供的await、signal、signalAll方法</p>
</li>
<li><p>方式3：juc中的LockSupport提供的park、unpark方法<br><img src="/locksupport/index/img.png"></p>
</li>
</ul>
<p>LockSupport是用来阻塞和环线线程的，wait/notify同样也是，那么两者的区别是什么？</p>
<ul>
<li>wait和notify都是Object中的方法，在调用这两个方法前必须获得锁对象，但是park不需要获取某个对象的锁就可以锁住线程</li>
<li>notify只能随机选择一个线程唤醒，无法唤醒指定的线程，unpark可以唤醒一个指定的线程</li>
</ul>
<h3 id="6-趣味题"><a href="#6-趣味题" class="headerlink" title="6. 趣味题"></a>6. 趣味题</h3><p>用两个线程，一个输出字母，一个输出数字交替输出如：1A2B3C4D…</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemoTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> Thread t1 = <span class="keyword">null</span>, t2 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] a = <span class="string">&quot;1234567&quot;</span>.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] b = <span class="string">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">        t1 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> i : a) &#123;</span><br><span class="line">                System.out.print(i);</span><br><span class="line">                LockSupport.unpark(t2);</span><br><span class="line">                LockSupport.park();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t2 = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> i : b) &#123;</span><br><span class="line">                LockSupport.park();</span><br><span class="line">                System.out.print(i);</span><br><span class="line">                LockSupport.unpark(t1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出：  1A2B3C4D5E6F7G</span></span><br></pre></td></tr></table></figure>
<p>使用自旋锁也可以实现上面的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CasTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义枚举，包含两个变量</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">ReadyToRun</span></span>&#123;T1, T2&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">volatile</span> ReadyToRun r = ReadyToRun.T1;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] a = <span class="string">&quot;1234567&quot;</span>.toCharArray();</span><br><span class="line">        <span class="keyword">char</span>[] b = <span class="string">&quot;ABCDEFG&quot;</span>.toCharArray();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c : a)&#123;</span><br><span class="line">                <span class="comment">//当r不为T1时， 空转占着cpu等待，然后输出字符，将r的值设置为T2</span></span><br><span class="line">                <span class="keyword">while</span> (r != ReadyToRun.T1)&#123;&#125;</span><br><span class="line">                System.out.print(c+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                r = ReadyToRun.T2;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t1&quot;</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">char</span> c : b)&#123;</span><br><span class="line">                <span class="keyword">while</span> (r != ReadyToRun.T2)&#123;&#125;</span><br><span class="line">                System.out.print(c+<span class="string">&quot; &quot;</span>);</span><br><span class="line">                r = ReadyToRun.T1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">&quot;t2&quot;</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring中9种经典设计模式</title>
    <url>/spring-design-pattern/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p><strong>1. <a href="#part1">简单工厂(非23种设计模式一种)</a></strong><br><strong>2. <a href="#part2">工厂方法</a></strong><br><strong>3. <a href="#part3">单例模式</a></strong><br><strong>4. <a href="#part4">适配器模式</a></strong><br><strong>5. <a href="#part5">装饰器模式</a></strong><br><strong>6. <a href="#part6">代理模式</a></strong><br><strong>7. <a href="#part7">观察者模式</a></strong><br><strong>8. <a href="#part8">策略模式</a></strong><br><strong>9. <a href="#part9">模板方法模式</a></strong></p>
<h3 id="1-简单工厂-非23种设计模式一种"><a href="#1-简单工厂-非23种设计模式一种" class="headerlink" title="1. 简单工厂(非23种设计模式一种)"></a>1. <span id="part1">简单工厂(非23种设计模式一种)</span></h3><ol>
<li><p>实现方式</p>
<blockquote>
<p>Spring中的BeanFactory就是简单工厂模式的体现，根据传入一个唯一的表示来获取Bean对象，但是否在传入参数后创建还是传入参数前创建这个要根据具体情况来定。</p>
</blockquote>
</li>
<li><p>实质</p>
<blockquote>
<p>由一个工厂类根据传入的参数，动态决定应该创建哪一个类</p>
</blockquote>
</li>
<li><p>实现原理</p>
<ol>
<li><p><strong>bean容器的启动阶段</strong></p>
<ul>
<li><p>读取bean的xml配置文件，将bean元素分别转化为一个BeanDefinition对象</p>
</li>
<li><p>然后通过BeanDefinitionRegistry将这些bean注册到beanFactory中，保存在它的一个ConcurrentHashMap中</p>
</li>
<li><p>将BeanDefinition注册到了BeanFactory之后，在这里Spring为我们提供了一个扩展的切口，允许我们通过实现接口BeanFactoryPostProcessor 在此处来插入我们定义的代码</p>
</li>
</ul>
<blockquote>
<p>典型的例子就是：PropertyPlaceholderConfigurer，我们一般在配置数据库的dataSource时使用到的占位符的值，就是它注入进去的。</p>
</blockquote>
</li>
<li><p><strong>容器中bean的实例化阶段</strong></p>
<p> 主要是通过反射或者CGLIB对Bean进行实例化，在这个阶段Spring又给我们暴露了很多的扩展点</p>
<ul>
<li><p><strong>各种Aware接口</strong>：比如BeanFactoryAware，对于实现了这些Aware接口的bean，在实例话bean时Spring会帮我们注入对应的BeanFactory实例</p>
</li>
<li><p><strong>BeanPostProcessor接口</strong>：实现了BeanPostProcessor接口的bean，在实例化bean时Spring会帮我们调用接口中的方法</p>
</li>
<li><p><strong>InitializingBean接口</strong>：实现了InitializingBean接口的bean，在实例化bean时Spring会帮我们调用接口中的方法</p>
</li>
<li><p><strong>DisposableBean接口</strong>：实现了BeanPostProcessor接口的bean，在该bean死亡时Spring会帮我们调用接口中的方法。</p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>设计意义</p>
<ul>
<li><p>松耦合：可以将原来硬编码的依赖，通过Spring这个beanFactory这个工厂来注入依赖，也就是说原来只有依赖方和被依赖方，现在我们引入了第三方——spring这个beanFactory，由它来解决bean之间的依赖问题，达到了松耦合的效果</p>
</li>
<li><p>Bean的额外处理：通过Spring接口的暴露，在实例化bean的阶段我们可以进行一些额外的处理，这些额外的处理只需要让bean实现对应的接口即可，那么spring就会在bean的生命周期调用我们实现的接口来处理该bean(重要)</p>
</li>
</ul>
</li>
</ol>
<h3 id="2-工厂方法"><a href="#2-工厂方法" class="headerlink" title="2. 工厂方法"></a>2. <span id="part2">工厂方法</span></h3><ol>
<li><p>实现方式</p>
<blockquote>
<p>FactoryBean接口</p>
</blockquote>
</li>
<li><p>实现原理</p>
<blockquote>
<p>实现了FactoryBean接口的bean是一类叫做factory的bean，其特点是：spring会在使用getBean()调用获得该bean时，会自动调用该bean的getObject()方法，所以返回的不是factory这个bean, 而是这个bean.getObject()方法的返回值。</p>
</blockquote>
</li>
<li><p>例子</p>
<p> 典型的例子有spring和shiro的结合<br> <img src="/spring-design-pattern/index/1.png"></p>
<p> 可以看到上面的<code>ShiroFilterFactoryBean</code>因为实现了FactoryBean接口，所以返回的不是 ShiroFilterFactoryBean 的实例，而是它的 ShiroFilterFactoryBean.getObject() 的返回值。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> AbstractShiroFilter <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.instance = <span class="keyword">this</span>.createInstance();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-单例模式"><a href="#3-单例模式" class="headerlink" title="3. 单例模式"></a>3. <span id="part3">单例模式</span></h3><ul>
<li><p>Spring依赖注入Bean实例默认是单例的</p>
</li>
<li><p>Spring的依赖注入(包括lazy-init方式)都是发生在AbstractBeanFactory的getBean里，getBean的doGetBean方法调用getSingleton进行bean 的创建</p>
</li>
<li><p>分析getSingleton()方法</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getSingleton</span><span class="params">(String beanName)</span></span>&#123;</span><br><span class="line">    <span class="comment">//参数true设置标识允许早期依赖</span></span><br><span class="line">    <span class="keyword">return</span> getSingleton(beanName,<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getSingleton</span><span class="params">(String beanName, <span class="keyword">boolean</span> allowEarlyReference)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//检查缓存中是否存在实例</span></span><br><span class="line">    Object singletonObject = <span class="keyword">this</span>.singletonObjects.get(beanName);</span><br><span class="line">    <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; isSingletonCurrentlyInCreation(beanName)) &#123;</span><br><span class="line">        <span class="comment">//如果为空，则锁定全局变量并进行处理。</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>.singletonObjects) &#123;</span><br><span class="line">            <span class="comment">//如果此bean正在加载，则不处理</span></span><br><span class="line">            singletonObject = <span class="keyword">this</span>.earlySingletonObjects.get(beanName);</span><br><span class="line">            <span class="keyword">if</span> (singletonObject == <span class="keyword">null</span> &amp;&amp; allowEarlyReference) &#123;</span><br><span class="line">                <span class="comment">//当某些方法需要提前初始化的时候则会调用addSingleFactory 方法将对应的ObjectFactory初始化策略存储在singletonFactories</span></span><br><span class="line">                ObjectFactory&lt;?&gt; singletonFactory = <span class="keyword">this</span>.singletonFactories.get(beanName);</span><br><span class="line">                <span class="keyword">if</span> (singletonFactory != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">//调用预先设定的getObject方法</span></span><br><span class="line">                    singletonObject = singletonFactory.getObject();</span><br><span class="line">                    <span class="comment">//记录在缓存中，earlysingletonObjects和singletonFactories互斥</span></span><br><span class="line">                    <span class="keyword">this</span>.earlySingletonObjects.put(beanName, singletonObject);</span><br><span class="line">                    <span class="keyword">this</span>.singletonFactories.remove(beanName);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (singletonObject != NULL_OBJECT ? singletonObject : <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>getSingleton()过程图</p>
<p>  Spring依赖注入时，使用了双重判断加锁的单例模式<br>  <img src="/spring-design-pattern/index/3.png"></p>
</li>
</ul>
<p><strong>总结：</strong></p>
<ul>
<li><p>单例模式定义：保证一个类仅有一个实例，并且提供一个访问它的全局访问点</p>
</li>
<li><p>Spring对单例的实现：spring总的单例模式完成了后半句化，即提供了全局的访问点BeanFactory。但没有从构造器级别去控制单例，这是因为spring管理的是任意Java对象。</p>
</li>
</ul>
<h3 id="4-适配器模式"><a href="#4-适配器模式" class="headerlink" title="4. 适配器模式"></a>4. <span id="part4">适配器模式</span></h3><ol>
<li><p>实现方式</p>
<blockquote>
<p>SpringMVC中的适配器HandlerAdatper</p>
</blockquote>
</li>
<li><p>实现原理</p>
<blockquote>
<p>HandlerAdatper根据Handler规则执行不同的Handler</p>
</blockquote>
</li>
<li><p>实现过程</p>
<p> <code>DispatcherServlet</code>根据<code>HandlerMapping</code>返回的handler，向<code>HandlerAdatper</code>发起请求，处理Handler。</p>
<p> <code>HandlerAdapter</code>根据规则找到对应的Handler并让其执行，执行完毕后Handler会向<code>HandlerAdapter</code>返回一个ModelAndView，最后由HandlerAdapter向DispatchServelet返回一个ModelAndView。</p>
</li>
<li><p>实现意义</p>
<blockquote>
<p>HandlerAdatper使得Handler的扩展变得容易，只需要增加一个新的Handler和一个对应的HandlerAdapter即可。</p>
<p>因此Spring定义了一个适配接口，使得每一种Controller有一种对应的适配器实现类，让适配器代替controller执行相应的方法。这样在扩展Controller时，只需要增加一个适配器类就完成了SpringMVC的扩展了。</p>
</blockquote>
</li>
</ol>
<h3 id="5-装饰器模式"><a href="#5-装饰器模式" class="headerlink" title="5. 装饰器模式"></a>5. <span id="part5">装饰器模式</span></h3><ol>
<li><p>实现方式</p>
<blockquote>
<p>Spring中用到的包装器模式在类名上有两种表现：一种是类名中含有Wrapper，另一种是类名中含有Decorator</p>
</blockquote>
</li>
<li><p>实质</p>
<blockquote>
<p>动态地给一个对象添加一些额外的职责。<br>就增加功能来说，Decorator模式相比生成子类更为灵活</p>
</blockquote>
</li>
</ol>
<h3 id="6-代理模式"><a href="#6-代理模式" class="headerlink" title="6. 代理模式"></a>6. <span id="part6">代理模式</span></h3><ol>
<li><p>实现方式</p>
<blockquote>
<p>AOP底层，就是动态代理模式的实现</p>
</blockquote>
<ul>
<li><p>动态代理：在内存中构建的，不需要手动编写代理类</p>
</li>
<li><p>静态代理：需要手工编写代理类，代理类引用被代理对象</p>
</li>
</ul>
</li>
<li><p>实现原理</p>
<blockquote>
<p>切面在应用运行的时刻被织入。一般情况下，在织入切面时，AOP容器会为目标对象创建动态的创建一个代理对象。SpringAOP就是以这种方式织入切面的。</p>
<p>织入：把切面应用到目标对象并创建新的代理对象的过程</p>
</blockquote>
</li>
</ol>
<h3 id="7-观察者模式"><a href="#7-观察者模式" class="headerlink" title="7. 观察者模式"></a>7. <span id="part7">观察者模式</span></h3><ol>
<li><p>实现方式：</p>
<blockquote>
<p>spring的事件驱动模型采用的是观察者模式，Spring中 ObServer模式常用的地方就是listener的实现</p>
</blockquote>
</li>
<li><p>具体实现</p>
<p> 事件机制的实现需要三个部分：<strong>事件源、事件、事件监听器</strong></p>
<ol>
<li>ApplicationContext接口<ul>
<li>ApplicationContext是spring中的全局容器，翻译过来是：应用上下文<br></li>
<li>实现了ApplicationEventPublisher接口</li>
<li>职责：负责读取bean的配置文档，管理bean的加载，维护bean之间的依赖关系，可以说是负责bean的整个生命周期(IOC容器)</li>
<li>代码：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationEventPublisher</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(ApplicationEvent event)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publishEvent</span><span class="params">(ApplicationEvent event)</span> </span>&#123;</span><br><span class="line">    Assert.notNull(event, <span class="string">&quot;Event must not be null&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (logger.isTraceEnabled()) &#123;</span><br><span class="line">         logger.trace(<span class="string">&quot;Publishing event in &quot;</span> + getDisplayName() + <span class="string">&quot;: &quot;</span> + event);</span><br><span class="line">    &#125;</span><br><span class="line">    getApplicationEventMulticaster().multicastEvent(event);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.parent.publishEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><strong>ApplicationEvent抽象类【事件】</strong><ul>
<li>继承自jdk的EventObject，所有的事件都需要继承ApplicationEvent，并且通过构造参数source得到事件源</li>
<li>该类的实现类ApplicationContextEvent表示ApplicationContext的容器事件</li>
<li>代码：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationEvent</span> <span class="keyword">extends</span> <span class="title">EventObject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7099057708183571937L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timestamp;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ApplicationEvent</span><span class="params">(Object source)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(source);</span><br><span class="line">    <span class="keyword">this</span>.timestamp = System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">long</span> <span class="title">getTimestamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.timestamp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>ApplicationListener接口【事件监听器】<ul>
<li>继承自jdk的EventListener，所有的监听器都要实现这个接口</li>
<li>这个接口只有一个<code>onApplicationEvent()</code>方法，该方法接收一个ApplicationEvent或其子类对象作为参数，在方法体中，可以通过不同对Event类的判断来进行相应的处理</li>
<li>当事件触发时所有的监听器都会收到消息</li>
<li>代码：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ApplicationListener</span>&lt;<span class="title">E</span> <span class="keyword">extends</span> <span class="title">ApplicationEvent</span>&gt; <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">onApplicationEvent</span><span class="params">(E event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>ApplicationEventMulticaster抽象类【事件源中publishEvent方法需要调用其getApplicationEventMulticaster方法】<ul>
<li>属于事件广播器，它的作用是把ApplicationContext发布的Event广播给所有的监听器</li>
<li>代码：  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractApplicationContext</span> <span class="keyword">extends</span> <span class="title">DefaultResourceLoader</span></span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ConfigurableApplicationContext</span>, <span class="title">DisposableBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ApplicationEventMulticaster applicationEventMulticaster;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerListeners</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Register statically specified listeners first.</span></span><br><span class="line">    <span class="keyword">for</span> (ApplicationListener&lt;?&gt; listener : getApplicationListeners()) &#123;</span><br><span class="line">    getApplicationEventMulticaster().addApplicationListener(listener);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Do not initialize FactoryBeans here: We need to leave all regular beans</span></span><br><span class="line">    <span class="comment">// uninitialized to let post-processors apply to them!</span></span><br><span class="line">    String[] listenerBeanNames = getBeanNamesForType(ApplicationListener.class, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">for</span> (String lisName : listenerBeanNames) &#123;</span><br><span class="line">    getApplicationEventMulticaster().addApplicationListenerBean(lisName);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="8-策略模式"><a href="#8-策略模式" class="headerlink" title="8. 策略模式"></a>8. <span id="part8">策略模式</span></h3><ol>
<li><p>实现方式:</p>
<blockquote>
<p>Spring框架的资源访问Resource接口，该接口提供了更强的资源访问能力，Spring框架本省大量使用了Resource接口来访问底层资源</p>
</blockquote>
</li>
<li><p>Resource接口</p>
<p> source接口是具体资源访问策略的抽象，也是所有资源访问类所实现的接口</p>
<p> Resource接口主要提供了以下几个方法：</p>
<ul>
<li>getInputStream(): 定位并打开资源，返回资源对应的输入流，每次调用都返回新的输入流，调用则必须负责关闭</li>
<li>exists(): 返回Resource所只想的资源是否存在</li>
<li>isOpen(): 返回资源文件是否打开，如果资源文件不能多次读取，每次读取结束应该显式关闭，以防止资源泄漏</li>
<li>getDescription()： 返回资源的描述信息，通常用于资源处理出错时输出该信息，通常是全限定文件名或实际 URL。</li>
<li>getFile： 返回资源对应的 File 对象。</li>
<li>getURL： 返回资源对应的 URL 对象。</li>
</ul>
<p>Resource 接口本身没有提供访问任何底层资源的实现逻辑，针对不同的底层资源，Spring 将会提供不同的 Resource 实现类，不同的实现类负责不同的资源访问逻辑。</p>
<p> Spring 为 Resource 接口提供了如下实现类：</p>
<ul>
<li><strong>UrlResource</strong>： 访问网络资源的实现类。</li>
<li><strong>ClassPathResource</strong>： 访问类加载路径里资源的实现类。</li>
<li><strong>FileSystemResource</strong>： 访问文件系统里资源的实现类。</li>
<li><strong>ServletContextResource</strong>： 访问相对于<code>ServletContext</code>路径里的资源的实现类.</li>
<li><strong>InputStreamResource</strong>： 访问输入流资源的实现类。</li>
<li><strong>ByteArrayResource</strong>： 访问字节数组资源的实现类。<br>这些 <code>Resource</code> 实现类，针对不同的的底层资源，提供了相应的资源访问逻辑，并提供便捷的包装，以利于客户端程序的资源访问。</li>
</ul>
</li>
</ol>
<h3 id="9-模板方法模式"><a href="#9-模板方法模式" class="headerlink" title="9. 模板方法模式"></a>9. <span id="part9">模板方法模式</span></h3><ol>
<li><p>经典模板方法定义：</p>
<ul>
<li>父类定义了骨架(调用哪些方法及顺序)，某些特定方法由子类实现。</li>
<li>最大的好处：代码复用，减少重复代码。除了子类要实现的特定方法，其他方法及方法调用顺序都在父类中预先写好了。</li>
</ul>
<p> 所以父类模板方法中有两类方法：</p>
<ul>
<li>共同的方法： 所有子类都会用到的代码</li>
<li>不同的方法： 子类要覆盖的方法，分为两种：<ul>
<li><p>抽象方法：父类中的是抽象方法，子类必须覆盖</p>
</li>
<li><p>钩子方法：父类中是一个空方法，子类继承了默认也是空的</p>
<p>注：为什么叫钩子，子类可以通过这个钩子(方法)，控制父类，因为这个钩子实际是父类的方法(空方法)！</p>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ol start="2">
<li><p>Spring模板方法模式实质：</p>
<blockquote>
<p>是模板方法模式和回调模式的接口，是Template Method不需要继承的另一种实现方式，Spring几乎所有的外接扩展都采用这种模式</p>
</blockquote>
</li>
<li><p>具体实现：</p>
<blockquote>
<p>JDBC的抽象和对Hibernate的集成，都采用了一种理念或者处理方式，那就是模板方法模式与相应的Callback接口相结合。</p>
<p>采用模板方法模式是为了以一种统一而集中的方式来处理资源的获取和释放</p>
</blockquote>
<p>以JdbcTemplate为例:</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplate</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">execute</span><span class="params">(String sql)</span></span>&#123;</span><br><span class="line">        Connection con=<span class="keyword">null</span>;</span><br><span class="line">        Statement stmt=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con=getConnection();</span><br><span class="line">            stmt=con.createStatement();</span><br><span class="line">            Object retValue=executeWithStatement(stmt,sql);</span><br><span class="line">            <span class="keyword">return</span> retValue;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">             <span class="comment">//...</span></span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            closeStatement(stmt);</span><br><span class="line">            releaseConnection(con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Object <span class="title">executeWithStatement</span><span class="params">(Statement   stmt, String sql)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>引入回调的原因：</p>
<blockquote>
<p>JdbcTemplate是抽象类，不能够独立使用，我们每次进行数据访问的时候都要给出一个相应子类实现，这样肯定不方便，所以引入来回调</p>
</blockquote>
<p> 回调代码：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StatementCallback</span></span>&#123;</span><br><span class="line">    <span class="function">Object <span class="title">doWithStatement</span><span class="params">(Statement stmt)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 利用回调方法重写JdbcTemplate方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcTemplate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title">execute</span><span class="params">(StatementCallback callback)</span></span>&#123;</span><br><span class="line">        Connection con=<span class="keyword">null</span>;</span><br><span class="line">        Statement stmt=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            con=getConnection();</span><br><span class="line">            stmt=con.createStatement();</span><br><span class="line">            Object retValue=callback.doWithStatement(stmt);</span><br><span class="line">            <span class="keyword">return</span> retValue;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            closeStatement(stmt);</span><br><span class="line">            releaseConnection(con);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//... 其它方法定义</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> Jdbc使用方法如下：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JdbcTemplate jdbcTemplate=...;</span><br><span class="line">    <span class="keyword">final</span> String sql=...;</span><br><span class="line">    StatementCallback callback=<span class="keyword">new</span> StatementCallback()&#123;</span><br><span class="line">    <span class="keyword">public</span> Object=doWithStatement(Statement stmt)&#123;</span><br><span class="line">        <span class="keyword">return</span> ...;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">jdbcTemplate.execute(callback);</span><br></pre></td></tr></table></figure></li>
<li><p>为什么JdbcTemplate没有使用继承？</p>
<blockquote>
<p>因为这个类的方法太多，但是我们还是想用到JdbcTemplate已有的稳定的、公用的数据库连接，那么我们怎么办呢？</p>
<p>我们可以把变化的东西抽出来作为一个参数传入JdbcTemplate的方法中。但是变化的东西是一段代码，而且这段代码会用到JdbcTemplate中的变量。怎么办？</p>
<p>那我们就用回调对象吧。在这个回调对象中定义一个操纵JdbcTemplate中变量的方法，我们去实现这个方法，就把变化的东西集中到这里了。然后我们再传入这个回调对象到JdbcTemplate，从而完成了调用。</p>
</blockquote>
</li>
</ol>
<p>最后感谢博主！原文地址：<a href="https://mp.weixin.qq.com/s?__biz=MzU4MDUyMDQyNQ==&mid=2247513487&idx=2&sn=f580930a1ddb0c2681f320be9e626092&chksm=fd576509ca20ec1f4254af06ba3a7ac4985d8f1f1a7c5820f3c83faa352f68e3f623fa6f1b87&scene=21#wechat_redirect">Spring 中经典的 9 种设计模式，打死也要记住啊！</a></p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>spring</tag>
      </tags>
  </entry>
  <entry>
    <title>常见的接口测试工具</title>
    <url>/swagger/index.html</url>
    <content><![CDATA[<h2 id="1-Swagger"><a href="#1-Swagger" class="headerlink" title="1. Swagger"></a>1. Swagger</h2><p>Swagger 是一个规范且完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。<br>Swagger 的目标是对 REST API 定义一个标准且和语言无关的接口，可以让人和计算机拥有无须访问源码、文档或网络流量监测就可以发现和理解服务的能力。</p>
<p>静态的swagger跟不上频繁变更的代码，容易出现以下问题</p>
<ul>
<li>“为什么改了这个没告诉我” </li>
<li>“实际功能和文档上说的不一样啊”</li>
</ul>
<p>这样会带来的问题是：</p>
<ol>
<li>Swagger，postman，MockJS只能完成软件研发流程中某个环节的功能，造成完成接口设计，文档编写，调试，测试验证等工作需要使用好几个工具；</li>
<li>更麻烦的是这些工具数据格式不互通，无法互相导入，造成用Swagger定义和编写完成接口后，在Postman，MockJS，Jmeter等工具还要再去手动填写一遍才能开始工作，增加了无意义的工作量。</li>
<li>沟通成本总是被忽略不计，但实际上不仅占据了很大时间，各种沟通不及时、沟通不到位还非常让人心累。</li>
<li>老板的需求来得急，老板的需求变得快，各种代码修改和变更难以及时通知和同步到团队成员手中。</li>
</ol>
<h2 id="2-常见的可视化RestFul风格的服务"><a href="#2-常见的可视化RestFul风格的服务" class="headerlink" title="2. 常见的可视化RestFul风格的服务"></a>2. 常见的可视化RestFul风格的服务</h2><ul>
<li>springfox-swagger2</li>
<li>springdoc</li>
<li>Apifox（接口测试工具，非集成在项目中postman加强升级版）</li>
</ul>
<h2 id="3-各个工具的使用以及风格"><a href="#3-各个工具的使用以及风格" class="headerlink" title="3. 各个工具的使用以及风格"></a>3. 各个工具的使用以及风格</h2><p>使用Springboot项目分别集成各个组件，看下具体的实现效果；</p>
<h3 id="3-1-springfox-swagger2"><a href="#3-1-springfox-swagger2" class="headerlink" title="3.1 springfox-swagger2"></a>3.1 springfox-swagger2</h3><ol>
<li><p>引入依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.10</span><span class="number">.5</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.9</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.github.xiaoymin&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;knife4j-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">2.0</span><span class="number">.8</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>编写配置类</p>
<ul>
<li>SwaggerConfiguration类  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2WebMvc</span></span><br><span class="line"><span class="meta">@EnableKnife4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfiguration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.application.name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String applicationName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(value = &quot;defaultApi&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">defaultApi2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置处理请求的包，我的controller类都在com.yugb.controller中</span></span><br><span class="line">        Predicate&lt;RequestHandler&gt; apiPackage = RequestHandlerSelectors.basePackage(<span class="string">&quot;com.yugb.controller&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Docket docket = <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(<span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                        .version(<span class="string">&quot;1.0&quot;</span>)</span><br><span class="line">                        .contact(<span class="keyword">new</span> Contact(<span class="string">&quot;xiaoyuge&quot;</span>,<span class="string">&quot;123&quot;</span>, <span class="string">&quot;12342qq.com&quot;</span>))</span><br><span class="line">                        .title(applicationName + <span class="string">&quot; 文档中心&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;&lt;div style=&#x27;font-size:15px;&#x27;&gt;&quot;</span> + applicationName + <span class="string">&quot; RESTful APIs&lt;/div&gt;&quot;</span>)</span><br><span class="line">                        .build())</span><br><span class="line">                <span class="comment">//分组名称</span></span><br><span class="line">                .groupName(<span class="string">&quot;2.X版本&quot;</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//这里指定Controller扫描包路径</span></span><br><span class="line">                .apis(apiPackage)</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>SwaggerWebMvcConfigurer 类  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerWebMvcConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>添加注解</p>
<p>我们接口文档的直接描述主要就是在Controller这一层，比如这个接口的功能，参数的名称，返回值的名称等。这些值我们都需要在Controller上通过给方法上，请求参数和返回参数上添加对应的注解，swagger才能帮我们生成相应的接口文档。</p>
<ul>
<li><strong>JavaBean</strong>: @ApiModel注解和 @@ApiModelProperty 注解定义了实体的名称和字段的名称  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel(&quot;创建Swagger响应结果&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerResVO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;姓名&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;性别&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty(&quot;啥啥&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String what;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<ul>
<li><strong>controller</strong>: @Api注解和 @ApiOperation注解分别标注了接口组名和接口的名称 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/swagger&quot;)</span></span><br><span class="line"><span class="meta">@Api(value = &quot;用户接口&quot;, tags = &#123;&quot;用户接口&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增用户&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;save&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> SwaggerReqVO req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@GetMapping(&quot;getById&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据条件查询用户&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SwaggerResVO <span class="title">getById</span><span class="params">(<span class="meta">@RequestBody</span> SwaggerResVO req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SwaggerResVO();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li><p>启动项目</p>
<p> 访问 <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a> 查看springfox-swagger2的文档中心<br> <img src="/swagger/index/1.png" alt="springfox-swagger2"></p>
<p> 查看GET请求的界面<br> <img src="/swagger/index/2.png" alt="springfox-swagger2"><br> <img src="/swagger/index/3.png" alt="springfox-swagger2"></p>
</li>
<li><p>优缺点</p>
<ul>
<li>优点：界面美观，集成方便，不同类型的接口按照controller分组，<strong>可以导出所有的接口文档！！！！！</strong></li>
<li>缺点：暂时没有遇到</li>
</ul>
</li>
</ol>
<h3 id="3-2-springdoc"><a href="#3-2-springdoc" class="headerlink" title="3.2 springdoc"></a>3.2 springdoc</h3><ol>
<li><p>引入依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;springdoc-openapi-ui&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">1.5</span><span class="number">.8</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line"> &lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.springdoc&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;springdoc-openapi-webmvc-core&lt;/artifactId&gt;</span><br><span class="line">     &lt;version&gt;<span class="number">1.5</span><span class="number">.8</span>&lt;/version&gt;</span><br><span class="line"> &lt;/dependency&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>配置yml /yaml /properties</p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="attr">api-docs:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">groups:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/api-docs</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">disabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">swagger-ui:</span></span><br><span class="line">    <span class="attr">groups-order:</span> <span class="string">asc</span></span><br><span class="line">    <span class="comment"># 自定义的文档界面访问路径。默认访问路径是/swagger-ui.html</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/springdoc/docs.html</span></span><br><span class="line">  <span class="comment"># 布尔值。实现OpenApi规范的打印。</span></span><br><span class="line">  <span class="attr">writer-with-default-pretty-printer:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li><p>编写配置类</p>
<ul>
<li>SpringdocOpenapiConfiguration  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringdocOpenapiConfiguration</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SwaggerProperties swaggerProperties;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpringdocOpenapiConfiguration</span><span class="params">(SwaggerProperties swaggerProperties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.swaggerProperties = swaggerProperties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OpenAPI <span class="title">springDocOpenAPI</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//配置认证、请求头参数</span></span><br><span class="line">        Components components = <span class="keyword">new</span> Components();</span><br><span class="line"><span class="comment">//        Map&lt;String, Object&gt; myHeader2extensions = new HashMap&lt;&gt;(2);</span></span><br><span class="line"><span class="comment">//        myHeader2extensions.put(&quot;name&quot;, &quot;myHeader2&quot;);</span></span><br><span class="line"><span class="comment">//        components</span></span><br><span class="line"><span class="comment">//                .addSecuritySchemes(&quot;bearer-key&quot;, new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(&quot;bearer&quot;).bearerFormat(&quot;JWT&quot;))</span></span><br><span class="line"><span class="comment">//                .addSecuritySchemes(&quot;basicScheme&quot;, new SecurityScheme().type(SecurityScheme.Type.HTTP).scheme(&quot;basic&quot;))</span></span><br><span class="line"><span class="comment">//                .addHeaders(&quot;myHeader2&quot;, new Header().description(&quot;myHeader2 header&quot;).schema(new StringSchema()).extensions(myHeader2extensions))</span></span><br><span class="line"><span class="comment">//                .addParameters(&quot;myGlobalHeader&quot;, new HeaderParameter().required(true).name(&quot;My-Global-Header&quot;).description(&quot;My Global Header&quot;).schema(new StringSchema()).required(false))</span></span><br><span class="line"><span class="comment">//        ;</span></span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 接口调试路径</span></span><br><span class="line">        Server tryServer = <span class="keyword">new</span> Server();</span><br><span class="line">        tryServer.setUrl(swaggerProperties.getTryHost());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OpenAPI()</span><br><span class="line">                .components(components)</span><br><span class="line">                .servers(Collections.singletonList(tryServer))</span><br><span class="line">                .info(<span class="keyword">new</span> Info()</span><br><span class="line">                        .title(swaggerProperties.getApplicationName() + <span class="string">&quot; Api Doc&quot;</span>)</span><br><span class="line">                        .description(swaggerProperties.getApplicationDescription())</span><br><span class="line">                        .version(<span class="string">&quot;Application Version: &quot;</span> + swaggerProperties.getApplicationVersion() + <span class="string">&quot;\n Spring Boot Version: &quot;</span> + SpringBootVersion.getVersion())</span><br><span class="line">                        .license(<span class="keyword">new</span> License().name(<span class="string">&quot;Apache 2.0&quot;</span>).url(<span class="string">&quot;https://www.apache.org/licenses/LICENSE-2.0.html&quot;</span>))</span><br><span class="line">                )</span><br><span class="line">                .externalDocs(<span class="keyword">new</span> ExternalDocumentation()</span><br><span class="line">                        .description(<span class="string">&quot;SpringDoc Full Documentation&quot;</span>)</span><br><span class="line">                        .url(<span class="string">&quot;https://springdoc.org/&quot;</span>)</span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加全局的请求头参数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="comment">//    @Bean</span></span><br><span class="line"><span class="comment">//    public OpenApiCustomiser customerGlobalHeaderOpenApiCustomiser() &#123;</span></span><br><span class="line"><span class="comment">//        return openApi -&gt; openApi.getPaths().values().stream().flatMap(pathItem -&gt; pathItem.readOperations().stream())</span></span><br><span class="line"><span class="comment">//                .forEach(operation -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                    operation.addParametersItem(new HeaderParameter().$ref(&quot;#/components/parameters/myGlobalHeader&quot;));</span></span><br><span class="line"><span class="comment">//                &#125;);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通用拦截器排除设置，所有拦截器都会自动加springdoc-opapi相关的资源排除信息，不用在应用程序自身拦截器定义的地方去添加，算是良心解耦实现。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field registrationsField = FieldUtils.getField(InterceptorRegistry.class, <span class="string">&quot;registrations&quot;</span>, <span class="keyword">true</span>);</span><br><span class="line">            List&lt;InterceptorRegistration&gt; registrations = (List&lt;InterceptorRegistration&gt;) ReflectionUtils.getField(registrationsField, registry);</span><br><span class="line">            <span class="keyword">if</span> (registrations != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (InterceptorRegistration interceptorRegistration : registrations) &#123;</span><br><span class="line">                    interceptorRegistration.excludePathPatterns(<span class="string">&quot;/springdoc**/**&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 服务器支持跨域</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .exposedHeaders(<span class="string">&quot;Access-Control-Allow-Headers&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;Access-Control-Allow-Methods&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;Access-Control-Allow-Origin&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;Access-Control-Max-Age&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;X-Frame-Options&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="keyword">false</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>SwaggerProperties  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@Setter</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(&quot;swagger&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerProperties</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 项目应用名</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> String applicationName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目版本信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String applicationVersion;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 项目描述信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String applicationDescription;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口调试地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String tryHost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写接口方法<ul>
<li>在controller上添加@Tag注解</li>
<li>在接口方法上添加@Operation 注解</li>
<li>在接口参数添加@Parameter 或@Parameters 注解<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Tags(&#123;</span></span><br><span class="line"><span class="meta">  @Tag(name = &quot;ExpirationWarningController&quot;, description = &quot;设备寿命到期预警&quot;),</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExpirationWarningController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//需要使用@Operation竹节</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/getOne/&#123;id&#125;/&#123;type&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;按ID查询&quot;, description = &quot;按ID查询&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">getOne</span><span class="params">(<span class="meta">@Parameter(description = &quot;主键ID&quot;)</span> <span class="meta">@PathVariable</span> Integer id,</span></span></span><br><span class="line"><span class="params"><span class="function">    <span class="meta">@Parameter(description = &quot;类型&quot;)</span> <span class="meta">@PathVariable</span> String type)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">return</span> ResponseResult.success(expirationWarningVO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@Operation(summary = &quot;保存&quot;, description = &quot;保存&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> ExpirationWarning expirationWarning)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>在springboot启动类上加上以下配置<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@OpenAPIDefinition(</span></span><br><span class="line"><span class="meta">    info = @Info(</span></span><br><span class="line"><span class="meta">        title = &quot;测试springdoc&quot;,</span></span><br><span class="line"><span class="meta">        version = &quot;1.0&quot;</span></span><br><span class="line"><span class="meta">    ),</span></span><br><span class="line"><span class="meta">    externalDocs = @ExternalDocumentation(description = &quot;swagger-api参考文档&quot;,</span></span><br><span class="line"><span class="meta">        url = &quot;https://github.com/swagger-api/swagger-core/wiki/Swagger-2.X---Annotations&quot;</span></span><br><span class="line"><span class="meta">    ),</span></span><br><span class="line"><span class="meta">    servers = &#123;</span></span><br><span class="line"><span class="meta">        @Server(</span></span><br><span class="line"><span class="meta">            url = &quot;http://localhost:8123/app&quot;,</span></span><br><span class="line"><span class="meta">            description = &quot;本地地址&quot;</span></span><br><span class="line"><span class="meta">        ),</span></span><br><span class="line"><span class="meta">        @Server(</span></span><br><span class="line"><span class="meta">            url = &quot;http://www.xiaoyuge.vip/app&quot;,</span></span><br><span class="line"><span class="meta">            description = &quot;公网测试环境&quot;</span></span><br><span class="line"><span class="meta">        )</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResolutionApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(ResolutionApplication.class, args);</span><br><span class="line">        logger.info(<span class="string">&quot;============= Start Success =============&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>启动项目</p>
<p>访问 <a href="http://localhost:8123/app/springdoc/swagger-ui/index.html">http://localhost:8123/app/springdoc/swagger-ui/index.html</a> 查看springdox的文档中心<br><img src="/swagger/index/4.png" alt="springdoc"><br><img src="/swagger/index/5.png" alt="springdoc"></p>
</li>
</ol>
<ol start="5">
<li><p>优缺点</p>
<ul>
<li><p>优点：不好说</p>
</li>
<li><p>缺点：界面没有按照每个controller分组，不直观！；</p>
</li>
</ul>
</li>
</ol>
<h3 id="3-3-Apifox"><a href="#3-3-Apifox" class="headerlink" title="3.3 Apifox"></a>3.3 Apifox</h3><p>一款研发全流程，接口全周期的生产力工具，这款软件真正完成了数据流的打通，在一个软件上就能实现<strong>接口设计–接口文档–接口调试–接口修改–接口mock–接口测试–接口自动化–接口迭代</strong>的工作流闭环；</p>
<h4 id="3-3-1-Apifox上的协作流程"><a href="#3-3-1-Apifox上的协作流程" class="headerlink" title="3.3.1 Apifox上的协作流程"></a>3.3.1 Apifox上的协作流程</h4><ol>
<li>后端在Apifox可视化接口设计界面上定义好项目各个接口及对应参数同时编写接口文档说明</li>
<li>前后端一起评审，修改完善接口并在同一界面顺手更新接口文档</li>
<li>后端使用接口调试功能调试接口</li>
<li>前端使用零配置高仿真mock功能对前端页面进行调试，无需手写mock规则</li>
<li>后端使用代码生成功能直接生成接口代码</li>
<li>测试在接口管理页面一键生成接口参数测试用例,并依据业务场景生成自动化测试用例，一键运行接口用例并生成接口测试报告并分享给相关人员。</li>
<li>前后端 都开发完，前端从Mock 数据切换到正式数据，进行联调，由于使用同一个接口数据源，且遵循了接口规范，联调顺利</li>
<li>由于bug修复或需求变更，接口发生了变化，后端修改提交后，前端和测试实时同步到了修改后的数据</li>
<li>项目经理通过权限设置给研发,产品,测试,外部合作人员分配编辑,只读等各种操作权限，维护了项目安全</li>
<li>项目经理通过各个接口的状态开发中,测试中,已发布来跟进项目的进度情况，把控项目风险。</li>
</ol>
<h4 id="3-3-2-Apifox做的增速提效优化"><a href="#3-3-2-Apifox做的增速提效优化" class="headerlink" title="3.3.2 Apifox做的增速提效优化"></a>3.3.2 Apifox做的增速提效优化</h4><ul>
<li><p>接口设计：从代码生成界面到可视化接口设计界面</p>
<p>Apifox 接口文档遵循 OpenApi 3.0 (原 Swagger)、JSON Schema 规范，可生成在线文档；零学习成本即可编写出符合RESTful风格的接口文档，新人上手快；所见即所得，不易出错<br><img src="/swagger/index/6.png" alt="Apifox"><br><img src="/swagger/index/7.png" alt="Apifox"></p>
</li>
<li><p>文档维护：从接口与文档分离到接口与文档合并</p>
<p>Apifox的接口设计界面提供了Markdown格式的文档说明区，修改完接口就如同commit代码时添加变更说明般<br><img src="/swagger/index/8.png" alt="Apifox"></p>
</li>
<li><p>数据复用：从各自为政到定义一次、多次复用</p>
<ul>
<li><p>接口数据复用：Swagger，Postman，MockJS，Jmeter等软件彼此之间数据不互通，数据格式不一致，接口导入非常耗时麻烦。<br>而Apifox能身兼多职，包揽上述软件功能，在Apifox中定义一次接口，能被后端直接用来调试，前端直接用来mock界面，测试直接执行接口自动化。</p>
</li>
<li><p>数据模型复用：可复用的数据结构，定义接口返回数据结构及请求参数数据结构（仅 JSON 和 XML 模式）时可直接引用。</p>
</li>
</ul>
</li>
<li><p>同步更新，高效沟通:从沟通滞后到数据变更即时同步</p>
<p>Apifox为此提供了同步功能，一旦接口数据有更新发生，就会即时同步更新并通知到项目内所有成员。</p>
</li>
</ul>
<ul>
<li><p>Apihub</p>
<p>内置企业微信开放API，抖音开放API等第三方接口开放项目，接口可以直接在Apifox中调试，不需要到处找接口文档和手工填写接口</p>
<h4 id="3-3-3-下载地址"><a href="#3-3-3-下载地址" class="headerlink" title="3.3.3 下载地址"></a>3.3.3 下载地址</h4><p>官网地址： <a href="http://www.apifox.cn/?utm_medium=WCSA&amp;utm_source=xxzsq">http://www.apifox.cn/?utm_medium=WCSA&amp;utm_source=xxzsq</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>13 开源组件</category>
      </categories>
      <tags>
        <tag>swagger</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装RocketMQ以及常用命令</title>
    <url>/rocketmq-install/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><ol>
<li>nameserver默认端口：9876</li>
<li>rocketmq默认端口：10911</li>
<li>服务器IP：172.21.16.253</li>
<li>安装路径：/usr/local/tools</li>
</ol>
<h3 id="2-下载"><a href="#2-下载" class="headerlink" title="2. 下载"></a>2. 下载</h3><p>RocketMQ官网链接：<a href="http://rocketmq.apache.org/">http://rocketmq.apache.org/</a> ,然后选择Lastest Release进入下载界面<br><img src="/rocketmq-install/index/1.png"><br><img src="/rocketmq-install/index/2.png"><br><img src="/rocketmq-install/index/0.png"><br>右键复制链接地址，<code>wget</code>下载，或者下载后上传到Centos服务器上。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools</span><br><span class="line">wget https://dlcdn.apache.org/rocketmq/4.9.4/rocketmq-all-4.9.4-bin-release.zip</span><br></pre></td></tr></table></figure>

<h3 id="3-解压"><a href="#3-解压" class="headerlink" title="3. 解压"></a>3. 解压</h3><p>解压二进制包，修改文件夹名称</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">unzip rocketmq-all-4.9.4-bin-release.zip </span><br><span class="line">mv rocketmq-all-4.9.4-bin-release rocketmq</span><br></pre></td></tr></table></figure>
<p>如果提示<code>-bash: unzip: command not found</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装zip 和 unzip</span></span><br><span class="line">yum install zip</span><br><span class="line">yum install unzip</span><br></pre></td></tr></table></figure>

<p>创建数据存储目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /usr/local/tools/rocketmq/store/broker-a /usr/local/tools/rocketmq/store/broker-a/consumequeue /usr/local/tools/rocketmq/store/broker-a/commitlog /usr/local/tools/rocketmq/store/broker-a/index /usr/local/tools/rocketmq/broker-a/logs </span><br></pre></td></tr></table></figure>

<h3 id="4-修改配置文件"><a href="#4-修改配置文件" class="headerlink" title="4. 修改配置文件"></a>4. 修改配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/rocketmq/conf</span><br><span class="line">vim broker.conf</span><br></pre></td></tr></table></figure>
<p>增加内容</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Broker 对外服务的监听端口</span></span><br><span class="line"><span class="attr">listenPort</span>=<span class="string">10911</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建Topic，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateTopicEnable</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭</span></span><br><span class="line"><span class="attr">autoCreateSubscriptionGroup</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#nameServer地址，分号分割</span></span><br><span class="line"><span class="attr">namesrvAddr</span>=<span class="string">localhost:9876</span></span><br><span class="line"><span class="comment">#存储路径</span></span><br><span class="line"><span class="attr">storePathRootDir</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a</span></span><br><span class="line"><span class="comment">#commitLog 存储路径</span></span><br><span class="line"><span class="attr">storePathCommitLog</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/commitlog</span></span><br><span class="line"><span class="comment">#消费队列存储路径存储路径</span></span><br><span class="line"><span class="attr">storePathConsumeQueue</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/consumequeue</span></span><br><span class="line"><span class="comment">#消息索引存储路径</span></span><br><span class="line"><span class="attr">storePathIndex</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/index</span></span><br><span class="line"><span class="comment">#checkpoint 文件存储路径</span></span><br><span class="line"><span class="attr">storeCheckpoint</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/checkpoint</span></span><br><span class="line"><span class="comment">#abort 文件存储路径</span></span><br><span class="line"><span class="attr">abortFile</span>=<span class="string">/usr/local/tools/rocketmq/store/broker-a/abort</span></span><br></pre></td></tr></table></figure>
<p><img src="/rocketmq-install/index/3.png"></p>
<h3 id="5-启动"><a href="#5-启动" class="headerlink" title="5. 启动"></a>5. 启动</h3><p>依次启动nameserver和broker ,这两个命令可以做成alias</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/rocketmq/bin</span><br><span class="line"></span><br><span class="line">nohup sh mqnamesrv &amp;</span><br><span class="line">nohup sh mqbroker -c /usr/local/tools/rocketmq/conf/broker.conf &amp;</span><br></pre></td></tr></table></figure>
<p>在虚拟机中有可能因为内存不够而启动失败<br><img src="/rocketmq-install/index/4.png"></p>
<ul>
<li>1）设置<code>bin</code>目录下的 runserver.sh  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn512m -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m&quot;</span><br></pre></td></tr></table></figure></li>
<li>2）设置<code>bin</code>目录下的 runbroker.sh  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn128m&quot;</span><br></pre></td></tr></table></figure></li>
<li>3）如果改了上面两个还不行，那在修改bin目录下面的tools.sh  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_OPT=&quot;$&#123;JAVA_OPT&#125; -server -Xms256m -Xmx256m -Xmn256m -XX:PermSize=128m -XX:MaxPermSize=128m&quot;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="6-查看日志"><a href="#6-查看日志" class="headerlink" title="6. 查看日志"></a>6. 查看日志</h3><p>启动成功后查看mq动态日志</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail -f ~/logs/rocketmqlogs/namesrv.log</span><br><span class="line">tail -f ~/logs/rocketmqlogs/broker.log</span><br></pre></td></tr></table></figure>
<p><img src="/rocketmq-install/index/5.png"></p>
<h3 id="7-关闭服务"><a href="#7-关闭服务" class="headerlink" title="7.关闭服务"></a>7.关闭服务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/tools/rocketmq/bin</span><br><span class="line"></span><br><span class="line">sh mqshutdown namesrv</span><br><span class="line">sh mqshutdown broker</span><br></pre></td></tr></table></figure>

<h3 id="8-常用命令"><a href="#8-常用命令" class="headerlink" title="8. 常用命令"></a>8. 常用命令</h3><p>RocketMQ 提供有控制台及一系列控制台目录，用户管理员对主题、集群、broker等信息的管理。</p>
<p>进入rocketmq下的bin目录，可以看到该目录下有个mqadmin脚本<br><img src="/rocketmq-install/index/6.png"><br>查看帮助</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh mqadmin help 命令名称</span><br></pre></td></tr></table></figure>
<p>例如，查看updateTopic的使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sh mqadmin help updateTopic</span><br></pre></td></tr></table></figure>

<p>下面列举一些常用的命令。</p>
<h4 id="8-1-创建（修改）Topic"><a href="#8-1-创建（修改）Topic" class="headerlink" title="8.1 创建（修改）Topic"></a>8.1 创建（修改）Topic</h4><ul>
<li><p>指令： updateTopic</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.topic.UpdateTopicSubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-b</td>
<td align="left">如果 -c为空，则必填</td>
<td align="left">broker地址，表示topic建在该broker</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">如果 -b为空，则必填</td>
<td align="left">cluster名称，表示topic建在该集群（集群可通过clusterList查询）</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">否</td>
<td align="left">指定新topic的权限限制( W</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">否</td>
<td align="left">可读队列数（默认为8）</td>
</tr>
<tr>
<td align="left">-w</td>
<td align="left">否</td>
<td align="left">可写队列数（默认为8）</td>
</tr>
<tr>
<td align="left">-t</td>
<td align="left">是</td>
<td align="left">topic名称（名称只能使用字符 ^[a-zA-Z0-9_-]+$ ）</td>
</tr>
</tbody></table>
</li>
<li><p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在集群DefaultCluster上创建主题ZTEExample，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin updateTopic –n 172.21.16.253:9876 –c DefaultCluster –t ZTEExample</span><br></pre></td></tr></table></figure>
<h4 id="8-2-删除Topic"><a href="#8-2-删除Topic" class="headerlink" title="8.2 删除Topic"></a>8.2 删除Topic</h4></li>
<li><p>指令： deleteTopic</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.topic.DeleteTopicSubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-c</td>
<td align="left">是</td>
<td align="left">cluster名称，表示删除某集群下的某个topic （集群可通过clusterList查询）</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
<tr>
<td align="left">-t</td>
<td align="left">是</td>
<td align="left">topic名称（名称只能使用字符 ^[a-zA-Z0-9_-]+$ ）</td>
</tr>
</tbody></table>
</li>
<li><p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在集群DefaultCluster上删除主题ZTEExample，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin deleteTopic –n 172.21.16.253:9876 –c DefaultCluster –t ZTEExample</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-3-创建（修改）订阅组"><a href="#8-3-创建（修改）订阅组" class="headerlink" title="8.3 创建（修改）订阅组"></a>8.3 创建（修改）订阅组</h4><ul>
<li><p>指令： updateSubGroup</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.consumer.UpdateSubGroupSubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-b</td>
<td align="left">如果 -c为空，则必填</td>
<td align="left">broker地址，表示topic建在该broker</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">如果 -b为空，则必填</td>
<td align="left">cluster名称，表示topic建在该集群（集群可通过clusterList查询）</td>
</tr>
<tr>
<td align="left">-d</td>
<td align="left">否</td>
<td align="left">是否容许广播方式消费</td>
</tr>
<tr>
<td align="left">-g</td>
<td align="left">是</td>
<td align="left">订阅组名</td>
</tr>
<tr>
<td align="left">-i</td>
<td align="left">否</td>
<td align="left">从哪个broker开始消费</td>
</tr>
<tr>
<td align="left">-m</td>
<td align="left">否</td>
<td align="left">是否容许从队列的最小位置开始消费，默认会设置为false</td>
</tr>
<tr>
<td align="left">-q</td>
<td align="left">否</td>
<td align="left">消费失败的消息放到一个重试队列，每个订阅组配置几个重试队列</td>
</tr>
<tr>
<td align="left">-r</td>
<td align="left">否</td>
<td align="left">重试消费最大次数，超过则投递到死信队列，不再投递，并报警</td>
</tr>
<tr>
<td align="left">-s</td>
<td align="left">否</td>
<td align="left">消费功能是否开启</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
<tr>
<td align="left">-w</td>
<td align="left">否</td>
<td align="left">发现消息堆积后，将Consumer的消费请求重定向到另外一台Slave机器</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="8-4-删除订阅组配置"><a href="#8-4-删除订阅组配置" class="headerlink" title="8.4 删除订阅组配置"></a>8.4 删除订阅组配置</h4><ul>
<li><p>指令： deleteSubGroup</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.consumer.DeleteSubscriptionGroupCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-b</td>
<td align="left">如果 -c为空，则必填</td>
<td align="left">broker地址，表示订阅组建在该broker</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">如果 -b为空，则必填</td>
<td align="left">cluster名称，表示topic建在该集群（集群可通过clusterList查询）</td>
</tr>
<tr>
<td align="left">-g</td>
<td align="left">是</td>
<td align="left">订阅组名</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="8-5-更新broker配置文件"><a href="#8-5-更新broker配置文件" class="headerlink" title="8.5 更新broker配置文件"></a>8.5 更新broker配置文件</h4><ul>
<li><p>指令： updateBrokerConfig</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.broker.UpdateBrokerConfigSubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-b</td>
<td align="left">如果 -c为空，则必填</td>
<td align="left">broker地址，表示订阅组建在该broker</td>
</tr>
<tr>
<td align="left">-c</td>
<td align="left">如果 -b为空，则必填</td>
<td align="left">cluster名称，表示topic建在该集群（集群可通过clusterList查询）</td>
</tr>
<tr>
<td align="left">-k</td>
<td align="left">否</td>
<td align="left">是否容许广播方式消费</td>
</tr>
<tr>
<td align="left">-v</td>
<td align="left">是</td>
<td align="left">value值</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="8-6-查看topic-列表信息"><a href="#8-6-查看topic-列表信息" class="headerlink" title="8.6 查看topic 列表信息"></a>8.6 查看topic 列表信息</h4><ul>
<li><p>指令： topicList</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.broker.UpdateBrokerConfigSubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
<li><p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> nameserve地址为172.21.16.253:9876;</span></span><br><span class="line">sh mqadmin topicList -n 172.21.16.253:9876</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-7-查看路由信息"><a href="#8-7-查看路由信息" class="headerlink" title="8.7 查看路由信息"></a>8.7 查看路由信息</h4><ul>
<li><p>指令： topicRoute</p>
</li>
<li><p>类路径： com.alibaba.rocketmq.tools.command.topic.TopicRouteSubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-t</td>
<td align="left">是</td>
<td align="left">topic名称</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
<li><p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  查看主题%DLQ%consumer1的路由，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin topicRoute -n 172.21.16.253:9876 -t %DLQ%consumer1</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-8-查看topic统计信息"><a href="#8-8-查看topic统计信息" class="headerlink" title="8.8 查看topic统计信息"></a>8.8 查看topic统计信息</h4><ul>
<li><p>指令： topicStatus</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.topic.TopicStatsSubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-t</td>
<td align="left">是</td>
<td align="left">topic名称</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
<li><p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看主题%DLQ%consumer1的统计信息，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin topicStatus -n 172.21.16.253:9876 -t %DLQ%consumer1</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-9-查看broker统计信息"><a href="#8-9-查看broker统计信息" class="headerlink" title="8.9 查看broker统计信息"></a>8.9 查看broker统计信息</h4><ul>
<li><p>指令： brokerStatus</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.broker.BrokerStatsSubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-b</td>
<td align="left">是</td>
<td align="left">broker地址</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
<li><p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看broker(crmdb)的统计信息，broker地址为172.21.16.253:10911,nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin brokerStatus  –n 172.21.16.253:9876 -b 172.21.16.253:10911</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-10-根据消息ID查询消息"><a href="#8-10-根据消息ID查询消息" class="headerlink" title="8.10 根据消息ID查询消息"></a>8.10 根据消息ID查询消息</h4><ul>
<li><p>指令： queryMsgById</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.message.QueryMsgByIdSubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-i</td>
<td align="left">是</td>
<td align="left">msgId</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
<li><p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查询msgId= C0A89F8000002A9F000000000000449A的消息，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin queryMsgById -n 172.21.16.253:9876 -i C0A89F8000002A9F000000000000449A</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-11-根据消息key查询消息"><a href="#8-11-根据消息key查询消息" class="headerlink" title="8.11 根据消息key查询消息"></a>8.11 根据消息key查询消息</h4><ul>
<li><p>指令： queryMsgByKey</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.message.QueryMsgByKeySubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-f</td>
<td align="left">否</td>
<td align="left">被查询消息的截止时间</td>
</tr>
<tr>
<td align="left">-k</td>
<td align="left">是</td>
<td align="left">msgKey</td>
</tr>
<tr>
<td align="left">-t</td>
<td align="left">是</td>
<td align="left">Topic名称</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
<li><p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询Topic= TopicTest下key=i0的消息，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin queryMsgByKey -n 172.21.16.253:9876 -t TopicTest -k i0</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-12-根据Offset查询消息"><a href="#8-12-根据Offset查询消息" class="headerlink" title="8.12 根据Offset查询消息"></a>8.12 根据Offset查询消息</h4><ul>
<li><p>指令： queryMsgByOffset</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.message.QueryMsgByOffsetSubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-b</td>
<td align="left">是</td>
<td align="left">Broker名称，表示订阅组建在该broker（这里需要注意填写的是broker的名称，不是broker的地址，broker名称可以在clusterList查到）</td>
</tr>
<tr>
<td align="left">-i</td>
<td align="left">是</td>
<td align="left">query队列id</td>
</tr>
<tr>
<td align="left">-o</td>
<td align="left">是</td>
<td align="left">offset值</td>
</tr>
<tr>
<td align="left">-t</td>
<td align="left">是</td>
<td align="left">Topic名称</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
<li><p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查询brokerName=broker-a，Topic= TopicTest的第1个队列下offset=0的消息，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin queryMsgByOffset -n 172.21.16.253:9876 -b broker-a -i 0 -t TopicTest -o 0</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-13-查询Producer的网络连接"><a href="#8-13-查询Producer的网络连接" class="headerlink" title="8.13 查询Producer的网络连接"></a>8.13 查询Producer的网络连接</h4><p>该命令只打印当前与cluster连接的producer网络连接信息</p>
<ul>
<li><p>指令： producerConnection</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.connection.ProducerConnectionSubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-g</td>
<td align="left">是</td>
<td align="left">生产者所属组名</td>
</tr>
<tr>
<td align="left">-t</td>
<td align="left">是</td>
<td align="left">topic名称</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
<li><p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询当前属于group（生产者组）=simple-producer-test的生产者到topic=ZTEExample的网络连接，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin producerConnection -n 172.21.16.253:9876 -g simple-producer-test -t ZTEExample</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-14-查询Consumer的网络连接"><a href="#8-14-查询Consumer的网络连接" class="headerlink" title="8.14 查询Consumer的网络连接"></a>8.14 查询Consumer的网络连接</h4><p>该命令只打印当前与cluster连接的Consumer网络连接信息</p>
<ul>
<li><p>指令： consumerConnection</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.connection.ConsumerConnectionSubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-g</td>
<td align="left">是</td>
<td align="left">生产者所属组名</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
<li><p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  查询当前属于group（消费者组）=simple-consumer-test的消费者的网络连接，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin consumerConnection -n 172.21.16.253:9876 -g simple-consumer-test</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-15-查看订阅组消费状态"><a href="#8-15-查看订阅组消费状态" class="headerlink" title="8.15  查看订阅组消费状态"></a>8.15  查看订阅组消费状态</h4><ul>
<li><p>指令： consumerProgress</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.consumer.ConsumerProgressSubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-g</td>
<td align="left">是</td>
<td align="left">消费者所属组名</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
<li><p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">   查询当前属于group（消费者组）=simple-consumer-test的订阅状态，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin consumerProgress -n 172.21.16.253:9876 -g simple-consumer-test</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-16-查看集群消息"><a href="#8-16-查看集群消息" class="headerlink" title="8.16  查看集群消息"></a>8.16  查看集群消息</h4><ul>
<li><p>指令： clusterList</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.cluster.ClusterListSubCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-m</td>
<td align="left">否</td>
<td align="left">打印更多信息 (增加打印出如下信息 #InTotalYest,   #OutTotalYest, #InTotalToday ,#OutTotalToday)</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
<li><p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  查询当前集群状态，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin clusterList -n 172.21.16.253:9876   </span><br><span class="line">sh mqadmin clusterList -n 172.21.16.253:9876 –m</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="8-17-添加（更新）KV配置信息"><a href="#8-17-添加（更新）KV配置信息" class="headerlink" title="8.17  添加（更新）KV配置信息"></a>8.17  添加（更新）KV配置信息</h4><ul>
<li><p>指令： updateKvConfig</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.namesrv.UpdateKvConfigCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-k</td>
<td align="left">是</td>
<td align="left">key值</td>
</tr>
<tr>
<td align="left">-v</td>
<td align="left">是</td>
<td align="left">value值</td>
</tr>
<tr>
<td align="left">-s</td>
<td align="left">是</td>
<td align="left">Namespace值</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="8-18-删除KV配置信息"><a href="#8-18-删除KV配置信息" class="headerlink" title="8.18  删除KV配置信息"></a>8.18  删除KV配置信息</h4><ul>
<li><p>指令： deleteKvConfig</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.namesrv.DeleteKvConfigCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-k</td>
<td align="left">是</td>
<td align="left">key值</td>
</tr>
<tr>
<td align="left">-s</td>
<td align="left">是</td>
<td align="left">Namespace值</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="8-19-添加（更新）Project-group配置信息"><a href="#8-19-添加（更新）Project-group配置信息" class="headerlink" title="8.19  添加（更新）Project group配置信息"></a>8.19  添加（更新）Project group配置信息</h4><ul>
<li><p>指令： updateProjectGroup</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.namesrv.UpdateProjectGroupCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-i</td>
<td align="left">是</td>
<td align="left">服务器ip</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">是</td>
<td align="left">project group名</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="8-20-删除Project-group配置信息"><a href="#8-20-删除Project-group配置信息" class="headerlink" title="8.20  删除Project group配置信息"></a>8.20  删除Project group配置信息</h4><ul>
<li><p>指令： deleteProjectGroup</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.namesrv.DeleteProjectGroupCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-i</td>
<td align="left">是</td>
<td align="left">服务器ip</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">是</td>
<td align="left">project group名</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="8-21-取得Project-group配置信息"><a href="#8-21-取得Project-group配置信息" class="headerlink" title="8.21  取得Project group配置信息"></a>8.21  取得Project group配置信息</h4><ul>
<li><p>指令： getProjectGroup</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.namesrv.GetProjectGroupCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-i</td>
<td align="left">是</td>
<td align="left">服务器ip</td>
</tr>
<tr>
<td align="left">-p</td>
<td align="left">是</td>
<td align="left">project group名</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="8-22-获取Consumer消费进度"><a href="#8-22-获取Consumer消费进度" class="headerlink" title="8.22  获取Consumer消费进度"></a>8.22  获取Consumer消费进度</h4><p>该命令只打印当前与cluster连接的consumer的消费进度</p>
<ul>
<li><p>指令： getConsumerStatus</p>
</li>
<li><p>类路径：com.alibaba.rocketmq.tools.command.offset.GetConsumerStatusCommand</p>
</li>
<li><p>参数</p>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">是否必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-g</td>
<td align="left">是</td>
<td align="left">消费者所属组名</td>
</tr>
<tr>
<td align="left">-t</td>
<td align="left">是</td>
<td align="left">查询主题</td>
</tr>
<tr>
<td align="left">-i</td>
<td align="left">否</td>
<td align="left">Consumer客户端ip</td>
</tr>
<tr>
<td align="left">-h</td>
<td align="left">否</td>
<td align="left">打印帮助</td>
</tr>
<tr>
<td align="left">-n</td>
<td align="left">是</td>
<td align="left">nameserve服务地址列表，格式ip:port;ip:port;…</td>
</tr>
</tbody></table>
</li>
<li><p>举例</p>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查询属于group（消费者组）=simple-consumer-test的消费者在Topic=ZTEExample上的消费状态，nameserve地址为172.21.16.253:9876</span></span><br><span class="line">sh mqadmin getConsumerStatus -n 172.21.16.253:9876 -g simple-consumer-test -t ZTEExample</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>08 Linux</category>
      </categories>
      <tags>
        <tag>rocketmq</tag>
      </tags>
  </entry>
  <entry>
    <title>cglib 底层源码分析</title>
    <url>/cglib/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h2 id="1-cglib-介绍"><a href="#1-cglib-介绍" class="headerlink" title="1. cglib 介绍"></a>1. cglib 介绍</h2><p>cglib是一个功能强大，高性能的代码生成包，它为没有实现接口的类提供代理，为JDK的动态代理提供了很好的补充。</p>
<h3 id="1-1-cglib原理"><a href="#1-1-cglib原理" class="headerlink" title="1.1 cglib原理"></a>1.1 cglib原理</h3><ul>
<li><strong>原理</strong>：动态生成一个要代理类的子类，子类重写要代理的类的所有不是final的方法。在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑。它比使用java反射的JDK动态代理要快。</li>
</ul>
<ul>
<li><strong>底层</strong>：使用字节码处理框架ASM，来转换字节码并生成新的类。不鼓励直接使用ASM，因为它要求你必须对JVM内部结构包括class文件的格式和指令集都很熟悉。</li>
</ul>
<ul>
<li><strong>缺点</strong>：对于final方法，无法进行代理。</li>
</ul>
<h3 id="1-2-cglib的应用"><a href="#1-2-cglib的应用" class="headerlink" title="1.2 cglib的应用"></a>1.2 cglib的应用</h3><p>广泛的被许多AOP的框架使用，例如<code>Spring AOP</code>和<code>dynaop</code>。<code>Hibernate</code>使用<code>CGLIB</code>来代理单端<code>single-ended</code>(多对一和一对一)关联。</p>
<h3 id="1-3-为什么使用cglib"><a href="#1-3-为什么使用cglib" class="headerlink" title="1.3 为什么使用cglib"></a>1.3 为什么使用cglib</h3><blockquote>
<p>CGLIB代理主要通过对字节码的操作，为对象引入间接级别，以控制对象的访问。我们知道Java中有一个动态代理也是做这个事情的，那我们为什么不直接使用Java动态代理，而要使用CGLIB呢？答案是CGLIB相比于JDK动态代理更加强大，JDK动态代理虽然简单易用，但是其有一个致命缺陷是，只能对接口进行代理。如果要代理的类为一个普通类、没有接口，那么Java动态代理就没法使用了</p>
</blockquote>
<h3 id="1-4-cglib-组成结构"><a href="#1-4-cglib-组成结构" class="headerlink" title="1.4 cglib 组成结构"></a>1.4 cglib 组成结构</h3><p><img src="/cglib/index/1.png"><br>CGLIB底层使用了ASM（一个短小精悍的字节码操作框架）来操作字节码生成新的类。除了CGLIB库外，脚本语言（如Groovy何BeanShell）也使用ASM生成字节码。ASM使用类似SAX的解析器来实现高性能。我们不鼓励直接使用ASM，因为它需要对Java字节码的格式足够的了解。</p>
<h3 id="1-5-cglib的API"><a href="#1-5-cglib的API" class="headerlink" title="1.5 cglib的API"></a>1.5 cglib的API</h3><p><strong>1、Jar包：</strong></p>
<ul>
<li>cglib-nodep-2.2.jar：使用nodep包不需要关联asm的jar包,jar包内部包含asm的类.</li>
<li>cglib-2.2.jar：使用此jar包需要关联asm的jar包,否则运行时报错.</li>
</ul>
<p><strong>2、CGLIB类库：</strong></p>
<p>由于基本代码很少，学起来有一定的困难，主要是缺少文档和示例，这也是CGLIB的一个不足之处。</p>
<p>本系列使用的CGLIB版本是2.2。</p>
<ul>
<li>net.sf.cglib.core: 底层字节码处理类，他们大部分与ASM有关系。</li>
<li>net.sf.cglib.transform: 编译期或运行期类和类文件的转换</li>
<li>net.sf.cglib.proxy: 实现创建代理和方法拦截器的类</li>
<li>net.sf.cglib.reflect: 实现快速反射和C#风格代理的类</li>
<li>net.sf.cglib.util: 集合排序等工具类</li>
<li>net.sf.cglib.beans: JavaBean相关的工具类</li>
</ul>
<h2 id="2-cglib使用"><a href="#2-cglib使用" class="headerlink" title="2. cglib使用"></a>2. cglib使用</h2><p>上面讲了一大段<code>cglib</code>的基本概念以及Api等，那么下面开始介绍通过<code>MethodInterceptor</code>和<code>Enhancer</code>实现一个动态代理，看下<code>cglib</code>底层是如何实现动态代理的。</p>
<ol>
<li><p>被代理类：</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetObject</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;method&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">voidMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----void-----&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method1</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定义一个拦截器，在调用目标方法时，cglib会回调<code>MethodInterceptor</code>接口方法拦截，来实现自己的代理逻辑，类似于JDK中的<code>InvocationHandler</code>接口</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 目标对象拦截器实现, 实现MethodInterceptor</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetInterceptor</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 重写方法拦截在方法前和方法后加入业务</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o           目标对象, 由cglib动态生成的代理类示例</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method      目标方法，实体类所调用的被代理的方法引用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects     参数值列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodProxy cglib方法代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--------调用前-------&quot;</span>);</span><br><span class="line">        <span class="comment">//调用代理类示例上的proxy 方法的弗雷方法（即实体类TargetObject中对应的方法）</span></span><br><span class="line">        Object result = methodProxy.invokeSuper(o, objects);</span><br><span class="line">        System.out.println(<span class="string">&quot;------调用后:&quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>生成动态代理类</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCglib</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(TargetObject.class);</span><br><span class="line">        enhancer.setCallback(<span class="keyword">new</span> TargetInterceptor());</span><br><span class="line"></span><br><span class="line">        TargetObject target = (TargetObject) enhancer.create();</span><br><span class="line">        System.out.println(target);</span><br><span class="line">        System.out.println(target.method1(<span class="string">&quot;xiaoyuge&quot;</span>));</span><br><span class="line">        System.out.println(target.method());</span><br><span class="line">        target.voidMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">org.example.TargetObject$$EnhancerByCGLIB$$8db9696e@5e91993f</span><br><span class="line">--------调用前-------</span><br><span class="line">------调用后:xiaoyuge</span><br><span class="line">xiaoyuge</span><br><span class="line">--------调用前-------</span><br><span class="line">------调用后:method</span><br><span class="line">--------调用前-------</span><br><span class="line">-----void-----</span><br><span class="line">------调用后:null</span><br></pre></td></tr></table></figure>
<ul>
<li>Enhancer类：cglib中的一个字节码增强器，他可以方便的对你想要处理的类进行扩展。</li>
<li>首先将被代理类设置为父类，然后设置拦截器<code>TargetInterceptor</code>，最后执行<code>enhancer.create()</code>动态生成一个代理类，并从Object强转为弗类型<code>TargetObject</code>，最后在代理类上调用方法</li>
</ul>
</li>
</ol>
<ol start="4">
<li>回调过滤器CallbackFilter<br> 在cglib回调时可以设置不同方法执行不同的回调逻辑，或者根本不执行回调，在JDK动态代理中并没有类似的功能，对InvocationHandler接口方法的调用对代理类内的所以方法都有效。 <br>

 定义实现过滤器CallbackFilter接口的类： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.CallbackFilter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回调方法过滤器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetMethodCallbackFilter</span> <span class="keyword">implements</span> <span class="title">CallbackFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 过滤方法，</span></span><br><span class="line"><span class="comment">     * 返回的值为数字，代表类Callback数组中的索引位置</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">accept</span><span class="params">(Method method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;method1&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;filter method1 ==0&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;method&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;filter method1 ==1&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;voidMethod&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;filter method1 ==2&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
其中return值为被代理类的各个方法在回调数组Callback[]中的位置 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.FixedValue;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 表示锁定方法返回值，无论被代理类的方法返回什么值，回调方法都返回固定值。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetResultFixed</span> <span class="keyword">implements</span> <span class="title">FixedValue</span></span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该类实现FixedValue接口，同时锁定回调值为123</span></span><br><span class="line"><span class="comment">     * (整型，CallbackFilter中定义的使用FixedValue型回调的方法为getConcreteMethodFixedValue，该方法返回值为整型)。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">loadObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;锁定结果&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Callback;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.CallbackFilter;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.NoOp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCglib</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(TargetObject.class);</span><br><span class="line"></span><br><span class="line">        CallbackFilter callbackFilter = <span class="keyword">new</span> TargetMethodCallbackFilter();</span><br><span class="line">        <span class="comment">//NoOp.INSTANC:表示no operator， 即什么操作也不做，代理类直接调用被代理的方法不进行拦截</span></span><br><span class="line">        Callback noopCb = NoOp.INSTANCE;</span><br><span class="line"></span><br><span class="line">        Callback callback = <span class="keyword">new</span> TargetInterceptor();</span><br><span class="line">        <span class="comment">//FixedValue：表示锁定方法返回值，无论被代理类的方法返回什么值，回调方法都返回固定值。</span></span><br><span class="line">        Callback fixedValue = <span class="keyword">new</span> TargetResultFixed();</span><br><span class="line"></span><br><span class="line">        Callback[] array = <span class="keyword">new</span> Callback[]&#123;callback, noopCb, fixedValue&#125;;</span><br><span class="line">        enhancer.setCallbacks(array);</span><br><span class="line">        enhancer.setCallbackFilter(callbackFilter);</span><br><span class="line">        TargetObject targetObject = (TargetObject) enhancer.create();</span><br><span class="line">        System.out.println(targetObject);</span><br><span class="line">        System.out.println(targetObject.method());</span><br><span class="line">        System.out.println(targetObject.method1(<span class="string">&quot;xiaoyuge&quot;</span>));</span><br><span class="line">        targetObject.voidMethod();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filter method1 ==2</span><br><span class="line">filter method1 ==0</span><br><span class="line">filter method1 ==1</span><br><span class="line">--------调用前-------</span><br><span class="line">--------调用前-------</span><br><span class="line">------调用后:359023572</span><br><span class="line">------调用后:org.example.TargetObject$$EnhancerByCGLIB$$92522e49@156643d4</span><br><span class="line">org.example.TargetObject$$EnhancerByCGLIB$$92522e49@156643d4</span><br><span class="line">method</span><br><span class="line">--------调用前-------</span><br><span class="line">------调用后:xiaoyuge</span><br><span class="line">xiaoyuge</span><br><span class="line">锁定结果</span><br></pre></td></tr></table></figure></li>
<li>延迟加载对象<blockquote>
<p>LazyLoader接口实现了Callback，因此也算是cglib中的一种Callback类型</p>
<p>另一种延迟加载接口Dispatcher，同样也继承于Callback，也是一种回调类型。</p>
<p>两者的区别在于：LazyLoader只在第一次访问延迟加载属性时除法代理类的回调方法，而Dispatcher在每次访问延迟加载属性时都会触发代理类回调方法</p>
</blockquote>
 定义一个实体类LoaderBean,该bean内又一个需要延迟加载的属性PropertyBean <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 延迟加载属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> PropertyBean propertyBean;</span><br><span class="line">    <span class="keyword">private</span> PropertyBean propertyBeanDispatcher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LazyBean</span><span class="params">(String name, <span class="keyword">int</span> age, PropertyBean propertyBean, PropertyBean propertyBeanDispatcher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.propertyBean = propertyBean;</span><br><span class="line">        <span class="keyword">this</span>.propertyBeanDispatcher = propertyBeanDispatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 只有第一次懒加载</span></span><br><span class="line"><span class="comment">     * 使用cglib进行懒加载，对需要延迟加载的对象添加代理，在获取该对象属性时先通过代理类回调方法进行对象初始化</span></span><br><span class="line"><span class="comment">     * 在不需要加载该对象时，只要不去获取该对象内属性，该对象就不会补初始化类（在cglib的实现中只要去访问该对象内属性的getter方法就会触发代理类回调）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> PropertyBean <span class="title">createPropertyBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(PropertyBean.class);</span><br><span class="line">        <span class="keyword">return</span> (PropertyBean) Enhancer.create(PropertyBean.class, <span class="keyword">new</span> ConcreteClassLazyLoader());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每次都懒加载</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> PropertyBean <span class="title">createPropertyBeanDispatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        enhancer.setSuperclass(PropertyBean.class);</span><br><span class="line">        <span class="keyword">return</span> (PropertyBean) Enhancer.create(PropertyBean.class,</span><br><span class="line">                <span class="keyword">new</span> ConcreteClassDispatcher());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyBean <span class="title">getPropertyBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> propertyBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyBean</span><span class="params">(PropertyBean propertyBean)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.propertyBean = propertyBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyBean <span class="title">getPropertyBeanDispatcher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> propertyBeanDispatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPropertyBeanDispatcher</span><span class="params">(PropertyBean propertyBeanDispatcher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.propertyBeanDispatcher = propertyBeanDispatcher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;LazyBean&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, propertyBean=&quot;</span> + propertyBean +</span><br><span class="line">                <span class="string">&quot;, propertyBeanDispatcher=&quot;</span> + propertyBeanDispatcher +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 延迟加载类 PropertyBean : <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;PropertyBean&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;key=&#x27;&quot;</span> + key + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, value=&quot;</span> + value +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 延迟加载器： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.LazyLoader;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassLazyLoader</span> <span class="keyword">implements</span> <span class="title">LazyLoader</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对于需要延迟加载的对象添加代理，在获取对象属性时先通过代理类回调方法进行对象初始化</span></span><br><span class="line"><span class="comment">     * 在不需要加载该对象时，只要不去获取该对象内属性，该对象就不会补初始化类（在cglib的实现中只要去访问该对象内属性的getter方法就会触发代理类回调）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 延迟加载对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">loadObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before lazyLoader...&quot;</span>);</span><br><span class="line">        PropertyBean propertyBean = <span class="keyword">new</span> PropertyBean();</span><br><span class="line">        propertyBean.setKey(<span class="string">&quot;xiaoyuge&quot;</span>);</span><br><span class="line">        propertyBean.setValue(<span class="keyword">new</span> TargetObject());</span><br><span class="line">        System.out.println(<span class="string">&quot;after lazyLoader...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> propertyBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteClassDispatcher</span> <span class="keyword">implements</span> <span class="title">Dispatcher</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">loadObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;before Dispatcher...&quot;</span>);</span><br><span class="line">        PropertyBean propertyBean = <span class="keyword">new</span> PropertyBean();</span><br><span class="line">        propertyBean.setKey(<span class="string">&quot;nb&quot;</span>);</span><br><span class="line">        propertyBean.setValue(<span class="keyword">new</span> TargetObject());</span><br><span class="line">        System.out.println(<span class="string">&quot;after Dispatcher...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> propertyBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
测试方法： <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCglib2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LazyBean bean = <span class="keyword">new</span> LazyBean(<span class="string">&quot;xiaoyuge&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        <span class="comment">//LazyLoader只在第一次访问延迟加载属性时触发代理类回调方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;延迟加载&quot;</span> + bean.getPropertyBean().toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;延迟加载&quot;</span> + bean.getPropertyBean().toString());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Dispatcher在每次访问延迟加载属性时都会触发代理类回调方法。</span></span><br><span class="line">        Object obj = bean.getPropertyBeanDispatcher().getValue();</span><br><span class="line">        Object obj1 = bean.getPropertyBeanDispatcher().getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 输出： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">before lazyLoader...</span><br><span class="line">after lazyLoader...</span><br><span class="line">before Dispatcher...</span><br><span class="line">after Dispatcher...</span><br><span class="line">延迟加载PropertyBean&#123;key=&#x27;xiaoyuge&#x27;, value=org.example.TargetObject@45fe3ee3&#125;</span><br><span class="line">延迟加载PropertyBean&#123;key=&#x27;xiaoyuge&#x27;, value=org.example.TargetObject@45fe3ee3&#125;</span><br><span class="line">before Dispatcher...</span><br><span class="line">after Dispatcher...</span><br><span class="line">before Dispatcher...</span><br><span class="line">after Dispatcher...</span><br></pre></td></tr></table></figure>
 <strong>从上面可以看出：Dispatcher在每次访问延迟加载属性时都会触发代理类回调方法，LazyLoader只在第一次访问延迟加载属性时触发代理类回调方法</strong></li>
</ol>
<ol start="6">
<li>接口生成器<blockquote>
<p>InterfaceMaker 会动态生成一个接口，该接口包含指定类的所有方法</p>
</blockquote>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.InterfaceMaker;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InterfaceMakerDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException, InvocationTargetException, IllegalAccessException </span>&#123;</span><br><span class="line">        InterfaceMaker interfaceMaker = <span class="keyword">new</span> InterfaceMaker();</span><br><span class="line">        <span class="comment">//抽取某个类的方法生成接口方法</span></span><br><span class="line">        interfaceMaker.add(TargetObject.class);</span><br><span class="line">        Class&lt;?&gt; targetInterface = interfaceMaker.create();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method method : targetInterface.getMethods()) &#123;</span><br><span class="line">            System.out.println(method.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//接口代理并设置代理接口方法拦截</span></span><br><span class="line">        Object object = Enhancer.create(Object.class, <span class="keyword">new</span> Class[]&#123;targetInterface&#125;, <span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;method&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;filter method&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;method&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;method1&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;filter method1&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;method1&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">&quot;voidMethod&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;filter voidMethod&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;filter voidMethod&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;default&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Method targetMethod = object.getClass().getMethod(<span class="string">&quot;method1&quot;</span>, String.class);</span><br><span class="line">        String value = (String) targetMethod.invoke(object, <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;xiaoyuge&quot;</span>&#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;----&quot;</span>+value);</span><br><span class="line">        Method targetMethod1 = object.getClass().getMethod(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">        String value1 = (String) targetMethod1.invoke(object, <span class="keyword">new</span> Object[] &#123;&#125;);</span><br><span class="line">        System.out.println(<span class="string">&quot;----&quot;</span>+value1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
输出： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">method1</span><br><span class="line">voidMethod</span><br><span class="line">method</span><br><span class="line">filter method1</span><br><span class="line">----method1</span><br><span class="line">filter method</span><br><span class="line">----method</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="3-底层源码分析"><a href="#3-底层源码分析" class="headerlink" title="3. 底层源码分析"></a>3. 底层源码分析</h2><p>上面讲了通过<code>MethodInterceptor</code>和<code>Enhancer</code>实现一个动态代理，那么它的底层是如何实现的呢？</p>
<p>我们都知道，既然要生成一个代理对象，那么肯定需要一个代理类，只不过当我们使用cglib时，这个代理类是由cglib生成的，那么我们要看到这个代理类是怎么生成的，只需要在运行时加上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-Dcglib.debugLocation=/Users/xiaoyuge/Desktop/classes</span><br></pre></td></tr></table></figure>
<p>cglib就会将生成的代理类放到上面所指定的路径上。</p>
<p>先看原来的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetObject</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;method&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testTargetObject</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">final</span> TargetObject target = <span class="keyword">new</span> TargetObject();</span><br><span class="line">     Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">     enhancer.setSuperclass(TargetObject.class);</span><br><span class="line">     enhancer.setCallbacks(<span class="keyword">new</span> Callback[]&#123;<span class="keyword">new</span> MethodInterceptor() &#123;</span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">             <span class="comment">//test 方法增加了其他的逻辑</span></span><br><span class="line">             <span class="keyword">if</span> (<span class="string">&quot;method1&quot;</span>.equals(method.getName())) &#123;</span><br><span class="line">                 System.out.println(<span class="string">&quot;------before------&quot;</span>);</span><br><span class="line">                 Object result = method.invoke(target, objects);</span><br><span class="line">                 System.out.println(<span class="string">&quot;------after-------&quot;</span>);</span><br><span class="line">                 <span class="keyword">return</span> result;</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//其他方法正常执行</span></span><br><span class="line">             <span class="keyword">return</span> method.invoke(target, objects);</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;&#125;);</span><br><span class="line">     TargetObject t = (TargetObject) enhancer.create();</span><br><span class="line">     t.method();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>cglib代理类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetObject</span>$$<span class="title">EnhancerByCGLIB</span>$$8<span class="title">db9696e</span> <span class="keyword">extends</span> <span class="title">TargetObject</span> <span class="keyword">implements</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//............省略.........</span></span><br><span class="line">    <span class="keyword">final</span> String CGLIB$method1$<span class="number">0</span>(String var1) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.method1(var1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> String <span class="title">method1</span><span class="params">(String var1)</span> </span>&#123;</span><br><span class="line">        MethodInterceptor var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        <span class="keyword">if</span> (var10000 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            CGLIB$BIND_CALLBACKS(<span class="keyword">this</span>);</span><br><span class="line">            var10000 = <span class="keyword">this</span>.CGLIB$CALLBACK_0;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> var10000 != <span class="keyword">null</span> ? (String)var10000.intercept(<span class="keyword">this</span>, CGLIB$method1$<span class="number">0</span>$Method, <span class="keyword">new</span> Object[]&#123;var1&#125;, CGLIB$method1$<span class="number">0</span>$Proxy) : <span class="keyword">super</span>.method1(var1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到代理类继承了<code>TargetObject</code>，然后重写了<code>TargetObject</code>里面的方法，通过代理对象去调用，代理对象中包含了一个<code>CGLIB$method1$0</code>和一个<code>method1</code>方法。</p>
<p><code>method1</code>方法内会调用所设置的Callbacks中的intercept(), 相当于执行增强逻辑，如果没有Callbacks，则会执行<code>super.method1()</code>;<br>那么如果不设置<code>Callbacks</code>，是否能够正常执行，接着往下看</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">  Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">  enhancer.setSuperclass(TargetObject.class);</span><br><span class="line">  TargetObject t = (TargetObject) enhancer.create();</span><br><span class="line">  t.method();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行时，cglib在构造对象时就会报一个没有Callbacks的控制针异常。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.NullPointerException</span><br><span class="line">trueat net.sf.cglib.proxy.CallbackInfo.determineTypes(CallbackInfo.java:39)</span><br><span class="line">trueat net.sf.cglib.proxy.Enhancer.preValidate(Enhancer.java:350)</span><br><span class="line">trueat net.sf.cglib.proxy.Enhancer.createHelper(Enhancer.java:471)</span><br><span class="line">trueat net.sf.cglib.proxy.Enhancer.create(Enhancer.java:305)</span><br><span class="line">trueat org.example.TestBitwise.test(TestBitwise.java:17)</span><br><span class="line">trueat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">true//.....</span><br></pre></td></tr></table></figure>

<p>再来看代理类中的另一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> String CGLIB$method1$<span class="number">0</span>(String var1) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">super</span>.method1(var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法我们不能直接调用，要通过所设置的Callback，也就是<code>MethodInterceptor</code>中<code>MethodProxy</code>对象来调用，MethodProxy对象表示方法代理。</p>
<p>假如<code>TargetObject</code>代理对象在执行method1方法，那么当执行流程进入到<code>intercept()</code>方法时，<code>MethodProxy</code>对象表示的就是method1()方法，但是我们现在知道了在<code>TargetObject</code>类和代理类都有<code>method1</code>方法，所以<code>MethodProxy</code>对象代理的就是这两个<code>method1</code>方法。</p>
<p>比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// o 表示当前代理对象，  target表示被代理对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行TargetObject代理对象的CGLIB$method1$0方法，也就是执行TargetObject代理对象的父类的method1方法</span></span><br><span class="line">Object result1 = methodProxy.invokeSuper(o, objects);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行TargetObject代理对象的CGLIB$method1$0方法，会报错，调用invokeSuper只能传入代理对象</span></span><br><span class="line">Object result2 = methodProxy.invokeSuper(target, objects);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行TargetObject对象method1方法</span></span><br><span class="line">Object result3 = methodProxy.invoke(o, objects);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行TargetObject代理对象的method1方法，又会进入拦截器，栈溢出</span></span><br><span class="line">Object result4 = methodProxy.invokeSuper(target, objects);</span><br></pre></td></tr></table></figure>
<p>所以在执行<code>methodProxy.invokeSuper()</code>方法时，就会去执行<code>CGLIB$method1$0()</code>方法。</p>
<p><strong>总结一下cglib的大概工作原理是：cglib会根据所设置的Superclass，生成代理类作为其子类，并且会重写Superclass中的方法，Superclass中的某一个方法，比如method1()，相应的在代理类中会对应两个方法，一个是重写的method1()，用来执行增强逻辑，一个是CGLIB$method1$0()，会直接调用super.test()，是让MethodProxy对象来用的。</strong></p>
<h2 id="4-流程总结"><a href="#4-流程总结" class="headerlink" title="4. 流程总结"></a>4. 流程总结</h2><ol>
<li>首先生成代理对象。创建增强类<code>Enhancer</code>，设置代理类的父类，设置回调拦截方法，返回创建的代理对象；</li>
</ol>
<ol start="2">
<li>调用代理类中的方法。这里调用的代理类中的方法实际上是重写的父类的拦截。重写的方法中会去调用<code>intercept</code>方法;</li>
</ol>
<ol start="3">
<li>调用<code>intercept</code>，方法中会对调用代理方法中的<code>invokeSuper</code>方法。而在 <code>invokeSuper</code> 中维护了一个 <code>FastClassInfo类</code>，其包含四个属性字段:<ul>
<li>FastClass f1(目标类)、</li>
<li>FastClass f2 (代理类)、</li>
<li>int i1(目标类要执行方法的下标)、</li>
<li>int i2(代理类要执行方法的下标); <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">FastClassInfo</span> </span>&#123;</span><br><span class="line">     FastClass f1;</span><br><span class="line">     FastClass f2;</span><br><span class="line">     <span class="keyword">int</span> i1;</span><br><span class="line">     <span class="keyword">int</span> i2;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">private</span> <span class="title">FastClassInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invokeSuper</span><span class="params">(Object obj, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="keyword">this</span>.init();</span><br><span class="line">         MethodProxy.FastClassInfo fci = <span class="keyword">this</span>.fastClassInfo;</span><br><span class="line">         <span class="keyword">return</span> fci.f2.invoke(fci.i2, obj, args);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (InvocationTargetException var4) &#123;</span><br><span class="line">         <span class="keyword">throw</span> var4.getTargetException();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<code>invokeSuper</code>中会调用的为代理类中的对应方法（代理类继承于父类的时候，对于其父类的方法，自己会生成两个方法，一个是重写的方法，一个是代理生成的方法，这里调用的即是代理生成的方法）；</li>
</ol>
<ol start="4">
<li>调用代理类中的代理方法。代理方法中通过<code>super.xxxx(string)</code>来实际真正的调用要执行的方法；</li>
</ol>
<h2 id="5-JDK与cglib的区别"><a href="#5-JDK与cglib的区别" class="headerlink" title="5. JDK与cglib的区别"></a>5. JDK与cglib的区别</h2><p><strong>JDK动态代理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxy</span><span class="params">(Object proxyObj)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Proxy.newProxyInstance(Thread.currentThread().getContextClassLoader(),</span><br><span class="line">                                proxyObj.getClass().getInterfaces(), <span class="keyword">new</span> MyInvocationHandler(proxyObj));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   UserDetailService service = (UserDetailService) getProxy(<span class="keyword">new</span> UserDetailServiceImpl());</span><br><span class="line">   service.method1(<span class="string">&quot;xiaoyuge&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>cglib动态代理</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> TargetInterceptor cglibProxy = <span class="keyword">new</span> TargetInterceptor();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getProxy</span><span class="params">(Class cls)</span> </span>&#123;</span><br><span class="line">    enhancer.setSuperclass(cls);</span><br><span class="line">    enhancer.setCallback(cglibProxy);</span><br><span class="line">    <span class="keyword">return</span> enhancer.create();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    TargetObject target = (TargetObject) getProxy(TargetObject.class);</span><br><span class="line">    target.method1(<span class="string">&quot;xiaoyuge&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>个人理解两者的区别在于：<strong>JDK动态代理是基于委托思想，而CGLib动态代理是基于继承的思想！！！</strong></p>
<ul>
<li>基于<strong>委托</strong>思想，JDK生成动态代理类的时候，需要传入被代理类（被委托类）的对象，可以看作是对象级别的重用机制</li>
</ul>
<ul>
<li>基于<strong>继承</strong>思想，动态代理类继承了被代理类，理论上父类的所有开放方法对于子类都是可见的，可以看作是类级别的重用机制；</li>
</ul>
<p><strong>动态代理 = 拦截器机制 + 回溯到被代理类的能力</strong></p>
<ul>
<li><p>对于JDK动态代理：</p>
<blockquote>
<p>JDK动态代理 = 拦截器机制（InvocationHandler) + 回溯到被代理类的能力(反射调用被代理类对象相关方法）</p>
<p>在JDK动态代理中，生成的代理类的全限定类名是com.sun.proxy.$ProxyN（N是正整数，比如$Proxy0），它继承了com.sun.proxy类，该类中存在一个InvocationHandler类型的h成员变量，它就是拦截器。但这里会存在一个问题，由于我们希望代理类和被代理类在行为上是一致的（具有相同的类型），所以JDK动态代理需要引入接口的概念，代理对象和被代理对象需要具有相同的接口定义。</p>
<p>所以，在我们使用JDK动态代理的过程中，我们需要自定义拦截器，实现InvocationHandler 接口，然后将被代理对象（被委托对象）注入到拦截器中。当调用接口方法时，会首先调用拦截器的invoke方法，拦截器invoke方法内部，会经过反射去调用被代理对象的相应方法。</p>
</blockquote>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">//执行目标方法对象</span></span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>对于CGLIB动态代理：</p>
<blockquote>
<p>CGLIB动态代理 = 拦截器机制（MethodInterceptor) + 回溯到被代理类的能力 (FastClass辅助类、MethodProxy类）</p>
<p>在CGLIB动态代理中，生成的代理类的全限定类名是很自由的。因为它是基于继承机制，代理类继承了被代理类。 在生成的代理类中，会存在一个MethodInterceptor类型的CGLIB$CALLBACK_0成员变量，它就是拦截器。由于是继承，代理类天然就可以调用到父类（被代理类）的方法，因此这里不再需要注入被代理类的对象实例了。但这里仍然存在一个很核心的问题：代理类看起来，既要能够调用到拦截器，又要可以回溯到父类（被代理类）的原始方法，这看起来很矛盾。怎么解决呢？</p>
<p>其实很简单，CGLIB生成的代理，对于被代理类的原有方法（比如上面的method1方法），会调用到拦截器。而与此同时，CGLIB还增加了隐藏的能够回溯到原始方法的传送门方法（比如CGLIB$method1$0）</p>
</blockquote>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CglibProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;   </span><br><span class="line">    <span class="meta">@Override</span>   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;    </span><br><span class="line">        <span class="comment">//执行目标方法对象       </span></span><br><span class="line">        Object result = methodProxy.invokeSuper(o, objects);      </span><br><span class="line">        <span class="keyword">return</span> result;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<p><strong>两者区别</strong></p>
<ul>
<li><p><code>JDK动态代理</code>基于接口实现，必须先定义接口；</p>
<p> <code>CGLib动态代理</code>基于被代理类实现，可以直接定义类或者实现接口的类；</p>
</li>
</ul>
<ul>
<li><p><code>JDK动态代理</code>需要实现InvocationHanlder接口，加上反射机制实现代理类</p>
<p> <code>CGLib动态代理</code>需要实现MethodInterceptor接口，对于代理类不可使用final修饰</p>
</li>
</ul>
<ul>
<li><p><code>JDK动态代理</code>是委托机制，委托hanlder，生成新的委托类，调用实现类方法；</p>
<p> <code>CGLib动态代理</code>则使用继承机制，被代理类和代理类是继承关系，直接调用其中方法；</p>
</li>
</ul>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>线程池底层源码分析</title>
    <url>/thread-pool-source/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-线程池创建"><a href="#1-线程池创建" class="headerlink" title="1. 线程池创建"></a>1. 线程池创建</h3><p>先使用<code>ThreadPoolExecutor</code>手动创建一个线程池</p>
<blockquote>
<p>根据阿里巴巴Java开发手册里面的要求，线程池不允许使用<code>Executors</code>创建，而是通过<code>ThreadPoolExecutor</code>的方式<br>这样的处理方式更加明确线程池的运行规则，规避资源耗尽的风险<br>说明：Executors返回的线程池对象的弊端如下：</p>
<ol>
<li><code>FixedThreadPool</code>和<code>SingleThreadPool</code>: 允许的请求队列长度为Integer.MAX_VALUE,可能会堆积大量请求，从而导致OOM</li>
</ol>
<ol start="2">
<li><code>CachedThreadPool</code>和 <code>ScheduledThreadPool</code>: 允许的创建线程数长度为Integer.MAX_VALUE,可能会创建大量线程，从而导致OOM</li>
</ol>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">2</span>,</span><br><span class="line">        <span class="number">5</span>,</span><br><span class="line">        <span class="number">3</span>,</span><br><span class="line">        TimeUnit.SECONDS,</span><br><span class="line">        <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">3</span>),</span><br><span class="line">        Executors.defaultThreadFactory(),</span><br><span class="line">        <span class="keyword">new</span> ThreadPoolExecutor.DiscardOldestPolicy());</span><br></pre></td></tr></table></figure>
<p><strong>ThreadPoolExecutor七大参数：</strong></p>
<ol>
<li>corePoolSize:核心线程池大小</li>
<li>maximumPoolSize:最大线程池大小</li>
<li>keepAliveTime:空闲线程存活时间</li>
<li>unit:时间单位</li>
<li>workQueue:阻塞队列</li>
<li>threadFactory:线程工厂：创建线程的，一般不用动</li>
<li>handler:拒绝策略<ul>
<li>new ThreadPoolExecutor.AbortPolicy() // 不执行新任务，直接抛出异常，提示线程池已满</li>
<li>new ThreadPoolExecutor.CallerRunsPolicy() // 哪来的去哪里！由调用线程处理该任务</li>
<li>new ThreadPoolExecutor.DiscardPolicy() //不执行新任务，也不抛出异常</li>
<li>new ThreadPoolExecutor.DiscardOldestPolicy() //丢弃队列最前面的任务，然后重新提交被拒绝的任务。</li>
</ul>
</li>
</ol>
<p><strong>ThreadPoolExecutor构造方法源码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                          <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                          TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                          ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">                          RejectedExecutionHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="keyword">null</span> || threadFactory == <span class="keyword">null</span> || handler == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="keyword">this</span>.acc = System.getSecurityManager() == <span class="keyword">null</span> ?</span><br><span class="line">            <span class="keyword">null</span> :</span><br><span class="line">            AccessController.getContext();</span><br><span class="line">    <span class="keyword">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="keyword">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="keyword">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="keyword">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="keyword">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="keyword">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-线程池的基础属性和方法"><a href="#2-线程池的基础属性和方法" class="headerlink" title="2. 线程池的基础属性和方法"></a>2. 线程池的基础属性和方法</h3><p>在线程池的源码中，会通过一个 <code>AtomicInteger</code>类型的变量 <strong>ctl</strong> 来表示<strong>线程池的状态和当前线程池中的工作线程数量</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br></pre></td></tr></table></figure>
<p>一个Integer占4个字节，也就是 32 个bit,线程池有5个状态：</p>
<ol>
<li>RUNNING</li>
<li>SHUTDOWN</li>
<li>STOP</li>
<li>TIDYING</li>
<li>TERMINATED<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> 源码关于5中状态的说明：</span><br><span class="line">/*   ******</span><br><span class="line">* The runState provides the main lifecycle control, taking on values:</span><br><span class="line">*</span><br><span class="line">*   RUNNING:  Accept new tasks and process queued tasks</span><br><span class="line">*   SHUTDOWN: Don&#x27;t accept new tasks, but process queued tasks</span><br><span class="line">*   STOP:     Don&#x27;t accept new tasks, don&#x27;t process queued tasks,</span><br><span class="line">*             and interrupt in-progress tasks</span><br><span class="line">*   TIDYING:  All tasks have terminated, workerCount is zero,</span><br><span class="line">*             the thread transitioning to state TIDYING</span><br><span class="line">*             will run the terminated() hook method</span><br><span class="line">*   TERMINATED: terminated() has completed</span><br><span class="line">*</span><br><span class="line">* The numerical order among these values matters, to allow</span><br><span class="line">* ordered comparisons. The runState monotonically increases over</span><br><span class="line">* time, but need not hit each state. The transitions are:</span><br><span class="line">*</span><br><span class="line">* RUNNING -&gt; SHUTDOWN</span><br><span class="line">*    On invocation of shutdown(), perhaps implicitly in finalize()</span><br><span class="line">* (RUNNING or SHUTDOWN) -&gt; STOP</span><br><span class="line">*    On invocation of shutdownNow()</span><br><span class="line">* SHUTDOWN -&gt; TIDYING</span><br><span class="line">*    When both queue and pool are empty</span><br><span class="line">* STOP -&gt; TIDYING</span><br><span class="line">*    When pool is empty</span><br><span class="line">* TIDYING -&gt; TERMINATED</span><br><span class="line">*    When the terminated() hook method has completed</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
2个 <code>bit</code> 能表示4种状态, 那5种状态就至少需要3个bit位，比如在线程池的源码中就是这么表示的<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"><span class="comment">// runState is stored in the high-order bits</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RUNNING    = -<span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SHUTDOWN   =  <span class="number">0</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> STOP       =  <span class="number">1</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TIDYING    =  <span class="number">2</span> &lt;&lt; COUNT_BITS;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TERMINATED =  <span class="number">3</span> &lt;&lt; COUNT_BITS;</span><br></pre></td></tr></table></figure>
<code>Integer.SIZE</code> 为 32， 所以 <code>COUNT_BITS = 29</code>， 最终各个状态对应的二进制为：</li>
</ol>
<ul>
<li>RUNNING: <strong>111</strong>00000 00000000 00000000 00000000</li>
<li>SHUTDOWN: <strong>000</strong>00000 00000000 00000000 00000000</li>
<li>STOP: <strong>001</strong>00000 00000000 00000000 00000000</li>
<li>TIDYING: <strong>010</strong>00000 00000000 00000000 00000000</li>
<li>TERMINATED: <strong>011</strong>00000 00000000 00000000 00000000</li>
</ul>
<p>所以，只需要使用一个Integer数字的最高3个bit，就可以表示5种线程池状态，而剩下的29个bit就可以用来表示工作线程数，<br>比如：假设<code>ctl</code>为：<code>11100000 00000000 00000000 00001010</code> 就表示线程池的状态为<code>RUNNING</code>，线程池池目前在工作的线程有10个，<br>这里说的”在工作”指的是线程活着，要么在执行任务，要么在阻塞等待任务。</p>
<p>同时，线程池中也提供一些方法来获取线程池状态和工作线程数，比如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger ctl = <span class="keyword">new</span> AtomicInteger(ctlOf(RUNNING, <span class="number">0</span>));</span><br><span class="line"><span class="comment">//29 二进制为：00000000 00000000 00000000 00011101</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> COUNT_BITS = Integer.SIZE - <span class="number">3</span>;</span><br><span class="line"><span class="comment">//二进制为：00011111 11111111 11111111 11111111</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CAPACITY   = (<span class="number">1</span> &lt;&lt; COUNT_BITS) - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Packing and unpacking ctl</span></span><br><span class="line"><span class="comment">//～CAPACITY： 11100000 00000000 00000000 00000000</span></span><br><span class="line"><span class="comment">// &amp; 操作之后， 得到的就是 c 的高3位</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">runStateOf</span><span class="params">(<span class="keyword">int</span> c)</span>     </span>&#123; <span class="keyword">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//CAPACITY： 00011111 11111111 11111111 11111111</span></span><br><span class="line"><span class="comment">// &amp; 操作之后， 得到的就是 c 的低29位</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">workerCountOf</span><span class="params">(<span class="keyword">int</span> c)</span>  </span>&#123; <span class="keyword">return</span> c &amp; CAPACITY; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  把运行状态和线程数量进行合并，传入的两个int 数字有限制， rs的低29位都必须是9</span></span><br><span class="line"><span class="comment"> *  wc的高3位都必须位0，这样经过或运算之后，才能得到准确的 ctl </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ctlOf</span><span class="params">(<span class="keyword">int</span> rs, <span class="keyword">int</span> wc)</span> </span>&#123; <span class="keyword">return</span> rs | wc; &#125;</span><br></pre></td></tr></table></figure>

<h4 id="execute方法"><a href="#execute方法" class="headerlink" title="execute方法"></a>execute方法</h4><p>当执行线程池的<code>execute</code>方法时</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(Runnable command)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (command == <span class="keyword">null</span>)</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">     <span class="comment">//获取ctl, ctl初始值时 ctlOf(RUNNING, 0), 表示线程池处于运行中，工作线程数位0</span></span><br><span class="line">     <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">     </span><br><span class="line">     <span class="comment">//工作线程数于 corePoolSize， 则添加工作线程数，并把command作为该线程要执行的任务</span></span><br><span class="line">     <span class="keyword">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class="line">         <span class="comment">//true 表示添加的时核心工作线程，在addWorker内部会判断当前工作线程数是不是超过了corePoolSize</span></span><br><span class="line">        <span class="comment">//如果超过了就会添加失败，addWorker返回false，表示不能开启新的线程来执行任务，而是应该先 入队</span></span><br><span class="line">         <span class="keyword">if</span> (addWorker(command, <span class="keyword">true</span>))</span><br><span class="line">             <span class="keyword">return</span>;</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//如果添加核心工作线程失败，要重新获取ctl, 可能是线程池状态被其他线程修改了</span></span><br><span class="line">        <span class="comment">// 也可能是其他线程也在向线程池提交任务，导致核心工作线程已经超出了corePoolSize</span></span><br><span class="line">         c = ctl.get();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">// 线程池状态是否还是RUNNING，如果是就把任务添加到阻塞队列中</span></span><br><span class="line">     <span class="keyword">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class="line">         <span class="comment">//在任务入队时，线程池的状态也可能发生改变</span></span><br><span class="line">         <span class="keyword">int</span> recheck = ctl.get();</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 再次检查线程池的状态，如果不是RUNNING，就不能再接受任务了，就把任务从队列中移除，并进行拒绝策略</span></span><br><span class="line">        <span class="keyword">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class="line">             reject(command);</span><br><span class="line">         <span class="keyword">else</span> <span class="keyword">if</span> (workerCountOf(recheck) == <span class="number">0</span>)</span><br><span class="line">             <span class="comment">//不过为了确保刚刚入队的任务有线程回去处理它，需要判断以下工作线程数，如果位0，则添加一个非核心的工作线程</span></span><br><span class="line">             addWorker(<span class="keyword">null</span>, <span class="keyword">false</span>);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//如果线程池状态不是RUNNING，或者线程池状态时RUNNING但是队列满了，则去添加一个非核心工作线程</span></span><br><span class="line">     <span class="comment">//实际上，addWorker中会判断线程池状态不是RUNNING，是不会添加工作线程的</span></span><br><span class="line">     <span class="comment">//false表示非核心工作线程，作用是，在addWorker内部会判断当前工作线程数已经超过了maximumPoolSize</span></span><br><span class="line">     <span class="comment">//如果超过了则会添加不成功，执行拒绝策略</span></span><br><span class="line">     <span class="keyword">else</span> <span class="keyword">if</span> (!addWorker(command, <span class="keyword">false</span>))</span><br><span class="line">         reject(command);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="addWorker方法"><a href="#addWorker方法" class="headerlink" title="addWorker方法"></a>addWorker方法</h4><p>addWorker方法是核心方法，用于添加线程的， core参数表示条件的是核心线程还是非核心线程</p>
<p><strong>添加线程：实际上就是开启一个线程，不管是核心线程还是非核心线程都只是一个普通的线程</strong>，而核心和非核心的区别在于：</p>
<ol>
<li><p>如果要添加<strong>核心工作线程</strong>，那么就要判断目前的工作线程数是否超过<code>corePoolSize</code></p>
<p>a. 如果没超过，则直接开启新的工作线程执行任务</p>
<p>b. 如果超过了，则不会开启新的工作线程，而是把任务进行入队</p>
</li>
<li><p>如果添加<strong>非核心线程</strong>，那么就要判断目前的工作线程数是否超过<code>maximumPoolSize</code></p>
<p>a. 如果没超过，则直接开启新的工作线程执行任务</p>
<p>b. 如果超过了，则拒绝执行任务</p>
</li>
</ol>
<p>所以在addWorker方法中，首先就要判断工作线程有没有超过限制，如果没有超过限制再去开启一个线程。</p>
<p>并且在addWorker方法中，还得判断线程池的状态，如果线程池的状态不是RUNNING状态了，那就没必要要去添加线程了，当然有一种特例，就是线程池的状态是SHUTDOWN，但是队列中有任务，那此时还是需要添加添加一个线程的。</p>
<p>我们前面提到的都是开启新的工作线程，那么工作线程怎么回收呢？不可能开启的工作线程一直活着，因为如果任务由多变少，那也就不需要过多的线程资源，所以线程池中会有机制对开启的工作线程进行回收，如何回收的，后文会提到，我们这里先分析，有没有可能线程池中所有的线程都被回收了，答案的是有的。</p>
<p>首先非核心工作线程被回收是可以理解的，那核心工作线程要不要回收掉呢？其实线程池存在的意义，就是提交生成好线程资源，需要线程的时候直接使用就可以，而不需要临时去开启线程，所以正常情况下，开启的核心工作线程是不用回收掉的，就算暂时没有任务要处理，也不用回收，就让核心工作线程在那等着就可以了。</p>
<p>但是，在线程池中有这么一个参数：<code>allowCoreThreadTimeOut</code>表示是否允许核心工作线程超时，意思就是<strong>是否允许核心工作线程回收。</strong>默认这个参数为false，但是我们可以调用allowCoreThreadTimeOut(boolean value)来把这个参数改为true，只要改了，那么核心工作线程也就会被回收了，那这样线程池中的所有工作线程都可能被回收掉，那如果所有工作线程都被回收掉之后，阻塞队列中来了一个任务，这样就形成了特例情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">addWorker</span><span class="params">(Runnable firstTask, <span class="keyword">boolean</span> core)</span> </span>&#123;</span><br><span class="line">     retry:</span><br><span class="line">     <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">         <span class="keyword">int</span> c = ctl.get();</span><br><span class="line">         <span class="keyword">int</span> rs = runStateOf(c);</span><br><span class="line">            </span><br><span class="line">         <span class="comment">//线程池状态不是RUNNING，并且不是特例情况（线程池状态是SHUTDOWN并且队列不为空）</span></span><br><span class="line">        <span class="comment">//如果是RUNNING或者是特例情况，就准备新建工作线程</span></span><br><span class="line">         <span class="comment">// Check if queue empty only if necessary.</span></span><br><span class="line">         <span class="keyword">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class="line">             ! (rs == SHUTDOWN &amp;&amp;</span><br><span class="line">                firstTask == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                ! workQueue.isEmpty()))</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            </span><br><span class="line">         <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">             <span class="keyword">int</span> wc = workerCountOf(c);</span><br><span class="line">             <span class="comment">//判断工作线程数是否超过了限制</span></span><br><span class="line">             <span class="comment">//如果超过了，则return false</span></span><br><span class="line">             <span class="keyword">if</span> (wc &gt;= CAPACITY ||</span><br><span class="line">                 wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">             <span class="keyword">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class="line">                 <span class="comment">//如果没有超过限制，则修改ctl，增加工作线程数，cas成功则退出外层retry循环，去创建新的工作线程</span></span><br><span class="line">                 <span class="keyword">break</span> retry;</span><br><span class="line">             <span class="comment">//如果cas失败，则表示有其他线程也在提交任务，也在增加工作线程数，此时重新获取ctl</span></span><br><span class="line">             c = ctl.get();  <span class="comment">// Re-read ctl</span></span><br><span class="line">        </span><br><span class="line">             <span class="comment">//如果发现线程池的状态发生了变化，则继续回到retry，重新判断线程池的状态是否是RUNNING</span></span><br><span class="line">             <span class="comment">//如果没有发生变化，则继续利用CAS来增加工作线程数，直到cas成功</span></span><br><span class="line">             <span class="keyword">if</span> (runStateOf(c) != rs)</span><br><span class="line">                 <span class="keyword">continue</span> retry;</span><br><span class="line">             <span class="comment">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="comment">//ctl 修改成功，也就是工作线程数 +1 成功</span></span><br><span class="line">    <span class="comment">//接下来就要开启一个新的工作线程了</span></span><br><span class="line">     <span class="keyword">boolean</span> workerStarted = <span class="keyword">false</span>;</span><br><span class="line">     <span class="keyword">boolean</span> workerAdded = <span class="keyword">false</span>;</span><br><span class="line">     Worker w = <span class="keyword">null</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="comment">//Workker实现了Runnable接口，构造一个Worker对象时，就会利用ThreadFactory新建一个线程</span></span><br><span class="line">        <span class="comment">//Worker对象有两个属性：</span></span><br><span class="line">        <span class="comment">//Runnable firstTask: 表示worker待执行的第一个任务，第二个任务会从阻塞队列中获取</span></span><br><span class="line">        <span class="comment">// Thread thread： 表示Worker对应的线程，就是这个线程来获取并执行任务的</span></span><br><span class="line">         w = <span class="keyword">new</span> Worker(firstTask);</span><br><span class="line">         </span><br><span class="line">         <span class="comment">//拿出线程对象，还没有start</span></span><br><span class="line">         <span class="keyword">final</span> Thread t = w.thread;</span><br><span class="line">         <span class="keyword">if</span> (t != <span class="keyword">null</span>) &#123;</span><br><span class="line">             <span class="keyword">final</span> ReentrantLock mainLock = <span class="keyword">this</span>.mainLock;</span><br><span class="line">             mainLock.lock();</span><br><span class="line">             <span class="keyword">try</span> &#123;</span><br><span class="line">                 <span class="comment">// Recheck while holding lock.</span></span><br><span class="line">                 <span class="comment">// Back out on ThreadFactory failure or if</span></span><br><span class="line">                 <span class="comment">// shut down before lock acquired.</span></span><br><span class="line">                 <span class="keyword">int</span> rs = runStateOf(ctl.get());</span><br><span class="line"></span><br><span class="line">                 <span class="comment">// 如果线程池的状态是RUNNING</span></span><br><span class="line">                 <span class="comment">//或者线程池的状态变成了SHUTDOWN，但是当前线程没有自己的第一个任务，那就表示当前调用addWorker方法是为了从队列中获取任务来执行</span></span><br><span class="line">                 <span class="comment">// 正常情况下线程池的状态如果是SHUTDOWN，是不能创建新的工作线程的，但是队列中如果有任务，那就是上面说的特例情况</span></span><br><span class="line">                 <span class="keyword">if</span> (rs &lt; SHUTDOWN ||</span><br><span class="line">                     (rs == SHUTDOWN &amp;&amp; firstTask == <span class="keyword">null</span>)) &#123;</span><br><span class="line">                     <span class="keyword">if</span> (t.isAlive()) <span class="comment">// precheck that t is startable</span></span><br><span class="line">                         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalThreadStateException();</span><br><span class="line">                     </span><br><span class="line">                     <span class="comment">// workers用来记录当前线程池中工作线程</span></span><br><span class="line">                     workers.add(w);</span><br><span class="line">                     </span><br><span class="line">                     <span class="comment">//largestPoolSize 用来跟踪线程池在运行中工作线程数据的峰值</span></span><br><span class="line">                     <span class="keyword">int</span> s = workers.size();</span><br><span class="line">                     <span class="keyword">if</span> (s &gt; largestPoolSize)</span><br><span class="line">                         largestPoolSize = s;</span><br><span class="line">                     workerAdded = <span class="keyword">true</span>;</span><br><span class="line">                 &#125;</span><br><span class="line">             &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                 mainLock.unlock();</span><br><span class="line">             &#125;</span><br><span class="line">             <span class="comment">//运行线程</span></span><br><span class="line">             <span class="keyword">if</span> (workerAdded) &#123;</span><br><span class="line">                 t.start();</span><br><span class="line">                 workerStarted = <span class="keyword">true</span>;</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         <span class="comment">//在上述过程中如果抛出了异常，需要从workers中移除添加的work,并且还要修改ctl , 工作线程数据 -1，表示新建工作线程失败</span></span><br><span class="line">         <span class="keyword">if</span> (! workerStarted)</span><br><span class="line">             addWorkerFailed(w);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="comment">//表示添加工作线程成功</span></span><br><span class="line">     <span class="keyword">return</span> workerStarted;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>所以，对于<code>addWorker</code>方法，核心逻辑就是：</p>
<ol>
<li>先判断工作线程数是否超过了限制</li>
<li>修改ctl，使工作线程数 +1</li>
<li>构造Work对象，并把它添加到workers集合中</li>
<li>启动Work对象对应的工作线程</li>
</ol>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>thread</tag>
      </tags>
  </entry>
  <entry>
    <title>Java 反射机制详解</title>
    <url>/reflection/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<blockquote>
<p>Java反射机制是在运行状态中，对于任意一个类都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；</p>
<p>这种动态获取的信息以及动态调用对象的方法的功能成为Java语言的反射机制。</p>
</blockquote>
<h2 id="1-反射基础"><a href="#1-反射基础" class="headerlink" title="1. 反射基础"></a>1. 反射基础</h2><p>RTTI（Run-Time Type Identification）运行时类别识别，在《Thinking in java》中提到其作用是在运行时识别一个对象的类型和类的信息。<br>主要有两种方式： 1. 传统的RTTI，它嘉定我们在编译时已经知道了所有的类型； 2. “反射”机制，运行在运行时发现和使用类的信息</p>
<p>反射就是把Java类中的各种成分映射成一个个Java对象</p>
<p>例如：一个类有：成员变量、方法、构造方法、包等信息，利用反射技术可以对一个类进行解刨，把个个组成部分映射成一个个对象</p>
<h3 id="1-1-Class类"><a href="#1-1-Class类" class="headerlink" title="1.1. Class类"></a>1.1. Class类</h3><p>Class类时一个实实在在的类，存在与JDK的java.lang包中，Class类的示例表示Java应用运行时的类（class ans enum）或接口（interface and annotation）<br>（每个类运行时都在JVM里表现为一个class对象，可以通过类名.class、类型.getClass()、Class.forName(“类名”)等方法获取class对象）.</p>
<p>数组同样也被映射为class 对象的一个类，所有具有相同元素类型和维数的数组都共享该 <code>Class</code> 对象。基本类型<code>boolean</code>，<code>byte</code>，<code>char</code>，<code>short</code>，<code>int</code>，<code>long</code>，<code>float</code>，<code>double</code>和关键字<code>void</code>同样表现为 class 对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Class</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">GenericDeclaration</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">Type</span>,</span></span><br><span class="line"><span class="class">                              <span class="title">AnnotatedElement</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ANNOTATION = <span class="number">0x00002000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ENUM = <span class="number">0x00004000</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SYNTHETIC = <span class="number">0x00001000</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">registerNatives</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        registerNatives();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Private constructor. Only the Java Virtual Machine creates Class objects.   //私有构造器，只有JVM才能调用创建Class对象</span></span><br><span class="line"><span class="comment">     * This constructor is not used and prevents the default constructor being</span></span><br><span class="line"><span class="comment">     * generated.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Class</span><span class="params">(ClassLoader loader)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Initialize final field for classLoader.  The initialization value of non-null</span></span><br><span class="line">        <span class="comment">// prevents future JIT optimizations from assuming this final field is null.</span></span><br><span class="line">        classLoader = loader;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//..........</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>到这里我们可以得出以下几点信息：</p>
<ol>
<li><p>Class类也是类的一种，与class关键字时不一样的</p>
</li>
<li><p>手动编写的类被编译后会产生一个Class对象，其表示的是创建的类的类型信息，而且这个Class对象保存在同名.class文件中字节码文件（</p>
</li>
<li><p>每个通过关键字class标识的类，在内存中有且只有一个与之对应的Class对象来描述其类型信息，无论创建多少个实例对象，其依据的都是用一个Class对象。</p>
</li>
<li><p>Class类只存私有构造函数，因此对应Class对象只能有JVM创建和加载</p>
</li>
<li><p>Class类的对象作用是运行时提供或获得某个对象的类型信息，这点对于反射技术很重要(关于反射稍后分析)。</p>
</li>
</ol>
<h3 id="1-2-类加载"><a href="#1-2-类加载" class="headerlink" title="1.2. 类加载"></a>1.2. 类加载</h3><p>类加载机制和类字节码技术可以参考以下两篇文章：</p>
<ol>
<li><p><a href="https://pdai.tech/md/java/jvm/java-jvm-class.html">JVM基础 - 类字节码详解</a></p>
<ul>
<li>源代码通过编译器编译为字节码，再通过类加载子系统进行加载到JVM中运行</li>
</ul>
</li>
<li><p><a href="https://pdai.tech/md/java/jvm/java-jvm-classload.html">JVM基础 - Java类加载机制</a></p>
</li>
</ol>
<p>这里我们需要知道的是：</p>
<ol>
<li><p>类加载机制流程</p>
<p> <img src="/reflection/index/1.png"></p>
</li>
</ol>
<ol start="2">
<li><p>类的加载</p>
<p> <img src="/reflection/index/2.png"></p>
</li>
</ol>
<h2 id="2-反射的使用"><a href="#2-反射的使用" class="headerlink" title="2. 反射的使用"></a>2. 反射的使用</h2><p>在Java中，Class类和java.lang.reflect类库一起对反射进行类权利的支持。在反射包中， 我们常用的类主要有：</p>
<ul>
<li>Constructor类表示Class对象所表示的类的构造方法，利用它可以在运行时动态创建对象</li>
<li>Field表示Class对象所表示的类的成员变量，通过他可以在运行时动态修改成员变量的属性值（包括private）</li>
</ul>
<ul>
<li>Method表示Class对象所表示的类的成员方法，通过它可以动态调用对象的方法（包括private）</li>
</ul>
<h3 id="2-1-Class类对象的获取"><a href="#2-1-Class类对象的获取" class="headerlink" title="2.1. Class类对象的获取"></a>2.1. Class类对象的获取</h3><p>在类加载的时候，JVM会创建一个class对象，class对象是反射中最常用的，获取class对象的方式主要有三种：</p>
<ul>
<li><p>根据类名： 类名.class</p>
</li>
<li><p>根据对象： 对象.getClass()</p>
</li>
<li><p>根据全限定类名：Class.forName(“全限定类名”)</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">classTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 获取Class对象的三种方式</span></span><br><span class="line">    logger.info(<span class="string">&quot;根据类名:  \t&quot;</span> + User.class);</span><br><span class="line">    logger.info(<span class="string">&quot;根据对象:  \t&quot;</span> + <span class="keyword">new</span> User().getClass());</span><br><span class="line">    logger.info(<span class="string">&quot;根据全限定类名:\t&quot;</span> + Class.forName(<span class="string">&quot;com.test.User&quot;</span>));</span><br><span class="line">    <span class="comment">// 常用的方法</span></span><br><span class="line">    logger.info(<span class="string">&quot;获取全限定类名:\t&quot;</span> + userClass.getName());</span><br><span class="line">    logger.info(<span class="string">&quot;获取类名:\t&quot;</span> + userClass.getSimpleName());</span><br><span class="line">    logger.info(<span class="string">&quot;实例化:\t&quot;</span> + userClass.newInstance());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;init&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User [name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">根据类名:  	class com.test.User</span><br><span class="line">根据对象:  	class com.test.User</span><br><span class="line">根据全限定类名:	class com.test.User</span><br><span class="line">获取全限定类名:	com.test.User</span><br><span class="line">获取类名:	User</span><br><span class="line">实例化:	User [name=init, age=0]</span><br></pre></td></tr></table></figure>

<p>再来看下Class类的方法：</p>
<table>
<thead>
<tr>
<th align="left">方法名</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">forName()</td>
<td align="left">1. 获取Class对象的一个引用，但引用的类还没有加载(该类的第一个对象没有生成)就加载了这个类。 <br> 2.为了产生Class引用，forName()立即就进行了初始化。</td>
</tr>
<tr>
<td align="left">Object-getClass()</td>
<td align="left">获取Class对象的一个引用，返回表示该对象的实际类型的Class引用</td>
</tr>
<tr>
<td align="left">getName()</td>
<td align="left">取全限定的类名(包括包名)，即类的完整名字。</td>
</tr>
<tr>
<td align="left">getSimpleName()</td>
<td align="left">获取类名(不包括包名)</td>
</tr>
<tr>
<td align="left">getCanonicalName()</td>
<td align="left">获取全限定的类名(包括包名)</td>
</tr>
<tr>
<td align="left">isInterface()</td>
<td align="left">判断Class对象是否是表示一个接口</td>
</tr>
<tr>
<td align="left">getInterfaces()</td>
<td align="left">返回Class对象数组，表示Class对象所引用的类所实现的所有接口</td>
</tr>
<tr>
<td align="left">getSupercalss()</td>
<td align="left">返回Class对象，表示Class对象所引用的类所继承的直接基类。应用该方法可在运行时发现一个对象完整的继承结构</td>
</tr>
<tr>
<td align="left">newInstance()</td>
<td align="left">返回一个Oject对象，是实现“虚拟构造器”的一种途径。使用该方法创建的类，必须带有无参的构造器</td>
</tr>
<tr>
<td align="left">getFields()</td>
<td align="left">获得某个类的所有的公共（public）的字段，包括继承自父类的所有公共字段。 类似的还有getMethods和getConstructors。</td>
</tr>
<tr>
<td align="left">getDeclaredFields</td>
<td align="left">获得某个类的自己声明的字段，即包括public、private和proteced，默认但是不包括父类声明的任何字段。类似的还有getDeclaredMethods和getDeclaredConstructors。</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.cry;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I1</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">I2</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cell</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> mCellPublic;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> <span class="keyword">extends</span>  <span class="title">Cell</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mAnimalPrivate;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mAnimalProtected;</span><br><span class="line">    <span class="keyword">int</span> mAnimalDefault;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> mAnimalPublic;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sAnimalPrivate;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">int</span> sAnimalProtected;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sAnimalDefault;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> sAnimalPublic;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> <span class="keyword">implements</span> <span class="title">I1</span>, <span class="title">I2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDogPrivate;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> mDogPublic;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> mDogProtected;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDogDefault;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> sDogPrivate;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">int</span> sDogProtected;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> sDogDefault;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> sDogPublic;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InstantiationException </span>&#123;</span><br><span class="line">        Class&lt;Dog&gt; dog = Dog.class;</span><br><span class="line">        <span class="comment">//类名打印</span></span><br><span class="line">        System.out.println(dog.getName()); <span class="comment">//com.cry.Dog</span></span><br><span class="line">        System.out.println(dog.getSimpleName()); <span class="comment">//Dog</span></span><br><span class="line">        System.out.println(dog.getCanonicalName());<span class="comment">//com.cry.Dog</span></span><br><span class="line">        <span class="comment">//接口</span></span><br><span class="line">        System.out.println(dog.isInterface()); <span class="comment">//false</span></span><br><span class="line">        <span class="keyword">for</span> (Class iI : dog.getInterfaces()) &#123;</span><br><span class="line">            System.out.println(iI);</span><br><span class="line">        &#125;</span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">          interface com.cry.I1</span></span><br><span class="line"><span class="comment">          interface com.cry.I2</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//父类</span></span><br><span class="line">        System.out.println(dog.getSuperclass());<span class="comment">//class com.cry.Animal</span></span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Dog d = dog.newInstance();</span><br><span class="line">        <span class="comment">//字段</span></span><br><span class="line">        <span class="keyword">for</span> (Field f : dog.getFields()) &#123;</span><br><span class="line">            System.out.println(f.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            mDogPublic</span></span><br><span class="line"><span class="comment">            sDogPublic</span></span><br><span class="line"><span class="comment">            mAnimalPublic</span></span><br><span class="line"><span class="comment">            sAnimalPublic</span></span><br><span class="line"><span class="comment">            mCellPublic  //父类的父类的公共字段也打印出来了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">&quot;---------&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Field f : dog.getDeclaredFields()) &#123;</span><br><span class="line">            System.out.println(f.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/** 只有自己类声明的字段</span></span><br><span class="line"><span class="comment">         mDogPrivate</span></span><br><span class="line"><span class="comment">         mDogPublic</span></span><br><span class="line"><span class="comment">         mDogProtected</span></span><br><span class="line"><span class="comment">         mDogDefault</span></span><br><span class="line"><span class="comment">         sDogPrivate</span></span><br><span class="line"><span class="comment">         sDogProtected</span></span><br><span class="line"><span class="comment">         sDogDefault</span></span><br><span class="line"><span class="comment">         sDogPublic</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>getName</code>、<code>getCanonicalName</code>与<code>getSimpleName</code>的区别:</p>
<ul>
<li><p>getSimpleName: 只获取类名</p>
</li>
<li><p>getName：类的全限定名，JVM中class的表示，可以用于动态加载class对象；</p>
</li>
<li><p>getCanonicalName： 主要用于输出(toString)或log打印，大多数情况和getName一样，但是在内部类、数组等类型的表示形式就不同了</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span>  <span class="class"><span class="keyword">class</span> <span class="title">inner</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//普通类</span></span><br><span class="line">        System.out.println(Test.class.getSimpleName()); <span class="comment">//Test</span></span><br><span class="line">        System.out.println(Test.class.getName()); <span class="comment">//com.cry.Test</span></span><br><span class="line">        System.out.println(Test.class.getCanonicalName()); <span class="comment">//com.cry.Test</span></span><br><span class="line">        <span class="comment">//内部类</span></span><br><span class="line">        System.out.println(inner.class.getSimpleName()); <span class="comment">//inner</span></span><br><span class="line">        System.out.println(inner.class.getName()); <span class="comment">//com.cry.Test$inner</span></span><br><span class="line">        System.out.println(inner.class.getCanonicalName()); <span class="comment">//com.cry.Test.inner</span></span><br><span class="line">        <span class="comment">//数组</span></span><br><span class="line">        System.out.println(args.getClass().getSimpleName()); <span class="comment">//String[]</span></span><br><span class="line">        System.out.println(args.getClass().getName()); <span class="comment">//[Ljava.lang.String;</span></span><br><span class="line">        System.out.println(args.getClass().getCanonicalName()); <span class="comment">//java.lang.String[]</span></span><br><span class="line">        <span class="comment">//我们不能用getCanonicalName去加载类对象，必须用getName</span></span><br><span class="line">        <span class="comment">//Class.forName(inner.class.getCanonicalName()); 报错</span></span><br><span class="line">        Class.forName(inner.class.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-2-Constructor类及其用法"><a href="#2-2-Constructor类及其用法" class="headerlink" title="2.2. Constructor类及其用法"></a>2.2. Constructor类及其用法</h3><blockquote>
<p>Constructor类存在于反射包java.lang.reflect中，反射的是Class对象所表示的类的构造方法</p>
</blockquote>
<p>获取Constructor对象是通过Class类中的方法获取的，Class类与Constructor相关的主要方法如下：</p>
<table>
<thead>
<tr>
<th align="left">方法返回值</th>
<th align="left">方法名</th>
<th align="left">方法说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">static Class&lt;?&gt;</td>
<td align="left">forName(String className)</td>
<td align="left">返回与带有给定字符串名的类或接口相关联的 Class 对象。</td>
</tr>
<tr>
<td align="left">Constructor</td>
<td align="left">getConstructor(Class&lt;?&gt;… parameterTypes)</td>
<td align="left">返回指定参数类型、具有public访问权限的构造函数对象</td>
</tr>
<tr>
<td align="left">Constructor&lt;?&gt;[]</td>
<td align="left">getConstructors()</td>
<td align="left">返回所有具有public访问权限的构造函数的Constructor对象数组</td>
</tr>
<tr>
<td align="left">Constructor</td>
<td align="left">getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td>
<td align="left">返回指定参数类型、所有声明的（包括private）构造函数对象</td>
</tr>
<tr>
<td align="left">Constructor&lt;?&gt;[]</td>
<td align="left">getDeclaredConstructors()</td>
<td align="left">返回所有声明的（包括private）构造函数对象</td>
</tr>
<tr>
<td align="left">T</td>
<td align="left">newInstance()</td>
<td align="left">调用无参构造器创建此 Class 对象所表示的类的一个新实例。</td>
</tr>
</tbody></table>
<p>下面看一个简单例子来了解Constructor对象的使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstructionTest</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        Class&lt;?&gt; clazz = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Class对象的引用</span></span><br><span class="line">        clazz = Class.forName(<span class="string">&quot;com.example.javabase.User&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//第一种方法，实例化默认构造方法，User必须无参构造函数,否则将抛异常</span></span><br><span class="line">        User user = (User) clazz.newInstance();</span><br><span class="line">        user.setAge(<span class="number">20</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取带String参数的public构造函数</span></span><br><span class="line">        Constructor cs1 =clazz.getConstructor(String.class);</span><br><span class="line">        <span class="comment">//创建User</span></span><br><span class="line">        User user1= (User) cs1.newInstance(<span class="string">&quot;hiway&quot;</span>);</span><br><span class="line">        user1.setAge(<span class="number">22</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user1:&quot;</span>+user1.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取得指定带int和String参数构造函数,该方法是私有构造private</span></span><br><span class="line">        Constructor cs2=clazz.getDeclaredConstructor(<span class="keyword">int</span>.class,String.class);</span><br><span class="line">        <span class="comment">//由于是private必须设置可访问</span></span><br><span class="line">        cs2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//创建user对象</span></span><br><span class="line">        User user2= (User) cs2.newInstance(<span class="number">25</span>,<span class="string">&quot;hiway2&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user2:&quot;</span>+user2.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有构造包含private</span></span><br><span class="line">        Constructor&lt;?&gt; cons[] = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="comment">// 查看每个构造方法需要的参数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cons.length; i++) &#123;</span><br><span class="line">            <span class="comment">//获取构造函数参数类型</span></span><br><span class="line">            Class&lt;?&gt; clazzs[] = cons[i].getParameterTypes();</span><br><span class="line">            System.out.println(<span class="string">&quot;构造函数[&quot;</span>+i+<span class="string">&quot;]:&quot;</span>+cons[i].toString() );</span><br><span class="line">            System.out.print(<span class="string">&quot;参数类型[&quot;</span>+i+<span class="string">&quot;]:(&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; clazzs.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j == clazzs.length - <span class="number">1</span>)</span><br><span class="line">                    System.out.print(clazzs[j].getName());</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    System.out.print(clazzs[j].getName() + <span class="string">&quot;,&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> age</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> age, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/* output </span><br><span class="line">User&#123;age=20, name=&#x27;Jack&#x27;&#125;</span><br><span class="line">--------------------------------------------</span><br><span class="line">user1:User&#123;age=22, name=&#x27;hiway&#x27;&#125;</span><br><span class="line">--------------------------------------------</span><br><span class="line">user2:User&#123;age=25, name=&#x27;hiway2&#x27;&#125;</span><br><span class="line">--------------------------------------------</span><br><span class="line">构造函数[0]:private com.example.javabase.User(int,java.lang.String)</span><br><span class="line">参数类型[0]:(int,java.lang.String)</span><br><span class="line">构造函数[1]:public com.example.javabase.User(java.lang.String)</span><br><span class="line">参数类型[1]:(java.lang.String)</span><br><span class="line">构造函数[2]:public com.example.javabase.User()</span><br><span class="line">参数类型[2]:()</span><br></pre></td></tr></table></figure>


<h3 id="2-3-Field类及其用法"><a href="#2-3-Field类及其用法" class="headerlink" title="2.3. Field类及其用法"></a>2.3. Field类及其用法</h3><blockquote>
<p>Field提供有关类或接口的单个字段的信息，以及对的动态访问权限，反射的字段可能是一个类（静态）字段或实例字段</p>
</blockquote>
<p>同样的道理，我们可以通过Class类提供的方法来获取代表字段信息的Field对象，Field对象相关的方法如下：</p>
<table>
<thead>
<tr>
<th align="left">返回值</th>
<th align="left">方法名称</th>
<th align="left">方法说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Field</td>
<td align="left">getDeclaredField(String name)</td>
<td align="left">获取指定name名称的(包含private修饰的)字段，不包括继承的字段</td>
</tr>
<tr>
<td align="left">Field[]</td>
<td align="left">getDeclaredFields()</td>
<td align="left">获取Class对象所表示的类或接口的所有(包含private修饰的)字段,不包括继承的字段</td>
</tr>
<tr>
<td align="left">Field</td>
<td align="left">getField(String name)</td>
<td align="left">获取指定name名称、具有public修饰的字段，包含继承字段</td>
</tr>
<tr>
<td align="left">Field[]</td>
<td align="left">getFields()</td>
<td align="left">获取修饰符为public的字段，包含继承字段</td>
</tr>
</tbody></table>
<p>下面的代码演示了上述方法的使用过程</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectField</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException </span>&#123;</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;reflect.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//获取指定字段名称的Field类,注意字段修饰符必须为public而且存在该字段,</span></span><br><span class="line">        <span class="comment">// 否则抛NoSuchFieldException</span></span><br><span class="line">        Field field = clazz.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;field:&quot;</span>+field);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取所有修饰符为public的字段,包含父类字段,注意修饰符为public才会获取</span></span><br><span class="line">        Field fields[] = clazz.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f:fields) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;f:&quot;</span>+f.getDeclaringClass());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================getDeclaredFields====================&quot;</span>);</span><br><span class="line">        <span class="comment">//获取当前类所字段(包含private字段),注意不包含父类的字段</span></span><br><span class="line">        Field fields2[] = clazz.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f:fields2) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;f2:&quot;</span>+f.getDeclaringClass());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获取指定字段名称的Field类,可以是任意修饰符的自动,注意不包含父类的字段</span></span><br><span class="line">        Field field2 = clazz.getDeclaredField(<span class="string">&quot;desc&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;field2:&quot;</span>+field2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">      输出结果: </span></span><br><span class="line"><span class="comment">     field:public int reflect.Person.age</span></span><br><span class="line"><span class="comment">     f:public java.lang.String reflect.Student.desc</span></span><br><span class="line"><span class="comment">     f:public int reflect.Person.age</span></span><br><span class="line"><span class="comment">     f:public java.lang.String reflect.Person.name</span></span><br><span class="line"><span class="comment">     ================getDeclaredFields====================</span></span><br><span class="line"><span class="comment">     f2:public java.lang.String reflect.Student.desc</span></span><br><span class="line"><span class="comment">     f2:private int reflect.Student.score</span></span><br><span class="line"><span class="comment">     field2:public java.lang.String reflect.Student.desc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="comment">//省略set和get方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String desc;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> score;</span><br><span class="line">    <span class="comment">//省略set和get方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述的方法需要注意的是：</p>
<ul>
<li><p>如果不需要获取其父类的字段，则使用Class类的<code>getDeclaredField/getDeclaredFelds</code>方法来获取字段</p>
</li>
<li><p>如果需要获取父类的字段，使用Class类的<code>getField/getFields</code>，但是只能会去到public修饰的字段，无法获取父类的私有字段</p>
</li>
</ul>
<p>通过Field类本身的方法对指定类属性赋值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取Class对象引用</span></span><br><span class="line">Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;reflect.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">Student st= (Student) clazz.newInstance();</span><br><span class="line"><span class="comment">//获取父类public字段并赋值</span></span><br><span class="line">Field ageField = clazz.getField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">ageField.set(st,<span class="number">18</span>);</span><br><span class="line">Field nameField = clazz.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">nameField.set(st,<span class="string">&quot;Lily&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//只获取当前类的字段,不获取父类的字段</span></span><br><span class="line">Field descField = clazz.getDeclaredField(<span class="string">&quot;desc&quot;</span>);</span><br><span class="line">descField.set(st,<span class="string">&quot;I am student&quot;</span>);</span><br><span class="line">Field scoreField = clazz.getDeclaredField(<span class="string">&quot;score&quot;</span>);</span><br><span class="line"><span class="comment">//设置可访问，score是private的</span></span><br><span class="line">scoreField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">scoreField.set(st,<span class="number">88</span>);</span><br><span class="line">System.out.println(st.toString());</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果：Student&#123;age=18, name=&#x27;Lily ,desc=&#x27;I am student&#x27;, score=88&#125; </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取字段值</span></span><br><span class="line">System.out.println(scoreField.get(st));</span><br><span class="line"><span class="comment">// 88</span></span><br></pre></td></tr></table></figure>

<p>其中的set(Object obj, Object value)方法是Field类本身的方法，用于设置字段的值，而get(Object obj)则是获取字段的值,<br>当然关于Field类还有其他常用的方法如下：</p>
<table>
<thead>
<tr>
<th align="left">返回值</th>
<th align="left">方法名</th>
<th align="left">方法说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">void</td>
<td align="left">set(Object obj, Object value)</td>
<td align="left">将指定对象变量上此 Field 对象表示的字段设置为指定的新值。</td>
</tr>
<tr>
<td align="left">Object</td>
<td align="left">get(Object obj)</td>
<td align="left">返回指定对象上此 Field 表示的字段的值</td>
</tr>
<tr>
<td align="left">Class&lt;?&gt;</td>
<td align="left">getType()</td>
<td align="left">返回一个 Class 对象，它标识了此Field 对象所表示字段的声明类型</td>
</tr>
<tr>
<td align="left">boolean</td>
<td align="left">isEnumConstant()</td>
<td align="left">如果此字段表示枚举类型的元素则返回 true；否则返回 false</td>
</tr>
<tr>
<td align="left">String</td>
<td align="left">toGenericString()</td>
<td align="left">返回一个描述此 Field（包括其一般类型）的字符串</td>
</tr>
<tr>
<td align="left">String</td>
<td align="left">getName()</td>
<td align="left">返回此 Field 对象表示的字段的名称</td>
</tr>
<tr>
<td align="left">Class&lt;?&gt;</td>
<td align="left">getDeclaringClass()</td>
<td align="left">返回表示类或接口的 Class 对象，该类或接口声明由此 Field 对象表示的字段</td>
</tr>
<tr>
<td align="left">void</td>
<td align="left">setAccessible(boolean flag)</td>
<td align="left">将此对象的 accessible 标志设置为指示的布尔值,即设置其可访问性</td>
</tr>
</tbody></table>
<p>上述方法可能是较为常用的，事实上在设置值的方法上，Field类还提供了专门针对基本数据类型的方法，如<code>setInt()/getInt()、setBoolean()/getBoolean、setChar()/getChar()</code>等等方法 。<br><strong>需要特别注意的是被final关键字修饰的Field字段是安全的，在运行时可以接收任何修改，但最终其实际值是不会发生改变的</strong> </p>
<h3 id="2-4-Method类及其用法"><a href="#2-4-Method类及其用法" class="headerlink" title="2.4. Method类及其用法"></a>2.4. Method类及其用法</h3><blockquote>
<p>Method 提供关于类或接口上单独某个方法（以及如何访问该方法）的信息，所反映的方法可能是类方法或实例方法（包括抽象方法）。</p>
</blockquote>
<p>下面是Class类获取Method对相关的方法：</p>
<table>
<thead>
<tr>
<th align="left">返回值</th>
<th align="left">方法名称</th>
<th align="left">方法说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Method</td>
<td align="left">getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td align="left">返回一个指定参数的Method对象，该对象反映此 Class 对象所表示的类或接口的指定已声明方法。</td>
</tr>
<tr>
<td align="left">Method[]</td>
<td align="left">getDeclaredMethods()</td>
<td align="left">返回 Method 对象的一个数组，这些对象反映此 Class 对象表示的类或接口声明的所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</td>
</tr>
<tr>
<td align="left">Method</td>
<td align="left">getMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td align="left">返回一个 Method 对象，它反映此 Class 对象所表示的类或接口的指定公共成员方法。</td>
</tr>
<tr>
<td align="left">Method[]</td>
<td align="left">getMethods()</td>
<td align="left">返回一个包含某些 Method 对象的数组，这些对象反映此 Class 对象所表示的类或接口（包括那些由该类或接口声明的以及从超类和超接口继承的那些的类或接口）的公共 member 方法。</td>
</tr>
</tbody></table>
<p>同样通过案例演示上述方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectMethod</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException </span>&#123;</span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;reflect.Circle&quot;</span>);</span><br><span class="line">        <span class="comment">//根据参数获取public的Method,包含继承自父类的方法</span></span><br><span class="line">        Method method = clazz.getMethod(<span class="string">&quot;draw&quot;</span>,<span class="keyword">int</span>.class,String.class);</span><br><span class="line">        System.out.println(<span class="string">&quot;method:&quot;</span>+method);</span><br><span class="line">        <span class="comment">//获取所有public的方法:</span></span><br><span class="line">        Method[] methods =clazz.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m:methods)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m::&quot;</span>+m);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;=========================================&quot;</span>);</span><br><span class="line">        <span class="comment">//获取当前类的方法包含private,该方法无法获取继承自父类的method</span></span><br><span class="line">        Method method1 = clazz.getDeclaredMethod(<span class="string">&quot;drawCircle&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;method1::&quot;</span>+method1);</span><br><span class="line">        <span class="comment">//获取当前类的所有方法包含private,该方法无法获取继承自父类的method</span></span><br><span class="line">        Method[] methods1=clazz.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method m:methods1)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;m1::&quot;</span>+m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> count , String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;draw &quot;</span>+ name +<span class="string">&quot;,count=&quot;</span>+count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;drawCircle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAllCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">method:public void reflect.Shape.draw(int,java.lang.String)</span><br><span class="line"></span><br><span class="line">m::public int reflect.Circle.getAllCount()</span><br><span class="line">m::public void reflect.Shape.draw()</span><br><span class="line">m::public void reflect.Shape.draw(int,java.lang.String)</span><br><span class="line">m::public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException</span><br><span class="line">m::public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException</span><br><span class="line">m::public final void java.lang.Object.wait() throws java.lang.InterruptedException</span><br><span class="line">m::public boolean java.lang.Object.equals(java.lang.Object)</span><br><span class="line">m::public java.lang.String java.lang.Object.toString()</span><br><span class="line">m::public native int java.lang.Object.hashCode()</span><br><span class="line">m::public final native java.lang.Class java.lang.Object.getClass()</span><br><span class="line">m::public final native void java.lang.Object.notify()</span><br><span class="line">m::public final native void java.lang.Object.notifyAll()</span><br><span class="line"></span><br><span class="line">=========================================</span><br><span class="line">method1::private void reflect.Circle.drawCircle()</span><br><span class="line"></span><br><span class="line">m1::public int reflect.Circle.getAllCount()</span><br><span class="line">m1::private void reflect.Circle.drawCircle()</span><br></pre></td></tr></table></figure>

<p>在通过getMethods方法获取Method对象时，会把父类的方法也获取到，如上的输出结果，把Object类的方法都打印出来了。而<code>getDeclaredMethod/getDeclaredMethods</code>方法都只能获取当前类的方法。我们在使用时根据情况选择即可。下面将演示通过Method对象调用指定类的方法：<br> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;reflect.Circle&quot;</span>);</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line">Circle circle = (Circle) clazz.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取指定参数的方法对象Method</span></span><br><span class="line">Method method = clazz.getMethod(<span class="string">&quot;draw&quot;</span>,<span class="keyword">int</span>.class,String.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过Method对象的invoke(Object obj,Object... args)方法调用</span></span><br><span class="line">method.invoke(circle,<span class="number">15</span>,<span class="string">&quot;圈圈&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对私有无参方法的操作</span></span><br><span class="line">Method method1 = clazz.getDeclaredMethod(<span class="string">&quot;drawCircle&quot;</span>);</span><br><span class="line"><span class="comment">//修改私有方法的访问标识</span></span><br><span class="line">method1.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">method1.invoke(circle);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对有返回值得方法操作</span></span><br><span class="line">Method method2 =clazz.getDeclaredMethod(<span class="string">&quot;getAllCount&quot;</span>);</span><br><span class="line">Integer count = (Integer) method2.invoke(circle);</span><br><span class="line">System.out.println(<span class="string">&quot;count:&quot;</span>+count);</span><br></pre></td></tr></table></figure><br>输出结果:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">draw 圈圈,count=15</span><br><span class="line">drawCircle</span><br><span class="line">count:100</span><br></pre></td></tr></table></figure>




<h2 id="3-反射机制执行的流程"><a href="#3-反射机制执行的流程" class="headerlink" title="3. 反射机制执行的流程"></a>3. 反射机制执行的流程</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloReflect</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 使用外部配置的实现，进行动态加载类</span></span><br><span class="line">            TempFunctionTest test = (TempFunctionTest)Class.forName(<span class="string">&quot;com.tester.HelloReflect&quot;</span>).newInstance();</span><br><span class="line">            test.sayHello(<span class="string">&quot;call directly&quot;</span>);</span><br><span class="line">            <span class="comment">// 2. 根据配置的函数名，进行方法调用（不需要通用的接口抽象）</span></span><br><span class="line">            Object t2 = <span class="keyword">new</span> TempFunctionTest();</span><br><span class="line">            Method method = t2.getClass().getDeclaredMethod(<span class="string">&quot;sayHello&quot;</span>, String.class);</span><br><span class="line">            method.invoke(test, <span class="string">&quot;method invoke&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException | InstantiationException | NoSuchMethodException | IllegalAccessException | InvocationTargetException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String word)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello,&quot;</span> + word);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>来看下执行流程<br><img src="/reflection/index/3.png"></p>
<h3 id="3-1-反射获取类实例"><a href="#3-1-反射获取类实例" class="headerlink" title="3.1. 反射获取类实例"></a>3.1. 反射获取类实例</h3><p>首先调用了<code>java.lang.Class</code>的静态方法，获取类的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; forName(String className) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 先通过反射，获取调用进来的类信息，从而获取当前的 classLoader</span></span><br><span class="line">    Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">    <span class="comment">// 调用native方法进行获取class信息</span></span><br><span class="line">    <span class="keyword">return</span> forName0(className, <span class="keyword">true</span>, ClassLoader.getClassLoader(caller), caller);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>forName()</code>反射获取类的信息，并没有将实现留给Java，而是交给了jvm去加载。</p>
<p>首先是先获取<code>ClassLoader</code>，然后调用native方法，获取信息，加载类则是回调<code>java.lang.ClassLoader</code>，最后，jvm又会回调ClassLoader进行类加载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String name) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">return</span> loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sun.misc.Launcher</span></span><br><span class="line"><span class="keyword">public</span> Class&lt;?&gt; loadClass(String var1, <span class="keyword">boolean</span> var2) <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="keyword">int</span> var3 = var1.lastIndexOf(<span class="number">46</span>);</span><br><span class="line">    <span class="keyword">if</span> (var3 != -<span class="number">1</span>) &#123;</span><br><span class="line">        SecurityManager var4 = System.getSecurityManager();</span><br><span class="line">        <span class="keyword">if</span> (var4 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            var4.checkPackageAccess(var1.substring(<span class="number">0</span>, var3));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.ucp.knownToNotExist(var1)) &#123;</span><br><span class="line">        Class var5 = <span class="keyword">this</span>.findLoadedClass(var1);</span><br><span class="line">        <span class="keyword">if</span> (var5 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (var2) &#123;</span><br><span class="line">                <span class="keyword">this</span>.resolveClass(var5);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> var5;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ClassNotFoundException(var1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.loadClass(var1, var2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.lang.ClassLoader</span></span><br><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">        <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// 先获取锁</span></span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// First, check if the class has already been loaded</span></span><br><span class="line">        <span class="comment">// 如果已经加载了的话，就不用再加载了</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 双亲委托加载</span></span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 父类没有加载到时，再自己加载</span></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getClassLoadingLock</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">    Object lock = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (parallelLockMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 使用 ConcurrentHashMap来保存锁</span></span><br><span class="line">        Object newLock = <span class="keyword">new</span> Object();</span><br><span class="line">        lock = parallelLockMap.putIfAbsent(className, newLock);</span><br><span class="line">        <span class="keyword">if</span> (lock == <span class="keyword">null</span>) &#123;</span><br><span class="line">            lock = newLock;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; findLoadedClass(String name) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!checkName(name))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">return</span> findLoadedClass0(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面来看一下<code>newInstance()</code>的实现方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 首先肯定是 Class.newInstance</span></span><br><span class="line"><span class="meta">@CallerSensitive</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">()</span> <span class="keyword">throws</span> InstantiationException, IllegalAccessException</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (System.getSecurityManager() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        checkMemberAccess(Member.PUBLIC, Reflection.getCallerClass(), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> the following code may not be strictly correct under</span></span><br><span class="line">    <span class="comment">// the current Java memory model.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Constructor lookup</span></span><br><span class="line">    <span class="comment">// newInstance() 其实相当于调用类的无参构造函数，所以，首先要找到其无参构造器</span></span><br><span class="line">    <span class="keyword">if</span> (cachedConstructor == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == Class.class) &#123;</span><br><span class="line">            <span class="comment">// 不允许调用 Class 的 newInstance() 方法</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalAccessException(</span><br><span class="line">                <span class="string">&quot;Can not call newInstance() on the Class for java.lang.Class&quot;</span></span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 获取无参构造器</span></span><br><span class="line">            Class&lt;?&gt;[] empty = &#123;&#125;;</span><br><span class="line">            <span class="keyword">final</span> Constructor&lt;T&gt; c = getConstructor0(empty, Member.DECLARED);</span><br><span class="line">            <span class="comment">// Disable accessibility checks on the constructor</span></span><br><span class="line">            <span class="comment">// since we have to do the security check here anyway</span></span><br><span class="line">            <span class="comment">// (the stack depth is wrong for the Constructor&#x27;s</span></span><br><span class="line">            <span class="comment">// security check to work)</span></span><br><span class="line">            java.security.AccessController.doPrivileged(</span><br><span class="line">                <span class="keyword">new</span> java.security.PrivilegedAction&lt;Void&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                            c.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">            cachedConstructor = c;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (InstantiationException)</span><br><span class="line">                <span class="keyword">new</span> InstantiationException(getName()).initCause(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Constructor&lt;T&gt; tmpConstructor = cachedConstructor;</span><br><span class="line">    <span class="comment">// Security check (same as in java.lang.reflect.Constructor)</span></span><br><span class="line">    <span class="keyword">int</span> modifiers = tmpConstructor.getModifiers();</span><br><span class="line">    <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(<span class="keyword">this</span>, modifiers)) &#123;</span><br><span class="line">        Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">        <span class="keyword">if</span> (newInstanceCallerCache != caller) &#123;</span><br><span class="line">            Reflection.ensureMemberAccess(caller, <span class="keyword">this</span>, <span class="keyword">null</span>, modifiers);</span><br><span class="line">            newInstanceCallerCache = caller;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Run constructor</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 调用无参构造器</span></span><br><span class="line">        <span class="keyword">return</span> tmpConstructor.newInstance((Object[])<span class="keyword">null</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">        Unsafe.getUnsafe().throwException(e.getTargetException());</span><br><span class="line">        <span class="comment">// Not reached</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>newInstance()主要做了三件事：</p>
<ol>
<li><p>权限检测，如果不通过就抛出异常</p>
</li>
<li><p>查找无参构造，并将其缓存起来；</p>
</li>
<li><p>调用具体方法的无参构造方法，生成实例并返回</p>
</li>
</ol>
<p>下面是获取构造器的过程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Constructor&lt;T&gt; <span class="title">getConstructor0</span><span class="params">(Class&lt;?&gt;[] parameterTypes,</span></span></span><br><span class="line"><span class="params"><span class="function">                                        <span class="keyword">int</span> which)</span> <span class="keyword">throws</span> NoSuchMethodException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 获取所有构造器</span></span><br><span class="line">        Constructor&lt;T&gt;[] constructors = privateGetDeclaredConstructors((which == Member.PUBLIC));</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;T&gt; constructor : constructors) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arrayContentsEq(parameterTypes,</span><br><span class="line">                                constructor.getParameterTypes())) &#123;</span><br><span class="line">                <span class="keyword">return</span> getReflectionFactory().copyConstructor(constructor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchMethodException(getName() + <span class="string">&quot;.&lt;init&gt;&quot;</span> + argumentTypesToString(parameterTypes));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>getConstructor()为获取匹配的构造器，分三步</p>
<ol>
<li><p>先获取所有的constructors，然后通过进行参数比较</p>
</li>
<li><p>找到匹配后，通过ReflectionFactory copy一份constructor返回；</p>
</li>
<li><p>否则抛出NoSuchMethodException</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取当前类所有的构造方法，通过jvm或者缓存</span></span><br><span class="line">    <span class="comment">// Returns an array of &quot;root&quot; constructors. These Constructor</span></span><br><span class="line">    <span class="comment">// objects must NOT be propagated to the outside world, but must</span></span><br><span class="line">    <span class="comment">// instead be copied via ReflectionFactory.copyConstructor.</span></span><br><span class="line">    <span class="keyword">private</span> Constructor&lt;T&gt;[] privateGetDeclaredConstructors(<span class="keyword">boolean</span> publicOnly) &#123;</span><br><span class="line">        checkInitted();</span><br><span class="line">        Constructor&lt;T&gt;[] res;</span><br><span class="line">        <span class="comment">// 调用 reflectionData(), 获取保存的信息，使用软引用保存，从而使内存不够可以回收</span></span><br><span class="line">        ReflectionData&lt;T&gt; rd = reflectionData();</span><br><span class="line">        <span class="keyword">if</span> (rd != <span class="keyword">null</span>) &#123;</span><br><span class="line">            res = publicOnly ? rd.publicConstructors : rd.declaredConstructors;</span><br><span class="line">            <span class="comment">// 存在缓存，则直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (res != <span class="keyword">null</span>) <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// No cached value available; request value from VM</span></span><br><span class="line">        <span class="keyword">if</span> (isInterface()) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">            Constructor&lt;T&gt;[] temporaryRes = (Constructor&lt;T&gt;[]) <span class="keyword">new</span> Constructor&lt;?&gt;[<span class="number">0</span>];</span><br><span class="line">            res = temporaryRes;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 使用native方法从jvm获取构造器</span></span><br><span class="line">            res = getDeclaredConstructors0(publicOnly);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (rd != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 最后，将从jvm中读取的内容，存入缓存</span></span><br><span class="line">            <span class="keyword">if</span> (publicOnly) &#123;</span><br><span class="line">                rd.publicConstructors = res;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                rd.declaredConstructors = res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Lazily create and cache ReflectionData</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ReflectionData&lt;T&gt; <span class="title">reflectionData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SoftReference&lt;ReflectionData&lt;T&gt;&gt; reflectionData = <span class="keyword">this</span>.reflectionData;</span><br><span class="line">        <span class="keyword">int</span> classRedefinedCount = <span class="keyword">this</span>.classRedefinedCount;</span><br><span class="line">        ReflectionData&lt;T&gt; rd;</span><br><span class="line">        <span class="keyword">if</span> (useCaches &amp;&amp;</span><br><span class="line">            reflectionData != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            (rd = reflectionData.get()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">            rd.redefinedCount == classRedefinedCount) &#123;</span><br><span class="line">            <span class="keyword">return</span> rd;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// else no SoftReference or cleared SoftReference or stale ReflectionData</span></span><br><span class="line">        <span class="comment">// -&gt; create and replace new instance</span></span><br><span class="line">        <span class="keyword">return</span> newReflectionData(reflectionData, classRedefinedCount);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 新创建缓存，保存反射信息</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ReflectionData&lt;T&gt; <span class="title">newReflectionData</span><span class="params">(SoftReference&lt;ReflectionData&lt;T&gt;&gt; oldReflectionData,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                <span class="keyword">int</span> classRedefinedCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!useCaches) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用cas保证更新的线程安全性，所以反射是保证线程安全的</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            ReflectionData&lt;T&gt; rd = <span class="keyword">new</span> ReflectionData&lt;&gt;(classRedefinedCount);</span><br><span class="line">            <span class="comment">// try to CAS it...</span></span><br><span class="line">            <span class="keyword">if</span> (Atomic.casReflectionData(<span class="keyword">this</span>, oldReflectionData, <span class="keyword">new</span> SoftReference&lt;&gt;(rd))) &#123;</span><br><span class="line">                <span class="keyword">return</span> rd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 先使用CAS更新，如果更新成功，则立即返回，否则测查当前已被其他线程更新的情况，如果和自己想要更新的状态一致，则也算是成功了</span></span><br><span class="line">            oldReflectionData = <span class="keyword">this</span>.reflectionData;</span><br><span class="line">            classRedefinedCount = <span class="keyword">this</span>.classRedefinedCount;</span><br><span class="line">            <span class="keyword">if</span> (oldReflectionData != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                (rd = oldReflectionData.get()) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                rd.redefinedCount == classRedefinedCount) &#123;</span><br><span class="line">                <span class="keyword">return</span> rd;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>如上，privateGetDeclaredConstructors(), 获取所有的构造器主要步骤：</p>
<ol>
<li>先尝试从缓存中获取；</li>
<li>如果缓存没有，则从jvm中重新获取，并存入缓存，缓存使用软引用进行保存，保证内存可用；</li>
</ol>
<p>另外，使用<code>reflectionData()</code>进行缓存保存；<code>ReflectionData</code> 的数据结构如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reflection data that might get invalidated when JVM TI RedefineClasses() is called</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionData</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">volatile</span> Field[] declaredFields;</span><br><span class="line">        <span class="keyword">volatile</span> Field[] publicFields;</span><br><span class="line">        <span class="keyword">volatile</span> Method[] declaredMethods;</span><br><span class="line">        <span class="keyword">volatile</span> Method[] publicMethods;</span><br><span class="line">        <span class="keyword">volatile</span> Constructor&lt;T&gt;[] declaredConstructors;</span><br><span class="line">        <span class="keyword">volatile</span> Constructor&lt;T&gt;[] publicConstructors;</span><br><span class="line">        <span class="comment">// Intermediate results for getFields and getMethods</span></span><br><span class="line">        <span class="keyword">volatile</span> Field[] declaredPublicFields;</span><br><span class="line">        <span class="keyword">volatile</span> Method[] declaredPublicMethods;</span><br><span class="line">        <span class="keyword">volatile</span> Class&lt;?&gt;[] interfaces;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Value of classRedefinedCount when we created this ReflectionData instance</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> redefinedCount;</span><br><span class="line"></span><br><span class="line">        ReflectionData(<span class="keyword">int</span> redefinedCount) &#123;</span><br><span class="line">            <span class="keyword">this</span>.redefinedCount = redefinedCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>其中，还有一个点，就是如何比较构造是否是要查找构造器，其实就是比较类型完成相等就完了，有一个不相等则返回false。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">arrayContentsEq</span><span class="params">(Object[] a1, Object[] a2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a1 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> a2 == <span class="keyword">null</span> || a2.length == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a2 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> a1.length == <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (a1.length != a2.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a1.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (a1[i] != a2[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// sun.reflect.ReflectionFactory</span></span><br><span class="line">    <span class="comment">/** Makes a copy of the passed constructor. The returned</span></span><br><span class="line"><span class="comment">        constructor is a &quot;child&quot; of the passed one; see the comments</span></span><br><span class="line"><span class="comment">        in Constructor.java for details. */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">Constructor&lt;T&gt; <span class="title">copyConstructor</span><span class="params">(Constructor&lt;T&gt; arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> langReflectAccess().copyConstructor(arg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// java.lang.reflect.Constructor, copy 其实就是新new一个 Constructor 出来</span></span><br><span class="line">    <span class="function">Constructor&lt;T&gt; <span class="title">copy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// This routine enables sharing of ConstructorAccessor objects</span></span><br><span class="line">        <span class="comment">// among Constructor objects which refer to the same underlying</span></span><br><span class="line">        <span class="comment">// method in the VM. (All of this contortion is only necessary</span></span><br><span class="line">        <span class="comment">// because of the &quot;accessibility&quot; bit in AccessibleObject,</span></span><br><span class="line">        <span class="comment">// which implicitly requires that new java.lang.reflect</span></span><br><span class="line">        <span class="comment">// objects be fabricated for each reflective call on Class</span></span><br><span class="line">        <span class="comment">// objects.)</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.root != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Can not copy a non-root Constructor&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;T&gt; res = <span class="keyword">new</span> Constructor&lt;&gt;(clazz,</span><br><span class="line">                                               parameterTypes,</span><br><span class="line">                                               exceptionTypes, modifiers, slot,</span><br><span class="line">                                               signature,</span><br><span class="line">                                               annotations,</span><br><span class="line">                                               parameterAnnotations);</span><br><span class="line">        <span class="comment">// root 指向当前 constructor</span></span><br><span class="line">        res.root = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// Might as well eagerly propagate this if already present</span></span><br><span class="line">        res.constructorAccessor = constructorAccessor;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过上面，获取到 Constructor 了。</p>
<p>接下来就只需调用其相应构造器的 newInstance()，即返回实例了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// return tmpConstructor.newInstance((Object[])null); </span></span><br><span class="line">    <span class="comment">// java.lang.reflect.Constructor</span></span><br><span class="line">    <span class="meta">@CallerSensitive</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(Object ... initargs)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span></span><br><span class="line"><span class="function">               IllegalArgumentException, InvocationTargetException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">                Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">                checkAccess(caller, clazz, <span class="keyword">null</span>, modifiers);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">&quot;Cannot reflectively create enum objects&quot;</span>);</span><br><span class="line">        ConstructorAccessor ca = constructorAccessor;   <span class="comment">// read volatile</span></span><br><span class="line">        <span class="keyword">if</span> (ca == <span class="keyword">null</span>) &#123;</span><br><span class="line">            ca = acquireConstructorAccessor();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">        T inst = (T) ca.newInstance(initargs);</span><br><span class="line">        <span class="keyword">return</span> inst;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// sun.reflect.DelegatingConstructorAccessorImpl</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(Object[] args)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> InstantiationException,</span></span><br><span class="line"><span class="function">             IllegalArgumentException,</span></span><br><span class="line"><span class="function">             InvocationTargetException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.newInstance(args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// sun.reflect.NativeConstructorAccessorImpl</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">newInstance</span><span class="params">(Object[] args)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> InstantiationException,</span></span><br><span class="line"><span class="function">               IllegalArgumentException,</span></span><br><span class="line"><span class="function">               InvocationTargetException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// We can&#x27;t inflate a constructor belonging to a vm-anonymous class</span></span><br><span class="line">        <span class="comment">// because that kind of class can&#x27;t be referred to by name, hence can&#x27;t</span></span><br><span class="line">        <span class="comment">// be found from the generated bytecode.</span></span><br><span class="line">        <span class="keyword">if</span> (++numInvocations &gt; ReflectionFactory.inflationThreshold()</span><br><span class="line">                &amp;&amp; !ReflectUtil.isVMAnonymousClass(c.getDeclaringClass())) &#123;</span><br><span class="line">            ConstructorAccessorImpl acc = (ConstructorAccessorImpl)</span><br><span class="line">                <span class="keyword">new</span> MethodAccessorGenerator().</span><br><span class="line">                    generateConstructor(c.getDeclaringClass(),</span><br><span class="line">                                        c.getParameterTypes(),</span><br><span class="line">                                        c.getExceptionTypes(),</span><br><span class="line">                                        c.getModifiers());</span><br><span class="line">            parent.setDelegate(acc);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用native方法，进行调用 constructor</span></span><br><span class="line">        <span class="keyword">return</span> newInstance0(c, args);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>返回构造器的实例后，可以根据外部进行进行类型转换，从而使用接口或方法进行调用实例功能了。</p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>Java机制</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 5大数据类型（一）</title>
    <url>/redis-special-1/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Reids安装请看：<a href="http://xiaoyuge.work/redis_install/">Linux环境下安装Redis</a></p>
<p>这里说的数据类型是value的数据类型，key的类型都是字符串。</p>
<p>5种数据类型：</p>
<ol>
<li><a href="#string">字符串String</a></li>
<li><a href="#list">列表List</a></li>
<li><a href="#set">集合Set</a></li>
<li><a href="#hash">哈希表 Hash</a></li>
<li><a href="#zset">有序集合Zset</a></li>
</ol>
<p>Redis 常用数据类型操作命令： <a href="http://redis.cn/commands.html">Redis命令中心</a></p>
<p><strong>Redis键（key)的相关命令：</strong></p>
<ul>
<li>keys * : 查看当前库所有的key</li>
<li>exists key : 判断某个key是否存在</li>
<li>type key ： 查看key的类型</li>
<li>del key： 删除指定的key数据</li>
<li>unlink key : 根据value删除非阻塞删除，仅仅将keys从keyspace元数据中删除，真正的删除会在后续异步中操作</li>
<li>expire key 10: 设置key的有效时间为10秒</li>
<li>ttl key：查看指定的key还有多少秒过期，-1：表示永不过期，-2：表示已过期</li>
<li>select dbindex：切换数据库【0-15】，默认为0</li>
<li>dbsize：查看当前数据库key的数量</li>
<li>flushdb：清空当前库</li>
<li>flushall：清空全部库</li>
</ul>
<h3 id="1-字符串String"><a href="#1-字符串String" class="headerlink" title="1. 字符串String"></a>1. <span id="string">字符串String</span></h3><p>String是Redis最基本的类型，可以理解为和Memcached一样的类型，一个key 对应一个value。</p>
<p>String类型是二进制，意味着可以包含任何数据，比如jpg图片或者序列化对象。一个Redis字符串value最多可以是512M</p>
<h4 id="1-1-常用命令"><a href="#1-1-常用命令" class="headerlink" title="1.1 常用命令"></a>1.1 常用命令</h4><ol>
<li><p><strong>set</strong>： 添加键值对</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set key value [EX seconds|PX milliseconds|EXAT timestamp|PXAT milliseconds-timestamp|KEEPTTL] [NX|XX] [GET]</span><br></pre></td></tr></table></figure>
<ul>
<li>NX：当数据库中key不存在时，可以将key-value添加到数据库</li>
<li>XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥</li>
<li>EX：key的超时秒数</li>
<li>PX：key的超时毫秒数，与EX互斥</li>
<li>value中若包含空格、特殊字符，需用双引号包裹</li>
</ul>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set xiaoyuge 180 NX </span><br><span class="line">OK</span><br></pre></td></tr></table></figure></li>
<li><p><strong>get</strong>： 获取值</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">get &lt;key&gt;</span><br></pre></td></tr></table></figure>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get xiaoyuge</span><br><span class="line">&quot;180&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>append</strong>： 追加值</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">append &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将给定的value追加到原值的末尾。</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set xiaoyuge 180</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get xiaoyuge</span><br><span class="line">&quot;180&quot;</span><br><span class="line">127.0.0.1:6379&gt; append xiaoyuge cm</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; get xiaoyuge</span><br><span class="line">&quot;180cm&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>strlen</strong>： 获取值的长度 </p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">strlen &lt;key&gt;</span><br></pre></td></tr></table></figure>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; strlen xiaoyuge</span><br><span class="line">(integer) 8</span><br></pre></td></tr></table></figure></li>
<li><p><strong>setnx</strong>： key不存在时，设置key的值</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setnx &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setnx ygb cool      ## ygb不存在，返回1，表示设置成功</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; setnx ygb cool      ## 再次通过setnx设置ygb，由于已经存在了，所以设置失败，返回0</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li>
<li><p><strong>incr</strong>： 原子递增1</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">incr &lt;key&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将key中存储的值增加1， 只能对数值操作，如果key不存在，则会新建一个，值为1</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb #清空db，方便测试</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set age 18 #age值为18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; incr age #age增加1，返回19</span><br><span class="line">(integer) 19</span><br><span class="line">127.0.0.1:6379&gt; get age #获取age的值</span><br><span class="line">&quot;19&quot;</span><br><span class="line">127.0.0.1:6379&gt; incr salary #salary不存在，自动创建一个，值为1</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; get salary #获取salary的值</span><br></pre></td></tr></table></figure></li>
<li><p><strong>decr</strong>： 原子递减1</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">decr &lt;key&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将key中存储的值减1，只能对数值操作，如果为空，新增值为-1</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set age 18</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">&quot;18&quot;</span><br><span class="line">127.0.0.1:6379&gt; decr age</span><br><span class="line">(integer) 17</span><br><span class="line">127.0.0.1:6379&gt; keys age1</span><br><span class="line">(empty array)</span><br><span class="line">127.0.0.1:6379&gt; decr age1</span><br><span class="line">(integer) -1</span><br></pre></td></tr></table></figure></li>
<li><p><strong>incrby/decrby</strong>： 递增或递减指定的数字</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">incrby &lt;key&gt; &lt;步长&gt;</span><br><span class="line">decrby &lt;key&gt; &lt;步长&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将key中存储的数字值递增指定的步长，若key不存在，则相当于在原值为0的值上递增指定的步长。</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; incrby age 18</span><br><span class="line">(integer) 18</span><br><span class="line">127.0.0.1:6379&gt; decrby age 2</span><br><span class="line">(integer) 16</span><br><span class="line">127.0.0.1:6379&gt; get age</span><br><span class="line">&quot;16&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>mset</strong>： 同时设置多个key-value</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mset &lt;key1&gt; &lt;value1&gt; &lt;key2&gt; &lt;value2&gt; ...</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置name = xiaoyuge, age = 18</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 127.0.0.1:6379&gt; mset name xiaoyuge age 18</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>mget</strong>： 获取多个key对应的值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mget &lt;key1&gt; &lt;key2&gt; ....</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">127.0.0.1:6379&gt; mget name age</span><br><span class="line"><span class="meta">#</span><span class="bash">1) <span class="string">&quot;xiaoyuge&quot;</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">2) <span class="string">&quot;18&quot;</span></span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>msetnx</strong>： 当多个key都不存在时，则设置成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">msetnx &lt;key1&gt; &lt;value1&gt; &lt;key2&gt; &lt;value2&gt; ...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>原子性，要么都成功，或者都失败</p>
</blockquote>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb   #清空</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set k1 v1  #先设置k1</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; msetnx k1 v1 k2 v2  #当k1和k2都不存在，同时设置k1,k2,由于k1已经存在，所以操作失败</span><br><span class="line">(integer) 0</span><br><span class="line">127.0.0.1:6379&gt; mget k1 k2    # 获取k1、k2， k2不存在</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) (nil)</span><br><span class="line">127.0.0.1:6379&gt; msetnx k2 v2 k3 v3  #当k2和k3都不存在，同时设置k2,k3，设置成功</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; mget k2 k3    # 获取k2、k3</span><br><span class="line">1) &quot;v2&quot;</span><br><span class="line">2) &quot;v3&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>getrange</strong>： 获取值的范围，类似于Java的substring</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">getrange key &lt;start&gt; &lt;end&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>获取[start， end]之间的字符，返回为字符串</p>
</blockquote>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set k1 xiaoyuge</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; getrange k1 0 4</span><br><span class="line">&quot;xiaoy&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>setrange</strong>： 覆盖自定位置的值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setrange &lt;key&gt; &lt;start&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>从 start 位置开始覆盖，覆盖的长度为value的长度， 总长度不变</p>
</blockquote>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;xiaoyuge&quot;</span><br><span class="line">127.0.0.1:6379&gt; setrange k1 0 nb</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;nbaoyuge&quot;</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;nbaoyuge&quot;</span><br><span class="line">127.0.0.1:6379&gt; setrange k1 0 xiao</span><br><span class="line">(integer) 8</span><br><span class="line">127.0.0.1:6379&gt; get k1</span><br><span class="line">&quot;xiaoyuge&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>setex</strong>： 设置键值&amp;过期时间(秒)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">setex &lt;key&gt; &lt;过期时间s&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; setex k1 120 v1 #设置k1的值为v1，有效期120秒</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get k1      #获取k1的值</span><br><span class="line">&quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; ttl k1      #获取k1还有多少秒失效</span><br><span class="line">(integer) 113</span><br></pre></td></tr></table></figure></li>
<li><p><strong>getset</strong>： 以新换旧，设置新值同时返回旧值</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">getset &lt;key&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; set name xiaoyuge         #设置name为xiaoyuge</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; getset name xiaoyuge666   #设置name为xiaoyuge666，返回name的旧值</span><br><span class="line">&quot;xiaoyuge&quot;</span><br><span class="line">127.0.0.1:6379&gt; getset age 18             #设置age为18，age未设置过，返回age的旧值为null</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; get name                  #获取现在的name，返回xiaoyuge666</span><br><span class="line">&quot;xiaoyuge666&quot;</span><br><span class="line">127.0.0.1:6379&gt; get age                   #获取age</span><br><span class="line">&quot;18&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="1-2-数据结构"><a href="#1-2-数据结构" class="headerlink" title="1.2 数据结构"></a>1.2 数据结构</h4><p>String的数据结构为简单动态字符串(Simple Dynamic String,简写SDS)。是可以修改的字符串，内部结构类似于Java中的ArrayList，<strong>采用分配冗余空间的方式来减少内存的频繁分配</strong>。</p>
<p><img src="/redis-special-1/index/1.png"></p>
<p>如图所示，内部为当前字符串实际分配的空间capacity，一般要高于实际字符串长度len。当字符串长度小于1M时，扩容都是加倍现有的空间，如果超过1M，扩容时一次会多扩容1M的空间</p>
<p><strong>要注意的是字符串最大长度为512M</strong>。</p>
<h3 id="2-列表List"><a href="#2-列表List" class="headerlink" title="2. 列表List"></a>2. <span id="list">列表List</span></h3><p>列表List是简单的字符串列表，按照插入顺序排序，添加元素时可以插入列表的头部或者尾部。</p>
<p>它的底层实现实际上使用双向链表实现的，对两端的操作性能很高，通过索引下标操作中间节点性能会较差。<br><img src="/redis-special-1/index/2.png"></p>
<h4 id="2-1-常用命令"><a href="#2-1-常用命令" class="headerlink" title="2.1 常用命令"></a>2.1 常用命令</h4><ol>
<li><p><strong>lupsh/rpush</strong>： 从左边或者右边插入一个或多个值</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lpush &lt;key1&gt; &lt;value1&gt; &lt;value2&gt; &lt;value3&gt; ...</span><br><span class="line">rpush &lt;key1&gt; &lt;value1&gt; &lt;value2&gt; &lt;value3&gt; ...</span><br></pre></td></tr></table></figure>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush k v1 v2 v3  #列表k的右边插入3个元素</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lpush k v4 v5 v6  #列表k的左边插入3个元素</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange k 0 6    #输出[0,6]范围内的元素</span><br><span class="line">1) &quot;v6&quot;</span><br><span class="line">2) &quot;v5&quot;</span><br><span class="line">3) &quot;v4&quot;</span><br><span class="line">4) &quot;v1&quot;</span><br><span class="line">5) &quot;v2&quot;</span><br><span class="line">6) &quot;v3&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>lrange</strong>： 从列表左边获取指定范围内的值</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lrange &lt;key&gt; &lt;start&gt; &lt;end&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回列表key中指定的区间的元素，区间偏移量start ,end指定。</p>
<p>下标index参数start和end都从0开始，也可以使用负数下标，以 -1表示列表最后一个元素，-2表示倒数第二个元素…..</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lpush n v1 v2 v3 v4 v5 v6</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange n 0 -1   #取出n集合中所有元素 start 0表示从第一个开始, end -1表示最后一个</span><br><span class="line">1) &quot;v6&quot;</span><br><span class="line">2) &quot;v5&quot;</span><br><span class="line">3) &quot;v4&quot;</span><br><span class="line">4) &quot;v3&quot;</span><br><span class="line">5) &quot;v2&quot;</span><br><span class="line">6) &quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange n -3 -1    #获取倒数第三至倒数一个元素 start 一定要小于end</span><br><span class="line">1) &quot;v3&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">3) &quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li>
<li><p><strong>lpop/rpop</strong>： 从左边或者右边弹出多个元素</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lpop/rpop &lt;key&gt; &lt;count&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>count: 可以省略，默认为1</p>
<p>lpop/rpop操作之后，弹出的值会从列表中删除，当所有的值都删除后，键就删除</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush k v1 v2 v3  #集合k 右边添加3个元素</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lpop k    #左边弹出1个元素</span><br><span class="line">&quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpop k 2  # 右边弹出2个元素    </span><br><span class="line">&quot;v3&quot;</span><br><span class="line">&quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; exists k  # 查询key是否存在</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure></li>
<li><p><strong>rpoplpush</strong>： 从一个列表右边弹出一个元素放到另外一个列表中</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpoplpush &lt;source&gt; &lt;destination&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>从source的右边弹出一个元素放到destination列表的左边</p>
</blockquote>
<p> 示例</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush k 1 2 3   #列表k的右边添加3个元素[1,2,3]</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange k 0 -1    #从左到右输出k列表中的元素</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpush k1 4 5 6   #列表k1的右边添加3个元素[4,5,6]</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange k1 0 -1    #从左到右输出k1列表中的元素</span><br><span class="line">1) &quot;4&quot;</span><br><span class="line">2) &quot;5&quot;</span><br><span class="line">3) &quot;6&quot;</span><br><span class="line">127.0.0.1:6379&gt; rpoplpush k k1    #从k的右边弹出一个元素放到k1的左边</span><br><span class="line">&quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange k 0 -1     #k中剩下2个元素了</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange k1 0 -1    #k1变成来4个元素</span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;5&quot;</span><br><span class="line">4) &quot;6&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>lindex</strong>： 获取指定索引位置的元素（从左到右）</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lindex &lt;key&gt; &lt;index&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回列表key中下标为index的元素。</p>
<p>下标从0开始，也可以是负数，-1 表示列表最后一个元素，-2表示列表倒数第二个元素…..</p>
<p>如果key不是列表类型，返回一个错误</p>
<p>如果index超出了列表的长度范围，返回 nil</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange k1 0 -1</span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;5&quot;</span><br><span class="line">4) &quot;6&quot;</span><br><span class="line">127.0.0.1:6379&gt; lindex k1 2   #返回索引位置2的元素</span><br><span class="line">&quot;5&quot;</span><br><span class="line">127.0.0.1:6379&gt; lindex k1 6   #返回索引位置6的元素，超出了列表长度</span><br><span class="line">(nil)</span><br><span class="line">127.0.0.1:6379&gt; lindex k1 -1  #返回最后一个元素</span><br><span class="line">&quot;6&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>llen</strong>： 获取列表长度</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">llen &lt;key&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回列表长度，如果key不存在，则被解释为一个空列表，返回0；</p>
<p>如果key不是列表类型，返回一个错误</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; lrange k1 0 -1</span><br><span class="line">1) &quot;3&quot;</span><br><span class="line">2) &quot;4&quot;</span><br><span class="line">3) &quot;5&quot;</span><br><span class="line">4) &quot;6&quot;</span><br><span class="line">127.0.0.1:6379&gt; llen k1     #返回k1集合的长度</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; set name xiaoyuge   #设置字符串</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; type name       #查看name的类型</span><br><span class="line">string</span><br><span class="line">127.0.0.1:6379&gt; llen name       #获取name的长度，因为name为String类型，所以报错</span><br><span class="line">(error) WRONGTYPE Operation against a key holding the wrong kind of value</span><br><span class="line">127.0.0.1:6379&gt; strlen name     #字符串的长度使用strlen</span><br><span class="line">(integer) 8</span><br></pre></td></tr></table></figure></li>
<li><p><strong>linsert</strong>： 在某个值的前或者后插入一个值</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">linsert &lt;key&gt; before|after &lt;value&gt; &lt;newvalue&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将值newvalue插入到列表key中，位于value值之前或者之后</p>
<p>当value不存在列表key中，不执行任何操作，返回 -1 </p>
<p>当key不存在时，key被视为空列表，不执行任何操作， 返回 0</p>
<p>如果命令执行成功，返回插入操作完成之后，列表的长度</p>
<p>如果key不是列表类型，返回一个错误</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; rpush k 1 2 3   #列表k中添加3个元素</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange k 0 -1   #输出k全部元素</span><br><span class="line">1) &quot;1&quot;</span><br><span class="line">2) &quot;2&quot;</span><br><span class="line">3) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; linsert k before 1 0  #在1前面添加0，添加成功，返回列表长度</span><br><span class="line">(integer) 4</span><br><span class="line">127.0.0.1:6379&gt; lrange k 0 -1     #输出k全部元素</span><br><span class="line">1) &quot;0&quot;</span><br><span class="line">2) &quot;1&quot;</span><br><span class="line">3) &quot;2&quot;</span><br><span class="line">4) &quot;3&quot;</span><br><span class="line">127.0.0.1:6379&gt; linsert k before 4 5   #在4前面添加5，由于元素4不存在，插入失败返回-1</span><br><span class="line">(integer) -1</span><br><span class="line">127.0.0.1:6379&gt; linsert k1 before 4 5   #在列表k1中元素4前面插入5，由于列表k1不存在，返回0</span><br><span class="line">(integer) 0</span><br></pre></td></tr></table></figure></li>
<li><p><strong>lrem</strong>： 删除指定数量的某个相同的元素</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lrem &lt;key&gt; &lt;count&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>根据count的值，移除列表中与参数value相等的count个元素</p>
<p>count的值可以是以下几种</p>
<ol>
<li><p>count &gt; 0: 从表头开始向表尾搜索，移除与 value 相等的元素，数量为 count</p>
</li>
<li><p>count &lt; 0: 从表尾开始向表头搜索，移除与 value 相等的元素，数量为 count 的绝对值。</p>
</li>
<li><p>count = 0: 移除列表总所有与value相等的值</p>
</li>
</ol>
<p>因为不存在的 key 被视作空表(empty list)，所以当 key 不存在时，总是返回 0 。</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb #清空db，方便测试</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; rpush k1 v1 v2 v3 v2 v2 v1 #k1列表中插入6个元素</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; lrange k1 0 -1 #输出k1集合中所有元素</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line">4) &quot;v2&quot;</span><br><span class="line">5) &quot;v2&quot;</span><br><span class="line">6) &quot;v1&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrem k1 2 v2   #k1集合中从左边删除2个v2</span><br><span class="line">(integer) 2</span><br><span class="line">127.0.0.1:6379&gt; lrange k1 0 -1 #输出列表，列表中还有1个v2，前面2个v2干掉了</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v3&quot;</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">4) &quot;v1&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>lset</strong>： 替换指定位置的值</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lset &lt;key&gt; &lt;index&gt; &lt;value&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将列表key下标为index的元素替换为value, 当index参数超出范围，或者对一个空列表进行操作时，返回一个错误</p>
</blockquote>
<p> 示例：</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; flushdb              #清空db，方便测试</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; rpush k v1 v2 v3      #k集合中放入3个元素</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; lrange k 0 -1         #输出k集合元素</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line">127.0.0.1:6379&gt; lset k 1 vv           #将k集合中第2个元素替换为vv</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; lrange k 0 -1</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;vv&quot;</span><br><span class="line">3) &quot;v3&quot;</span><br><span class="line">127.0.0.1:6379&gt; lset k 10 vv         #将k集合中第11个元素替换为vv，由于集合长度小于10，报错</span><br><span class="line">(error) ERR index out of range</span><br><span class="line">127.0.0.1:6379&gt; lset k1 1 vv         #k1不存在，报错</span><br><span class="line">(error) ERR no such key</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="2-2-数据结构"><a href="#2-2-数据结构" class="headerlink" title="2.2 数据结构"></a>2.2 数据结构</h4><p><strong>List的数据结构为快速链表quickList</strong></p>
<ol>
<li><p>首先在列表元素较少的情况下会使用一块连续的内存存储，这个结构是ziplist，也就是压缩列表。 它将所有的元素紧挨着一起存储，分配的是一块连续的内存。</p>
</li>
<li><p>当就比较多的时候才会改成quickList。</p>
</li>
</ol>
<p>因为普通的链表需要的附加指针空间太大，会比较浪费空间，比如这个列表里存储的只是int类型的书，结构上还需要2个额外的指针prev和next。</p>
<p><img src="/redis-special-1/index/3.png"></p>
<p><strong>redis将链表和ziplist结合起来组成了quicklist。也就是将多个ziplist使用双向指针串起来使用，这样既满足了快速的插入删除性能，又不会出现太大的空间冗余。</strong></p>
<h3 id="3-集合Set"><a href="#3-集合Set" class="headerlink" title="3. 集合Set"></a>3. <span id="set">集合Set</span></h3><p>Redis set对外提供的功能与list类似，是一个列表的功能，特殊之处在于set可以自动去重</p>
<p>set时String类型的无序集合，它的底层实际上时一个value为null的hash表，添加、删除、查找复杂度都是O(1)</p>
<blockquote>
<p>一个算法，如果时间复杂度是O(1)，那么随着数据的增加，查找数据的时间不变，也就是不管数据多少，查找时间都是一样的。</p>
</blockquote>
<h4 id="3-1-常用命令"><a href="#3-1-常用命令" class="headerlink" title="3.1 常用命令"></a>3.1 常用命令</h4><ol>
<li><p><strong>sadd</strong>： 添加一个或者多个元素</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sadd &lt;key&gt; &lt;value1&gt; &lt;value2&gt; ...</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">示例：</span></span><br><span class="line">127.0.0.1:6379&gt; sadd s1  v1 v2 v3</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; </span><br></pre></td></tr></table></figure></li>
<li><p><strong>smembers</strong>取出所有的元素</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">smembers &lt;key&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">示例：</span></span><br><span class="line">127.0.0.1:6379&gt; smembers s1   #输出结果为无序</span><br><span class="line">1) &quot;v3&quot;</span><br><span class="line">2) &quot;v1&quot;</span><br><span class="line">3) &quot;v2&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>sismember</strong>： 判断集合中是否存在某个值</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sismember &lt;key&gt; &lt;value&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">判断集合key是否包含元素value， 1：有， 0：没有</span></span><br><span class="line"><span class="meta">#</span><span class="bash">sismember: <span class="built_in">set</span> is member（是否是<span class="built_in">set</span>中的成员）</span></span><br></pre></td></tr></table></figure></li>
<li><p><strong>scard</strong>： 返回集合中元素的个数</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scard &lt;key&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回集合key中元素个数，当key不存在返回0</p>
</blockquote>
</li>
<li><p><strong>srem</strong>： 删除多个元素</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srem &lt;key&gt; &lt;member&gt; [member ...]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>移除集合key中的一个或多个member元素，不存在的元素会被忽略，当key不是集合类型，返回一个错误</p>
<p>返回被成功移除的元素数量，不包括被忽略的元素</p>
</blockquote>
</li>
<li><p><strong>spop</strong>： 随机弹出多个值</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">spop &lt;key&gt; &lt;count&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>随机从key集合中弹出count个元素，count默认为1，返回被移除的元素</p>
<p>当count大于元素集合个数的时候，弹出全部</p>
<p>当key不存在或者空集时，返回nil</p>
</blockquote>
</li>
<li><p><strong>srandmember</strong>： 随机获取多个元素，不会从集合中删除</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">srandmember &lt;key&gt; &lt;count&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>从key指定的集合中随机返回count个元素，count可以不指定，默认值是1。</p>
<p>srandmember 和 spop的区别： 都可以随机获取多个元素，srandmember 不会删除元素，而spop会删除元素。</p>
<p>返回值: 1. 只提供 key 参数时，返回一个元素；如果集合为空，返回 nil 。 2. 如果提供了count参数，那么返回一个数组；如果集合为空，返回空数组。</p>
</blockquote>
</li>
</ol>
<ol start="8">
<li><p><strong>smove</strong>： 将某个元素从一个集合移到另一个集合</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">smove &lt;source&gt; &lt;destination&gt; &lt;member&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将member元素从source集合移动到destination集合。</p>
<p>smove是原子性操作,如果source集合不存在或者不保护指定的member元素，则smove命令不执行任何操作，仅返回0。<br>否则，member元素从source集合中移除，并添加到destination集合中去(destination集合不存在的话，会自动添加一个)</p>
<p>当destination已经包含member元素，smove只是删除source中的member元素</p>
<p>如果member被成功删除，返回1；如果member不是source集合成员，并且没有任何对destination的操作，那么返回0</p>
</blockquote>
</li>
<li><p>*<em>sinter</em> 取多个集合的交集</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sinter key [key ...]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">示例</span></span><br><span class="line">127.0.0.1:6379&gt; smembers s          #查询s集合的所有元素</span><br><span class="line">1) &quot;v3&quot;</span><br><span class="line">2) &quot;v4&quot;</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; sadd s2 v1 v2 v3    #集合s2添加三个元素</span><br><span class="line">(integer) 3</span><br><span class="line">127.0.0.1:6379&gt; smembers s2         #查询s2集合的所有元素</span><br><span class="line">1) &quot;v3&quot;</span><br><span class="line">2) &quot;v1&quot;</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">127.0.0.1:6379&gt; sinter s s2         #获取集合s s2的交集</span><br><span class="line">1) &quot;v3&quot;</span><br><span class="line">2) &quot;v2&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>sinterstore</strong>： 将多个集合的交集放到一个新的集合中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sinterstore destination key [key ...]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个命令类似于sinter命令，但它将结果保存到 destination 集合，而不是简单地返回结果集。 返回结果集中的成员数量。</p>
</blockquote>
</li>
<li><p><strong>sunion</strong>： 取多个集合的并集，自动去重</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sunion key [key ...]</span><br><span class="line"><span class="meta">#</span><span class="bash">示例：</span></span><br><span class="line">127.0.0.1:6379&gt; sunion s s2</span><br><span class="line">1) &quot;v1&quot;</span><br><span class="line">2) &quot;v3&quot;</span><br><span class="line">3) &quot;v2&quot;</span><br><span class="line">4) &quot;v4&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>sunionstore</strong>： 将多个集合的并集放到一个新的集合中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sinterstore destination key [key ...]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个命令类似于 sunion 命令，但它将结果保存到 destination 集合，而不是简单地返回结果集。 返回值:结果集中的成员数量。</p>
</blockquote>
</li>
<li><p><strong>sdiff</strong>： 取多个集合的差集</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sdiff key [key ...]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回一个集合的全部成员，该集合是所有给定集合之间的差集。 不存在的 key 被视为空集。</p>
</blockquote>
</li>
<li><p><strong>sdiffstore</strong>： 将多个集合的差集放到一个新的集合中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sdiffstore destination key [key ...]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这个命令类似于 sdiff 命令，但它将结果保存到 destination 集合，而不是简单地返回结果集。</p>
</blockquote>
</li>
</ol>
<h4 id="3-2-数据结构"><a href="#3-2-数据结构" class="headerlink" title="3.2 数据结构"></a>3.2 数据结构</h4><p><strong>set数据机构是字典，字典是用hash表实现的。</strong></p>
<p>Java中的hashSet的内部实现使用HashMap,只不过所有的value都指向同一个对象。</p>
<p>Redis的set结构也是一样的，它的内部也使用hash结构，所有的value都指向同一个内部值。</p>
<h3 id="4-哈希表-Hash"><a href="#4-哈希表-Hash" class="headerlink" title="4. 哈希表 Hash"></a>4. <span id="hash">哈希表 Hash</span></h3><p><strong>Redis hash是一个键值对集合</strong>。</p>
<p>Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。 类似于java里面的Map&lt;String,Object&gt;</p>
<h4 id="4-1-常用命令"><a href="#4-1-常用命令" class="headerlink" title="4.1 常用命令"></a>4.1 常用命令</h4><ol>
<li><p><strong>hset</strong>： 设置多个field值</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> hset key field value [field value ...]</span><br><span class="line"></span><br><span class="line"> 127.0.0.1:6379&gt; hset set1 name xiaoyuge age 18 </span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将哈希表 key 中的域 field 的值设为 value 。 如果 key 不存在，一个新的哈希表被创建并进行 hset 操作。 如果域 field 已经存在于哈希表中，旧值将被覆盖。</p>
<p>返回值： 如果 field 是哈希表中的一个新建域，并且值设置成功，返回 1 。 如果哈希表中域 field 已经存在且旧值已被新值覆盖，返回 0 。</p>
</blockquote>
</li>
<li><p><strong>hget</strong>： 获取指定field的值</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hget &lt;key&gt; &lt;field&gt;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hget set1 name</span><br><span class="line">&quot;xiaoyuge&quot;</span><br><span class="line">127.0.0.1:6379&gt; hget set1 age</span><br><span class="line">&quot;18&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>hgetall</strong>： 返回hash表所有的fileld和value</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hgetall &lt;key&gt;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; hgetall set1</span><br><span class="line">1) &quot;name&quot;</span><br><span class="line">2) &quot;xiaoyuge&quot;</span><br><span class="line">3) &quot;age&quot;</span><br><span class="line">4) &quot;18&quot;</span><br></pre></td></tr></table></figure></li>
<li><p><strong>hexists</strong>： 判断给定的field是否存在，1：存在，0：不存在</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexists key field</span><br></pre></td></tr></table></figure>
<blockquote>
<p>查看哈希表 key 中，给定域 field 是否存在。 返回值： 如果哈希表含有给定域，返回 1 。 如果哈希表不含有给定域，或 key 不存在，返回 0 。</p>
</blockquote>
</li>
</ol>
<ol start="5">
<li><strong>hkeys</strong>： 列出所有的filed <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hkeys key</span><br></pre></td></tr></table></figure></li>
<li><strong>hvals</strong>： 列出所有的value <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hvals key</span><br></pre></td></tr></table></figure></li>
<li><strong>hlen</strong>： 返回field的数量 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hlen key</span><br></pre></td></tr></table></figure></li>
<li><strong>hincrby</strong>： filed的值加上指定的增量 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hincrby key field increment</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为哈希表 key 中的域 field 的值加上增量 increment 。 增量也可以为负数，相当于对给定域进行减法操作。 如果 key 不存在，一个新的哈希表被创建并执行 HINCRBY 命令。 如果域 field 不存在，那么在执行命令前，域的值被初始化为 0 。 对一个储存字符串值的域 field 执行 HINCRBY 命令将造成一个错误。</p>
<p>返回值： 执行 hincrby 命令之后，哈希表 key 中域 field 的值。</p>
</blockquote>
 示例： <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; hincrby set1 age 3</span><br><span class="line">(integer) 21</span><br><span class="line">127.0.0.1:6379&gt; hvals set1</span><br><span class="line">1) &quot;xiaoyuge&quot;</span><br><span class="line">2) &quot;21&quot;</span><br></pre></td></tr></table></figure></li>
<li><strong>hsetnx</strong>： 当filed不存在的时候，设置filed的值 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hsetnx key field value</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将哈希表 key 中的域 field 的值设置为 value ，当且仅当域 field 不存在。 若域 field 已经存在，该操作无效。 如果 key 不存在，一个新哈希表被创建并执行 hsetnx 命令。</p>
<p>返回值： 设置成功，返回 1 。 如果给定域已经存在且没有操作被执行，返回 0</p>
</blockquote>
</li>
</ol>
<h4 id="4-2-数据结构"><a href="#4-2-数据结构" class="headerlink" title="4.2 数据结构"></a>4.2 数据结构</h4><p>Hash类型对应的数据结构是2种：<strong>ziplist（压缩列表）</strong>，<strong>hashtable（哈希表）</strong>。</p>
<p>当field-value长度较短个数较少时，使用ziplist，否则使用hashtable。</p>
<h3 id="5-有序集合Zset"><a href="#5-有序集合Zset" class="headerlink" title="5. 有序集合Zset"></a>5. <span id="zset">有序集合Zset</span></h3><p>有序集合zset和普通集合set非常相似，是一个没有重复元素的字符串集合，不同之处是有序集合的每一个成员都关联一个评分（score），<br>这个评分被用来按照从最低分到最高分的方式排序集合中的成员。</p>
<p><strong>成员是唯一的，但是评分可以重复。</strong>因为元素是有序的，所以可以很快的根据评分score或者次序position来获取一个范围的元素，访问有序集合中的中间元素也是非常快的。</p>
<h4 id="5-1-常用命令"><a href="#5-1-常用命令" class="headerlink" title="5.1 常用命令"></a>5.1 常用命令</h4><ol>
<li><strong>zadd</strong>： 添加元素 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zadd &lt;key&gt; &lt;score1&gt; &lt;member1&gt; &lt;score2&gt; &lt;member2&gt; ...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>将一个或多个member元素及其score值加入到有序集 key 当中。 如果某个 member 已经是有序集的成员，那么更新这个 member 的 score 值，并通过重新插入这个 member 元素，来保证该 member 在正确的位置上。 score 值可以是整数值或双精度浮点数。 如果 key 不存在，则创建一个空的有序集并执行 zadd 操作。</p>
<p>当 key 存在但不是有序集类型时，返回一个错误。 被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员。</p>
</blockquote>
</li>
</ol>
<ol start="2">
<li><p><strong>zrange</strong>： score生序，获取指定索引范围的元素</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrange key start top [withscores]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回存储在有序集合key中的指定范围的元素。 返回的元素可以认为是按score从最低到最高排列，如果得分相同，将按字典排序。</p>
<p>下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。 你也可以使用负数下标，以 -1 表示最后一个成员， -2 表示倒数第二个成员，以此类推。</p>
<p>zrange key 0 -1：可以获取所有元素</p>
<p>withscores：让成员和它的 score 值一并返回，返回列表以 value1,score1, …, valueN,scoreN 的格式表示</p>
<p>时间复杂度:O(log(N)+M)， N 为有序集的基数，而 M 为结果集的基数</p>
</blockquote>
</li>
<li><p><strong>zrevrange</strong>： score降序，获取指定索引范围的元素</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrevrange key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回存储在有序集合key中的指定范围的元素。 返回的元素可以认为是按score最高到最低排列， 如果得分相同，将按字典排序。</p>
<p>下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。 你也可以使用负数下标，以 -1 表示最后一个成员， -2 表示倒数第二个成员，以此类推。</p>
<p>withscores：让成员和它的 score 值一并返回，返回列表以 value1,score1, …, valueN,scoreN 的格式表示</p>
</blockquote>
</li>
</ol>
<ol start="4">
<li><strong>zrangebyscore</strong>：按照score升序，返回指定score范围内的数据 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrangebyscore key min max [WITHSCORES] [LIMIT offset count]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员。有序集成员按 score 值递增(从小到大)次序排列。</p>
<p>具有相同 score 值的成员按字典序来排列(该属性是有序集提供的，不需要额外的计算)。<br>可选的 LIMIT 参数指定返回结果的数量及区间(就像SQL中的 SELECT LIMIT offset, count )，注意当 offset 很大时，定位 offset 的操作可能需要遍历整个有序集，此过程最坏复杂度为 O(N) 时间。</p>
</blockquote>
</li>
</ol>
<ol start="5">
<li><p><strong>zrevrangebyscore</strong>：按照score降序，返回指定score范围内的数据</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrevrangebyscore key max min [WITHSCORES] [LIMIT offset count]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回有序集 key 中， score 值介于 max 和 min 之间(默认包括等于 max 或 min )的所有的成员。有序集成员按 score 值递减(从大到小)的次序排列。</p>
<p>具有相同 score 值的成员按字典序的逆序排列。</p>
<p>除了成员按 score 值递减的次序排列这一点外， zrevrangebyscore 命令的其他方面和 zrangebyscore 命令一样。</p>
</blockquote>
</li>
<li><p><strong>zincrby</strong>：为指定元素的score加上指定的增量</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zincrby key increment member</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以通过传递一个负数值 increment ，让 score 减去相应的值，比如 ZINCRBY key -5 member ，就是让 member 的 score 值减去 5 。</p>
<p>当 key 不存在，或 member 不是 key 的成员时， ZINCRBY key increment member 等同于 ZADD key increment member </p>
</blockquote>
</li>
<li><p><strong>zrem</strong>：删除集合中多个元素</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrem key member [member ...]</span><br></pre></td></tr></table></figure>
<blockquote>
<p>移除有序集 key 中的一个或多个成员，不存在的成员将被忽略。 当 key 存在但不是有序集类型时，返回一个错误。</p>
</blockquote>
</li>
</ol>
<ol start="8">
<li><strong>zremrangebyrank</strong> 根据索引范围删除元素 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zremrangebyrank key start stop</span><br></pre></td></tr></table></figure>
<blockquote>
<p>移除有序集 key 中，指定排名(rank)区间内的所有成员。 区间分别以下标参数 start 和 stop 指出，包含 start 和 stop 在内。 下标参数 start 和 stop 都以 0 为底，也就是说，以 0 表示有序集第一个成员，以 1 表示有序集第二个成员，以此类推。 你也可以使用负数下标，以 -1 表示最后一个成员， -2 表示倒数第二个成员，以此类推。</p>
</blockquote>
</li>
</ol>
<ol start="9">
<li><strong>zremrangebyscore</strong>：根据score的范围删除元素 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zremrangebyscore key min max</span><br></pre></td></tr></table></figure>
<blockquote>
<p>移除有序集 key 中，所有 score 值介于 min 和 max 之间(包括等于 min 或 max )的成员</p>
</blockquote>
</li>
</ol>
<ol start="10">
<li><strong>zcount</strong>：统计指定score范围内的元素个数<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zcount key min max</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回有序集 key 中， score 值在 min 和 max 之间(默认包括 score 值等于 min 或 max )的成员的数量</p>
</blockquote>
</li>
</ol>
<ol start="11">
<li><strong>zrank</strong>：按照score生序，返回某个元素在集合中的排名<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrank key member</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递增(从小到大)顺序排列。 排名以 0 为底，也就是说， score 值最小的成员排名为 0 。</p>
</blockquote>
</li>
</ol>
<ol start="12">
<li><strong>zrevrank</strong>：按照score将许，返回某个元素在集合中的排名<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zrevrank key member</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回有序集 key 中成员 member 的排名。其中有序集成员按 score 值递减(从大到小)排序。排名以 0 为底，也就是说， score 值最大的成员排名为 0 </p>
</blockquote>
</li>
</ol>
<ol start="13">
<li><strong>zscore</strong>：返回集合中指定元素的score<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zscore key member</span><br></pre></td></tr></table></figure>
<blockquote>
<p>返回有序集 key 中，成员 member 的 score 值。 如果 member 元素不是有序集 key 的成员，或 key 不存在，返回 nil</p>
</blockquote>
</li>
</ol>
<h4 id="5-2-数据结构"><a href="#5-2-数据结构" class="headerlink" title="5.2 数据结构"></a>5.2 数据结构</h4><p>SortedSet（zset）是redis提供的一个非常特别的数据结构，内部使用到了2种数据结构。</p>
<p><strong>1. hash表</strong></p>
<p>类似于java中的Map&lt;String,score&gt;，key为集合中的元素，value为元素对应的score，可以用来快速定位元素定义的score，时间复杂度为O(1)</p>
<p><strong>2. 跳表</strong></p>
<p>跳表（skiplist）是一个非常有限的数据结构，实现简单，插入、删除、查找的复杂度均为O(logN)</p>
<p>类似于Java中的<code>ConcurrentSkipListSet</code>，根据score的值排序后生成一个跳表，可以快速按照位置的顺序或者score的顺序查找元素。</p>
<p>来看一下跳表的原理：<br>首先从考虑一个有序列表开始：</p>
<p><img src="/redis-special-1/index/4.png"></p>
<p>从该有序表中搜索元素 &lt; 23, 43, 59 &gt; ，需要比较的次数分别为 &lt; 2, 4, 6 &gt;，总共比较的次数为 2 + 4 + 6 = 12 次。有没有优化的算法吗? 链表是有序的，但不能使用二分查找。类似二叉搜索树，我们把一些节点提取出来，作为索引。得到如下结构：</p>
<p><img src="/redis-special-1/index/5.png"></p>
<p>这里我们把 &lt; 14, 34, 50, 72 &gt; 提取出来作为一级索引，这样搜索的时候就可以减少比较次数了。我们还可以再从一级索引提取一些元素出来，作为二级索引，变成如下结构：</p>
<p><img src="/redis-special-1/index/6.png"></p>
<p>如果元素足够多，这种索引结构就能体现出优势来了。</p>
]]></content>
      <categories>
        <category>07 Redis</category>
      </categories>
      <tags>
        <tag>redis专题</tag>
      </tags>
  </entry>
  <entry>
    <title>缓存穿透、击穿、雪崩、分布式锁</title>
    <url>/redis-special-application-problems/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h3 id="1-缓存穿透"><a href="#1-缓存穿透" class="headerlink" title="1. 缓存穿透"></a>1. 缓存穿透</h3><blockquote>
<p>缓存穿透是访问一个不存在的key，缓存不起作用，请求会穿透到DB，流量大时DB会挂掉。缓存击穿是访问一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到DB，造成瞬时DB请求量大、压力骤增。</p>
<p>比如用一个不存在的用户ID获取用户信息，不论数据库还是缓存都没有，如果大量的攻击会导致数据库崩溃</p>
</blockquote>
<h4 id="1-1-解决方法"><a href="#1-1-解决方法" class="headerlink" title="1.1. 解决方法"></a>1.1. 解决方法</h4><ol>
<li><p>对空值缓存</p>
<blockquote>
<p>如果查询返回的数据为空（不管数据库是否存在），仍然把这个结果（null）进行缓存，给其设置一个很短的过期时间（30秒）</p>
</blockquote>
</li>
</ol>
<ol start="2">
<li><p>设置可访问的名单（白名单）</p>
<p> 使用redis中的bitmaps类型定一个可访问的名单，名单id作为偏移量，每次访问和bitmaps里面进行比较，如果访问的ID不存在，不允许访问</p>
</li>
</ol>
<ol start="3">
<li><p>采用布隆过滤器</p>
<p> 布隆过滤器：实际上是一个很长的二进制向量（位图）和一系列随机映射函数（哈希函数）</p>
<p> 布隆过滤器可以用于检测一个元素是否在一个集合中，它的优点是空间效率和查询的时间都远超过一般的算法，缺点是有一定的误判和删除困难。将所有可能存在的数据哈希到一个足够到的bitmaps中，一个一定不存在的数据会被这个bitmaps拦截掉，从而避免了对底层存储系统的查询压力。</p>
</li>
<li><p>进行实时监控</p>
<p> 当发现redis的命中率降低，需要排查访问对象和访问的数据，和运维人员配合可以设置黑名单限制对其提供服务（IP黑名单等）</p>
</li>
</ol>
<h3 id="2-缓存击穿"><a href="#2-缓存击穿" class="headerlink" title="2. 缓存击穿"></a>2. 缓存击穿</h3><blockquote>
<p>redis中某个热点key过期，此时大量的请求同时过来，发现没有命中缓存，请求都打到了db上，导致db压力瞬间大增，可能会造成数据库崩溃</p>
</blockquote>
<p><img src="/redis-special-application-problems/index/1.png"></p>
<p>缓存击穿出现的现象：</p>
<ul>
<li><p>数据库访问压力瞬间增大</p>
</li>
<li><p>redis里面没有出现大量的key过期</p>
</li>
<li><p>redis正常运行</p>
</li>
</ul>
<h4 id="2-1-解决方法"><a href="#2-1-解决方法" class="headerlink" title="2.1. 解决方法"></a>2.1. 解决方法</h4><ol>
<li><p>预先设置热门数据，适时调整过期时间</p>
<p> 在redis高峰之前，把一些热门数据提前存入到redis里面，对缓存中的热门数据进行监控，实时调整过期时间</p>
</li>
</ol>
<ol start="2">
<li><p>使用锁</p>
<p> 缓存中拿不到数据时，此时不是立即取db中查询，而是去获取分布式锁(如redis中的setnx)，拿到了锁再去db获取数据，没有拿到锁的线程休眠一段时间再重试获取数据的方法</p>
</li>
</ol>
<h3 id="3-缓存雪崩"><a href="#3-缓存雪崩" class="headerlink" title="3. 缓存雪崩"></a>3. 缓存雪崩</h3><blockquote>
<p>key对应的数据存在，但是极短的时间内有大量的key集中过期，此时若有大量的并发请求过来，发现缓存没有数据，大量的请求会落到db上去加载数据，导致数据库服务器崩溃</p>
<p>缓存雪崩和缓存击穿的区别在于：前者时大量的key集中过期，后者时某个热点key过期</p>
</blockquote>
<h4 id="3-1-解决方案"><a href="#3-1-解决方案" class="headerlink" title="3.1. 解决方案"></a>3.1. 解决方案</h4><ol>
<li><p>构建多级缓存</p>
<p>nginx缓存 + redis 缓存 + 其他缓存(ehcache等)</p>
</li>
<li><p>使用锁或者队列</p>
<p>加锁或者队列的方式来保证不及有大量的线程对数据库一次性进行读写，从而避免失效时大量的并发请求落到底层存储系统上，不适用高并发的情况</p>
</li>
<li><p>监控缓存过期，提前更新</p>
<p>监控缓存，发现缓存快过期来，提前对缓存进行更新</p>
</li>
<li><p>缓存失效时间分散</p>
<p>在原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这样缓存的过期时间重复率就会降低，减少集体失效的事件</p>
</li>
</ol>
<h3 id="4-分布式锁"><a href="#4-分布式锁" class="headerlink" title="4. 分布式锁"></a>4. 分布式锁</h3><blockquote>
<p>随着业务发展的需要，原单体单机部署的系统被演化为分布式集群系统后，由于分布式系统多线程、多进程且分布在不同的机器上，这使原单机部署情况下的并发控制锁策略失效<br>单纯的Java API并不能提供分布式锁的能力，为了解决这个问题就需要一种跨JVM的互斥机制来控制共享资源的访问，这就是分布式锁要解决的问题</p>
</blockquote>
<h4 id="4-1-分布式锁主流的实现方案"><a href="#4-1-分布式锁主流的实现方案" class="headerlink" title="4.1. 分布式锁主流的实现方案"></a>4.1. 分布式锁主流的实现方案</h4><ul>
<li><p>基于数据库实现分布式锁</p>
</li>
<li><p>基于缓存（redis等）</p>
</li>
<li><p>基于zookeeper</p>
</li>
</ul>
<p>每一种分布式锁解决方案各有优点</p>
<ul>
<li><p>性能：redis最高</p>
</li>
<li><p>可靠性：zookeeper最高</p>
</li>
</ul>
<h4 id="4-2-使用redis实现分布式锁"><a href="#4-2-使用redis实现分布式锁" class="headerlink" title="4.2. 使用redis实现分布式锁"></a>4.2. 使用redis实现分布式锁</h4><p>需要使用下面这个命令来实现分布式锁：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set key value NX PX &lt;times&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> time：有效期（毫秒）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当key不存在的时候，设置其值为value，并且同时设置有效期</span></span><br></pre></td></tr></table></figure>
<ul>
<li>NX：当数据库中key不存在时，可以将key-value添加到数据库</li>
<li>XX：当数据库中key存在时，可以将key-value添加数据库，与NX参数互斥</li>
<li>EX：key的超时秒数</li>
<li>PX：key的超时毫秒数，与EX互斥</li>
</ul>
<p>示例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">set user:1:info &quot;ok&quot; NX PX 10000</span><br></pre></td></tr></table></figure>

<p><strong>1. 上锁的过程</strong></p>
<p>   执行<code>set key value NX PX 有效期(毫秒)</code> 命令，返回<code>OK</code>表示执行成功，获取锁成功，多个客户端并发执行此命令时，redis可以保证只有一个执行成功</p>
<p>   <img src="/redis-special-application-problems/index/2.png"></p>
<p><strong>2. 为什么要设置过期时间?</strong></p>
<p>   客户端获取锁后，由于系统问题，如果宕机来，会导致锁无法释放（死锁），其他客户端就无法获取锁，所以要指定一个过期时间</p>
<p><strong>3. 设置有效期时间控制</strong></p>
<p>   比如有效期设置10秒，但是业务处理时间大于10s，导致还没有处理完，锁就释放了，其他客户端就会进来，这种情况需要引入<strong>看门狗机制</strong>来解决这个问题</p>
<p><strong>4. 解决锁误删的问题</strong></p>
<p>   锁存在误删的情况：所谓误删就是自己把别人持有的锁给删掉了。</p>
<blockquote>
<p>比如线程A获取锁的时候，设置的有效期是10秒，但是执行业务的时候，A程序突然卡主了超过了10秒，此时这个锁就可能被其他线程拿到，比如被线程B拿到了，然后A从卡顿中恢复了，继续执行业务，业务执行完毕之后，去执行了释放锁的操作，此时A会执行del命令，此时就出现了锁的误删，导致的结果就是把B持有的锁给释放了，然后其他线程又会获取这个锁，挺严重的。</p>
</blockquote>
<p>   <strong>解决方法</strong>：获取锁的之前，生成一个全局唯一id，将这个id也丢到key对应的value中，释放锁之前，从redis中将这个id拿出来和本地的比较一下，看看是不是自己的id，如果是的再执行del释放锁的操作</p>
<p><strong>5. 还是存在误删的可能（原子操作问题）</strong></p>
<p>   刚才上面说了，del之前，会先从redis中读取id，然后和本地id对比一下，如果一致，则执行删除，伪代码如下</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">step1:判断 redis.get(&quot;key&quot;).id==本地id 是否相当,如果是则执行step2</span><br><span class="line">step2:del key;</span><br></pre></td></tr></table></figure>
<p>   此时如果执行step2的时候系统卡主了，比如卡主了10秒，然后redis才收到，这个期间锁可能又被其他线程获取了，此时又发生了误删的操作。</p>
<p>   这个问题的根本原因是：判断和删除这2个步骤对redis来说不是原子操作导致的，这个时候就需要使用Lua脚本来解决。</p>
<p><strong>6. Lua脚本来释放锁</strong><br>   将复杂的或者多步的redis操作，写为一个脚本，一次提交给redis执行，减少反复连接redis的次数，提升性能。Lua脚本类似于redis事务，有一定的原子性，不会被其他命令插队，可以完成一些redis事务的操作。</p>
<p>   但是注意redis的LUA脚本功能，只能在redis2.6以上版本才能使用。</p>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.script.DefaultRedisScript;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, String&gt; redisTemplate;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/lock&quot;, produces = MediaType.TEXT_PLAIN_VALUE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String lockKey = <span class="string">&quot;k1&quot;</span>;</span><br><span class="line">        String uuid = UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//1.获取锁,有效期10秒</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.redisTemplate.opsForValue().setIfAbsent(lockKey, uuid, <span class="number">10</span>, TimeUnit.SECONDS)) &#123;</span><br><span class="line">            <span class="comment">//2.执行业务</span></span><br><span class="line">            <span class="comment">// todo 业务</span></span><br><span class="line">            <span class="comment">//3.使用Lua脚本释放锁(可防止误删)</span></span><br><span class="line">            String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;,KEYS[1])==ARGV[1] then return redis.call(&#x27;del&#x27;,KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">            DefaultRedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;();</span><br><span class="line">            redisScript.setScriptText(script);</span><br><span class="line">            redisScript.setResultType(Long.class);</span><br><span class="line">            Long result = redisTemplate.execute(redisScript, Arrays.asList(lockKey), uuid);</span><br><span class="line">            System.out.println(result);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;获取锁成功!&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;加锁失败!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>7. 分布式锁总结</strong></p>
<p>   为了确保分布式锁可用，至少需要确保分布式锁的实现同时满足以下4个条件：</p>
<ul>
<li><p>互斥性：在任意时刻只能有一个客户端持有锁</p>
</li>
<li><p>不会死锁：即有一个客户端在持有锁期间崩溃而没有释放锁，也能够保证后续其他客户端能够获取锁</p>
</li>
<li><p>加锁和解锁必须时同一个客户端，客户端不能把别人的锁解除了</p>
</li>
<li><p>加锁和解锁必须有原子性</p>
</li>
</ul>
<h3 id="5-分布式锁实现Demo"><a href="#5-分布式锁实现Demo" class="headerlink" title="5. 分布式锁实现Demo"></a>5. 分布式锁实现Demo</h3><ol>
<li><p>引入pom</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="comment">&lt;!-- Redis客户端 start --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Controller层</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 车主端 确认支付</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestDto</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rpcPacket</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@UrlMapping(url = &quot;carOwner/confirmPayment&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RpcPacket <span class="title">changeConfirmPaymentForCarOwner</span><span class="params">(RpcCarOwnerConfirmPaymentReqDto requestDto, RpcPacket rpcPacket)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;车主端 确认支付,requestDto &#123;&#125;,rpcPacket &#123;&#125;&quot;</span>, JsonUtil.toJson(requestDto), JsonUtil.toJson(rpcPacket));</span><br><span class="line">        RpcPacket packet = <span class="keyword">new</span> RpcPacket();</span><br><span class="line">        String lockKey = OrderServiceModulConstant.LOCK_CAROWNER_COMFIRM_PAY_LOKENAME + requestDto.getOrderId();</span><br><span class="line">        String lockName = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//先分布锁一下 订单</span></span><br><span class="line">            lockName = redisCache.getLockLua(lockKey, OrderServiceModulConstant.LOCK_CAROWNER_COMFIRM_PAY_EXPIRETIME, OrderServiceModulConstant.LOCK_CAROWNER_COMFIRM_PAY_TIMEOUT);</span><br><span class="line">            <span class="keyword">if</span> (!StringUtil.isEmpty(lockName)) &#123;</span><br><span class="line">                Long oldCouponId = orderFeeService.updateBindCounpByOrderId(requestDto);</span><br><span class="line"><span class="comment">//                if (oldCouponId!=null) &#123;</span></span><br><span class="line"><span class="comment">//                    rpcServie.updateUnBindCouponByCouponId(oldCouponId);</span></span><br><span class="line"><span class="comment">//                &#125;</span></span><br><span class="line">                RpcCarOwnComfirmPayRetDto res = orderFeeService.changeConfirmPaymentForCarOwner(requestDto, rpcPacket);</span><br><span class="line">                packet.setData(res);</span><br><span class="line">                <span class="keyword">if</span> (res != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">switch</span> (res.getStatus()) &#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                            packet.setAnwserCode(<span class="keyword">new</span> AnwserCode(<span class="number">1</span>, <span class="string">&quot;车主端 支付成功&quot;</span>));</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                            packet.setAnwserCode(<span class="keyword">new</span> AnwserCode(<span class="number">1</span>, <span class="string">&quot;车主端 请调起三方支付&quot;</span>));</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                            packet.setAnwserCode(<span class="keyword">new</span> AnwserCode(-<span class="number">2</span>, <span class="string">&quot;车主端 支付失败&quot;</span>));</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgsException(<span class="string">&quot;支付处理中，请勿重复提交&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArgsException e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;车主端 确认支付异常 &#123;&#125;&quot;</span>, e.toString());</span><br><span class="line">            packet.setAnwserCode(e.getAnwserCode());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;车主端 确认支付异常 &#123;&#125;&quot;</span>, e.toString());</span><br><span class="line">            packet.setAnwserCode(OrderServiceAnwserCode.BUSS_ERROR_CALCULPAYMENT_CAROWNER);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            redisCache.releaseLock(lockKey, lockName);</span><br><span class="line">        &#125;</span><br><span class="line">        logger.info(<span class="string">&quot;车主端 确认支付,packet &#123;&#125;&quot;</span>, JsonUtil.toJson(packet));</span><br><span class="line">        <span class="keyword">return</span> packet;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>3<br>. 编写工具类<br>   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.*;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.exceptions.JedisException;</span><br><span class="line"><span class="keyword">import</span> redis.clients.jedis.params.geo.GeoRadiusParam;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCache</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(RedisCache.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> JedisCluster jedisCluster;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String prefixKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisConfig redisConfig;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisCache</span><span class="params">(String prefixKey, RedisConfig redisConfig)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prefixKey = prefixKey + <span class="string">&quot;_&quot;</span>;</span><br><span class="line">        <span class="keyword">this</span>.redisConfig = redisConfig;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == jedisCluster) &#123;</span><br><span class="line">            <span class="keyword">if</span> (StringUtils.isEmpty(prefixKey) || prefixKey.length() &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                logger.error(<span class="string">&quot;初始化redisCache失败，该模块的redis的key为空&quot;</span>);</span><br><span class="line"></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span> (RedisCache.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">null</span> == jedisCluster) &#123;</span><br><span class="line">                    JedisPoolConfig poolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">                    Set&lt;HostAndPort&gt; shardInfoSet = <span class="keyword">new</span> HashSet&lt;&gt;(<span class="number">16</span>);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//配置</span></span><br><span class="line">                        poolConfig.setMaxIdle(redisConfig.getMaxIdle());</span><br><span class="line">                        poolConfig.setMinIdle(redisConfig.getMinIdle());</span><br><span class="line">                        poolConfig.setTestOnReturn(redisConfig.getTestOnReturn());</span><br><span class="line">                        poolConfig.setTestOnBorrow(redisConfig.getTestOnBorrow());</span><br><span class="line"></span><br><span class="line">                        String[] shardList = redisConfig.getShared().split(<span class="string">&quot;;&quot;</span>);</span><br><span class="line">                        <span class="keyword">for</span> (String server : shardList) &#123;</span><br><span class="line">                            String[] values = server.split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">                            HostAndPort node = <span class="keyword">new</span> HostAndPort(values[<span class="number">0</span>], Integer.parseInt(values[<span class="number">1</span>]));</span><br><span class="line">                            shardInfoSet.add(node);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">int</span> timeout = redisConfig.getTimeout() == <span class="keyword">null</span> ? <span class="number">2000</span> : redisConfig.getTimeout();</span><br><span class="line">                        String password = redisConfig.getPassword();</span><br><span class="line">                        Integer maxActive = redisConfig.getMaxActive();</span><br><span class="line">                        <span class="comment">//是否有密码</span></span><br><span class="line">                        <span class="keyword">if</span> (StringUtils.isNotBlank(password)) &#123;</span><br><span class="line">                            jedisCluster = <span class="keyword">new</span> JedisCluster(shardInfoSet, timeout, timeout, maxActive, poolConfig);</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            jedisCluster = <span class="keyword">new</span> JedisCluster(shardInfoSet, timeout, timeout, maxActive, password, poolConfig);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                        logger.error(<span class="string">&quot;getSharedJedisPool&quot;</span>, e);</span><br><span class="line">                        jedisCluster = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">throw</span> e;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以新换旧，设置新值同时返回旧值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 新值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 旧值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSet</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.getSet(realKey, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存在与否</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">exists</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.exists(realKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">deleteKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.del(realKey) &gt; <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除不含前缀的key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">deleteKeyNoPrefixKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.del(key) &gt; <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置带有过期时间的key-value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value   值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds 有效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">set</span><span class="params">(String key, String value, Integer seconds)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisCluster.setex(realKey, seconds, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置key-value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setNoExpire</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        String prefixKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisCluster.set(prefixKey, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.get(realKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询key的过期时间还剩多少秒</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 生育过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">ttl</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.ttl(realKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds 过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">cacheExpire</span><span class="params">(String key, Integer seconds)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisCluster.expire(realKey, seconds);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取序列化对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] get(<span class="keyword">byte</span>[] key) &#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + <span class="keyword">new</span> String(key);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.get(realKey).getBytes();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自增1， value必须是数值型，否则报错</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自增结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">incr</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.incr(realKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 增加值， value必须是数值型，否则报错</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer 增加的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自增结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">incrBy</span><span class="params">(String key, <span class="keyword">long</span> integer)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.incrBy(realKey, integer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自减1， value必须是数值型，否则报错</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 自增结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">decr</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.decr(realKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减少值， value必须是数值型，否则报错</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> integer 减少的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 减少后的结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">decrBy</span><span class="params">(String key, <span class="keyword">long</span> integer)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.decrBy(realKey, integer);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ex;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新建LIST</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setList</span><span class="params">(String key, Long index, String value)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisCluster.lset(realKey, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置hash 字段-值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field 字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setHash</span><span class="params">(String key, String field, String value)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisCluster.hset(realKey, field, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得HashSet对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field 字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Json String or String value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHash</span><span class="params">(String key, String field)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.hget(realKey, field);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 存储多个值-- 存储 map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map value集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hmset</span><span class="params">(String key, Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisCluster.hmset(realKey, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取多个key对应的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fields</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">hmget</span><span class="params">(String key, String... fields)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.hmget(realKey, fields);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash 字段对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field 字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除的记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">delHash</span><span class="params">(String key, String field)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.hdel(realKey, field);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash 多个字段对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field 字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 删除的记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">delHash</span><span class="params">(String key, String... field)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.hdel(realKey, field);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key下的field是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> field 字段</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">existsHash</span><span class="params">(String key, String field)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.hexists(realKey, field);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回 key 指定的哈希集中所有字段的value值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">hvals</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.hvals(realKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 列出所有的filed</span></span><br><span class="line"><span class="comment">     * hkeys key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">hkeys</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.hkeys(realKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回field的数量</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">lenHash</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.hlen(realKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * list 添加</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> strings</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">lpush</span><span class="params">(String key, String... strings)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">return</span> jedisCluster.lpush(realKey, strings);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * list 获取长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">llen</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">return</span> jedisCluster.llen(realKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//redis 监听消息通道===========================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 推入消息到redis消息通道</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> String message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">publish</span><span class="params">(String channel, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisCluster.lpush(channel, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 推入消息到redis消息通道</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> byte[] channel</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> byte[] message</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">publish</span><span class="params">(<span class="keyword">byte</span>[] channel, <span class="keyword">byte</span>[] message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisCluster.lpush(channel, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取队列数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> byte[] key 键名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] rpop(<span class="keyword">byte</span>[] key) &#123;</span><br><span class="line">        String realKey = <span class="keyword">new</span> String(key);</span><br><span class="line">        realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bytes = jedisCluster.rpop(realKey.getBytes());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//释放redis对象</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取队列数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> byte[] key 键名</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">rpop</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        String bytes = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            bytes = jedisCluster.rpop(realKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">//释放redis对象</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听消息通道</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedisPubSub - 监听任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channels    - 要监听的消息通道</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(BinaryJedisPubSub jedisPubSub, <span class="keyword">byte</span>[]... channels)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisCluster.subscribe(jedisPubSub, channels);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            jedisCluster.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 监听消息通道</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jedisPubSub - 监听任务</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> channels    - 要监听的消息通道</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(JedisPubSub jedisPubSub, String... channels)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisCluster.subscribe(jedisPubSub, channels);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            jedisCluster.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//redis 监听消息通道===========================</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定元素</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">lrem</span><span class="params">(String key, <span class="keyword">int</span> count, String value)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisCluster.lrem(realKey, count, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * list 指定元素 0，-1 所有</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">lrange</span><span class="params">(String key, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.lrange(realKey, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * add string to set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> members</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sadd</span><span class="params">(String key, String... members)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedisCluster.sadd(realKey, members);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断集合中是否存在某个值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sismember</span><span class="params">(String key, String member)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.sismember(realKey, member);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * select all</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">smembers</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.smembers(realKey);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * delete value in set</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">srem</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.srem(realKey, value) &gt; <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ltrim</span><span class="params">(String key, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.ltrim(<span class="keyword">this</span>.prefixKey + key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * score降序，获取指定索引范围的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">zrevrange</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.zrevrange(realKey, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setNx</span><span class="params">(String key, String obj, <span class="keyword">int</span> seconds)</span> </span>&#123;</span><br><span class="line">        Long result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = jedisCluster.setnx(key, obj);</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="number">1</span>) &#123;</span><br><span class="line">                jedisCluster.expire(key, seconds);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加元素---set</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> score</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zadd</span><span class="params">(String key, Long score, String value)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        Long result = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = jedisCluster.zadd(realKey, score.doubleValue(), value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页获取ZSET数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;Tuple&gt; <span class="title">zrevrangeWithScores</span><span class="params">(String key, <span class="keyword">long</span> start, <span class="keyword">long</span> end)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;RedisCache zrange key=&#123;&#125;,start=&#123;&#125;,end=&#123;&#125;&quot;</span>, key, start, end);</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.zrevrangeWithScores(realKey, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;RedisCache zrange key=&#123;&#125;,start=&#123;&#125;,end=&#123;&#125;,e=&#123;&#125;&quot;</span>, realKey, start, end, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptySet();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对应元素的排名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zrevrank</span><span class="params">(String key, String member)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;RedisCache zrevrank key=&#123;&#125;,member=&#123;&#125;&quot;</span>, key, member);</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.zrevrank(realKey, member);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;RedisCache zrevrank key=&#123;&#125;,member=&#123;&#125;,e =&#123;&#125;&quot;</span>, key, member, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取对应元素的分数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> member</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Double <span class="title">zscore</span><span class="params">(String key, String member)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;RedisCache zscore key=&#123;&#125;,member=&#123;&#125;&quot;</span>, key, member);</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.zscore(realKey, member);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;RedisCache zscore key=&#123;&#125;,member=&#123;&#125;,e =&#123;&#125;&quot;</span>, key, member, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.00</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">zrem</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">        String realKey = <span class="keyword">this</span>.prefixKey + key;</span><br><span class="line">        Long result = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = jedisCluster.zrem(realKey, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key            锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> acquireTimeout 获取超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout        锁的超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 锁标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lockWithTimeout</span><span class="params">(String key, <span class="keyword">long</span> acquireTimeout, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        String retIdentifier = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 随机生成一个value</span></span><br><span class="line">            String identifier = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 超时时间，上锁后超过此时间则自动释放锁</span></span><br><span class="line">            <span class="keyword">int</span> lockExpire = (<span class="keyword">int</span>) (timeout / <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取锁的超时时间，超过这个时间则放弃获取锁</span></span><br><span class="line">            <span class="keyword">long</span> end = System.currentTimeMillis() + acquireTimeout;</span><br><span class="line">            <span class="keyword">while</span> (System.currentTimeMillis() &lt; end) &#123;</span><br><span class="line">                <span class="keyword">if</span> (jedisCluster.setnx(key, identifier) == <span class="number">1</span>) &#123;</span><br><span class="line">                    jedisCluster.expire(key, lockExpire);</span><br><span class="line">                    <span class="comment">// 返回value值，用于释放锁时间确认</span></span><br><span class="line">                    retIdentifier = identifier;</span><br><span class="line">                    <span class="keyword">return</span> retIdentifier;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 返回-1代表key没有设置超时时间，为key设置一个超时时间</span></span><br><span class="line">                <span class="keyword">if</span> (jedisCluster.ttl(key) == -<span class="number">1</span>) &#123;</span><br><span class="line">                    jedisCluster.expire(key, lockExpire);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    Thread.currentThread().interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JedisException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retIdentifier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁</span></span><br><span class="line"><span class="comment">     * 运用lua脚本</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key            锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> acquireTimeout 获取超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout        锁的超时时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 锁标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLockLua</span><span class="params">(String key, <span class="keyword">long</span> acquireTimeout, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getLockLua(key, timeout);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLockLua</span><span class="params">(String key, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> lockExpire = (<span class="keyword">int</span>) (timeout / <span class="number">1000</span>);</span><br><span class="line">        keys.add(key);</span><br><span class="line">        List&lt;String&gt; args = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        args.add(lockExpire + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        args.add(UUID.randomUUID().toString());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;OK&quot;</span>.equals(jedisCluster.eval(<span class="string">&quot;return redis.call(&#x27;set&#x27;, KEYS[1],ARGV[2],&#x27;nx&#x27;, &#x27;ex&#x27;, ARGV[1]) &quot;</span>, keys, args)) ? args.get(<span class="number">1</span>) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLock</span><span class="params">(String key, <span class="keyword">long</span> timeout)</span> </span>&#123;</span><br><span class="line">        String retIdentifier = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 随机生成一个value</span></span><br><span class="line">            String identifier = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 超时时间，上锁后超过此时间则自动释放锁</span></span><br><span class="line">            <span class="keyword">int</span> lockExpire = (<span class="keyword">int</span>) (timeout / <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (jedisCluster.setnx(key, identifier) == <span class="number">1</span>) &#123;</span><br><span class="line">                jedisCluster.expire(key, lockExpire);</span><br><span class="line">                <span class="comment">// 返回value值，用于释放锁时间确认</span></span><br><span class="line">                retIdentifier = identifier;</span><br><span class="line">                <span class="keyword">return</span> retIdentifier;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 返回-1代表key没有设置超时时间，为key设置一个超时时间</span></span><br><span class="line">            <span class="keyword">if</span> (jedisCluster.ttl(key) == -<span class="number">1</span>) &#123;</span><br><span class="line">                jedisCluster.expire(key, lockExpire);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JedisException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retIdentifier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key        锁的key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> identifier 释放锁的标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseLock</span><span class="params">(String key, String identifier)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> retFlag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 通过前面返回的value值判断是不是该锁，若是该锁，则删除，释放锁</span></span><br><span class="line">            <span class="keyword">if</span> (identifier.equals(jedisCluster.get(key))) &#123;</span><br><span class="line">                jedisCluster.del(key);</span><br><span class="line">                retFlag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JedisException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retFlag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">keys</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; keys = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        Map&lt;String, JedisPool&gt; clusterNodes = jedisCluster.getClusterNodes();</span><br><span class="line">        <span class="keyword">for</span> (String node : clusterNodes.keySet()) &#123;</span><br><span class="line">            JedisPool jp = clusterNodes.get(node);</span><br><span class="line">            Jedis connection = jp.getResource();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                keys.addAll(connection.keys(pattern));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                connection.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> keys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//订单开始坐标存入redis</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">addReo</span><span class="params">(<span class="keyword">double</span> lon, <span class="keyword">double</span> lat, String orderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.geoadd(<span class="string">&quot;orderStation&quot;</span>, lon, lat, orderId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;reids 缓存坐标异常：&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询坐标系附近的订单</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lon    经度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lat    纬度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> radius 半径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;GeoRadiusResponse&gt; <span class="title">queryReo</span><span class="params">(Double lon, Double lat, <span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.georadius(<span class="string">&quot;orderStation&quot;</span>, lon, lat, radius, GeoUnit.KM, GeoRadiusParam.geoRadiusParam().withDist());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;reids 查询坐标系附近的订单异常：&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis删除订单坐标</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderId 订单号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">delReo</span><span class="params">(String orderId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> jedisCluster.zrem(<span class="string">&quot;orderStation&quot;</span>, orderId);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;reids 删除订单坐标异常：&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisCluster <span class="title">getJedisCluster</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisCluster;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>07 Redis</category>
      </categories>
      <tags>
        <tag>redis专题</tag>
      </tags>
  </entry>
  <entry>
    <title>深入Tomcat源码学习</title>
    <url>/tomcat/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h2 id="1-Tomcat简介"><a href="#1-Tomcat简介" class="headerlink" title="1. Tomcat简介"></a>1. Tomcat简介</h2><p>Apache是web服务器，Tomcat是应用服务器，apache tomcat只是一个servlet容器，是Apache的扩展；Apache和Tomcat都可以做为独立的web服务器来运行，但是Apache不能解释java程序（jsp,servlet）。</p>
<p>两者都是一种容器，只不过发布的东西不同：Apache是html容器，功能像IIS一样；Tomcat是jsp/servlet容器，用于发布jsp及java的，类似的有IBM的websphere、BEA的Weblogic，sun的JRun等等。</p>
<p>打个比方：Apache是一辆卡车，上面可以装一些东西如html等。但是不能装水，要装水必须要有容器（桶），Tomcat就是一个桶（装像Java这样的水），而这个桶也可以不放在卡车上。</p>
<p>官网地址： <a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p>
<h3 id="1-1-网络架构图"><a href="#1-1-网络架构图" class="headerlink" title="1.1 网络架构图"></a>1.1 网络架构图</h3><p><img src="/tomcat/index/wangluojiagou.jpg" alt="wangluojiagou"></p>
<h3 id="1-2-web监听端口"><a href="#1-2-web监听端口" class="headerlink" title="1.2  web监听端口"></a>1.2  web监听端口</h3><p>DefaultServletSocketFactory.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ServerSocket <span class="title">createSocket</span> <span class="params">(<span class="keyword">int</span> port, <span class="keyword">int</span> backlog,</span></span></span><br><span class="line"><span class="params"><span class="function">                                  InetAddress ifAddress)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ServerSocket (port, backlog, ifAddress);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-3-Servlet容器"><a href="#1-3-Servlet容器" class="headerlink" title="1.3 Servlet容器"></a>1.3 Servlet容器</h3><ul>
<li><p>  找到<code>Tomcat</code>源码中对应一个web项目的类 <code> Context.class</code></p>
</li>
<li><p>找到<code>Tomcat</code>源码 —&gt;<code>web.xml</code>文件对应的类</p>
  <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/app&quot;</span> <span class="attr">doBase</span>=<span class="string">&quot;E:\\app&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/app1&quot;</span> <span class="attr">doBase</span>=<span class="string">&quot;E:\\app1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>  既然这段配置能够代表一个web项目在磁盘的访问路径，Context标签就是代表一个web项目</p>
<p>  在tomcat官网中（<a href="https://tomcat.apache.org/tomcat-8.0-doc/architecture/overview.html%EF%BC%89%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E7%9B%B8%E5%BA%94%E7%9A%84%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E">https://tomcat.apache.org/tomcat-8.0-doc/architecture/overview.html）可以看到相应的文档说明</a></p>
  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A Context represents a web application. A Host may contain multiple contexts, each with a unique path. The Context interface may be implemented to create custom Contexts, but this is rarely the case because the StandardContext provides significant additional functionality.</span><br><span class="line"></span><br><span class="line">//大致意思：一个Context文表示web应用程序。一个主机可以包含多个Context，每个Context都有一个唯一的路径。上下文接口可以用来创建自定义Context，但这种情况很少发生，因为StandardContext提供了重要的附加功能。</span><br></pre></td></tr></table></figure>

<p>  那么在<code>StandardContext</code>中是如何加载这些项目的？</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">loadOnStartup</span><span class="params">(Container children[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Collect &quot;load on startup&quot; servlets that need to be initialized</span></span><br><span class="line">        TreeMap&lt;Integer, ArrayList&lt;Wrapper&gt;&gt; map = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; children.length; i++) &#123;</span><br><span class="line">            Wrapper wrapper = (Wrapper) children[i];</span><br><span class="line">            <span class="keyword">int</span> loadOnStartup = wrapper.getLoadOnStartup();</span><br><span class="line">            <span class="keyword">if</span> (loadOnStartup &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            Integer key = Integer.valueOf(loadOnStartup);</span><br><span class="line">            ArrayList&lt;Wrapper&gt; list = map.get(key);</span><br><span class="line">            <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">                list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                map.put(key, list);</span><br><span class="line">            &#125;</span><br><span class="line">            list.add(wrapper);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Load the collected &quot;load on startup&quot; servlets</span></span><br><span class="line">        <span class="keyword">for</span> (ArrayList&lt;Wrapper&gt; list : map.values()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Wrapper wrapper : list) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    wrapper.load();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ServletException e) &#123;</span><br><span class="line">                    getLogger().error(sm.getString(<span class="string">&quot;standardWrapper.loadException&quot;</span>,</span><br><span class="line">                                      getName()), StandardWrapper.getRootCause(e));</span><br><span class="line">                    <span class="comment">// <span class="doctag">NOTE:</span> load errors (including a servlet that throws</span></span><br><span class="line">                    <span class="comment">// UnavailableException from tht init() method) are NOT</span></span><br><span class="line">                    <span class="comment">// fatal to application startup, excepted if failDeploymentIfServletLoadedOnStartupFails is specified</span></span><br><span class="line">                    <span class="keyword">if</span>(getComputedFailCtxIfServletStartFails()) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>  那这些Wrapper是否就是Servlet ?</p>
<p>  WebXml.java</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StringManager sm = StringManager.getManager(Constants.PACKAGE_NAME);</span><br></pre></td></tr></table></figure>

<p>  Contants</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEB_XML_LOCATION = <span class="string">&quot;/WEB-INF/web.xml&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>  ContextConfig</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">configureContext</span><span class="params">(WebXml webxml)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// As far as possible, process in alphabetical order so it is easy to</span></span><br><span class="line">        <span class="comment">// check everything is present</span></span><br><span class="line">        <span class="comment">// Some validation depends on correct public ID</span></span><br><span class="line">        context.setPublicId(webxml.getPublicId());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Everything else in order</span></span><br><span class="line">        context.setEffectiveMajorVersion(webxml.getMajorVersion());</span><br><span class="line">        context.setEffectiveMinorVersion(webxml.getMinorVersion());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : webxml.getContextParams().entrySet()) &#123;</span><br><span class="line">            context.addParameter(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        context.setDenyUncoveredHttpMethods(</span><br><span class="line">                webxml.getDenyUncoveredHttpMethods());</span><br><span class="line">        context.setDisplayName(webxml.getDisplayName());</span><br><span class="line">        context.setDistributable(webxml.isDistributable());</span><br><span class="line">        <span class="keyword">for</span> (ContextLocalEjb ejbLocalRef : webxml.getEjbLocalRefs().values()) &#123;</span><br><span class="line">            context.getNamingResources().addLocalEjb(ejbLocalRef);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ContextEjb ejbRef : webxml.getEjbRefs().values()) &#123;</span><br><span class="line">            context.getNamingResources().addEjb(ejbRef);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ContextEnvironment environment : webxml.getEnvEntries().values()) &#123;</span><br><span class="line">            context.getNamingResources().addEnvironment(environment);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ErrorPage errorPage : webxml.getErrorPages().values()) &#123;</span><br><span class="line">            context.addErrorPage(errorPage);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (FilterDef filter : webxml.getFilters().values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (filter.getAsyncSupported() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                filter.setAsyncSupported(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            context.addFilterDef(filter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (FilterMap filterMap : webxml.getFilterMappings()) &#123;</span><br><span class="line">            context.addFilterMap(filterMap);</span><br><span class="line">        &#125;</span><br><span class="line">        context.setJspConfigDescriptor(webxml.getJspConfigDescriptor());</span><br><span class="line">        <span class="keyword">for</span> (String listener : webxml.getListeners()) &#123;</span><br><span class="line">            context.addApplicationListener(listener);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">                webxml.getLocaleEncodingMappings().entrySet()) &#123;</span><br><span class="line">            context.addLocaleEncodingMappingParameter(entry.getKey(),</span><br><span class="line">                    entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Prevents IAE</span></span><br><span class="line">        <span class="keyword">if</span> (webxml.getLoginConfig() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            context.setLoginConfig(webxml.getLoginConfig());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (MessageDestinationRef mdr :</span><br><span class="line">                webxml.getMessageDestinationRefs().values()) &#123;</span><br><span class="line">            context.getNamingResources().addMessageDestinationRef(mdr);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// messageDestinations were ignored in Tomcat 6, so ignore here</span></span><br><span class="line"></span><br><span class="line">        context.setIgnoreAnnotations(webxml.isMetadataComplete());</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">                webxml.getMimeMappings().entrySet()) &#123;</span><br><span class="line">            context.addMimeMapping(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Name is just used for ordering</span></span><br><span class="line">        <span class="keyword">for</span> (ContextResourceEnvRef resource :</span><br><span class="line">                webxml.getResourceEnvRefs().values()) &#123;</span><br><span class="line">            context.getNamingResources().addResourceEnvRef(resource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ContextResource resource : webxml.getResourceRefs().values()) &#123;</span><br><span class="line">            context.getNamingResources().addResource(resource);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> allAuthenticatedUsersIsAppRole =</span><br><span class="line">                webxml.getSecurityRoles().contains(</span><br><span class="line">                        SecurityConstraint.ROLE_ALL_AUTHENTICATED_USERS);</span><br><span class="line">        <span class="keyword">for</span> (SecurityConstraint constraint : webxml.getSecurityConstraints()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allAuthenticatedUsersIsAppRole) &#123;</span><br><span class="line">                constraint.treatAllAuthenticatedUsersAsApplicationRole();</span><br><span class="line">            &#125;</span><br><span class="line">            context.addConstraint(constraint);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (String role : webxml.getSecurityRoles()) &#123;</span><br><span class="line">            context.addSecurityRole(role);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ContextService service : webxml.getServiceRefs().values()) &#123;</span><br><span class="line">            context.getNamingResources().addService(service);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ServletDef servlet : webxml.getServlets().values()) &#123;</span><br><span class="line">            Wrapper wrapper = context.createWrapper();</span><br><span class="line">            <span class="comment">// Description is ignored</span></span><br><span class="line">            <span class="comment">// Display name is ignored</span></span><br><span class="line">            <span class="comment">// Icons are ignored</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// jsp-file gets passed to the JSP Servlet as an init-param</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (servlet.getLoadOnStartup() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                wrapper.setLoadOnStartup(servlet.getLoadOnStartup().intValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (servlet.getEnabled() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                wrapper.setEnabled(servlet.getEnabled().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setName(servlet.getServletName());</span><br><span class="line">            Map&lt;String,String&gt; params = servlet.getParameterMap();</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : params.entrySet()) &#123;</span><br><span class="line">                wrapper.addInitParameter(entry.getKey(), entry.getValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setRunAs(servlet.getRunAs());</span><br><span class="line">            Set&lt;SecurityRoleRef&gt; roleRefs = servlet.getSecurityRoleRefs();</span><br><span class="line">            <span class="keyword">for</span> (SecurityRoleRef roleRef : roleRefs) &#123;</span><br><span class="line">                wrapper.addSecurityReference(</span><br><span class="line">                        roleRef.getName(), roleRef.getLink());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setServletClass(servlet.getServletClass());</span><br><span class="line">            MultipartDef multipartdef = servlet.getMultipartDef();</span><br><span class="line">            <span class="keyword">if</span> (multipartdef != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (multipartdef.getMaxFileSize() != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        multipartdef.getMaxRequestSize()!= <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                        multipartdef.getFileSizeThreshold() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    wrapper.setMultipartConfigElement(<span class="keyword">new</span> MultipartConfigElement(</span><br><span class="line">                            multipartdef.getLocation(),</span><br><span class="line">                            Long.parseLong(multipartdef.getMaxFileSize()),</span><br><span class="line">                            Long.parseLong(multipartdef.getMaxRequestSize()),</span><br><span class="line">                            Integer.parseInt(</span><br><span class="line">                                    multipartdef.getFileSizeThreshold())));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    wrapper.setMultipartConfigElement(<span class="keyword">new</span> MultipartConfigElement(</span><br><span class="line">                            multipartdef.getLocation()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (servlet.getAsyncSupported() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                wrapper.setAsyncSupported(</span><br><span class="line">                        servlet.getAsyncSupported().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line">            wrapper.setOverridable(servlet.isOverridable());</span><br><span class="line">            context.addChild(wrapper);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">                webxml.getServletMappings().entrySet()) &#123;</span><br><span class="line">            context.addServletMapping(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        SessionConfig sessionConfig = webxml.getSessionConfig();</span><br><span class="line">        <span class="keyword">if</span> (sessionConfig != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (sessionConfig.getSessionTimeout() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                context.setSessionTimeout(</span><br><span class="line">                        sessionConfig.getSessionTimeout().intValue());</span><br><span class="line">            &#125;</span><br><span class="line">            SessionCookieConfig scc =</span><br><span class="line">                context.getServletContext().getSessionCookieConfig();</span><br><span class="line">            scc.setName(sessionConfig.getCookieName());</span><br><span class="line">            scc.setDomain(sessionConfig.getCookieDomain());</span><br><span class="line">            scc.setPath(sessionConfig.getCookiePath());</span><br><span class="line">            scc.setComment(sessionConfig.getCookieComment());</span><br><span class="line">            <span class="keyword">if</span> (sessionConfig.getCookieHttpOnly() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                scc.setHttpOnly(sessionConfig.getCookieHttpOnly().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sessionConfig.getCookieSecure() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                scc.setSecure(sessionConfig.getCookieSecure().booleanValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sessionConfig.getCookieMaxAge() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                scc.setMaxAge(sessionConfig.getCookieMaxAge().intValue());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (sessionConfig.getSessionTrackingModes().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                context.getServletContext().setSessionTrackingModes(</span><br><span class="line">                        sessionConfig.getSessionTrackingModes());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Context doesn&#x27;t use version directly</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String welcomeFile : webxml.getWelcomeFiles()) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * The following will result in a welcome file of &quot;&quot; so don&#x27;t add</span></span><br><span class="line"><span class="comment">             * that to the context</span></span><br><span class="line"><span class="comment">             * &lt;welcome-file-list&gt;</span></span><br><span class="line"><span class="comment">             *   &lt;welcome-file/&gt;</span></span><br><span class="line"><span class="comment">             * &lt;/welcome-file-list&gt;</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (welcomeFile != <span class="keyword">null</span> &amp;&amp; welcomeFile.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                context.addWelcomeFile(welcomeFile);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Do this last as it depends on servlets</span></span><br><span class="line">        <span class="keyword">for</span> (JspPropertyGroup jspPropertyGroup :</span><br><span class="line">                webxml.getJspPropertyGroups()) &#123;</span><br><span class="line">            String jspServletName = context.findServletMapping(<span class="string">&quot;*.jsp&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (jspServletName == <span class="keyword">null</span>) &#123;</span><br><span class="line">                jspServletName = <span class="string">&quot;jsp&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (context.findChild(jspServletName) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">for</span> (String urlPattern : jspPropertyGroup.getUrlPatterns()) &#123;</span><br><span class="line">                    context.addServletMapping(urlPattern, jspServletName, <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(log.isDebugEnabled()) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String urlPattern : jspPropertyGroup.getUrlPatterns()) &#123;</span><br><span class="line">                        log.debug(<span class="string">&quot;Skiping &quot;</span> + urlPattern + <span class="string">&quot; , no servlet &quot;</span> +</span><br><span class="line">                                jspServletName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">                webxml.getPostConstructMethods().entrySet()) &#123;</span><br><span class="line">            context.addPostConstructMethod(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;String, String&gt; entry :</span><br><span class="line">            webxml.getPreDestroyMethods().entrySet()) &#123;</span><br><span class="line">            context.addPreDestroyMethod(entry.getKey(), entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="2-Tomcat核心架构"><a href="#2-Tomcat核心架构" class="headerlink" title="2. Tomcat核心架构"></a>2. Tomcat核心架构</h2><p>每一层级对应的都是<code>xml</code>文件中的标签，以及源码中的实体类，其中有多层的图形表示可以存在多个</p>
<p><img src="/tomcat/index/tomcat5.png" alt="tomcat5"></p>
<p>Tips: 亿图不充钱限制了组件个数，Context只画了一个！</p>
<h3 id="2-2-Tomcat组件"><a href="#2-2-Tomcat组件" class="headerlink" title="2.2 Tomcat组件"></a>2.2 Tomcat组件</h3><p><code>XML</code>配置文件结构如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span>                       <span class="comment">&lt;!--顶层类元素：一个配置文件中只能有一个&lt;Server&gt;元素，可包含多个Service。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Service</span>&gt;</span>                  <span class="comment">&lt;!--顶层类元素：本身不是容器，可包含一个Engine，多个Connector。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span>/&gt;</span>           <span class="comment">&lt;!--连接器类元素：代表通信接口。--&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">Engine</span>&gt;</span>   		   <span class="comment">&lt;!--容器类元素：为特定的Service组件处理所有客户请求，可包含多个Host。--&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">Host</span>&gt;</span>    	   <span class="comment">&lt;!--容器类元素：为特定的虚拟主机处理所有客户请求，可包含多个Context。--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;<span class="name">Context</span>&gt;</span>      <span class="comment">&lt;!--容器类元素：为特定的Web应用处理所有客户请求。--&gt;</span></span><br><span class="line">                 <span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-1-Server"><a href="#2-2-1-Server" class="headerlink" title="2.2.1 Server"></a>2.2.1 Server</h4><p> 代表整个<code>Tomcat</code>实例，在JVM中式单例的，它还负责管理包含<code>Service</code>组件的声明周期，下图式对<code>Server</code>组件的一个简单描述：</p>
<p><img src="/tomcat/index/tomcat_server.gif" alt="tomcat_server"></p>
<ul>
<li>  可以在<code>Server.xml</code>文件对<code>server</code>组件进行配置</li>
<li>  配置属性有：name, shutdown, port, command, class name等</li>
<li>  shutdown port默认为8005</li>
<li>  shutdown command 默认为SHUTDOWN; 处于安全，只能从同一台服务器发出SHUTDOWN命令</li>
<li>  提供JNDI的实现，可以放任意对象（如DataSource, 环境变量等）；</li>
</ul>
<h4 id="2-2-2-Service"><a href="#2-2-2-Service" class="headerlink" title="2.2.2 Service"></a>2.2.2 Service</h4><p> <code>Service</code>组件代表的式一组请求处理主键，一个<code>Server</code>实例可以包含多个<code>Service</code>实例，每个<code>Service</code>实例与一组<code>Connector</code>实例和单个Engine实例相关联( Service 是 Server 内部的中间组件，它将一个或多个 Connector 绑定到一个Engine 上。)</p>
<p><img src="/tomcat/index/tomcat_service.gif" alt="tomcat_service"></p>
<p>单<code>Service</code>实例一般够用了，如果需要针对不同的<code>IP</code>或者<code>port</code>使用不同的<code>Service</code>组件来处理，则可以使用多<code>Service</code>实例</p>
<h4 id="2-2-3-Connector"><a href="#2-2-3-Connector" class="headerlink" title="2.2.3 Connector"></a>2.2.3 Connector</h4><p><code> Connector</code>组件把Engine从不同的通信协议中隔离出来，如<code>HTTP</code>, <code>HTTPS</code>, <code>AJP</code>等；</p>
<p>可以配置<code>Tomcat</code>的工作模式: <code>Standalone</code> &amp;  <code>Conjunction</code></p>
<ul>
<li><p>Standalone模式：tomcat可以配置HTTP/HTTPS的connector，它既要处理静态内容，也要委托Engine处理动态内容</p>
<p>  <img src="/tomcat/index/tomcat_connector_standalone.gif" alt="tomcat_connector_standalone"></p>
</li>
<li><p>  Conjunction模式：客户端是Apache或者是IIS之类的WEB Server； 当Web Server决定将请求转交给Tomcat处理时，它通过AJP协议与Tomcat交互；AJP是基于二进制流的比HTTP更高效一些；</p>
</li>
</ul>
<p>关于<code>Connector</code>的几个重要点：</p>
<ul>
<li>  监听的IP和port</li>
<li>  处理请求的最大线程数，如果所有的线程都忙，则会丢弃新的请求</li>
<li>  所有的Connector接收到请求后，转化成统一的模式，再交给唯一的Engine处理；Engine负责处理请i去并产生响应；</li>
<li>  Connector将Engine产生的响应按照合适的协议发送到客户端</li>
</ul>
<p><strong>常见Connector</strong>：</p>
<ul>
<li>  http/1.1</li>
<li>  http/2</li>
<li>  ajp(apache jserv protocol)  专用于tomcat前端是apache反向代理的情况下</li>
</ul>
<p><code>Tomcat</code>既作为web服务器（解析http协议，响应客户端，静态；非处理动态（委托）），也作为应用程序服务器：请求来自于浏览器。<br><code>Tomcat</code>应该考虑工作情形并为相应情形下的请求分别定义好需要的连接器才能正确接收来自于客户端的请求。<br>此处暂先介绍HTTP/1.1连接器的属性设置。ajp后文再做介绍。<br>HTTP连接器表示支持HTTP/1.1协议的组件。设置了该连接器就表示catalina启用它的独立web服务功能，当然，肯定也提供它必须的servlets和jsp执行功能。在一个service中可以配置一个或多个连接器，每个连接器都可以将请求转发给它们相关联的engine以处理请求、创建响应。<br>每个流入的请求都需要一个独立的线程来接收。当并发请求数量超出maxThreads指定的值时，多出的请求将被堆叠在套接字（socket）中，直到超出acceptCount指定的值。超出accpetCount的请求将以”connection refused”错误进行拒绝。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--HTTP连接器的属性实在太多，详细配置方法见官方手册。通常定义HTTP连接器时必须定义的属性只有&quot;port&quot;。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	address：指定连接器监听的地址，默认为所有地址，即0.0.0.0。</span></span><br><span class="line"><span class="comment">	maxThreads：支持的最大并发连接数，默认为200；如果引用了executor创建的共享线程池，则该属性被忽略。</span></span><br><span class="line"><span class="comment">	acceptCount：设置等待队列的最大长度；通常在tomcat所有处理线程均处于繁忙状态时，新发来的请求将被放置于等待队列中；</span></span><br><span class="line"><span class="comment">	maxConnections：允许建立的最大连接数。acceptCount和maxThreads是接受连接的最大线程数。存在一种情况，maxConnections小于acceptCount时，超出maxConnections的连接请求将被接收，但不会与之建立连接。</span></span><br><span class="line"><span class="comment">	port：监听的端口，默认为0，此时表示随机选一个端口，通常都应该显式指定监听端口。</span></span><br><span class="line"><span class="comment">	protocol：连接器使用的协议，用于处理对应的请求。默认为HTTP/1.1，此时它会自动在基于Java NIO或APR/native连接器之间进行切换。定义AJP协议时通常为AJP/1.3。</span></span><br><span class="line"><span class="comment">	redirectPort：如果某连接器支持的协议是HTTP，当接收客户端发来的HTTPS请求时，则转发至此属性定义的端口。</span></span><br><span class="line"><span class="comment">	connectionTimeout：等待客户端发送请求的超时时间，单位为毫秒，默认为60000，即1分钟；注意，这时候连接已经建立。</span></span><br><span class="line"><span class="comment">	keepAliveTimeout：长连接状态的超时时间。超出该值时，长连接将关闭。</span></span><br><span class="line"><span class="comment">		enableLookups：是否通过request.getRemoteHost()进行DNS查询以获取客户端的主机名；默认为true，应设置为false防止反解客户端主机；</span></span><br><span class="line"><span class="comment">compression：是否压缩数据。默认为off。设置为on时表示只压缩text文本，设置为force时表示压缩所有内容。应该在压缩和sendfile之间做个权衡。</span></span><br><span class="line"><span class="comment">	useSendfile：该属性为NIO（非阻塞IO）的属性，表示是否启用sendfile的功能。默认为true，启用该属性将会禁止compression属性。</span></span><br><span class="line"><span class="comment">当协议指定为HTTP/1.1时，默认会自动在NIO/APR协议处理方式上进行按需切换。如要显式指定协议，方式如下： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11Nio2Protocol&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11AprProtocol&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    其中NIO是C/C++的非阻塞IO复用模型在JAVA中的IO实现，NIO2即AIO是异步NIO，即异步非阻塞IO：</span></span><br><span class="line"><span class="comment">    NioProtocol ：non blocking Java NIO connector</span></span><br><span class="line"><span class="comment">    Nio2Protocol：non blocking Java NIO2 connector</span></span><br><span class="line"><span class="comment">    AprProtocol ：the APR/native connector </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p>多个属性的SSL连接服务器</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8443&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">minSpareThreads</span>=<span class="string">&quot;25&quot;</span> <span class="attr">maxSpareThreads</span>=<span class="string">&quot;75&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">enableLookups</span>=<span class="string">&quot;false&quot;</span> <span class="attr">acceptCount</span>=<span class="string">&quot;100&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;0&quot;</span> <span class="attr">scheme</span>=<span class="string">&quot;https&quot;</span> <span class="attr">secure</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">clientAuth</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sslProtocol</span>=<span class="string">&quot;TLS&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="2-2-4-Engine"><a href="#2-2-4-Engine" class="headerlink" title="2.2.4 Engine"></a>2.2.4 Engine</h4><p>​    其实就是Servlet Engine；一个service组件只能包含一个Engine组件；但是一个Engine可以包含多个Host组件；它接受代表请求和相应的对象，然后将工作委托给相应的host组件进行处理；如果没有找到对应的host组件，则委托给default host来处理；</p>
<p>​    Engine代表服务请求处理管道；由于Server可能有多个 Connector 连接器， Engine 负责接收并处理来自这些 Connector 的所有请求，并将响应返回给对应的 Connector，最终返回给客户端。</p>
<p>​    Engine是service组件中用来分析协议的引擎机器，它从一个或多个connector上接收请求，并将请求交给对应的虚拟主机进行处理，最后返回完整的响应数据给connector，通过connector将响应数据返回给客户端。<br>只有一个engine元素必须嵌套在每个service中，且engine必须在其所需要关联的connector之后，这样在engine前面的connector都可以被此engine关联，而在engine后面的connector则被忽略，因为一个service中只允许有一个engine。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Standalone&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span> <span class="attr">jvmRoute</span>=<span class="string">&quot;TomcatA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">常用的engine属性有：</span></span><br><span class="line"><span class="comment">	className：实现engine的类，该类必须实现org.apache.catalina.Engine接口。不给定该属性时将采用默认的标准类org.apache.catalina.core.StandardEngine。</span></span><br><span class="line"><span class="comment">	defaultHost：指定处理请求的默认虚拟主机。在Engine中定义的多个虚拟主机的主机名称中至少有一个跟defaultHost定义的主机名称同名。</span></span><br><span class="line"><span class="comment">	name：Engine组件的名称，用于记录日志和错误信息，无关紧要的属性，可随意给定。</span></span><br><span class="line"><span class="comment">	jvmRoute(session+标识符，记录在服务端)：在启用session粘性时指定使用哪种负载均衡的标识符。所有的tomcat server实例中该标识符必须唯一，它会追加在session标识符的尾部，因此能让前端代理总是将特定的session转发至同一个tomcat实例上。(Session与cookie功能效果相同。Session与Cookie的区别在于Session是记录在服务端的,而Cookie是记录在客户端的。 )</span></span><br><span class="line"><span class="comment">注意: jvmRoute同样可以使用jvmRoute的系统属性来设置。如果此处设置了jvmRoute，则覆盖jvmRoute系统属性。关于jvmRoute的使用，在后面tomcat ajp负载均衡的文章中介绍。</span></span><br><span class="line"><span class="comment">engine是容器中的顶级子容器，其内可以嵌套一个或多个Host作为虚拟主机，且至少一个host要和engine中的默认虚拟主机名称对应。除了host，还可以嵌套releam和valve组件。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-5-Host"><a href="#2-2-5-Host" class="headerlink" title="2.2.5 Host"></a>2.2.5 Host</h4><p>​    Host容器用来定义虚拟主机。engine从connector接收到请求进行分析后，会将相关的属性参数传递给对应的(筛选方式是从请求首部的host字段和虚拟主机名称进行匹配)虚拟host进行处理。如果没有合适的虚拟主机，则传递给默认虚拟主机。因此每个容器中必须至少定义一个虚拟主机，且必须有一个虚拟主机和engine容器中定义的默认虚拟主机名称相同;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span> <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Alias</span>&gt;</span>www.a.com<span class="tag">&lt;/<span class="name">Alias</span>&gt;</span> <span class="comment">&lt;!--Alias为Host指定的主机名定义主机别名--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">	常用属性说明：</span></span><br><span class="line"><span class="comment">    className：实现host容器的类，该类必须实现org.apache.catalina.Host接口。不给定该属性时将采用默认的标准类org.apache.catalina.core.StandardHost。</span></span><br><span class="line"><span class="comment">    name：虚拟主机的主机名，忽略大小写(初始化时会自动转换为小写)。可以使用前缀星号通配符，如&quot;*.a.com&quot;。使用了星号前缀的虚拟主机的匹配优先级低于精确名称的虚拟主机。</span></span><br><span class="line"><span class="comment">    appBase：此Host的webapps目录，即webapp部署在此虚拟主机上时的存放目录。包括非归档的web应用程序目录和归档后的WAR文件的目录。使用相对路径时基于$CATALINA_BASE。</span></span><br><span class="line"><span class="comment">    xmlBase：部署在此虚拟主机上的context xml目录。</span></span><br><span class="line"><span class="comment">    startStopThreads：启动context容器时的并行线程数。如果使用了自动部署功能，则再次部署或更新时使用相同的线程池。</span></span><br><span class="line"><span class="comment">    autoDeploy：在Tomcat处于运行状态时放置于appBase目录中的应用程序文件是否自动进行deploy或自动更新部署状态。这等于同时开启了deployOnStartup属性和reload/redeploy webapp的功能。触发自动更新时将默认重载该webapp。默认为true。</span></span><br><span class="line"><span class="comment">    unpackWars：在执行此webapps时是否先对归档格式的WAR文件解压再运行，设置为false时则直接执行WAR文件；默认为true。设置为false时会损耗性能。</span></span><br><span class="line"><span class="comment">    workDir：该虚拟主机的工作目录。每个webapp都有自己的临时IO目录，默认该工作目录为$CATALINA_BASE/work。</span></span><br><span class="line"><span class="comment">    大多数时候都只需设置虚拟主机名称name和appBase属性即可，其余采用默认，默认时会自动部署webapp</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p>两个重要点：</p>
<ul>
<li>  domain name: 每个host必须要有一个唯一的domain name; 浏览器发过来的请求里包含有该domain name; domain name在Engine里必须是唯一的</li>
<li>  app base folder: 发布到该host里的应用的目录名；可以是相对CATALINE_BASE的相对路径，也可以是文件系统的绝对路径</li>
</ul>
<p>当host获得一个针对特定host请求时，将会在该Host环境下把请求匹配到对应的Context上；然后把请求交给这个Context来处理</p>
<h4 id="2-2-6-Context"><a href="#2-2-6-Context" class="headerlink" title="2.2.6 Context"></a>2.2.6 Context</h4><p>​    一个Context对应一个web application； 它由多个servlet组成；在创建context时，将根据conf/web.xml和webapps/${context path}/WEB-INFO/web.xml加载servlet并创建映射表</p>
<p><img src="/tomcat/index/tomcat_context.gif" alt="tomcat_context"></p>
<ul>
<li>  Document Base: 存放war或解压后的context的地方</li>
<li>  Context Path：唯一标志一个context;当没有匹配任何一个context时，默认的context将会处理该请求；默认的context的context path为空</li>
<li>  Automatic reload: 一旦监测到context有修改，则会自动重启context，只用于开发模式；</li>
</ul>
<h4 id="2-2-7-Wrapper"><a href="#2-2-7-Wrapper" class="headerlink" title="2.2.7 Wrapper"></a>2.2.7 Wrapper</h4><p>​    Wrapper是context的子元素，代表了一个Servlet（或一个jsp被编译后的servlet）；它负责加载servlet、实例化servlet、以及触发生命周期方法的调用，如init()、service()、destory()；另外wrapper也负责调用与servlet相关的Filter。</p>
<p><img src="/tomcat/index/tomcat_wrapper.gif" alt="tomcat_context"></p>
<h4 id="2-2-8-嵌套组件"><a href="#2-2-8-嵌套组件" class="headerlink" title="2.2.8  嵌套组件"></a>2.2.8  嵌套组件</h4><ol>
<li><p><strong>Excutor</strong>: 执行器，供 Connector 使用的线程池，可配置多个</p>
<p> cnnector自建，executer共享<br> 执行器定义tomcat各组件之间共享的线程池。在以前，每个connector都会独自创建自己的线程池，但现在，可以定义一个线程池，各组件都可以共享该线程池，不过主要是为各connector之间提供共享。注意，executor创建的是共享线程池，如果某个connector不引用executor创建的线程池，那么该connector仍会根据自己指定的属性创建它们自己的线程池。<br> 连接器必须要实现org.apache.catalina.Executor接口（server的classname，必须实现的接口）。它是一个嵌套在service组件中的元素，为了挑选所使用的connector，该元素还必须定义在connector元素之前。</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Executor</span> <span class="attr">name</span>=<span class="string">&quot;tomcatThreadPool&quot;</span> <span class="attr">namePrefix</span>=<span class="string">&quot;catalina-exec-&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">minSpareThreads</span>=<span class="string">&quot;4&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">	className（默认）：用于实现此组件的java类的名称，这个类必须实现接口org.apache.catalina.Executor。不			给定该属性时将采用默认的标准类org.apache.catalina.core.StandardThreadExecutor；</span></span><br><span class="line"><span class="comment">	name：该线程池的名称，其他组件需要使用该名称引用该线程池。 </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment">标准类的属性包括：</span></span><br><span class="line"><span class="comment">threadPriority：线程优先级，默认值为5。</span></span><br><span class="line"><span class="comment">daemon：线程是否以daemon的方式运行，默认值为true。</span></span><br><span class="line"><span class="comment">namePrefix：执行器创建每个线程时的名称前缀，最终线程的名称为:namePrefix+threadNumber。</span></span><br><span class="line"><span class="comment">maxThreads：线程池激活的最大线程数量。默认值为200。</span></span><br><span class="line"><span class="comment">minSpareThreads：线程池中最少空闲的线程数量。默认值为25。</span></span><br><span class="line"><span class="comment">maxIdleTime：在空闲线程关闭前的毫秒数。除非激活的线程数量小于或等于minSpareThreads的值，否则会有空闲线程的出现。默认值为60000ms，即空闲线程需要保留1分钟的空闲时间才被杀掉。</span></span><br><span class="line"><span class="comment">maxQueueSize：可执行任务的最大队列数，达到队列上限时的连接请求将被拒绝。</span></span><br><span class="line"><span class="comment">prestartminSpareThreads：在启动executor时是否立即创建minSpareThreads个线程数，默认为false，即在需要时才创建线程。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<p> <strong>connector中指定所使用的线程</strong></p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">executor</span>=<span class="string">&quot;tomcatThreadPool&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li>
</ol>
<ol start="2">
<li><p> <strong>Manager</strong>： 会话管理器：用于实现http会话管理的功能。</p>
</li>
<li><p> <strong>Loader</strong>： 类加载器</p>
</li>
<li><p> <strong>Valve</strong>： 阀门，Tomcat组件层面的过滤器</p>
</li>
<li><p> <strong>Resource</strong>：资源路径：配置 web 程序的资源信息，如数据库连接信息。</p>
</li>
<li><p> <strong>Realm</strong>：领域：用于用户的认证和授权。</p>
</li>
<li><p> <strong>Listener</strong>：监听器：监听已注册组件的生命周期。</p>
</li>
<li><p> <strong>Cluster</strong>： 集群：专用于配置 Tomcat 集群的元素。</p>
</li>
</ol>
<h4 id="2-2-8-container"><a href="#2-2-8-container" class="headerlink" title="2.2.8 container"></a>2.2.8 container</h4><p>​    container不是tomcat的组件，它是一个概念，统称；包含Engine、host、context、wrapper</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">Container(容器:包括以下所有组件)</span><br><span class="line"><span class="comment">----Engine（分发用户请求）</span></span><br><span class="line"><span class="comment">--------Host（主机）</span></span><br><span class="line"><span class="comment">----------------Context（应用）</span></span><br><span class="line"><span class="comment">--------------------Wrapper（Servlet）</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-9-Server-xml"><a href="#2-2-9-Server-xml" class="headerlink" title="2.2.9 Server.xml"></a>2.2.9 Server.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.startup.VersionLoggerListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> <span class="attr">SSLEngine</span>=<span class="string">&quot;on&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Listener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">&quot;UserDatabase&quot;</span> <span class="attr">auth</span>=<span class="string">&quot;Container&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">description</span>=<span class="string">&quot;User database that can be updated and saved&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">factory</span>=<span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">pathname</span>=<span class="string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">Realm</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">resourceName</span>=<span class="string">&quot;UserDatabase&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Realm</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">        <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="attr">directory</span>=<span class="string">&quot;logs&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">prefix</span>=<span class="string">&quot;localhost_access_log&quot;</span> <span class="attr">suffix</span>=<span class="string">&quot;.txt&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">pattern</span>=<span class="string">&quot;%h %l %u %t <span class="symbol">&amp;quot;</span>%r<span class="symbol">&amp;quot;</span> %s %b&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="2-2-Tomcat请求处理过程"><a href="#2-2-Tomcat请求处理过程" class="headerlink" title="2.2 Tomcat请求处理过程"></a>2.2 Tomcat请求处理过程</h3><p>接收到用户HTTP请求： <a href="http://localhost:8080/app/login/auth1">http://localhost:8080/app/login/auth1</a></p>
<ul>
<li>  请求被发送到本机端后8080，被在那里侦听的coyote HTTP/1.1 Connector获得</li>
<li>  Connector把该请求交给它所在得service得Engine来处理，并等待engine得回应</li>
<li>  Engine获得请求localhost/app/login/auth1，匹配它所拥有得所有虚拟主机host</li>
<li>  Engine获得请求到名为localhost得host（即使匹配不到也把请求交给该host处理，因为该host被定义为该Engine得默认主机）</li>
<li>  名字为localhost的host主机获的请求/app/login/auth1，匹配它所拥有的所有context</li>
<li>  host匹配到路径为/app的context(如果匹配不到就把该请求交给路径名为“” 的context去处理)</li>
<li>  path=“/app”的context获得请求/login/auth1，在它的mapping table中寻找对应的servlet</li>
<li>  Context匹配到URL PATTERN为/auth1的servlet，对应于servlet类</li>
<li>  构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用Servlet的doGet或者doPost方法</li>
<li>  Context把执行完了的HttpServletResponse对象发回给host</li>
<li>  Host把HttpServletResponse对象返回给Engine</li>
<li>  Engine把HttpServletResponse对象返回给Connnector</li>
<li>  Connector把HttpServletResponse对象返回给客户brower</li>
</ul>
<h2 id="3-Servlet规范"><a href="#3-Servlet规范" class="headerlink" title="3. Servlet规范"></a>3. Servlet规范</h2><p>Java想要进行Web服务功能提供</p>
<ul>
<li><p>当Http服务器接收请求后，如何知道调用哪些java类来处理请求呢？</p>
<p>  有些类可能就是用来封装变量的，有些类才是用来处理请求的。为了识别出那些具有处理请求的类，定义了一个接口，这个接口就叫Servlet接口，如果想要让业务类具备处理请求的能力，都必须实现这个接口，实现了接口的业务类叫做Servlet。</p>
</li>
<li><p>对于特定的请求，Http服务器如何知道由哪个Servlet来处理？Servlet又是由谁来实例化呢</p>
<p>  于是又有了Servlet容器。Http服务器把请求交给Servlet容器去处理，Servlet容器会将请求转发到具体的Servlet,如果这个Servlet还没创建，就加载并实例化这个Servlet，然后调用这个Servlet的接口方法。</p>
</li>
</ul>
<p>Http服务器不直接调用业务类，而是把请求交给容器来处理，容器通过Servlet接口调用业务类。因此Servlet接口和Servlet容器的出现，使Http服务器和业务类解耦。</p>
<p>Servlet规范：Servlet接口 + Servlet容器。</p>
<p>Tomcat按照Servlet规范的要求实现了Servlet容器，同时它也具有Http服务器的功能。（如果我们要实现新的业务功能，只需要实现一个Servlet，然后把它注册到Tomcat(Servlet容器)中，剩下的事情由Tomcat帮我们来处理）。</p>
<p><img src="/tomcat/index/tomcat.png" alt="tomcat"></p>
<h3 id="3-1-Servlet接口定义了五个方法"><a href="#3-1-Servlet接口定义了五个方法" class="headerlink" title="3.1 Servlet接口定义了五个方法"></a>3.1 Servlet接口定义了五个方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res）<span class="keyword">throws</span> ServletException, IOException;</span></span></span><br><span class="line"><span class="params"><span class="function">    </span></span></span><br><span class="line"><span class="params"><span class="function">    String getServletInfo()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>  init(ServletConfig config)：</li>
</ul>
<p>和生命周期有关的方法，Servlet容器在加载Servlet类的时候会调用init方法。可能会在init方法里初始化一些资源。比如Springmvc中的DispatcherServlet,在init方法中创建了自己的spring容器。</p>
<ul>
<li><p>ServletConfig getServletConfig()：</p>
<p>  ServletConfig就是封装Servlet的初始化参数。可以在web.xml给Servlet配置参数，然后在程序中通过getServletConfig方法拿到这些参数。</p>
</li>
<li><p>service(ServletRequest req, ServletResponse res)</p>
<p>  业务类在这个方法里实现处理逻辑。ServletRequest用来封装请求信息，ServletResponse用来封装响应信息。本质上这两个类是对通信协议的封装。Http协议中的请求和响应就是对应了HttpServletRequest和HttpServletResponse这两个类。我们可以通过HttpServletRequest来获取所有请求相关的信息，包括请求路径，Cookie，Http头，请求参数等。</p>
</li>
<li><p>   String getServletInfo()</p>
</li>
<li><p>  destroy()： 和生命周期有关的方法，Servlet容器在卸载Servlet类的时候会调用destory方法。在destory方法里释放这些资源。</p>
</li>
</ul>
<h2 id="4-Servlet容器"><a href="#4-Servlet容器" class="headerlink" title="4. Servlet容器"></a>4. Servlet容器</h2><h3 id="4-1-Servlet容器工作流程"><a href="#4-1-Servlet容器工作流程" class="headerlink" title="4.1 Servlet容器工作流程"></a>4.1 Servlet容器工作流程</h3><p>​    当客户请求某一个资源时，Http服务器会用一个ServletRequest对象把客户的请求信息封装起来，然后调用Servlet容器的service方法，Servlet容器拿到请求后，根据请求的URL和Servlet的映射关系，找到相应的Servlet，如果Servlet还没有被加载，就用反射机制创建这个Servlet，并调用Servlet的init方法来完成初始化，接着调用Servlet的service方法来处理请求，把ServletResponse对象返回给Http服务器，Http服务器会把响应发送给客户端。</p>
<p><img src="/tomcat/index/tomcat2.png" alt="."></p>
<h3 id="4-2-Web应用"><a href="#4-2-Web应用" class="headerlink" title="4.2 Web应用"></a>4.2 Web应用</h3><h4 id="4-2-1-Servlet注册"><a href="#4-2-1-Servlet注册" class="headerlink" title="4.2.1 Servlet注册"></a>4.2.1 Servlet注册</h4><ul>
<li><p>Servlet容器负责实例化和调用Servlet，那么Servlet是怎么注册到Servlet容器的呢？</p>
<p>  我们一般以Web应用程序的方式来部署Servlet的。根据Servlet规范，Web应用程序有一定的目录结构：</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">| -  MyWebApp</span><br><span class="line">      | -  WEB-INF/web.xml        -- 配置文件，用来配置 Servlet 等</span><br><span class="line">      | -  WEB-INF/lib/           -- 存放 Web 应用所需各种 JAR 包</span><br><span class="line">      | -  WEB-INF/classes/       -- 存放你的应用类，比如 Servlet 类</span><br><span class="line">      | -  META-INF/              -- 目录存放工程的一些信息</span><br></pre></td></tr></table></figure>

<p>在这个目录下分别放置了Servlet的类文件，配置文件，静态资源文件，Servlet容器通过读取配置文件，就可以找到并加载Servlet。</p>
<h4 id="4-2-2-ServletContext"><a href="#4-2-2-ServletContext" class="headerlink" title="4.2.2 ServletContext"></a>4.2.2 ServletContext</h4><p>Servlet规范中定义了ServletContext这个接口来对应一个Web应用</p>
<p>Web应用部署好以后，Servlet容器在启动时会加载Web应用，并为每个Web应用创建唯一的ServletContext对象。你可以把ServletContext看成是一个全局对象，一个Web应用可能有多个Servlet，这些Servlet可以通过全局的ServletContext来共享数据，这些数据包括Web应用的初始化参数，Web应用目录下的文件资源等。因为ServletContext持有所有Servlet实例，还可以通过它来实现Servlet请求的转发。</p>
<h4 id="4-2-3-扩展机制：Filter和Listener"><a href="#4-2-3-扩展机制：Filter和Listener" class="headerlink" title="4.2.3 扩展机制：Filter和Listener"></a>4.2.3 扩展机制：Filter和Listener</h4><ul>
<li><p><strong>Filter</strong>：过滤器，这个接口允许对请求和响应做一些统一的定制化处理，比如可以根据请求的频率来限制访问，根据国家地区的不同来修改响应的内容。</p>
<p>  过滤器原理：Web应用部署完以后，Servlet容器需要实例化Filter并把Filter链接成一个FilterChain。当请求进来时，获取第一个Filter并调用doFilter方法，    doFilter方法负责调用　FilterChain的下一个Filter。</p>
</li>
<li><p>  <strong>Listener</strong>：监听器，当Web应用在Servlet容器中运行时，Servlet容器内部会不断发生各种事件，比如Web应用的启动和停止，用户请求到达等。Servlet容器提供了一些默认的监听器来监听这些事件，当事件发生时，Servlet容器会负责调用监听器的方法。自定义监听器需要把监听器配置在web.xml中。比如：Spring就实现了自己的监听器，用来监听ServletContext的启动事件，目的是当Servlet容器启动时，创建并初始化全局的Spring容器。</p>
</li>
</ul>
<h2 id="5-各种容器"><a href="#5-各种容器" class="headerlink" title="5. 各种容器"></a>5. 各种容器</h2><ol>
<li><p> Tomcat在启动时给每个Web应用创建一个全局的上下文环境，这个上下文就是ServletContext，为后面的Spring容器提供宿主环境。</p>
</li>
<li><p> Tomcat在启动过程中触发容器初始化事件，Spring的ContextLoaderListener会监听到这个事件，它的contextInitialized方法会被调用，然后Spring会初始化全局的Spring根容器，这个就是Spring的Ioc容器，Ioc容器初始化完毕后，Spring将其存储到ServletContext中，便于以后获取。</p>
</li>
<li><p> Tomcat启动时还会扫描Servlet，一个Web应用中的Servlet可以有多个，以SpringMvc中的DispatcherServet为例，这个Servlet实际上是一个标准的前端控制器，用来转发，匹配，处理每个Servlet请求。</p>
</li>
<li><p> Servlet一般会延迟加载，当第一个请求到达时，Tomcat发现DispatcherServet还没有被实例化，就调用DispatcherServet的init方法，DispatcherServet在初始化的时候会建立自己的容器，叫做SpringMvc容器，用来持有SpringMvc相关的Bean。同时，SpringMvc还会通过ServletContext拿到Spring根容器，并把Spring根容器设置为SpringMvc容器的父容器，Spring容器可以访问父容器中的Bean，但是父容器不能访问子容器中的Bean（Spring容器不能访问SpringMvc容器里的Bean —&gt;Controller里可以访问Service对象，但是在Service里不可以访问Controller对象）。</p>
</li>
</ol>
<p><img src="/tomcat/index/tomcat3.png" alt="tomcat3"></p>
<p>web容器中有servlet容器，spring项目部署后存在spring容器和springmvc容器。其中spring控制service层和dao层的bean对象。springmvc容器控制controller层bean对象。servlet容器控制servlet对象。项目启动是，首先 servlet初始化，初始化过程中通过web.xml中spring的配置加载spring配置，初始化spring容器和springmvc容器。待容器加载完成。servlet初始化完成，则完成启动。<br>HTTP请求到达web容器后，会到达Servlet容器，容器通过分发器分发到具体的spring的Controller层。执行业务操作后返回结果。</p>
]]></content>
      <categories>
        <category>13 开源组件</category>
      </categories>
      <tags>
        <tag>Apache</tag>
      </tags>
  </entry>
  <entry>
    <title>分库分表之 ShardingSphere-JDBC</title>
    <url>/sharding-jdbc/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h2 id="1-动态数据源解决方案"><a href="#1-动态数据源解决方案" class="headerlink" title="1. 动态数据源解决方案"></a><span class="tit-h2">1. 动态数据源解决方案</span></h2><p>随着业务数据量逐渐增大，带来存储的瓶颈以及查询瓶颈，我们可以将数据存放到多个数据服务中，以达到减轻数据库压力，缩短数据库操作时间；<br>目前关于动态数据源的解决方案大致包含以下5种，今天主要是学习一下Sharding-jdbc；<br><img src="/sharding-jdbc/index/0.png"></p>
<p>关于Mycat请查看 <a href="https://xiaoyuge.work/mycat/">mycat学习</a> 这篇博客。</p>
<h2 id="2-ShardingSphere简介"><a href="#2-ShardingSphere简介" class="headerlink" title="2. ShardingSphere简介"></a><span class="tit-h2">2. ShardingSphere简介</span></h2><ol>
<li> 2018年5月，<code>sharding-jdbc</code>更名为<code>ShardingSphere</code></li>
<li> 2018年11月，<code>Sharding-sphere</code>正式进入Apache基金会孵化器</li>
<li> 2020年4月，从Apache孵化器毕业，成为Apache顶级项目<code>Apache ShardingSphere</code></li>
</ol>
<p><code>ShardingSphere</code>目前的定位已远超过人们熟知的<code>分库分表</code>的功能了，其拥有自己的⼀套开源的分布式数据库中间件解决⽅案组成的⽣态圈（<strong>ShardingSphere-JDBC</strong>、<strong>ShardingSphere-Proxy</strong>，<strong>ShardingSphere-sidecar</strong>（计划中））<br>他们均提供标准化的数据分片、分布式事务和数据库治理功能，可适用于如Java同构、异构语言、容器、云原生等各种多样化的应用场景</p>
<p>官网地址：<a href="https://shardingsphere.apache.org/document/current/cn/overview/">https://shardingsphere.apache.org/document/current/cn/overview/</a></p>
<h3 id="2-1-Apache-ShardingSphere"><a href="#2-1-Apache-ShardingSphere" class="headerlink" title="2.1 Apache ShardingSphere"></a>2.1 Apache ShardingSphere</h3><ol>
<li>官方定义：<code>Apache ShardingSphere</code> 是一套开源的分布式数据库增强计算引擎，其通过可插拔架构构建基于数据库之上的生态系统，实现包括数据分片、弹性伸缩、加密脱敏等功能为代表的增强能力</li>
<li>定位Apache ShardingSphere 产品定位为<code>Database Plus</code>，旨在构建异构数据库上层的标准和生态。 它关注如何充分合理地利用数据库的计算和存储能力，而并非实现一个全新的数据库<br><img src="/sharding-jdbc/index/1.png"></li>
</ol>
<h3 id="2-2-ShardingSphere-JDBC"><a href="#2-2-ShardingSphere-JDBC" class="headerlink" title="2.2 ShardingSphere-JDBC"></a>2.2 ShardingSphere-JDBC</h3><p>定位于轻量级Java框架，在Java的jdbc层提供的额外服务， <code>ShardingSphere-jdbc</code>的主要功能在客户端尽心数据分片和读写分离，通过sharding-jdbc,应用可以使用jdbc访问已经读写分离的多个数据源，而不用关心数据库数量和数据的分布；</p>
<p><em>可以理解为增强版JDBC驱动，完全兼容JDBC和各种ORM框架</em></p>
<ol>
<li>使用于任何给予Java的ORM框架，如：<code>JPA</code>、<code>hibernate</code>、<code>mybatis</code>、<code>Spring JDBC Template</code>或直接使用JDBC</li>
<li>基于任何第三方的数据库连接池，如：<code>DBCP</code>、<code>C3P0</code>、<code>BoneCP</code>、<code>Druid</code>、<code>HikariCP</code>等</li>
<li>支持任意实现JDBC规范的数据库，如<code>Mysql</code>、<code>Oracle</code>、<code>SQLServer</code>、<code>PostgreSQL</code><br><img src="/sharding-jdbc/index/2.png"></li>
</ol>
<p>源码：<a href="https://github.com/apache/shardingsphere/tree/master/shardingsphere-jdbc">https://github.com/apache/shardingsphere/tree/master/shardingsphere-jdbc</a></p>
<h3 id="2-3-ShardingSphere-Proxy"><a href="#2-3-ShardingSphere-Proxy" class="headerlink" title="2.3 ShardingSphere-Proxy"></a>2.3 ShardingSphere-Proxy</h3><p>定位为透明化的数据库代理端，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前提供 MySQL 和 PostgreSQL（兼容 openGauss 等基于 PostgreSQL 的数据库）版本，它可以使用任何兼容 MySQL/PostgreSQL 协议的访问客户端（如：MySQL Command Client, MySQL Workbench, Navicat 等）操作数据，对 DBA 更加友好</p>
<ol>
<li>向应用程序完全透明，可直接当做 MySQL/PostgreSQL 使用；</li>
<li>适用于任何兼容 MySQL/PostgreSQL 协议的的客户端。</li>
</ol>
<p><img src="/sharding-jdbc/index/3.png"></p>
<p>源码：<a href="https://github.com/apache/shardingsphere/tree/master/shardingsphere-proxy">https://github.com/apache/shardingsphere/tree/master/shardingsphere-proxy</a></p>
<h3 id="2-4-ShardingSphere-sidecar（TODO）"><a href="#2-4-ShardingSphere-sidecar（TODO）" class="headerlink" title="2.4 ShardingSphere-sidecar（TODO）"></a>2.4 ShardingSphere-sidecar（TODO）</h3><p>定位为 Kubernetes 的云原生数据库代理，以 Sidecar 的形式代理所有对数据库的访问。 通过无中心、零侵入的方案提供与数据库交互的啮合层，即 Database Mesh，又可称数据库网格。<br><img src="/sharding-jdbc/index/4.png"></p>
<h2 id="3-分片的核心概念"><a href="#3-分片的核心概念" class="headerlink" title="3. 分片的核心概念"></a><span class="tit-h2">3. 分片的核心概念</span></h2><ol>
<li><p>主要概念<br> 由原来的一个数据库(表)拆分为真实存在的三个数据库(表)<br> <img src="/sharding-jdbc/index/5.png"><br> 逻辑表会在 SQL 解析和路由时被替换成真实的表名，分片键就是拆分的逻辑；sharding-jdbc可以选择多个分片键；</p>
</li>
<li><p>动态表</p>
<p> 表名会变化，比如订单表，按照月份进行分表<br> <img src="/sharding-jdbc/index/6.png"></p>
</li>
<li><p>绑定表</p>
<p> 与Mycat的ER表对应，存在关联关系的两张表，他们的分片规则必须相同<br> <img src="/sharding-jdbc/index/7.png"></p>
</li>
<li><p>广播表</p>
<p> 与Mycat的全局表对应，所有节点的数据内容一致<br><img src="/sharding-jdbc/index/8.png"></p>
</li>
</ol>
<h2 id="4-Sharding-JDBC-Demo演示"><a href="#4-Sharding-JDBC-Demo演示" class="headerlink" title="4. Sharding-JDBC Demo演示"></a><span class="tit-h2">4. Sharding-JDBC Demo演示</span></h2><p><code>Apache ShardingSphere-JDBC</code> 可以通过 <strong>Java</strong>，<strong>YAML</strong>，<strong>Spring 命名空间</strong> 和 <strong>Spring Boot Starter</strong> 这 4 种方式进行配置，开发者可根据场景选择适合的配置方式。</p>
<p>目前仅支持<code>Java</code>语言且java JRE 8或更高版本</p>
<p>下面使用SSM框架来集成<code>shardingsphere-jdbc</code>，操作数据库，由于资源有限，在一个数据库<code>instance</code>里面创建两个数据库db0、db1来模拟分库分表；</p>
<ol>
<li><p>创建数据库<code>db0</code>,<code>db1</code>，以及创建下面的数据表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 用户表</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `user_info` (</span><br><span class="line">     `user_id` <span class="type">bigint</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `user_name` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `account` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `password` <span class="type">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (`user_id`)</span><br><span class="line"> ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- 订单表</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order` (</span><br><span class="line">     `order_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (`order_id`)</span><br><span class="line"> ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 订单明细表</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_order_item` (</span><br><span class="line">     `item_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `order_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `user_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (`item_id`)</span><br><span class="line"> ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- 参数配置表</span></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `t_config` (</span><br><span class="line">     `config_id` <span class="type">int</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">     `para_name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `para_value` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     `para_desc` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY (`config_id`)</span><br><span class="line"> ) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">truncate</span> <span class="keyword">table</span> user_info;</span><br><span class="line"> <span class="keyword">truncate</span> <span class="keyword">table</span> t_order;</span><br><span class="line"> <span class="keyword">truncate</span> <span class="keyword">table</span> t_order_item;</span><br><span class="line"> <span class="keyword">truncate</span> <span class="keyword">table</span> t_config;</span><br></pre></td></tr></table></figure></li>
<li><p><span id="index1">创建项目并引入依赖</span></p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.shardingsphere/shardingsphere-jdbc-core --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shardingsphere-jdbc-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sharding-jdbc-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>使用<code>mybatisPlus</code>逆向工程生成<code>entity</code>、<code>mapper</code>、<code>service</code>等相关代码，这里就不贴业务代码了。</p>
</li>
<li><p>编辑<code>application.yml</code></p>
 <figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis-config.xml</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">shardingsphere:</span></span><br><span class="line">    <span class="attr">props:</span></span><br><span class="line">      <span class="attr">sql:</span></span><br><span class="line">        <span class="attr">show:</span> <span class="literal">true</span>    <span class="comment">#打印sql语句</span></span><br><span class="line">    <span class="attr">datasource:</span>     <span class="comment">#数据源配置</span></span><br><span class="line">      <span class="attr">names:</span> <span class="string">db0,db1</span></span><br><span class="line">      <span class="attr">db0:</span>    <span class="comment">#数据源1</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db1?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">xiaoyuge</span></span><br><span class="line">      <span class="attr">db1:</span>   <span class="comment">#数据源2</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">        <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/db1?serverTimezone=UTC&amp;useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8</span></span><br><span class="line">        <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">        <span class="attr">password:</span> <span class="string">xiaoyuge</span></span><br><span class="line">    <span class="attr">sharding:</span>     <span class="comment">#分片</span></span><br><span class="line">      <span class="attr">default-database-strategy:</span>    <span class="comment">#数据库分片策略</span></span><br><span class="line">        <span class="attr">inline:</span></span><br><span class="line">          <span class="attr">sharding-column:</span> <span class="string">user_id</span>    <span class="comment">#分片键</span></span><br><span class="line">          <span class="attr">algorithm-expression:</span> <span class="string">db$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span>    <span class="comment">#分片算法</span></span><br><span class="line">      <span class="attr">tables:</span>     <span class="comment">#表分片策略</span></span><br><span class="line">        <span class="attr">user_info:</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">db$-&gt;&#123;0..1&#125;.user_info</span>      <span class="comment">#真实存储数据的节点，可以使用行内表达式,$-&gt;&#123;&#125; 是标准语法</span></span><br><span class="line">          <span class="attr">databaseStrategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">shardingColumn:</span> <span class="string">user_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">db$&#123;user_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span>  <span class="comment">#分片算法</span></span><br><span class="line">          <span class="attr">key-generator:</span></span><br><span class="line">            <span class="attr">column:</span> <span class="string">user_id</span></span><br><span class="line">            <span class="attr">type:</span> <span class="string">SNOWFLAKE</span>     <span class="comment">#主键策略：SNOWFLAKE 、 UUID，如果设置了主键策略，那么插入的时候就不用指定主键的值</span></span><br><span class="line">        <span class="attr">t_order:</span></span><br><span class="line">          <span class="attr">databaseStrategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">shardingColumn:</span> <span class="string">order_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">db$&#123;order_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span> <span class="comment">#分片算法</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">db$-&gt;&#123;0..1&#125;.t_order</span></span><br><span class="line">        <span class="attr">t_order_item:</span></span><br><span class="line">          <span class="attr">databaseStrategy:</span></span><br><span class="line">            <span class="attr">inline:</span></span><br><span class="line">              <span class="attr">shardingColumn:</span> <span class="string">order_id</span></span><br><span class="line">              <span class="attr">algorithm-expression:</span> <span class="string">db$&#123;order_id</span> <span class="string">%</span> <span class="number">2</span><span class="string">&#125;</span>   <span class="comment">#分片算法</span></span><br><span class="line">          <span class="attr">actual-data-nodes:</span> <span class="string">db$-&gt;&#123;0..1&#125;.t_order_item</span></span><br><span class="line">      <span class="string">binding-tables[0]:</span> <span class="string">t_order,t_order_item</span>    <span class="comment">#绑定表配置</span></span><br><span class="line">      <span class="attr">broadcast-tables:</span> <span class="string">t_config</span>      <span class="comment">#广播表配置</span></span><br></pre></td></tr></table></figure></li>
<li><p>测试简单分库user_info</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.ygb.entity.UserInfo;</span><br><span class="line"><span class="keyword">import</span> com.ygb.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@MapperScan(basePackages = &quot;com.ygb.mapper&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserShardingTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//随机生成100条数据,插入到数据库中</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">            UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">            userInfo.setAccount(<span class="string">&quot;account&quot;</span> + i);</span><br><span class="line">            userInfo.setPassword(<span class="string">&quot;password&quot;</span> + i);</span><br><span class="line">            userInfo.setUserName(<span class="string">&quot;name&quot;</span> + i);</span><br><span class="line">            userInfo.setUserId(i);</span><br><span class="line">            userService.insert(userInfo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">select</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserInfo userInfo1 = userService.getUserInfoByUserId(<span class="number">1L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------userInfo1:&quot;</span> + userInfo1);</span><br><span class="line"></span><br><span class="line">        UserInfo userInfo2 = userService.getUserInfoByUserId(<span class="number">2L</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;------userInfo2:&quot;</span> + userInfo2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol>
<li><p>执行 <code>insert</code>方法后，结果如下图所示:<br> <img src="/sharding-jdbc/index/9.png"></p>
<p> 根据上面<code>yaml</code>配置<code>user_info</code>表按照分片键(<code>sharding-column</code>)<code>user_id</code>取模分片到不同数据库;<code>user_id</code> % 2 为偶数落下<code>db0</code>, 奇数落在<code>db1</code></p>
</li>
<li><p>执行 <code>select</code> 方法，查询user_id为1 的数据，可以看到逻辑sql语句以及真实的sql语句路由到哪个节点上。<br><img src="/sharding-jdbc/index/10.png"><br>同理，查询user_id 为 2 的数据，根据表的分库规则，user_id % 2 == 0数据落在db0节点上；</p>
</li>
</ol>
</li>
<li><p>测试绑定表t_order,t_order_item</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        <span class="comment">//订单表</span></span><br><span class="line">        Order order = <span class="keyword">new</span> Order();</span><br><span class="line">        order.setOrderId(i);</span><br><span class="line">        order.setUserId(i);</span><br><span class="line">        orderService.insert(order);</span><br><span class="line">        <span class="comment">//订单明细表</span></span><br><span class="line">        OrderItem orderItem = <span class="keyword">new</span> OrderItem();</span><br><span class="line">        orderItem.setItemId(i);</span><br><span class="line">        orderItem.setOrderId(i);</span><br><span class="line">        orderItem.setUserId(i);</span><br><span class="line">        orderItemService.insert(orderItem);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行<code>insert</code>方法后，数据库表结果如下图所示：<br> <img src="/sharding-jdbc/index/11.png"><br> <code>t_order</code>表和<code>t_order_item</code> 使用相同的分片规则<code>db$&#123;order_id % 2&#125;</code>,相同的<code>order_id</code>分布在同一个节点上；</p>
</li>
</ol>
<ol start="7">
<li>测试广播表t_config <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.setConfigId(i);</span><br><span class="line">        config.setParaName(<span class="string">&quot;name&quot;</span>+i);</span><br><span class="line">        config.setParaValue(<span class="string">&quot;value&quot;</span>+i);</span><br><span class="line">        config.setParaDesc(<span class="string">&quot;desc&quot;</span>+i);</span><br><span class="line">        configService.insert(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
执行<code>insert</code>方法后，查看执行日志，可以看到它向<code>db0</code>、<code>db1</code>两个节点分别发送了插入语句；<br> <img src="/sharding-jdbc/index/12.png"><br> <img src="/sharding-jdbc/index/13.png"></li>
</ol>
<h2 id="5-ShardingSphere分库分表原理剖析"><a href="#5-ShardingSphere分库分表原理剖析" class="headerlink" title="5. ShardingSphere分库分表原理剖析"></a><span class="tit-h2">5. ShardingSphere分库分表原理剖析</span></h2><p>基于上面的测试代码来分析ShardingSphere分库分表原理；</p>
<h3 id="5-1-ShardingSphere-JDBC工作流程"><a href="#5-1-ShardingSphere-JDBC工作流程" class="headerlink" title="5.1 ShardingSphere-JDBC工作流程"></a>5.1 ShardingSphere-JDBC工作流程</h3><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">SQL 解析(解析引擎) =&gt; 执行器优化 =&gt; SQL 路由(路由引擎) =&gt; SQL 改写(改写引擎) =&gt; SQL 执行(执行引擎) =&gt; 结果归并(归并引擎)</span><br></pre></td></tr></table></figure>
<ol>
<li>SQL解析 <code>SQL</code> 解析主要是词法和语法的解析。目前常见的 <code>SQL</code> 解析器主要有<code>fdb</code>，<code>jsqlparser</code> 和 <code>Druid</code>。<code>Sharding-JDBC1.4.x</code>之前的版本使用<code>Druid</code>作为<code>SQL</code>解析器。从 1.5.x 版本 开始，<code>Sharding-JDBC</code>采用完全自研的<code>SQL</code>解析引擎</li>
</ol>
<ol start="2">
<li>SQL 路由<br> <img src="/sharding-jdbc/index/21.png"><br> SQL 路由是根据分片规则配置以及解析上下文中的分片条件，将 SQL 定位至真正的 数据源。它又分为直接路由、标准路由和笛卡尔积路由<ul>
<li>直接路由: 使用 Hint 方式。</li>
<li>标准路由：Binding 表是指使用同样的分片键和分片规则的一组表，也就是说任何情况下， Binding 表的分片结果应与主表一致。例如：order 表和 order_item 表，都根据 order_id 分片，结果应是 order_1 与 order_item_1 成对出现。这样的关联查询和单表查询复杂度 和性能相当。如果分片条件不是等于，而是 BETWEEN 或 IN，则路由结果不一定落入单 库（表），因此一条逻辑 SQL 最终可能拆分为多条 SQL 语句。</li>
<li>笛卡尔积路由：笛卡尔积查询最为复杂，因为无法根据 Binding 关系定位分片规则的一致性，所以 非 Binding 表的关联查询需要拆解为笛卡尔积组合执行。查询性能较低，而且数据库连 接数较高，需谨慎使用。</li>
</ul>
</li>
</ol>
<ol start="3">
<li><p>SQL改写</p>
<p> 将逻辑表名称改成真实表名称，优化分页查询等</p>
</li>
<li><p>SQL执行</p>
<p> 因为可能链接到多个真实数据源， Sharding -JDBC 将采用多线程并发执行 SQL</p>
</li>
<li><p>SQL归并</p>
<p> 如数据的组装、分页、排序等等。</p>
</li>
</ol>
<p>下面我跟着源码学习一下完整的执行过程。</p>
<h3 id="5-2-配置加载过程"><a href="#5-2-配置加载过程" class="headerlink" title="5.2 配置加载过程"></a>5.2 配置加载过程</h3><p>首先由于我们引入sharding-jdbc-spring-boot-starter依赖，在依赖包中可以看到shardingSphere支持springboot,那么它肯定会有一个类似于SpringBoot自动装配类 <code>SpringBootConfiguration</code>这样的配置类；</p>
<p>查看一下源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring boot starter configuration.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;org.apache.shardingsphere.spring.boot.converter&quot;)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(&#123;</span></span><br><span class="line"><span class="meta">        SpringBootShardingRuleConfigurationProperties.class,</span></span><br><span class="line"><span class="meta">        SpringBootMasterSlaveRuleConfigurationProperties.class, SpringBootEncryptRuleConfigurationProperties.class,</span></span><br><span class="line"><span class="meta">        SpringBootPropertiesConfigurationProperties.class, SpringBootShadowRuleConfigurationProperties.class&#125;)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;spring.shardingsphere&quot;, name = &quot;enabled&quot;, havingValue = &quot;true&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="meta">@AutoConfigureBefore(DataSourceAutoConfiguration.class)</span> </span><br><span class="line"><span class="comment">//@AutoConfigureBefore自动装配在DataSourceAutoConfiguration装配类之前完成，也就是说Shardingsphere创建得数据源就是全局得数据源，项目只要涉及到对数据库得任何操作都会经过ShardingDataSource得这一层处理</span></span><br><span class="line"><span class="meta">@RequiredArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootConfiguration</span> <span class="keyword">implements</span> <span class="title">EnvironmentAware</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将之前配置得规则映射到此配置文件中，为创建数据源得过程提供配置信息</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpringBootShardingRuleConfigurationProperties shardingRule;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpringBootMasterSlaveRuleConfigurationProperties masterSlaveRule;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpringBootEncryptRuleConfigurationProperties encryptRule;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpringBootShadowRuleConfigurationProperties shadowRule;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SpringBootPropertiesConfigurationProperties props;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对象存放得是配置得所有数据源映射信息，为后面获取数据库连接以及数据分片提供基础能力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, DataSource&gt; dataSourceMap = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String jndiName = <span class="string">&quot;jndi-name&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上面的测试代码基于分片的 策略配置，所以只有 ShardingRuleCondition 才满足装配条件。</span></span><br><span class="line"><span class="comment">     * ShardingDataSourceFactory工厂类来创建 ShardingDataSource数据源，</span></span><br><span class="line"><span class="comment">     * Get sharding data source bean.</span></span><br><span class="line"><span class="comment">     * 条件注入不同的数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> data source bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException SQL exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional(ShardingRuleCondition.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">shardingDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="comment">//配置转换过程，</span></span><br><span class="line">        <span class="keyword">return</span> ShardingDataSourceFactory.createDataSource(dataSourceMap, <span class="keyword">new</span> ShardingRuleConfigurationYamlSwapper().swap(shardingRule), props.getProps());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get master-slave data source bean.</span></span><br><span class="line"><span class="comment">     * 条件注入不同的数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> data source bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException SQL exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional(MasterSlaveRuleCondition.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">masterSlaveDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MasterSlaveDataSourceFactory.createDataSource(dataSourceMap, <span class="keyword">new</span> MasterSlaveRuleConfigurationYamlSwapper().swap(masterSlaveRule), props.getProps());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get encrypt data source bean.</span></span><br><span class="line"><span class="comment">     *条件注入不同的数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> data source bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException SQL exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional(EncryptRuleCondition.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">encryptDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> EncryptDataSourceFactory.createDataSource(dataSourceMap.values().iterator().next(), <span class="keyword">new</span> EncryptRuleConfigurationYamlSwapper().swap(encryptRule), props.getProps());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Get shadow data source bean.</span></span><br><span class="line"><span class="comment">     * 条件注入不同的数据源</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> data source bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException SQL exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@Conditional(ShadowRuleCondition.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">shadowDataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ShadowDataSourceFactory.createDataSource(dataSourceMap, <span class="keyword">new</span> ShadowRuleConfigurationYamlSwapper().swap(shadowRule), props.getProps());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Create sharding transaction type scanner</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> sharding transaction type scanner</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShardingTransactionTypeScanner <span class="title">shardingTransactionTypeScanner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShardingTransactionTypeScanner();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">setEnvironment</span><span class="params">(<span class="keyword">final</span> Environment environment)</span> </span>&#123;</span><br><span class="line">        String prefix = <span class="string">&quot;spring.shardingsphere.datasource.&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (String each : getDataSourceNames(environment, prefix)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//遍历环境变量，将数据源保存到 dataSourceMap</span></span><br><span class="line">                dataSourceMap.put(each, getDataSource(environment, prefix, each));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> ReflectiveOperationException ex) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ShardingSphereException(<span class="string">&quot;Can&#x27;t find datasource type!&quot;</span>, ex);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> NamingException namingEx) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ShardingSphereException(<span class="string">&quot;Can&#x27;t find JNDI datasource!&quot;</span>, namingEx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//----------------------------省略------------------------------</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li><p><code>ShardingDataSourceFactory</code>工厂类创建ShardingDataSource数据源</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShardingDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractDataSourceAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ShardingRuntimeContext runtimeContext;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//初始化路由装饰器（路由引擎，SPI方式）</span></span><br><span class="line">        NewInstanceServiceLoader.register(RouteDecorator.class);</span><br><span class="line">        <span class="comment">//创建SQL改写上下文装饰器（改写引擎，SPI方式）</span></span><br><span class="line">        NewInstanceServiceLoader.register(SQLRewriteContextDecorator.class);</span><br><span class="line">        <span class="comment">// 创建结果处理引擎（归并引擎，用于对查询结果合并处理，同上）</span></span><br><span class="line">        NewInstanceServiceLoader.register(ResultProcessEngine.class);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShardingDataSource</span><span class="params">(Map&lt;String, DataSource&gt; dataSourceMap, ShardingRule shardingRule, Properties props)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dataSourceMap);</span><br><span class="line">        <span class="keyword">this</span>.checkDataSourceType(dataSourceMap);</span><br><span class="line">        <span class="comment">//创建运行时上下文（全局分片运行时上下文，用于保存分片所需得相关配置）</span></span><br><span class="line">        <span class="keyword">this</span>.runtimeContext = <span class="keyword">new</span> ShardingRuntimeContext(dataSourceMap, shardingRule, props, <span class="keyword">this</span>.getDatabaseType());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//----------------------------省略------------------------------</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>ShardingRule配置规则解析类<br>配置转换过程。会将分表规则、分库规则、分表算法、分库算法等都解析到对应得 ShardingRuleConfiguration 通用分片配置类中</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ShardingRuleConfiguration <span class="title">swap</span><span class="params">(YamlShardingRuleConfiguration yamlConfiguration)</span> </span>&#123;</span><br><span class="line">   ShardingRuleConfiguration result = <span class="keyword">new</span> ShardingRuleConfiguration();</span><br><span class="line">   Iterator var3 = yamlConfiguration.getTables().entrySet().iterator();</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">while</span>(var3.hasNext()) &#123;</span><br><span class="line">       <span class="comment">//将我们配置得分库、分表策略、分库算法、分表算法解析到TableRuleConfiguration中，每一张表都会对应一个配置类</span></span><br><span class="line">       Entry&lt;String, YamlTableRuleConfiguration&gt; entry = (Entry)var3.next();</span><br><span class="line">       YamlTableRuleConfiguration tableRuleConfig = (YamlTableRuleConfiguration)entry.getValue();</span><br><span class="line">       tableRuleConfig.setLogicTable((String)entry.getKey());</span><br><span class="line">       result.getTableRuleConfigs().add(<span class="keyword">this</span>.tableRuleConfigurationYamlSwapper.swap(tableRuleConfig));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   result.setDefaultDataSourceName(yamlConfiguration.getDefaultDataSourceName());</span><br><span class="line">   <span class="comment">//绑定表</span></span><br><span class="line">   result.getBindingTableGroups().addAll(yamlConfiguration.getBindingTables());</span><br><span class="line">   <span class="comment">//广播表</span></span><br><span class="line">   result.getBroadcastTables().addAll(yamlConfiguration.getBroadcastTables());</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">null</span> != yamlConfiguration.getDefaultDatabaseStrategy()) &#123;</span><br><span class="line">       result.setDefaultDatabaseShardingStrategyConfig(<span class="keyword">this</span>.shardingStrategyConfigurationYamlSwapper.swap(yamlConfiguration.getDefaultDatabaseStrategy()));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">null</span> != yamlConfiguration.getDefaultTableStrategy()) &#123;</span><br><span class="line">       result.setDefaultTableShardingStrategyConfig(<span class="keyword">this</span>.shardingStrategyConfigurationYamlSwapper.swap(yamlConfiguration.getDefaultTableStrategy()));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">null</span> != yamlConfiguration.getDefaultKeyGenerator()) &#123;</span><br><span class="line">       result.setDefaultKeyGeneratorConfig(<span class="keyword">this</span>.keyGeneratorConfigurationYamlSwapper.swap(yamlConfiguration.getDefaultKeyGenerator()));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   Collection&lt;MasterSlaveRuleConfiguration&gt; masterSlaveRuleConfigs = <span class="keyword">new</span> LinkedList();</span><br><span class="line">   Iterator var9 = yamlConfiguration.getMasterSlaveRules().entrySet().iterator();</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">while</span>(var9.hasNext()) &#123;</span><br><span class="line">       Entry&lt;String, YamlMasterSlaveRuleConfiguration&gt; entry = (Entry)var9.next();</span><br><span class="line">       YamlMasterSlaveRuleConfiguration each = (YamlMasterSlaveRuleConfiguration)entry.getValue();</span><br><span class="line">       each.setName((String)entry.getKey());</span><br><span class="line">       masterSlaveRuleConfigs.add(<span class="keyword">this</span>.masterSlaveRuleConfigurationYamlSwapper.swap((YamlMasterSlaveRuleConfiguration)entry.getValue()));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   result.setMasterSlaveRuleConfigs(masterSlaveRuleConfigs);</span><br><span class="line">   <span class="keyword">if</span> (<span class="keyword">null</span> != yamlConfiguration.getEncryptRule()) &#123;</span><br><span class="line">       result.setEncryptRuleConfig(<span class="keyword">this</span>.encryptRuleConfigurationYamlSwapper.swap(yamlConfiguration.getEncryptRule()));</span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SpringBootConfiguration -&gt; ShardingDataSourceFactory -&gt; ShardingRule -&gt; ShardingDataSource -&gt; ShardingRuntimeContext</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-3-分片运行时上下文创建过程"><a href="#5-3-分片运行时上下文创建过程" class="headerlink" title="5.3 分片运行时上下文创建过程"></a>5.3 分片运行时上下文创建过程</h3><p>创建数据源的时候会在构造器中将运行时上下文<code>ShardingRuntimeContext</code>一同创建出来，ShardingRuntimeContext得构造器如下图</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ShardingRuntimeContext</span> <span class="keyword">extends</span> <span class="title">MultipleDataSourcesRuntimeContext</span>&lt;<span class="title">ShardingRule</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CachedDatabaseMetaData cachedDatabaseMetaData;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ShardingTransactionManagerEngine shardingTransactionManagerEngine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShardingRuntimeContext</span><span class="params">(Map&lt;String, DataSource&gt; dataSourceMap, ShardingRule shardingRule, Properties props, DatabaseType databaseType)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(dataSourceMap, shardingRule, props, databaseType);</span><br><span class="line">        <span class="keyword">this</span>.cachedDatabaseMetaData = <span class="keyword">this</span>.createCachedDatabaseMetaData(dataSourceMap);</span><br><span class="line">        <span class="keyword">this</span>.shardingTransactionManagerEngine = <span class="keyword">new</span> ShardingTransactionManagerEngine();</span><br><span class="line">        <span class="keyword">this</span>.shardingTransactionManagerEngine.init(databaseType, dataSourceMap);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//----------------- 省略------------</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类关系图如下：<br><img src="/sharding-jdbc/index/14.png"><br>发现运行时上下文进行了抽象，分片运行时上下文继承了<code>MultipleDataSourcesRuntimeContext</code> 多数据源运行时上下文，而多数据源运行时上下文又继承了 <code>AbstractRuntimeContext</code> 抽象上下文。而创建 <code>ShardingRuntimeContext</code> 分片运行时上下文得时候会同时将分片规则保存在抽象类中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractRuntimeContext</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BaseRule</span>&gt; <span class="keyword">implements</span> <span class="title">RuntimeContext</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T rule;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ConfigurationProperties properties;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> DatabaseType databaseType;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ExecutorEngine executorEngine;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SQLParserEngine sqlParserEngine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">AbstractRuntimeContext</span><span class="params">(T rule, Properties props, DatabaseType databaseType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rule = rule;   <span class="comment">//1. 缓存整个分片规则，为后续的分片操作提供依据</span></span><br><span class="line">        <span class="keyword">this</span>.properties = <span class="keyword">new</span> ConfigurationProperties(<span class="keyword">null</span> == props ? <span class="keyword">new</span> Properties() : props);</span><br><span class="line">        <span class="keyword">this</span>.databaseType = databaseType;   <span class="comment">//2. 缓存数据库类型，用于后续执行的时候加载对应的数据库元数据</span></span><br><span class="line">        <span class="comment">//3.创建执行引擎，根据当前执行连接是否持有事物来决定是否异步执行，根据配置的executor.size 参数决定创建多少个线程的线程池，默认不配置得话，使用 cachepool，配置了就使用固定线程数得线程池</span></span><br><span class="line">        <span class="keyword">this</span>.executorEngine = <span class="keyword">new</span> ExecutorEngine((Integer)<span class="keyword">this</span>.properties.getValue(ConfigurationPropertyKey.EXECUTOR_SIZE));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解析引擎，用于解析SQL为抽象语法树，解析过程分为词法解析和语法解析。从3.0之后解析会全面替换为 ANTLR</span></span><br><span class="line">        <span class="keyword">this</span>.sqlParserEngine = SQLParserEngineFactory.getSQLParserEngine(DatabaseTypes.getTrunkDatabaseTypeName(databaseType));</span><br><span class="line">        ConfigurationLogger.log(rule.getRuleConfiguration());</span><br><span class="line">        ConfigurationLogger.log(props);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//----------------- 省略------------</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">S<span class="function"><span class="title">hardingRuntimeContext</span>-&gt;</span> M<span class="function"><span class="title">ultipleDataSourcesRuntimeContext</span> -&gt;</span> A<span class="function"><span class="title">bstractRuntimeContext</span>-&gt;</span> E<span class="function"><span class="title">xecutorEngine</span>-&gt;</span> SQLParserEngine</span><br></pre></td></tr></table></figure>
<h3 id="5-4-分片处理过程"><a href="#5-4-分片处理过程" class="headerlink" title="5.4 分片处理过程"></a>5.4 分片处理过程</h3><p>由于测试代码使用的是<code>Mybatis</code>层，这里只是对<code>Mybatis</code>处理流程进行分析。</p>
<p>当一个查询<code>sql</code>执行时，首先经过Mybatis层</p>
<ol>
<li><p>调用<code>org.apache.ibatis.executor.BaseExecutor # queryFromDatabase</code>方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">queryFromDatabase</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, CacheKey key, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.localCache.putObject(key, ExecutionPlaceholder.EXECUTION_PLACEHOLDER);</span><br><span class="line">    List list;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        list = <span class="keyword">this</span>.doQuery(ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.localCache.removeObject(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.localCache.putObject(key, list);</span><br><span class="line">    <span class="keyword">if</span> (ms.getStatementType() == StatementType.CALLABLE) &#123;</span><br><span class="line">        <span class="keyword">this</span>.localOutputParameterCache.putObject(key, parameter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>通过模板抽象方法<code>org.apache.ibatis.executor.BaseExecutor#doQuery</code>查找具体实现（如果没有特殊配置，此处是SimpleExecutor）,并且将查询结果放入一级缓存中。</p>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    List var9;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Configuration configuration = ms.getConfiguration();</span><br><span class="line">        StatementHandler handler = configuration.newStatementHandler(<span class="keyword">this</span>.wrapper, ms, parameter, rowBounds, resultHandler, boundSql);</span><br><span class="line">        stmt = <span class="keyword">this</span>.prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">        var9 = handler.query(stmt, resultHandler);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.closeStatement(stmt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> var9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在<code>org.apache.ibatis.executor.SimpleExecutor#doQuery</code>方法中会创建一个<code>Statement</code>，而此实例就是<code>ShardingPreparedStatement</code><br> <img src="/sharding-jdbc/index/16.png"></p>
</li>
<li><p>经过Mybatis预编译SQL处理器，然后在<code>org.apache.ibatis.executor.statement.PreparedStatementHandler#query</code>方法中执行了<code>PreparedStatement</code>的<code>execute</code>方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">query</span><span class="params">(Statement statement, ResultHandler resultHandler)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    PreparedStatement ps = (PreparedStatement)statement;</span><br><span class="line">    ps.execute();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.resultSetHandler.handleResultSets(ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><span id="initPreparedStatementExecutor">在前面知道此处</span>的<code>PreparedStatement</code>是<code>ShardingPreparedStatement</code>，所以这里调用的是<code>ShardingPreparedStatement</code>的<code>execute</code>方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> var1;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//1. 首先清理本地 PreparedStatementExecutor 中缓存的sql相关信息（创建执行单元的时候会将sql相关信息缓存到本地）</span></span><br><span class="line">        <span class="keyword">this</span>.clearPrevious();</span><br><span class="line">        <span class="comment">//2. ② 然后执行prepare方法，此方法中有两个很关键的操作：</span></span><br><span class="line">        <span class="keyword">this</span>.prepare();</span><br><span class="line">        <span class="keyword">this</span>.initPreparedStatementExecutor();</span><br><span class="line">        var1 = <span class="keyword">this</span>.preparedStatementExecutor.execute();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.clearBatch();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/sharding-jdbc/index/17.png"></p>
<ol>
<li><code>this.prepare()</code>执行路由策略和SQL改写策略（这两步是分片的核心，另外也都是可供使用者扩展的）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ExecutionContext <span class="title">prepare</span><span class="params">(String sql, List&lt;Object&gt; parameters)</span> </span>&#123;</span><br><span class="line">    List&lt;Object&gt; clonedParameters = <span class="keyword">this</span>.cloneParameters(parameters);</span><br><span class="line">    RouteContext routeContext = <span class="keyword">this</span>.executeRoute(sql, clonedParameters);</span><br><span class="line">    ExecutionContext result = <span class="keyword">new</span> ExecutionContext(routeContext.getSqlStatementContext());</span><br><span class="line">    result.getExecutionUnits().addAll(<span class="keyword">this</span>.executeRewrite(sql, clonedParameters, routeContext));</span><br><span class="line">    <span class="keyword">if</span> ((Boolean)<span class="keyword">this</span>.properties.getValue(ConfigurationPropertyKey.SQL_SHOW)) &#123;</span><br><span class="line">        SQLLogger.logSQL(sql, (Boolean)<span class="keyword">this</span>.properties.getValue(ConfigurationPropertyKey.SQL_SIMPLE), result.getSqlStatementContext(), result.getExecutionUnits());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><code>org.apache.shardingsphere.underlying.pluggble.prepare.BasePrepareEngine#executeRoute</code>方法，注册路由装饰器。 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> RouteContext <span class="title">executeRoute</span><span class="params">(String sql, List&lt;Object&gt; clonedParameters)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.registerRouteDecorator();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.route(<span class="keyword">this</span>.router, sql, clonedParameters);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>获取已经注册的<code>RouteDecorator</code>类实例，过滤掉泛型是BaseRule类型的（ShardingRule是其子类，所以重新的时候覆写 getType方法时，一定要是BaseRule类型的）</li>
<li>实例化路由装饰器</li>
<li>调用模板方法 route，最终会调用到<code>DataNodeRouter</code>的 <code>executeRoute</code> 方法  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> RouteContext <span class="title">executeRoute</span><span class="params">(String sql, List&lt;Object&gt; parameters, <span class="keyword">boolean</span> useCache)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//1. 解析引擎： 通过 SQLParserEngine 解析SQL（并且此处默认是会将解析后的语句缓存起来，也就证实了前面会什么会先清理缓存），然后通过调用parse0方法解析SQL并缓存</span></span><br><span class="line">     RouteContext result = <span class="keyword">this</span>.createRouteContext(sql, parameters, useCache);</span><br><span class="line"></span><br><span class="line">     Entry entry;</span><br><span class="line">     <span class="comment">//2. 循环执行注册了的路由装饰器</span></span><br><span class="line">     <span class="keyword">for</span>(Iterator var5 = <span class="keyword">this</span>.decorators.entrySet().iterator();</span><br><span class="line">          var5.hasNext(); result = ((RouteDecorator)entry.getValue()).decorate(result, <span class="keyword">this</span>.metaData, (BaseRule)entry.getKey(), <span class="keyword">this</span>.properties)) &#123;</span><br><span class="line">         entry = (Entry)var5.next();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
</li>
<li><p>然后开始分片路由装饰器<code>org.apache.shardingsphere.sharding.route.engine.ShardingRouteDecorator#decorate</code><br> <img src="/sharding-jdbc/index/18.png"><br>① 获取分片条件：根据不同的语句创建不同的 条件解析引擎来构造分片条件（获取的分片条件用于在执行路由判断时决定使用哪种分片策略）<br>② 通过工厂创建出 ShardingRouteEngine 实例，一般情况下 会创建出来 ShardingStandardRoutingEngine（没有配置什么骚操作的情况下），然后调用 标准路由执行引擎的 路由方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> RouteResult <span class="title">route</span><span class="params">(ShardingRule shardingRule)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.isDMLForModify(<span class="keyword">this</span>.sqlStatementContext) &amp;&amp; <span class="number">1</span> != ((TableAvailable)<span class="keyword">this</span>.sqlStatementContext).getAllTables().size()) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> ShardingSphereException(<span class="string">&quot;Cannot support Multiple-Table for &#x27;%s&#x27;.&quot;</span>, <span class="keyword">new</span> Object[]&#123;<span class="keyword">this</span>.sqlStatementContext.getSqlStatement()&#125;);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;                </span><br><span class="line">         <span class="comment">//根据路由节点生成路由结果 RouteResult</span></span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.generateRouteResult(<span class="keyword">this</span>.getDataNodes(shardingRule, shardingRule.getTableRule(<span class="keyword">this</span>.logicTableName)));</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 获取数据节点：此处获取的就是真实的SQL路由情况（比如：ds0.table_0），</span></span><br><span class="line"><span class="comment">  * 首先判断是否使用直接路由(强制路由)，若使用则走强制路由的分片算法去计算分片；然后再判断是否根据分片条件去路由，</span></span><br><span class="line"><span class="comment">  * 若有的话，则根据配置的分片算法（内联）根据分片值计算出来具体分到哪个库哪张表；若都没有的话，则直接走混合路由的处理逻辑</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> Collection&lt;DataNode&gt; <span class="title">getDataNodes</span><span class="params">(ShardingRule shardingRule, TableRule tableRule)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (<span class="keyword">this</span>.isRoutingByHint(shardingRule, tableRule)) &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.routeByHint(shardingRule, tableRule);</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.isRoutingByShardingConditions(shardingRule, tableRule) ? <span class="keyword">this</span>.routeByShardingConditions(shardingRule, tableRule) : <span class="keyword">this</span>.routeByMixedConditions(shardingRule, tableRule);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>找到了路由节点</p>
</li>
<li><p><a href="#initPreparedStatementExecutor">前面一直在讲prepare方法</a> 回到<code>ShardingPreparedStatement#execute</code>方法中，调用<code>initPreparedStatementExecutor()</code> 初始化<code> PreparedStatementExecutor</code>实例 并将解析出来的执行上下文中的相关SQL语句组设置到缓存中,然后调用执行器的执行方法</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//此处会获取到需要执行的SQL集合，主要是通过maxConnectionsSizePerQuery每次执行时最大连接数来判断sql执行单元应该分成几组，maxConnectionsSizePerQuery的值默认是1。则表示，</span></span><br><span class="line"><span class="comment">// 如果真实的sql有10条，那么每组拆分10条，总共拆分成1组，</span></span><br><span class="line"><span class="comment">// 此时会判断 maxConnectionsSizePerQuery 是否大于10，小于的话则会选择当前批次执行的是连接限制模式（只允许占用一个库的一个连接），相反则是内存限制模式，不会限制创建的连接数</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPreparedStatementExecutor</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.preparedStatementExecutor.init(<span class="keyword">this</span>.executionContext);</span><br><span class="line">     <span class="keyword">this</span>.setParametersForStatements();</span><br><span class="line">     <span class="keyword">this</span>.replayMethodForStatements();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li><p><a href="#initPreparedStatementExecutor">ShardingPreparedStatement#executeQuery方法中</a>最后调用执行器的执行方法<code>this.preparedStatementExecutor.execute()</code></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="comment">//1. 获取sql执行回调类（真正操作数据库）</span></span><br><span class="line">    <span class="keyword">boolean</span> isExceptionThrown = ExecutorExceptionHandler.isExceptionThrown();</span><br><span class="line">    <span class="comment">//2. 调用 executeCallback方法，此方法继承自父类AbstractStatementExecutor</span></span><br><span class="line">    SQLExecuteCallback&lt;Boolean&gt; executeCallback = SQLExecuteCallbackFactory.getPreparedSQLExecuteCallback(<span class="keyword">this</span>.getDatabaseType(), isExceptionThrown);</span><br><span class="line">    List&lt;Boolean&gt; result = <span class="keyword">this</span>.executeCallback(executeCallback);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span> != result &amp;&amp; !result.isEmpty() &amp;&amp; <span class="keyword">null</span> != result.get(<span class="number">0</span>) ? (Boolean)result.get(<span class="number">0</span>) : <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>进入父类<code>org.apache.shardingsphere.shardingjdbc.executor.AbstractStatementExecutor#executeCallback</code>，SQL执行模板<code>SQLExecuteTemplate</code>类通过委派其成员<code>ExecutorEngine</code>执行引擎来执行真正的操作</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">executeCallback</span><span class="params">(SQLExecuteCallback&lt;T&gt; executeCallback)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    List&lt;T&gt; result = <span class="keyword">this</span>.sqlExecuteTemplate.execute(<span class="keyword">this</span>.inputGroups, executeCallback);</span><br><span class="line">    <span class="keyword">this</span>.refreshMetaDataIfNeeded(<span class="keyword">this</span>.connection.getRuntimeContext(), <span class="keyword">this</span>.sqlStatementContext);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行引擎对拆分的SQL执行单元执行处理，如图：<br><img src="/sharding-jdbc/index/21.png"><br>① 并发执行（是否是并发执行通过 是否持有事务来判断的，例如 本地事务但是你修改为非自动提交事务，那么此时就是持有事务状态，则此时就是同步执行语句）</p>
<p>② 迭代出SQL执行组的第一个，其余的SQL异步执行</p>
<p>③ 同步执行第一个SQL执行组（方便与后面的执行组进行合并起来）</p>
<p>④ 通过其内置的线程池来异步执行SQL</p>
<p>此时一条查询语句到这里就执行完了，接下来我们接着分析对查询结果进行处理的操作</p>
</li>
<li><p>回到Mybatis中，最后对查询的结果集进行处理( resultSetHandler.<E> handleResultSets(ps)，此处是org.apache.ibatis.executor.resultset.DefaultResultSetHandler结果集处理器 ),如下：</E></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">handleResultSets</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ErrorContext.instance().activity(<span class="string">&quot;handling results&quot;</span>).object(<span class="keyword">this</span>.mappedStatement.getId());</span><br><span class="line">    List&lt;Object&gt; multipleResults = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">int</span> resultSetCount = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//1. 首先调用getFirstResultSet去获取第一个结果集，此处的 Statement 实例是 ShardingPreparedStatement</span></span><br><span class="line">    ResultSetWrapper rsw = <span class="keyword">this</span>.getFirstResultSet(stmt);</span><br><span class="line">    List&lt;ResultMap&gt; resultMaps = <span class="keyword">this</span>.mappedStatement.getResultMaps();</span><br><span class="line">    <span class="keyword">int</span> resultMapCount = resultMaps.size();</span><br><span class="line">    <span class="keyword">this</span>.validateResultMapsCount(rsw, resultMapCount);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(rsw != <span class="keyword">null</span> &amp;&amp; resultMapCount &gt; resultSetCount) &#123;</span><br><span class="line">        ResultMap resultMap = (ResultMap)resultMaps.get(resultSetCount);</span><br><span class="line">        <span class="keyword">this</span>.handleResultSet(rsw, resultMap, multipleResults, (ResultMapping)<span class="keyword">null</span>);</span><br><span class="line">        rsw = <span class="keyword">this</span>.getNextResultSet(stmt);</span><br><span class="line">        <span class="keyword">this</span>.cleanUpAfterHandlingResultSet();</span><br><span class="line">        ++resultSetCount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String[] resultSets = <span class="keyword">this</span>.mappedStatement.getResultSets();</span><br><span class="line">    <span class="keyword">if</span> (resultSets != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(rsw != <span class="keyword">null</span> &amp;&amp; resultSetCount &lt; resultSets.length) &#123;</span><br><span class="line">            ResultMapping parentMapping = (ResultMapping)<span class="keyword">this</span>.nextResultMaps.get(resultSets[resultSetCount]);</span><br><span class="line">            <span class="keyword">if</span> (parentMapping != <span class="keyword">null</span>) &#123;</span><br><span class="line">                String nestedResultMapId = parentMapping.getNestedResultMapId();</span><br><span class="line">                ResultMap resultMap = <span class="keyword">this</span>.configuration.getResultMap(nestedResultMapId);</span><br><span class="line">                <span class="keyword">this</span>.handleResultSet(rsw, resultMap, (List)<span class="keyword">null</span>, parentMapping);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            rsw = <span class="keyword">this</span>.getNextResultSet(stmt);</span><br><span class="line">            <span class="keyword">this</span>.cleanUpAfterHandlingResultSet();</span><br><span class="line">            ++resultSetCount;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.collapseSingleResultList(multipleResults);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里的Statement ShardingPreparedStatement</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> ResultSetWrapper <span class="title">getFirstResultSet</span><span class="params">(Statement stmt)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    ResultSet rs = stmt.getResultSet();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(rs == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (stmt.getMoreResults()) &#123;</span><br><span class="line">            rs = stmt.getResultSet();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stmt.getUpdateCount() == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rs != <span class="keyword">null</span> ? <span class="keyword">new</span> ResultSetWrapper(rs, <span class="keyword">this</span>.configuration) : <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用了<code>getResultSet()</code>方法；</p>
</li>
<li><p>进入到<code>org.apache.shardingsphere.shardingjdbc.jdbc.core.statement.ShardingPreparedStatement# getResultSet</code><br>将查询返回的结果集进行合并处理，Shardingsphere 的归并引擎功能上划分：遍历归并、排序归并（SQL中存在ORDER BY语句）、分组归并（SQL中有GroupBy子句）、聚合归并（含有聚合函数）、分页归并（含有Limit关键字）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResultSet <span class="title">getResultSet</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">null</span> != <span class="keyword">this</span>.currentResultSet) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.currentResultSet;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.executionContext.getSqlStatementContext() <span class="keyword">instanceof</span> SelectStatementContext || <span class="keyword">this</span>.executionContext.getSqlStatementContext().getSqlStatement() <span class="keyword">instanceof</span> DALStatement) &#123;</span><br><span class="line">            List&lt;ResultSet&gt; resultSets = <span class="keyword">this</span>.getResultSets();          <span class="comment">// ① </span></span><br><span class="line">            MergedResult mergedResult = <span class="keyword">this</span>.mergeQuery(<span class="keyword">this</span>.getQueryResults(resultSets));      <span class="comment">// ② </span></span><br><span class="line">            <span class="keyword">this</span>.currentResultSet = <span class="keyword">new</span> ShardingResultSet(resultSets, mergedResult, <span class="keyword">this</span>, <span class="keyword">this</span>.executionContext);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.currentResultSet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>① 获取所有Statement对应的结果集，此处是拿到真正数据源所对应的Statement实例，比如：我现在的数据源是 HikariDateSource，那么拿到的就是 HikariProxyPreparedStatement</p>
<p>② 执行合并逻辑：首先将结果集封装成流式查询结果对象StreamQueryResult，接着创建合并引擎<code>org.apache.shardingsphere.underlying.pluggble.merge.MergeEngine#merge</code>，然后调用合并引擎的合并方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> MergedResult <span class="title">merge</span><span class="params">(List&lt;QueryResult&gt; queryResults, SQLStatementContext sqlStatementContext)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.registerMergeDecorator();  <span class="comment">// ③ </span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.merger.process(queryResults, sqlStatementContext);  <span class="comment">// ④ </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>③ 实例化合并引擎处理器ResultProcessEngine</p>
<p>④ 调用MergeEntry的 process 方法，委派来进行合并逻辑。<br><img src="/sharding-jdbc/index/24.png"><br>⑤ ⑥ 中，判断若是<code>ResultMergerEngine </code>类型的合并引擎，则调用其merge方法执行真正的合并逻辑<br><img src="/sharding-jdbc/index/25.png"><br>显然满足类型判断，则此处会调用ShardingResultMergerEngine#newInstance 方法来实例化真正用于合并数据流的引擎</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ResultMerger <span class="title">newInstance</span><span class="params">(DatabaseType databaseType, ShardingRule shardingRule, ConfigurationProperties properties, SQLStatementContext sqlStatementContext)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sqlStatementContext <span class="keyword">instanceof</span> SelectStatementContext) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ShardingDQLResultMerger(databaseType);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (ResultMerger)(sqlStatementContext.getSqlStatement() <span class="keyword">instanceof</span> DALStatement ? <span class="keyword">new</span> ShardingDALResultMerger(shardingRule) : <span class="keyword">new</span> TransparentResultMerger());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然此处是查询语句，那么最终用于合并的引擎就是 ShardingDQLResultMerger，然后执行其merge方法<br><img src="/sharding-jdbc/index/26.png"><br>⑦ 中判断sql中包含哪些关键字，然后创建对应的合并结果，如果条件都不满足，那么默认会使用 遍历流式归并方式合并数据。假设 我们此处SQL中带有 order by关键字，那么创建得合并结果对象就是OrderByStreamMergedResult<br>⑧ 对创建出来的排序合并结果进行装饰操作（就是判断有没有别的关键字，例如：Limit，如果有就会创建LimitDecoratorMergedResult 装饰器对象，在之前的排序合并基础上又多一个 Limit功能），再回到 ShardingPreparedStatement中，会创建一个 ShardingResultSet对象设置到当前的成员变量currentResultSet中，并返回。 此时如果是批量的场景，返回的结果集中实际上已经包含了所有的结果集（前面存放在OrderByStreamMergedResult的 orderByValuesQueue 队列中）</p>
<p>排序归并流程：<br><img src="/sharding-jdbc/index/27.png"><br>调用合并结果的 next方法时会执行如图<br><img src="/sharding-jdbc/index/28.png"><br>最后流程又回到Mybatis 结果集处理上了，将结果返回给请求调用方</p>
</li>
</ol>
<h2 id="6-分片策略"><a href="#6-分片策略" class="headerlink" title="6. 分片策略"></a><span class="tit-h2">6. 分片策略</span></h2><p><strong>策略包括了算法，算法是策略的一个属性。</strong></p>
<p>Sharding-JDBC 中的分片策略有两个维度：分库（数据源分片）策略和分表策略；（mycat只支持要么分库或者要么分表）</p>
<p>跟 Mycat 不一样，Sharding-JDBC 没有提供内置的分片算法，而是通过实现接口<code>ShardingStrategy</code>， 让开发者自行实现，这样可以根据业务实际情况灵活地实现分片。</p>
<h3 id="6-1-行表达式分片策略-InlineShardingStrategy"><a href="#6-1-行表达式分片策略-InlineShardingStrategy" class="headerlink" title="6.1 行表达式分片策略 InlineShardingStrategy"></a>6.1 行表达式分片策略 InlineShardingStrategy</h3><ul>
<li>算法：行内表达式 $-&gt;{}</li>
<li>文档路径：<a href="https://shardingsphere.apache.org/document/current/cn/features/sharding/concept/inline-expression/">https://shardingsphere.apache.org/document/current/cn/features/sharding/concept/inline-expression/</a></li>
</ul>
<p>只支持单分片键，提供对<code>=</code>和<code>IN</code> 操作的支持。行内表达式的配置比较简单。 </p>
<p>例如：</p>
<ul>
<li>${begin..end}   表示范围区间，如：db$-&gt;{0..1}表示db0, db1</li>
<li>${[unit1, unit2, unit_x]}   表示枚举值，如 ：${[‘db0’, ‘db1’]}</li>
<li>t_user_$-&gt;{u_id % 8} 表示 t_user 表根据 u_id 模 8，而分成 8 张表，表名称为 t_user_0 到 t_user_7。 </li>
</ul>
<p>行表达式中如果出现连续多个${ expression }或$-&gt;{ expression }表达式，整个表达式最终的结果将会根据每个子表达式的结果进行笛卡尔组合。 例如，以下行表达式： ${[‘db1’, ‘db2’]}_table${1..3} 最终会解析为： db1_table1, db1_table2, db1_table3, db2_table1, db2_table2, db2_table3</p>
<h3 id="6-2-标准分片策略-StandardShardingStrategy"><a href="#6-2-标准分片策略-StandardShardingStrategy" class="headerlink" title="6.2 标准分片策略 StandardShardingStrategy"></a>6.2 标准分片策略 StandardShardingStrategy</h3><p>标准分片策略只支持但分片键，提供了两个分片算法，分别对应了<code>IN</code>、<code>BETWEEN</code> 和 <code>=</code>；如果要是用标准分片策略，必须要实现<code>PreciseShardingAlgorithm</code>,用来处理<code>=</code>和<code>IN</code>的分片<br><code>RangeShardingAlgorithm</code>是可选的，如果没有实现，SQL语句会发送到所有节点上执行。</p>
<ul>
<li>算法：范围分片<code>RangeShardingAlgorithm</code> 和 精确分片<code>PreciseShardingAlgorithm</code>两种算法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义分库策略</span></span><br><span class="line"><span class="comment"> * 数据库分库的策略，根据分片键，返回数据库名称</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBShardAlgo</span> <span class="keyword">implements</span> <span class="title">PreciseShardingAlgorithm</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSharding</span><span class="params">(Collection&lt;String&gt; collection, PreciseShardingValue&lt;Long&gt; preciseShardingValue)</span> </span>&#123;</span><br><span class="line">        String db_name=<span class="string">&quot;ds&quot;</span>;</span><br><span class="line">        Long num= preciseShardingValue.getValue()%<span class="number">2</span>;</span><br><span class="line">        db_name=db_name + num;</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------db_name:&quot;</span> + db_name);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String each : collection) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;ds:&quot;</span> + each);</span><br><span class="line">            <span class="keyword">if</span> (each.equals(db_name)) &#123;</span><br><span class="line">                <span class="keyword">return</span> each;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义分表策略</span></span><br><span class="line"><span class="comment"> * 等值查询使用的分片算法，包括in</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TblPreShardAlgo</span> <span class="keyword">implements</span> <span class="title">PreciseShardingAlgorithm</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, PreciseShardingValue&lt;Long&gt; shardingColumn)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 不分表</span></span><br><span class="line">        System.out.println(<span class="string">&quot;-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-availableTargetNames:&quot;</span> + availableTargetNames);</span><br><span class="line">        <span class="keyword">for</span> (String tbname : availableTargetNames) &#123;</span><br><span class="line">            <span class="comment">//如果这里要分表可以根据  shardingColumn.getValue() % 2</span></span><br><span class="line">            <span class="comment">//也可以根据月份分表，user_info_202201这种，只需要在这里拼接表名即可</span></span><br><span class="line">            System.out.println(shardingColumn.getValue() % <span class="number">2</span>+<span class="string">&quot;-------&quot;</span>+ tbname);</span><br><span class="line">            <span class="keyword">return</span> tbname;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
那么在配置文件中只需要指定分配规则<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">##为了缩减篇幅，这里改成properties的格式</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.t_order.databaseStrategy.standard.shardingColumn</span>=<span class="string">order_id</span></span><br><span class="line"><span class="meta">spring.shardingsphere.sharding.tables.t_order.databaseStrategy.standard.precise-algorithm-class-name</span>=<span class="string">com.ygb.config.TblPreShardAlgo</span></span><br></pre></td></tr></table></figure>
<img src="/sharding-jdbc/index/19.png"></li>
</ul>
<p>范围分片：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 范围查询所使用的分片算法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TblRangeShardAlgo</span> <span class="keyword">implements</span> <span class="title">RangeShardingAlgorithm</span>&lt;<span class="title">Long</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Collection&lt;String&gt; <span class="title">doSharding</span><span class="params">(Collection&lt;String&gt; availableTargetNames, RangeShardingValue&lt;Long&gt; rangeShardingValue)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;范围-*-*-*-*-*-*-*-*-*-*-*---------------&quot;</span>+availableTargetNames);</span><br><span class="line">        System.out.println(<span class="string">&quot;范围-*-*-*-*-*-*-*-*-*-*-*---------------&quot;</span>+rangeShardingValue);</span><br><span class="line">        Collection&lt;String&gt; collect = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        Range&lt;Long&gt; valueRange = rangeShardingValue.getValueRange();</span><br><span class="line">        <span class="keyword">for</span> (Long i = valueRange.lowerEndpoint(); i &lt;= valueRange.upperEndpoint(); i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String each : availableTargetNames) &#123;</span><br><span class="line">                <span class="keyword">if</span> (each.endsWith(i % availableTargetNames.size() + <span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                    collect.add(each);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> collect;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>查看数据库<code>db0</code>、<code>db1</code>，可以看到只有<code>db0</code>有数据；</p>
<h3 id="6-3-复合分片策略-ComplexShardingStrategy"><a href="#6-3-复合分片策略-ComplexShardingStrategy" class="headerlink" title="6.3 复合分片策略 ComplexShardingStrategy"></a>6.3 复合分片策略 ComplexShardingStrategy</h3><p>复合分片策略支持多分片键</p>
<ul>
<li>算法：ComplexKeysShardingAlgorithm</li>
<li>场景：根据日期和ID两个字段分片，每个月3张表，先根据日期，然后在根据ID取模分片</li>
</ul>
<h3 id="6-4-Hint分片策略-HintShardingStrategy"><a href="#6-4-Hint分片策略-HintShardingStrategy" class="headerlink" title="6.4 Hint分片策略 HintShardingStrategy"></a>6.4 Hint分片策略 HintShardingStrategy</h3><p>通过 Hint 而非 SQL 解析的方式分片的策略</p>
<ul>
<li>算法：HintShardingAlgorithm<h3 id="6-5-不分片策略-NoneShardingStrategy"><a href="#6-5-不分片策略-NoneShardingStrategy" class="headerlink" title="6.5 不分片策略 NoneShardingStrategy"></a>6.5 不分片策略 NoneShardingStrategy</h3>只在一个节点存储</li>
<li>算法：无</li>
</ul>
<p><img src="/sharding-jdbc/index/20.png"></p>
<h2 id="与Mycat对比"><a href="#与Mycat对比" class="headerlink" title="与Mycat对比"></a>与Mycat对比</h2><table>
<thead>
<tr>
<th align="left"></th>
<th align="center">ShardingSphere-JDBC</th>
<th align="center">Mycat</th>
</tr>
</thead>
<tbody><tr>
<td align="left">工作层面</td>
<td align="center">JDBC协议</td>
<td align="center">Mysql协议/JDBC协议</td>
</tr>
<tr>
<td align="left">运行方式</td>
<td align="center">Jar包，客户端</td>
<td align="center">独立服务，服务端</td>
</tr>
<tr>
<td align="left">开发方式</td>
<td align="center">代码/配置改动</td>
<td align="center">连接地址修改（数据源）</td>
</tr>
<tr>
<td align="left">运维方式</td>
<td align="center">无</td>
<td align="center">管理独立服务，运维成本高</td>
</tr>
<tr>
<td align="left">性能</td>
<td align="center">多线程并发操作，性能高</td>
<td align="center">独立服务+网络开销，存在性能损失风险</td>
</tr>
<tr>
<td align="left">功能范围</td>
<td align="center">协议层面</td>
<td align="center">包括分布式事务、数据迁移等</td>
</tr>
<tr>
<td align="left">适用操作</td>
<td align="center">OLTP</td>
<td align="center">OLTP+OLAP</td>
</tr>
<tr>
<td align="left">支持数据库</td>
<td align="center">基于JDBC协议的数据库</td>
<td align="center">MySQL 和其他支持 JDBC 协议的数据库</td>
</tr>
<tr>
<td align="left">支持语言</td>
<td align="center">Java</td>
<td align="center">支持 JDBC 协议的语言</td>
</tr>
</tbody></table>
<p>从易用性和功能完善的角度来说，<code>Mycat</code> 似乎比 <code>Sharding-JDBC</code> 要好，因为有现成 的分片规则，也提供了4种<code>ID</code>生成方式，通过注解可以支持高级功能，比如跨库关联查询。</p>
<p>建议：小型项目可以用 <code>Sharding-JDBC</code>。大型项目，可以用 <code>Mycat</code>。</p>
]]></content>
      <categories>
        <category>05 分布式</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>接口设计看这一篇就够了</title>
    <url>/special-interface/index.html</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="/css/content.css">

<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><p><strong>1. <a href="#content1">接口幂等性</a><br>2. <a href="#token">SpringBoot 防重Token令牌方案</a><br>3. <a href="#interfaceSafe">接口数据安全方案</a><br>4. <a href="#interfacePerformance">接口性能优化方案</a><br>5. <a href="#interfaceDefine">接口设计的锦囊</a></strong></p>
<h2 id="1-接口幂等性"><a href="#1-接口幂等性" class="headerlink" title="1. 接口幂等性"></a><span class="tit-h2" id="content1">1. 接口幂等性</span></h2><h3 id="1-1-幂等性描述"><a href="#1-1-幂等性描述" class="headerlink" title="1.1 幂等性描述"></a>1.1 幂等性描述</h3><blockquote>
<p>幂等是一个数据和计算机学概念，在数学中某一元运算为幂等时，作用多次和作用一次的结果相同</p>
</blockquote>
<p>在数学中，幂等用函数表达式就是：<strong>f(x) = f(f(x))</strong></p>
<h3 id="1-2-接口幂等性"><a href="#1-2-接口幂等性" class="headerlink" title="1.2 接口幂等性"></a>1.2 接口幂等性</h3><blockquote>
<p>在HTTP/1.1中，对幂等性进行类定义，它描述一次和多次请求某个资源对资源本身应该具有同样的结果（网络超时等问题除外），<br>即多次调用方法或者接口不会改变业务状态，可以保证重复调用的结果和单次调用的结果一致。</p>
</blockquote>
<p><strong>幂等性指的是作用于结果而非资源本身。例如，HTTP GET方法可能会每次得到不同的返回内容，但并不影响资源。</strong></p>
<h3 id="1-3-为什么需要实现幂等性"><a href="#1-3-为什么需要实现幂等性" class="headerlink" title="1.3 为什么需要实现幂等性"></a>1.3 为什么需要实现幂等性</h3><p>在接口调用时一般情况下都能正常返回信息不会出现重复提交，不过出现以下几种情况会有问题，如：</p>
<ul>
<li><p>前端重复提交表单：比如用户注册时，因网络波动没有及时对用户做出提交成功响应，致使用户认为没有提交成功，然后多次进行提交操作，这时就会发生重复提交请求</p>
</li>
<li><p>用户恶意刷单：比如用户投票，如果用户针对一个内容重复提交投票，接口接收到用户重复提交的投票信息，影响实际的计算结果</p>
</li>
<li><p>接口超时重复提交：如果存在超时重试机制，尤其是第三方调用接口时，为了防止网络波动超时等造成的请求失败，都会添加重试机制，导致一个请求多次提交</p>
</li>
<li><p>消息进行重复消费：当使用MQ消息中间件时，如果发生消息中间件出现错误为即使提交消费消息，导致发生重复消费；</p>
</li>
</ul>
<p>使用幂等性最大的优势在于使接口保证任何幂等性操作，避免因重试等造成系统未知问题。</p>
<p><img src="/special-interface/index/5.gif"></p>
<h3 id="1-4-幂等性对系统的影响"><a href="#1-4-幂等性对系统的影响" class="headerlink" title="1.4 幂等性对系统的影响"></a>1.4 幂等性对系统的影响</h3><p>幂等性是为了简化客户端逻辑处理，能防止重复提交等操作，但也额外增加了服务端业务逻辑复杂性，主要是</p>
<ul>
<li><p>把并行执行的功能改成了串行，降低了执行效率</p>
</li>
<li><p>增加了额外控制幂等的业务代码，使原本的业务功能复杂化</p>
</li>
</ul>
<p>所以我们需要根据实际的业务场景来考虑是否引入幂等性</p>
<h3 id="1-5-Restful-API-接口的幂等性"><a href="#1-5-Restful-API-接口的幂等性" class="headerlink" title="1.5 Restful API 接口的幂等性"></a>1.5 Restful API 接口的幂等性</h3><p>现在流行的Restful 推荐的几种HTTP方法中幂等性如下：</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>是否幂等</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>HEAD</td>
<td>是</td>
<td>Head不含有呈现数据，仅时HTTP头信息，head方法常用来做探活使用</td>
</tr>
<tr>
<td>GET</td>
<td>是</td>
<td>Get 方法用于获取资源。其一般不会也不应当对系统资源进行改变，所以是幂等的</td>
</tr>
<tr>
<td>POST</td>
<td>否</td>
<td>Post 方法一般用于创建新的资源。其每次执行都会新增数据，所以不是幂等的</td>
</tr>
<tr>
<td>PUT</td>
<td>-</td>
<td>Put 方法一般用于更新资源。该操作则分情况来判断是不是满足幂等，更新操作中直接根据某个值进行更新，也能保持幂等。不过执行累加操作的更新是非幂等</td>
</tr>
<tr>
<td>DELETE</td>
<td>-</td>
<td>Delete 方法一般用于删除资源。该操作则分情况来判断是不是满足幂等，当根据唯一值进行删除时，删除同一个数据多次执行效果一样。不过需要注意，带查询条件的删除则就不一定满足幂等了。例如在根据条件删除一批数据后，这时候新增加了一条数据也满足条件，然后又执行了一次删除，那么将会导致新增加的这条满足条件数据也被删除。</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>是</td>
<td>主要用于获取当前URL所支持的方法，也是有点像查询</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>是</td>
<td>主要用于获取当前URL所支持的方法，也是有点像查询</td>
</tr>
</tbody></table>
<h3 id="1-6-如何设计幂等"><a href="#1-6-如何设计幂等" class="headerlink" title="1.6 如何设计幂等"></a>1.6 如何设计幂等</h3><p>幂等意味着一条请求的唯一性，无论上面哪个方，都需要一个<strong>全局ID</strong>去标记这个请求是独一无二的。</p>
<ol>
<li>数据库唯一索引控制幂等，那唯一索引是唯一的</li>
<li>数据库主键控制幂等， 那么主键是唯一的</li>
</ol>
<h4 id="全局唯一ID"><a href="#全局唯一ID" class="headerlink" title="全局唯一ID"></a>全局唯一ID</h4><p>下面Demo<a href="#token"><strong>防重Token令牌方案</strong></a>使用的是<strong>UUID</strong>，但是UUID的缺点比较明显，字符串占用的空间比较大，生成的ID过于随机，可读性差，而且没有递增。<br>我们还可以使用<code>Snowflake雪花算法</code> 生成唯一ID</p>
<blockquote>
<p>雪花算法是一种生成分布式全局ID的算法，生成的ID称为<code>Snowflakes IDs</code></p>
</blockquote>
<p>一个SnowflakesID有64位：</p>
<ul>
<li>第1位： Java中long的最高位是符号位，正数为0，负数是1，一般生成的ID都是正数，所以默认为0</li>
<li>第2-42位：时间戳，表示了自选定的时期以来的毫秒数</li>
<li>第43-52位：计算机ID，防止冲突</li>
<li>第53-64位：每台及其上生成ID的序列号，这允许在同一毫秒内创建多个Snowflake ID</li>
</ul>
<p><img src="/special-interface/index/6.png" alt="雪花算法"><br>全局唯一ID还可以使用百度的<code>Uidgenerator</code>、美团的<code>leaf</code></p>
<h4 id="幂等设计的基本流程"><a href="#幂等设计的基本流程" class="headerlink" title="幂等设计的基本流程"></a>幂等设计的基本流程</h4><p>幂等处理的过程，其实就是过滤以下已经收到的请求，然后判断请求是否之前收到过，把请求存储起来，收到请求时，先查下存储记录，记录存在就返回上次的结果，不存在就处理请求。<br><img src="/special-interface/index/7.png" alt="幂等设计的基本流程"></p>
<h3 id="1-7-实现幂等的方案"><a href="#1-7-实现幂等的方案" class="headerlink" title="1.7 实现幂等的方案"></a>1.7 实现幂等的方案</h3><h4 id="nbsp-nbsp-方案1：数据库唯一主键"><a href="#nbsp-nbsp-方案1：数据库唯一主键" class="headerlink" title="&nbsp;&nbsp;方案1：数据库唯一主键"></a>&nbsp;&nbsp;方案1：数据库唯一主键</h4><ul>
<li>描述<blockquote>
<p>利用数据库主键唯一约束的特性，依赖来说唯一主键比较适用于插入时的幂等性，其能保证一张表只能存在一条带该唯一主键的记录</p>
<p>使用数据库唯一主键完成幂等性时需要注意的是，该主键一般来说并不是使用数据库自增主键，而是使用分布式ID作为主键，这样才能保证在分布式环境下ID的全局一致性</p>
</blockquote>
</li>
<li>使用操作<ul>
<li>插入</li>
<li>删除</li>
</ul>
</li>
<li>使用限制<ol>
<li>需要生成全局唯一主键ID</li>
</ol>
</li>
<li>主要流程   <img src="/special-interface/index/1.png"><br>   分布式ID服务可以使用<strong>Snowflake算法</strong>、<strong>数据库号段模式</strong>、<strong>Redis自增</strong>等方式生成；</li>
</ul>
<h4 id="nbsp-nbsp-方案2：数据库乐观锁"><a href="#nbsp-nbsp-方案2：数据库乐观锁" class="headerlink" title="&nbsp;&nbsp;方案2：数据库乐观锁"></a>&nbsp;&nbsp;方案2：数据库乐观锁</h4><blockquote>
<p>乐观锁：在操作数据时，非常乐观，认为别人不再同时在修改数据，因此乐观锁不会上锁，只是在执行更新的时候判断以下，在此期间是否别人修改了数据</p>
</blockquote>
<ul>
<li><p>描述</p>
<blockquote>
<p> 一般只适用于更新操作的过程，在表中增加version版本字段，每次对该表的这条数据更新时，都会带上上次更新后的version值</p>
</blockquote>
</li>
<li><p>使用操作</p>
<ul>
<li>更新</li>
</ul>
</li>
<li><p>使用限制</p>
<ol>
<li>需要在业务表中添加额外字段</li>
</ol>
</li>
<li><p>主要流程</p>
<p><img src="/special-interface/index/2.png"></p>
<ul>
<li><p>更新数据前，先查下数据，查出版本号为<code>version = 5</code></p>
</li>
<li><p>然后使用<code>version=5</code> 和 <code>order_id=1010101</code>一起作为条件去更新</p>
</li>
</ul>
<p><strong>为什么版本号建议自增呢？</strong></p>
<blockquote>
<p>因为乐观锁存在ABA的问题，如果version版本一直是自增就不会出现ABA的情况了。</p>
</blockquote>
<blockquote>
<p>  ABA问题：一个线程先读取共享内存数据值A，随后因某种原因，线程暂时挂起，同时另一个线程临时将共享内存数据值先改为B，随后又改回为A。随后挂起线程恢复，并通过CAS比较，最终比较结果将会无变化。这样会通过检查，这就是ABA问题。 在CAS比较前会读取原始数据，随后进行原子CAS操作。这个间隙之间由于并发操作，最终可能会带来问题<br>相当于是只关心共享变量的起始值和结束值，而不关心过程中共享变量是否被其他线程动过。</p>
</blockquote>
</li>
</ul>
<h4 id="nbsp-nbsp-方案3：防重Token令牌"><a href="#nbsp-nbsp-方案3：防重Token令牌" class="headerlink" title="&nbsp;&nbsp;方案3：防重Token令牌"></a>&nbsp;&nbsp;方案3：防重Token令牌</h4><ul>
<li><p>描述</p>
<blockquote>
<p>针对客户端连续点击或者调用方的超时重试等情况，例如提交订单，此种操作就可以用 Token 的机制实现防止重复提交。简单的说就是调用方在调用接口的时候先向后端请求一个全局 ID（Token），请求的时候携带这个全局 ID 一起请求（Token 最好将其放到 Headers 中），后端需要对这个 Token 作为 Key，用户信息作为 Value 到 Redis 中进行键值内容校验，如果 Key 存在且 Value 匹配就执行删除命令，然后正常执行后面的业务逻辑。如果不存在对应的 Key 或 Value 不匹配就返回重复执行的错误信息，这样来保证幂等操作</p>
</blockquote>
</li>
<li><p>使用操作</p>
<ul>
<li>更新</li>
<li>插入</li>
</ul>
</li>
<li><p>使用限制</p>
<ol>
<li><p>需要生成全局唯一 Token串</p>
</li>
<li><p>需要使用Redis进行数据校验</p>
</li>
</ol>
</li>
<li><p>主要流程</p>
<p><img src="/special-interface/index/3.png"><br>Token可以是一个序列号，也可以是分布式ID或者UUID串</p>
<ul>
<li>验证成功：说明存在该token，是第一次调用接口，可以执行后面的业务代码，同时在redis中删除该token</li>
<li>验证失败：说明存在该token，是重复调用接口，不可以执行后面的业务代码；</li>
</ul>
<blockquote>
<p>注意，在并发情况下，执行 Redis 查找数据与删除需要保证原子性，否则很可能在并发下无法保证幂等性。其实现方法可以使用分布式锁或者使用 Lua 表达式来注销查询与删除操作。</p>
</blockquote>
</li>
</ul>
<h4 id="nbsp-nbsp-方案4：下游传递唯一序列号"><a href="#nbsp-nbsp-方案4：下游传递唯一序列号" class="headerlink" title="&nbsp;&nbsp;方案4：下游传递唯一序列号"></a>&nbsp;&nbsp;方案4：下游传递唯一序列号</h4><ul>
<li><p>描述</p>
<p>  所谓请求序列号，其实就是每次向服务端请求时候附带一个短时间内唯一不重复的序列号，该序列号可以是一个有序 ID，也可以是一个订单号，一般由下游生成，在调用上游服务端接口时附加该序列号和用于认证的 ID。 当上游服务器收到请求信息后拿取该 序列号 和下游 认证ID 进行组合，形成用于操作 Redis 的 Key，然后到 Redis 中查询是否存在对应的 Key 的键值对，根据其结果：  </p>
<ul>
<li>如果存在，就说明已经对该下游的该序列号的请求进行了业务处理，这时可以直接响应重复请求的错误信息。</li>
<li>如果不存在，就以该 Key 作为 Redis 的键，以下游关键信息作为存储的值（例如下游商传递的一些业务逻辑信息），将该键值对存储到 Redis 中 ，然后再正常执行对应的业务逻辑即可。</li>
</ul>
</li>
<li><p>使用操作</p>
<ul>
<li>更新</li>
<li>插入</li>
<li>删除</li>
</ul>
</li>
<li><p>使用限制</p>
<ol>
<li>需要第三方传递唯一序列号</li>
<li>需要使用Redis进行数据校验</li>
</ol>
</li>
</ul>
<ul>
<li>主要流程 <img src="/special-interface/index/4.png">① 下游服务生成分布式 ID 作为序列号，然后执行请求调用上游接口，并附带“唯一序列号”与请求的“认证凭据ID”。<br>② 上游服务进行安全效验，检测下游传递的参数中是否存在“序列号”和“凭据ID”。<br>③ 上游服务到 Redis 中检测是否存在对应的“序列号”与“认证ID”组成的 Key，如果存在就抛出重复执行的异常信息，然后响应下游对应的错误信息。如果不存在就以该“序列号”和“认证ID”组合作为 Key，以下游关键信息作为 Value，进而存储到 Redis 中，然后正常执行接来来的业务逻辑。<blockquote>
<p>上面步骤中插入数据到 Redis 一定要设置过期时间。这样能保证在这个时间范围内，如果重复调用接口，则能够进行判断识别。如果不设置过期时间，很可能导致数据无限量的存入 Redis，致使 Redis 不能正常工作。</p>
</blockquote>
</li>
</ul>
<h4 id="nbsp-nbsp-方案5：状态机幂等"><a href="#nbsp-nbsp-方案5：状态机幂等" class="headerlink" title="&nbsp;&nbsp;方案5：状态机幂等"></a>&nbsp;&nbsp;方案5：状态机幂等</h4><ul>
<li>描述<br>很多业务表都是有状态的，比如转账流水表就会有<code>0-待处理，1-处理中，2-成功，3失败</code>，转账流水更新时，都会涉及流水状态更新，即涉及状态机。<br>比如转账成功后，把处理中的流水更新为<strong>成功</strong>状态<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">update trans_flow <span class="keyword">set</span> status <span class="operator">=</span> <span class="number">2</span> <span class="keyword">where</span> biz_seq<span class="operator">=</span><span class="string">&#x27;123&#x27;</span> <span class="keyword">and</span> status <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li>
<li>主要流程<br><img src="/special-interface/index/8.png"><ul>
<li>第1次请求来时，bizSeq流水号是 666，该流水的状态是处理中，值是 1，要更新为2-成功的状态，所以该update语句可以正常更新数据，sql执行结果的影响行数是1，流水状态最后变成了2。</li>
<li>第2请求也过来了，如果它的流水号还是 666，因为该流水状态已经2-成功的状态了，所以更新结果是0，不会再处理业务逻辑，接口直接返回。</li>
</ul>
</li>
<li>伪代码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Rsp idempotentTransfer（Request req）&#123;</span><br><span class="line">    String bizSeq = req.getBizSeq();</span><br><span class="line">    <span class="keyword">int</span> rows= <span class="string">&quot;update transfr_flow set status=2 where biz_seq=#&#123;bizSeq&#125; and status=1;&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(rows==<span class="number">1</span>)&#123;</span><br><span class="line">        log.info(“更新成功,可以处理该请求”);</span><br><span class="line">        <span class="comment">//其他业务逻辑处理</span></span><br><span class="line">        <span class="keyword">return</span> rsp;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rows==<span class="number">0</span>)&#123;</span><br><span class="line">        log.info(“更新不成功，不处理该请求”);</span><br><span class="line">        <span class="comment">//不处理，直接返回</span></span><br><span class="line">        <span class="keyword">return</span> rsp;</span><br><span class="line">    &#125;</span><br><span class="line">    log.warn(<span class="string">&quot;数据异常&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> rsp：</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="nbsp-nbsp-方案6：悲观锁"><a href="#nbsp-nbsp-方案6：悲观锁" class="headerlink" title="&nbsp;&nbsp;方案6：悲观锁"></a>&nbsp;&nbsp;方案6：悲观锁</h4><blockquote>
<p>悲观锁：通俗的讲，就是每次去操作数据时，都会觉得别人中途会修改，所以每次拿到数据的时候都会上锁；官方点讲就是：共享资源每次只给一个线程使用，其他线程阻塞，用完后再把资源转为其他线程。</p>
</blockquote>
<ul>
<li>业务场景<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">假设先查处订单，如果查到的时处理中状态，就处理完业务，然后更新订单状态为完成，如果查到订单状态不是处理中状态，则直接返回</span><br></pre></td></tr></table></figure></li>
<li>伪代码 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;  # <span class="number">1.</span>开始事务</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">order</span> <span class="keyword">where</span> order_id<span class="operator">=</span><span class="string">&#x27;666&#x27;</span> <span class="comment">--  查询订单，判断状态</span></span><br><span class="line"><span class="comment">-- 0-待处理，1-处理中，2-成功，3失败</span></span><br><span class="line">if（status <span class="operator">!=</span> 处理中）&#123;</span><br><span class="line">   <span class="operator">/</span><span class="operator">/</span>非处理中状态，直接返回；</span><br><span class="line">   <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">## 处理业务逻辑</span><br><span class="line">update <span class="keyword">order</span> <span class="keyword">set</span> status<span class="operator">=</span><span class="string">&#x27;完成&#x27;</span> <span class="keyword">where</span> order_id<span class="operator">=</span><span class="string">&#x27;666&#x27;</span> # 更新完成</span><br><span class="line"><span class="keyword">commit</span>; <span class="comment">--  5.提交事务</span></span><br></pre></td></tr></table></figure>
这种场景时非原子操作的，在高并发环境下，可能会造成一个业务被执行两次的问题<blockquote>
<p>当一个请求A在执行时，而另一个请求B也开始状态判断的操作，因为请求A还未来得及更改状态，所以请求B也能执行成功，这就导致一个业务被执行了两次。</p>
</blockquote>
 可以使用数据库悲观锁（select … for update）来解决这个问题 <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">begin</span>;  <span class="comment">--  1.开始事务</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">order</span> <span class="keyword">where</span> order_id<span class="operator">=</span><span class="string">&#x27;666&#x27;</span> <span class="keyword">for</span> update <span class="comment">-- 查询订单，判断状态,锁住这条记录</span></span><br><span class="line"><span class="comment">-- 0-待处理，1-处理中，2-成功，3失败</span></span><br><span class="line">if（status <span class="operator">!=</span> 处理中）&#123;</span><br><span class="line">    <span class="comment">-- 非处理中状态，直接返回；</span></span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">## 处理业务逻辑</span><br><span class="line">update <span class="keyword">order</span> <span class="keyword">set</span> status<span class="operator">=</span><span class="string">&#x27;完成&#x27;</span> <span class="keyword">where</span> order_id<span class="operator">=</span><span class="string">&#x27;666&#x27;</span> <span class="comment">-- 更新完成</span></span><br><span class="line"><span class="keyword">commit</span>; <span class="comment">--  5.提交事务</span></span><br></pre></td></tr></table></figure>
<ul>
<li>这里面<code>order_id</code>需要时索引或主键，如果不是索引或主键，会锁表；相关内容可以查看博客《 <a href="https://xiaoyuge.work/select-for-update/">select … for update表锁还是行锁</a> 》</li>
<li>悲观锁在统一事务操作过程中，锁住了一行数据，别的请求只能等待，<strong>如果当前事务耗时比较长，就很影响接口性能，所以一般不建议使用悲观锁来做幂等</strong></li>
</ul>
</li>
</ul>
<h4 id="nbsp-nbsp-方案7：分布式锁"><a href="#nbsp-nbsp-方案7：分布式锁" class="headerlink" title="&nbsp;&nbsp;方案7：分布式锁"></a>&nbsp;&nbsp;方案7：分布式锁</h4><ul>
<li><p>描述 </p>
<p> 分布式锁实现幂等性的逻辑就是：请求过来时，先去尝试获取分布式锁，如果获得成功就执行业务逻辑，反之获取失败的话，就舍弃请求直接返回成功</p>
</li>
<li><p>主要流程<br><img src="/special-interface/index/9.png"></p>
<ul>
<li>分布式锁可以使用redis、zookeeper; redis可能会好一点，轻量级</li>
<li>redis分布式锁，可以使用命令<code>set ex px nx + 唯一流水号</code>实现，分布式锁的key 必须为业务的唯一标识</li>
<li>Redis执行设置key的动作时，需要设置过期时间，太长会占存储空间，太短拦截不了重复请求</li>
</ul>
</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>对于下单等存在唯一主键的可以使用”唯一主键方案”的方式实现</li>
<li>对于更新订单状态等相关的更新场景操作，可以使用”乐观锁方案”</li>
<li>对于上下游这种，下游请求上游，上游服务可以使用”下游传递唯一序列号方案”更为合理</li>
<li>类似于前端重复提交、重复下单、没有唯一ID号的场景，可以通过token与Redis配置的”防重Token方案”更为快捷</li>
</ol>
<table>
<thead>
<tr>
<th align="center">方案</th>
<th align="center">适用方法</th>
<th align="right">复杂度</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数据库唯一主键</td>
<td align="center">插入、删除</td>
<td align="right">简单</td>
<td align="center">只能用于存在唯一主键的场景</td>
</tr>
<tr>
<td align="center">数据库乐观锁</td>
<td align="center">更新</td>
<td align="right">简单</td>
<td align="center">只能用于更新操作，表中需要添加额外字段</td>
</tr>
<tr>
<td align="center">请求序列号</td>
<td align="center">插入、删除、更新</td>
<td align="right">简单</td>
<td align="center">1. 需要保证下游生成唯一序列号；<br> 2. 需要Redis存储序列号</td>
</tr>
<tr>
<td align="center">防重Token令牌</td>
<td align="center">插入、更新、删除</td>
<td align="right">适中</td>
<td align="center">需要Redis存储序列号</td>
</tr>
<tr>
<td align="center">悲观锁</td>
<td align="center">更新、删除</td>
<td align="right">适中</td>
<td align="center">如果当前事务耗时比较长，就很影响接口性能</td>
</tr>
</tbody></table>
<h2 id="2-SpringBoot-防重Token令牌方案"><a href="#2-SpringBoot-防重Token令牌方案" class="headerlink" title="2. SpringBoot 防重Token令牌方案"></a><span class="tit-h2" id="token">2. SpringBoot 防重Token令牌方案</span></h2><p>该方案能保证在不同请求动作下的幂等性，实现逻辑可以看上面写的”防重Token令牌”方案;</p>
<h3 id="2-1-引入相关依赖"><a href="#2-1-引入相关依赖" class="headerlink" title="2.1 引入相关依赖"></a>2.1 引入相关依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>idempotent-token<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>idempotent-token<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="2-2-配置文件"><a href="#2-2-配置文件" class="headerlink" title="2.2 配置文件"></a>2.2 配置文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 配置redis连接参数</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">ssl:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="number">1000</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="number">-1</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">20</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-Token获取-验证接口"><a href="#2-3-Token获取-验证接口" class="headerlink" title="2.3 Token获取/验证接口"></a>2.3 Token获取/验证接口</h3><p>创建用于操作Token相关的Service类，包含创建token以及验证方法，其中：</p>
<ul>
<li><p>Token创建： 使用UUID工具创建token串，设置<code>IDEMPOTENT_TOKEN_PREFIX:+token</code>串作为key,以用户信息作为value，存入Redis;</p>
</li>
<li><p>Token验证：接口Token串参数，加上前缀生成key，再传入用户信息value,使用Lua表达式（Lua表达式能保证命令执行的原子性）进行查找对应的key和value，执行完成后验证命令的返回结果，如果不为空且非0则验证成功，反之则失败;</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenUtilService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis 的token键前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String IDEMPOTENT_TOKEN_PREFIX = <span class="string">&quot;IDEMPOTENT_TOKEN:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建token存入redis， 并返回token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 用于辅助验证的value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateToken</span><span class="params">(String value)</span> </span>&#123;</span><br><span class="line">        String token = UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//拼接redis key</span></span><br><span class="line">        String key = IDEMPOTENT_TOKEN_PREFIX + token;</span><br><span class="line">        <span class="comment">//存储到redis 中，设置过期时间为5分钟</span></span><br><span class="line">        redisTemplate.opsForValue().set(key, value, <span class="number">5</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证token的正确性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 辅助验证信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 验证结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">validateToken</span><span class="params">(String token, String value)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置Lua脚本，其中KEY[1] 是key, KEYS[2] 是value； 如果根据key获取到的值是value,那么删除key否则返回0</span></span><br><span class="line">        String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == KEYS[2] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">        RedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> DefaultRedisScript&lt;&gt;(script, Long.class);</span><br><span class="line">        <span class="comment">//拼接key</span></span><br><span class="line">        String key = IDEMPOTENT_TOKEN_PREFIX + token;</span><br><span class="line">        <span class="comment">//执行lua脚本，传递数组参数[key, value]</span></span><br><span class="line">        Long result = redisTemplate.execute(redisScript, Arrays.asList(key, value));</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; result != <span class="number">0L</span>) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;验证token= &#123;&#125;,key=&#123;&#125;, value=&#123;&#125;成功&quot;</span>, token, key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-4-创建Controller"><a href="#2-4-创建Controller" class="headerlink" title="2.4 创建Controller"></a>2.4 创建Controller</h3><p>创建用于测试的 Controller 类，里面有获取 Token 与测试接口幂等性的接口，内容如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiaoyuge</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TokenUtilService tokenUtilService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> token串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/token&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToken</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取用户信息</span></span><br><span class="line">        String username = <span class="string">&quot;xiaoyuge&quot;</span>;</span><br><span class="line">        <span class="comment">//使用用户信息作为辅助验证</span></span><br><span class="line">        <span class="comment">//获取token并返回</span></span><br><span class="line">        <span class="keyword">return</span> tokenUtilService.generateToken(username);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接口幂等性测试接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 执行结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testIdempotence</span><span class="params">(<span class="meta">@RequestHeader(value = &quot;token&quot;)</span> String token)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取用户信息，和上面保持一样的业务逻辑</span></span><br><span class="line">        String username = <span class="string">&quot;xiaoyuge&quot;</span>;</span><br><span class="line">        <span class="comment">//根据token和用户相关信息到redis验证是否存在对应的信息</span></span><br><span class="line">        <span class="keyword">boolean</span> result = tokenUtilService.validateToken(token, username);</span><br><span class="line">        <span class="keyword">return</span> result ? <span class="string">&quot;正常调用&quot;</span>:<span class="string">&quot;重复调用&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-5-创建Springboot启动类"><a href="#2-5-创建Springboot启动类" class="headerlink" title="2.5 创建Springboot启动类"></a>2.5 创建Springboot启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdempotentApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(IdempotentApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-6-创建测试类"><a href="#2-6-创建测试类" class="headerlink" title="2.6 创建测试类"></a>2.6 创建测试类</h3><p>测试多次访问同一个接口，是否只有第一次执行成功</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IdempotentTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebApplicationContext webApplicationContext;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">interfaceIdempotenceTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//初始化MockMvc</span></span><br><span class="line">        MockMvc mockMvc = MockMvcBuilders.webAppContextSetup(webApplicationContext).build();</span><br><span class="line">        <span class="comment">//调用获取 token 接口</span></span><br><span class="line">        String token = mockMvc.perform(MockMvcRequestBuilders.get(<span class="string">&quot;/token&quot;</span>)</span><br><span class="line">                .accept(MediaType.TEXT_HTML))</span><br><span class="line">                .andReturn()</span><br><span class="line">                .getResponse().getContentAsString();</span><br><span class="line">        log.info(<span class="string">&quot;获取的token串：&#123;&#125;&quot;</span>, token);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;第&#123;&#125;次调用接口&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">            String result = mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">&quot;/test&quot;</span>)</span><br><span class="line">                    .header(<span class="string">&quot;token&quot;</span>, token)</span><br><span class="line">                    .accept(MediaType.TEXT_HTML))</span><br><span class="line">                    .andReturn().getResponse().getContentAsString();</span><br><span class="line">            log.info(<span class="string">&quot;调用结果:&#123;&#125;&quot;</span>, result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用结果返回如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[main] org.example.IdempotentTest : 获取的token串：ed965e9e-42ce-4865-a1fd-25d13ad5544b</span><br><span class="line">[main] org.example.IdempotentTest : 第1次调用接口</span><br><span class="line">[main] org.example.IdempotentTest : 调用结果:正常调用</span><br><span class="line">[main] org.example.IdempotentTest : 第2次调用接口</span><br><span class="line">[main] org.example.IdempotentTest : 调用结果:重复调用</span><br><span class="line">[main] org.example.IdempotentTest : 第3次调用接口</span><br><span class="line">[main] org.example.IdempotentTest : 调用结果:重复调用</span><br><span class="line">[main] org.example.IdempotentTest : 第4次调用接口</span><br><span class="line">[main] org.example.IdempotentTest : 调用结果:重复调用</span><br><span class="line">[main] org.example.IdempotentTest : 第5次调用接口</span><br><span class="line">[main] org.example.IdempotentTest : 调用结果:重复调用</span><br></pre></td></tr></table></figure>

<h2 id="3-接口数据安全方案"><a href="#3-接口数据安全方案" class="headerlink" title="3. 接口数据安全方案"></a><span class="tit-h2" id="interfaceSafe">3. 接口数据安全方案</span></h2><h3 id="3-1-数据加密，防止报文明文传输"><a href="#3-1-数据加密，防止报文明文传输" class="headerlink" title="3.1 数据加密，防止报文明文传输"></a>3.1 数据加密，防止报文明文传输</h3><p>数据在网络传输过程中，很容易被抓包，如果使用的时http协议，因为他是明文传输的，用户的数据很容易被别人获取，所以需要对数据加密。</p>
<h4 id="3-1-1-加密方式"><a href="#3-1-1-加密方式" class="headerlink" title="3.1.1 加密方式"></a>3.1.1 加密方式</h4><p>常见搭的实现方式，就是对<strong>关键字段</strong>加密，比如<strong>登陆接口对密码加密</strong>。一般采用的是：对称加密算法（AES<br>来加解密，或者哈希算法（MD5）</p>
<blockquote>
<p>对称加密：加密和揭秘使用相同的密钥的加密算法<br><img src="/special-interface/index/10.png" alt="对称加密"><br>非对称加密：非对称加密算法需要两个密钥（公开密钥和私有密钥）。公钥与私钥是成对存在的，如果用公钥对数据进行加密，只有对应的私钥才能解密。<br><img src="/special-interface/index/11.png" alt="非对称加密"><br>更安全的做法，就是用非对称加密算法（RSA、SM2），公钥加密、私钥解密。</p>
</blockquote>
<h4 id="3-1-2-HTTPS安全协议"><a href="#3-1-2-HTTPS安全协议" class="headerlink" title="3.1.2 HTTPS安全协议"></a>3.1.2 HTTPS安全协议</h4><p>如果想对所有字段都加密的话，一般都推荐使用<strong>HTTPS协议</strong>，<code>https</code>就是在<code>http</code>和<code>tcp</code>之间添加一层加密层SSL。<br><img src="/special-interface/index/12.png" alt="HTTPS请求流程"></p>
<ol>
<li>客户端发起Https请求，连接到服务器的443端口。</li>
<li>服务器必须要有一套数字证书（证书内容有公钥、证书颁发机构、失效日期等）。</li>
<li>服务器将自己的数字证书发送给客户端（公钥在证书里面，私钥由服务器持有）。</li>
<li>客户端收到数字证书之后，会验证证书的合法性。如果证书验证通过，就会生成一个随机的对称密钥，用证书的公钥加密。</li>
<li>客户端将公钥加密后的密钥发送到服务器。</li>
<li>服务器接收到客户端发来的密文密钥之后，用自己之前保留的私钥对其进行非对称解密，解密之后就得到客户端的密钥，然后用客户端密钥对返回数据进行对称加密，酱紫传输的数据都是密文啦。</li>
<li>服务器将加密后的密文返回到客户端。</li>
<li>客户端收到后，用自己的密钥对其进行对称解密，得到服务器返回的数据。</li>
</ol>
<p>基本的日常业务，数据传输加密这块的话，用https就可以，如果安全性要求较高的，比如登陆注册这些，需要传输密码的，密码就可以使用RSA等非对称加密算法，对密码加密。如果你的业务，安全性要求很高，你可以模拟https这个流程，对报文，再做一次加解密。</p>
<h3 id="3-2-数据加签验签"><a href="#3-2-数据加签验签" class="headerlink" title="3.2 数据加签验签"></a>3.2 数据加签验签</h3><p>数据报文加签验签，就是<strong>保证数据传输安全的常用手段</strong>，它可以<strong>保证数据在传输过程中不给篡改</strong>。</p>
<h4 id="3-2-1-什么是加签验签"><a href="#3-2-1-什么是加签验签" class="headerlink" title="3.2.1 什么是加签验签"></a>3.2.1 什么是加签验签</h4><ul>
<li>数据加签：用Hash算法（md5、SHA-256）把原始请求参数生成报文摘要，然后用私钥对这个摘要加密，就得到这个报文对应的数字签名sign（这个过程就是加签）。通常来说，请求方会把数字签名和报文原文一并发送给接收方<br><img src="/special-interface/index/13.png" alt="数据加签"></li>
<li>验签：接收防拿到原始报文和数字签名sign后，用同一个hash算法（比如都用MD5）从报文中生成摘要A，然后用对方提供的公钥对数字签名进行解密，得到摘要B，对比A和B是否相同，就可以知道报文是否被篡改过。<br><img src="/special-interface/index/14.png" alt="验签"></li>
</ul>
<p><em>通俗一点讲：就是把请求参数，按照一定规则，利用hash算法+加密算法生成一个唯一标签sign。验签的话，就是把请求参数按照相同的规则处理，再用相同的hash算法，和对应的密钥解密处理，以对比这个签名是否一致。</em></p>
<h4 id="3-2-2-有了Https，为什么还要加签验签"><a href="#3-2-2-有了Https，为什么还要加签验签" class="headerlink" title="3.2.2 有了Https，为什么还要加签验签"></a>3.2.2 有了Https，为什么还要加签验签</h4><p>加签验签主要是防止数据在传输过程中被篡改，那如果都用了Https协议加密数据了，为啥还需要加签验签？</p>
<blockquote>
<p>数据在传输过程中被加密了，理论上，即使被抓包，数据也不会被篡改，但是HTTPS不是绝对的安全，另外Https加密的部分只是在外网，然后很对服务是内网相互跳转的，捡钱也可以保证在这里不被中间人篡改；</p>
</blockquote>
<h3 id="3-3-token-授权认证机制"><a href="#3-3-token-授权认证机制" class="headerlink" title="3.3 token 授权认证机制"></a>3.3 token 授权认证机制</h3><p>日常开发中，我们的网站或者App都是需要用户登录的，那么如果是非登录接口，如何确保安全，如何确认用户身份？可以使用<strong>token授权机制</strong></p>
<blockquote>
<p>用户在客户端输入用户名和密码，点击登录后，服务器会校验密码，然后返回客户端一个token，并将token 以键值对的形式存放在缓存中（一般为Redis）后续用户访问需要授权的模块的操作时，都携带这个token，服务器接收到请求后，先对token验证，如果token存在，才表名时合法请求</p>
</blockquote>
<p>这个其实用过jwt的同学应该都会清楚这个流程。</p>
<h4 id="3-3-1-token授权认证方案"><a href="#3-3-1-token授权认证方案" class="headerlink" title="3.3.1 token授权认证方案"></a>3.3.1 token授权认证方案</h4><p><img src="/special-interface/index/15.png" alt="token 授权认证机制"></p>
<ol>
<li>用户输入用户名和密码，发起登录请求</li>
<li>服务端校验密码，如果校验通过，生成全局唯一token</li>
<li>将token存在redis中，key是token, value为用户ID，设置一个过期时间</li>
<li>将token返回给客户端</li>
<li>用户发起其他业务请求时，需要携带这个token</li>
<li>后台服务统一拦截接口请求，进行token有效性验证，并从中获取用户信息，供后续业务逻辑使用，如果token不存在，请求无效。</li>
</ol>
<h4 id="3-3-2-如何保证token的安全？token被劫持呢？"><a href="#3-3-2-如何保证token的安全？token被劫持呢？" class="headerlink" title="3.3.2 如何保证token的安全？token被劫持呢？"></a>3.3.2 如何保证token的安全？token被劫持呢？</h4><p>比如说，如果我拿到了token，是不是就可以调用服务端的任何接口？可以从下面几方面考虑</p>
<ul>
<li>token设置合理的有效期</li>
<li>使用https协议</li>
<li>token可以再次加密</li>
<li>如果访问的时敏感信息，单纯的加token是不够的，通常还会设置白名单</li>
</ul>
<h3 id="3-4-时间戳timestamp超时机制"><a href="#3-4-时间戳timestamp超时机制" class="headerlink" title="3.4 时间戳timestamp超时机制"></a>3.4 时间戳timestamp超时机制</h3><p>数据是很容易抓包，假设我们使用了<code>https</code>和加签，即使中间人抓到了数据报文，他也看不到真实数据，但是也要避免那种使用抓取的数据包进行恶意请求（如DOS攻击），以搞垮系统</p>
<p>这里我们可以引入<strong>时间戳超时机制</strong>，来保证接口安全。用户每次请求都带上当前时间的时间戳<code>timestamp</code>，服务器收到<code>timestamp</code>后，解密，验签通过后，与服务器当前时间进行比对，如果时间大于一定的时间（比如5分钟），则任务该请求无效。</p>
<h3 id="3-5-timestamp-nonce方案防止重放攻击"><a href="#3-5-timestamp-nonce方案防止重放攻击" class="headerlink" title="3.5 timestamp+nonce方案防止重放攻击"></a>3.5 timestamp+nonce方案防止重放攻击</h3><p>时间戳超时机制也是有漏洞的，如果是在时间差内，黑客进行重放攻击，那么就可以使用<code>timestamp + nonce</code>方案了</p>
<p><code>nonce</code>指唯一的随机字符串，用来标识每个被清明的请求，我们可以将每次请求的<code>nonce</code>参数存储到一个<code>set</code>集合中，或者使用json格式存储到数据库或缓存中，每次处理http请求是，首先判断请求的<code>nonce</code>参数是否在该集合中，如果存在则认为非法请求。<br>然而对于服务器而言， 永久保存<code>nonce</code>的代价非常大，可以通过timestamp来优化，因为timestamp参数对于超过5min的请求，都认为非法请求，所以我们只需要存储5min内的<code>nonce</code>参数集合即可。</p>
<h3 id="3-6-限流机制"><a href="#3-6-限流机制" class="headerlink" title="3.6 限流机制"></a>3.6 限流机制</h3><p>如果用户本来就是真实用户，他恶意频繁调用接口，那么这个时候就需要接入<strong>限流</strong>了。</p>
<p>常用的限流算法有： <strong>令牌桶</strong>和<strong>漏桶算法</strong></p>
<p>可以使用Guava的<code>RateLimiter</code>单机版限流，也可以使用Redis分布式限流，还可以使用阿里开源组件<code>sentinel</code>限流。比如：一分钟可以接受多少次请求</p>
<h3 id="3-7-黑名单机制"><a href="#3-7-黑名单机制" class="headerlink" title="3.7 黑名单机制"></a>3.7 黑名单机制</h3><p>如果发现了真实用户恶意请求,你可以搞个黑名单机制，把该用户拉黑。一般情况，会有些竞争对手，或者不坏好意的用户，想搞你的系统的。所以，为了保证安全，一般我们的业务系统，需要有个黑名单机制。对于黑名单发起的请求，直接返回错误码好了</p>
<h3 id="3-8-白名单机制"><a href="#3-8-白名单机制" class="headerlink" title="3.8 白名单机制"></a>3.8 白名单机制</h3><p>有了黑名单机制，也可以搞个白名单机制啦。第三方需要接入我们的系统时，是需要提前申请网络白名单的。申请个IP网络白名单，只有白名单里面的请求，才可以访问我们的系统。</p>
<h3 id="3-9-数据脱敏掩码"><a href="#3-9-数据脱敏掩码" class="headerlink" title="3.9 数据脱敏掩码"></a>3.9 数据脱敏掩码</h3><p>对于密码，或者手机号、身份证这些敏感信息，一般都需要脱敏掩码再展示的，如果是密码，还需要加密再保存到数据库。</p>
<p>对于手机号、身份证信息这些，日常开发中，在日志排查时，看到的都应该是掩码的。目的就是尽量不泄漏这些用户信息，虽然能看日志的只是开发和运维，但是还是需要防一下，做掩码处理。</p>
<p>对于密码保存到数据库，我们肯定不能直接明文保存。最简单的也需要MD5处理一下再保存，Spring Security中的 <code>BCryptPasswordEncoder</code>也可以，它的底层是采用<code>SHA-256 +随机盐+密钥对密码</code>进行加密，而SHA和MD系列是一样的，都是hash摘要类的算法。</p>
<h3 id="3-10-数据参数合法性校验"><a href="#3-10-数据参数合法性校验" class="headerlink" title="3.10 数据参数合法性校验"></a>3.10 数据参数合法性校验</h3><p>接口数据的安全性保证，还需要我们的系统，有个数据合法性校验，简单来说就是参数校验，比如身份证长度，手机号长度，是否是数字等等。 </p>
<h2 id="4-接口性能优化方案"><a href="#4-接口性能优化方案" class="headerlink" title="4. 接口性能优化方案"></a><span class="tit-h2" id="interfacePerformance">4. 接口性能优化方案</span></h2><h3 id="4-1-本地缓存"><a href="#4-1-本地缓存" class="headerlink" title="4.1 本地缓存"></a>4.1 本地缓存</h3><blockquote>
<p>本地缓存，最大的优点是应用和cache是在同一个进程内部，请求缓存非常快，没有过多的网络开销等，在单应用不要集群支持或者集群情况下各节点无需互相通知的场景使用本地缓存比较合适。 </p>
<p>缺点；缓存和应用程序耦合，多个应用程序无法直接共享缓存，各应用或集群的各个节点都需要维护自己的缓存，对内存是一种浪费。</p>
</blockquote>
<p>常用的本地缓存框架有<code>Guava</code>、<code>Caffeine</code>等，引入jar包即可直接使用</p>
<h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><ol>
<li>对缓存内容实效性要求不高，能够接收一定的延迟，可以设置较短过期时间，被动失效更新保持数据的新鲜度</li>
<li>缓存的内容不会改变，比如：订单号与Uid的映射关系，一旦创建就不会发生改变</li>
</ol>
<h4 id="注意问题"><a href="#注意问题" class="headerlink" title="注意问题"></a>注意问题</h4><ul>
<li>内存cache数据条目上限，避免内存占用过多导致应用瘫痪</li>
<li>内存中的数据一处策略</li>
<li>实际开发中最好采用成熟的开源框架，避免踩坑</li>
</ul>
<h3 id="4-2-分布式缓存"><a href="#4-2-分布式缓存" class="headerlink" title="4.2 分布式缓存"></a>4.2 分布式缓存</h3><p>分布式缓存借助分布式概念，集群化部署、独立运维、荣康无上限。虽然会有网络传输损耗，但1~2ms的延迟相较其他的可以忽略。</p>
<p>优秀的分布式缓存系统有大家所熟知的 <code>Memcached</code> 、<code>Redis</code>。对比关系型数据库和缓存存储，其在读和写性能上的差距可谓天壤之别，<code>Redis</code>单节点已经可以做到 8W+ QPS。设计方案时尽量把读写压力从数据库转移到缓存上，有效保护脆弱的关系型数据库。</p>
<h4 id="注意问题-1"><a href="#注意问题-1" class="headerlink" title="注意问题"></a>注意问题</h4><ul>
<li>缓存的命中率，如果太低无法起到抗压的作用，压力还是压到了下游的存储层</li>
<li>缓存的空间大小，这个要根据具体业务场景来评估，防止空间不足，导致一些热点数据被置换出去</li>
<li>缓存数据的一致性</li>
<li>缓存的快速扩容问题</li>
<li>缓存的接口平均RT，最大RT，最小RT</li>
<li>缓存的QPS</li>
<li>网络出口流量</li>
<li>客户端连接数</li>
</ul>
<h3 id="4-3-并行化"><a href="#4-3-并行化" class="headerlink" title="4.3 并行化"></a>4.3 并行化</h3><p>梳理业务流程，画出时序图，分清楚哪些是串行？哪些是并行？充分利用多核 CPU 的并行化处理能力</p>
<p>如下图所示，存在上下文依赖的采用串行处理，否则采用并行处理<br><img src="/special-interface/index/16.png" alt="并行化"></p>
<p>JDK 的 <code>CompletableFuture</code>  提供了非常丰富的API，大约有50种 处理串行、并行、组合以及处理错误的方法，可以满足我们的场景需求。</p>
<h3 id="4-4-异步化"><a href="#4-4-异步化" class="headerlink" title="4.4 异步化"></a>4.4 异步化</h3><p>一个接口的 RT 响应时间是由内部业务逻辑的复杂度决定的，执行的流程约简单，那接口的耗费时间就越少。<br>所以，普遍做法就是将接口内部的非核心逻辑剥离出来，异步化来执行。</p>
<p>下图是一个电商的创建订单接口，创建订单记录并插入数据库是我们的核心诉求，至于后续的用户通知，如：给用户发个短信等，如果失败，并不影响主流程的完成。<br>我们会将这些操作从主流程中剥离出来。<br><img src="/special-interface/index/17.png" alt="异步化"></p>
<h3 id="4-5-池化"><a href="#4-5-池化" class="headerlink" title="4.5 池化"></a>4.5 池化</h3><p>TCP 三次握手非常耗费性能，所以我们引入了 Keep-Alive 长连接，避免频繁的创建、销毁连接。</p>
<p>池化技术也是类似道理，将很多能重复使用的对象缓存起来，放到一个池子里，用的时候去申请一个实例对象 ，用完后再放回池子里。</p>
<p>池化技术的核心是资源的“预分配”和“循环使用”，常见的池化技术的使用有：线程池、内存池、数据库连接池、HttpClient 连接池等</p>
<blockquote>
<p>连接池的几个重要参数：最小连接数、空闲连接数、最大连接数<br>比如创建一个线程池：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> ThreadPoolExecutor(<span class="number">3</span>, <span class="number">15</span>, <span class="number">5</span>, TimeUnit.MINUTES,</span><br><span class="line">    <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">10</span>),</span><br><span class="line">    <span class="keyword">new</span> ThreadFactoryBuilder().setNameFormat(<span class="string">&quot;data-thread-%d&quot;</span>).build(),</span><br><span class="line">    (r, executor) -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (r <span class="keyword">instanceof</span> BaseRunnable) &#123;</span><br><span class="line">            ((BaseRunnable) r).rejectedExecute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="4-6-分库分表"><a href="#4-6-分库分表" class="headerlink" title="4.6 分库分表"></a>4.6 分库分表</h3><p>MySQL的底层 innodb 存储引擎采用 B+ 树结构，三层结构支持千万级的数据存储。</p>
<p>当然，现在互联网的用户基数非常大，这么大的用户量，单表通常很难支撑业务需求，将一个大表水平拆分成多张结构一样的物理表，可以极大缓解存储、访问压力。<br><img src="/special-interface/index/18.png" alt="分库分表"><br>分库分表主要有两个方向：<strong>垂直</strong>和<strong>水平</strong>。</p>
<p>说实话垂直方向（即业务方向）更简单。</p>
<p>在水平方向（即数据方向）上，分库和分表的作用，其实是有区别的，不能混为一谈。</p>
<ul>
<li>分库：是为了解决数据库连接资源不足问题，和磁盘IO的性能瓶颈问题。</li>
<li>分表：是为了解决单表数据量太大，sql语句查询数据时，即使走了索引也非常耗时问题。此外还可以解决消耗cpu资源问题。</li>
<li>分库分表：可以解决 数据库连接资源不足、磁盘IO的性能瓶颈、检索数据耗时 和 消耗cpu资源等问题。<br>如果在有些业务场景中，用户并发量很大，但是需要保存的数据量很少，这时可以只分库，不分表。</li>
</ul>
<p>如果在有些业务场景中，用户并发量不大，但是需要保存的数量很多，这时可以只分表，不分库。</p>
<p>如果在有些业务场景中，用户并发量大，并且需要保存的数量也很多时，可以分库分表。</p>
<h3 id="4-7-SQL-优化"><a href="#4-7-SQL-优化" class="headerlink" title="4.7 SQL 优化"></a>4.7 SQL 优化</h3><p>虽然有了分库分表，从存储维度可以减少很大压力，但「富不过三代」，我们还是要学会精打细算，就比如所有的数据库操作都是通过 SQL 来执行。<br>一个不好的SQL会对接口性能产生很大影响。</p>
<p>比如：</p>
<ul>
<li>搞了个深度翻页，每次数据库引擎都要预查非常多的数据</li>
<li>索引缺失，走了全表扫描</li>
<li>一条 SQL 一次查询 几万条数据<br><img src="/special-interface/index/20.png"></li>
</ul>
<h3 id="4-8-预先计算"><a href="#4-8-预先计算" class="headerlink" title="4.8 预先计算"></a>4.8 预先计算</h3><p>有很多业务的计算逻辑比较复杂，比如页面要展示一个网站的 PV、微信的拼手气红包等</p>
<p>如果在用户访问接口的瞬间触发计算逻辑，而这些逻辑计算的耗时通常比较长，很难满足用户的实时性要求。<br>一般我们都是提前计算，然后将算好的数据预热到缓存中，接口访问时，只需要读缓存即可</p>
<h3 id="4-9-事务相关"><a href="#4-9-事务相关" class="headerlink" title="4.9 事务相关"></a>4.9 事务相关</h3><ol>
<li><p>很多业务逻辑有事务要求，针对多个表的写操作要保证事务特性。<br>但事务本身又特别耗费性能，为了能尽快结束，不长时间占用数据库连接资源，我们一般要减少事务的范围。<br>将很多查询逻辑放到事务外部处理。</p>
</li>
<li><p>另外在事务内部，一般不要进行远程的 RPC 接口访问，一般占用的时间比较长</p>
</li>
<li><p>@Transactional注解这种声明式事务的方式提供事务功能，容易造成大事务，引发其他的问题<br> <img src="/special-interface/index/22.png"><br>从图中能够看出，大事务问题可能会造成接口超时，对接口的性能有直接的影响。</p>
<p> <strong>优化大事务:</strong></p>
<ul>
<li>少用@Transactional注解</li>
<li>将查询(select)方法放到事务外</li>
<li>事务中避免远程调用</li>
<li>事务中避免一次性处理太多数据</li>
<li>有些功能可以非事务执行</li>
<li>有些功能可以异步处理</li>
</ul>
</li>
</ol>
<h3 id="4-10-海量数据处理"><a href="#4-10-海量数据处理" class="headerlink" title="4.10 海量数据处理"></a>4.10 海量数据处理</h3><p>如果数据量过大，除了采用关系型数据库的分库分表外，我们还可以采用 NoSQL；如：MongoDB、Hbase、Elasticsearch、TiDB<br>NoSQL 采用分区架构，对数据海量存储能较好的支持，但是事务方面可能没那么友好。</p>
<p>每一个 NoSQL 框架都有自己的特色，有支持 搜索的、有列式存储、有文档存储，大家可以根据自己的业务场景选择合适的框架。</p>
<h3 id="4-11-批量读写"><a href="#4-11-批量读写" class="headerlink" title="4.11 批量读写"></a>4.11 批量读写</h3><p>当下的计算机CPU处理速度还是很多的，而 IO 一般是个瓶颈，如：磁盘IO、网络IO。<br>有这么一个场景，查询 100 个人的账户余额？<br>有两个设计方案：</p>
<ol>
<li>方案一：开单次查询接口，调用方内部循环调用 100 次</li>
<li>方案二：服务提供方开一个批量查询接口，调用方只需查询 1 次 (更优)</li>
</ol>
<p>数据库的写操作也是一样道理，为了提高性能，我们一般都是采用批量更新。</p>
<h3 id="4-12-锁的粒度"><a href="#4-12-锁的粒度" class="headerlink" title="4.12 锁的粒度"></a>4.12 锁的粒度</h3><p>并发业务，为了防止数据的并发更新对数据的正确性产生干扰，我们通常是采用 加锁 ，涉及独享资源每次只能是一个线程来处理。<br>问题点在于，锁是成对出现的，有加锁就是释放锁<br>对于非竞争资源，我们没有必要圈在锁内部，会严重影响系统的并发能力。<br>控制锁的范围是我们要考虑的重点。</p>
<h4 id="4-12-1-synchronized"><a href="#4-12-1-synchronized" class="headerlink" title="4.12.1 synchronized"></a>4.12.1 synchronized</h4><p>在java中提供了<code>synchronized</code>关键字给我们的代码加锁。 通常有两种写法：<code>在方法上加锁</code> 和<code>在代码块上加锁</code>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//上传文件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="title">doSave</span><span class="params">(String fileUrl)</span> </span>&#123;</span><br><span class="line">    mkdir();    <span class="comment">//创建文件夹</span></span><br><span class="line">    uploadFile(fileUrl);    <span class="comment">//上传</span></span><br><span class="line">    sendMessage(fileUrl);   <span class="comment">//发送信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里加锁的目的是为了防止并发的情况下，创建了相同的目录，第二次会创建失败，影响业务功能。</p>
<p>但这种直接在方法上加锁，锁的粒度有点粗。因为<code>doSave</code>方法中的上传文件和发消息方法，是不需要加锁的。只有创建目录方法，才需要加锁。</p>
<p>我们都知道文件上传操作是非常耗时的，如果将整个方法加锁，那么需要等到整个方法执行完之后才能释放锁。显然，这会导致该方法的性能很差，变得得不偿失。</p>
<p>我们可以改成在代码块上加锁了，具体代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSave</span><span class="params">(String path,String fileUrl)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!exists(path)) &#123;</span><br><span class="line">          mkdir(path);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    uploadFile(fileUrl);</span><br><span class="line">    sendMessage(fileUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>样改造之后，锁的粒度一下子变小了，只有并发创建目录功能才加了锁。而创建目录是一个非常快的操作，即使加锁对接口的性能影响也不大。<br>最重要的是，其他的上传文件和发送消息功能，任然可以并发执行。</p>
<p>当然，这种做在单机版的服务中，是没有问题的。但现在部署的生产环境，为了保证服务的稳定性，一般情况下，同一个服务会被部署在多个节点中。如果哪天挂了一个节点，其他的节点服务任然可用。<br>多节点部署避免了因为某个节点挂了，导致服务不可用的情况。同时也能分摊整个系统的流量，避免系统压力过大。</p>
<p>同时它也带来了新的问题：<code>synchronized</code>只能保证一个节点加锁是有效的，但如果有多个节点如何加锁呢?</p>
<p>这就需要使用：分布式锁了。目前主流的分布式锁包括：<strong>redis分布式锁</strong>、<strong>zookeeper分布式锁</strong> 和 <strong>数据库分布式锁</strong></p>
<h4 id="4-12-2-Redis分布式锁"><a href="#4-12-2-Redis分布式锁" class="headerlink" title="4.12.2 Redis分布式锁"></a>4.12.2 Redis分布式锁</h4><p>在分布式系统中，由于redis分布式锁相对于更简单和高效，成为了分布式锁的首先，被我们用到了很多实际业务场景当中。</p>
<p>使用redis分布式锁的伪代码如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSave</span><span class="params">(String path,String fileUrl)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    String result = jedis.set(lockKey, requestId, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, expireTime);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;OK&quot;</span>.equals(result)) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!exists(path)) &#123;</span><br><span class="line">         mkdir(path);</span><br><span class="line">         uploadFile(fileUrl);</span><br><span class="line">         sendMessage(fileUrl);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">      unlock(lockKey,requestId);</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>跟之前使用synchronized关键字加锁时一样，这里锁的范围也太大了，换句话说就是锁的粒度太粗，这样会导致整个方法的执行效率很低。<br>其实只有创建目录的时候，才需要加分布式锁，其余代码根本不用加锁。</p>
<p>于是，我们需要优化一下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSave</span><span class="params">(String path,String fileUrl)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(<span class="keyword">this</span>.tryLock()) &#123;</span><br><span class="line">      mkdir(path);</span><br><span class="line">   &#125;</span><br><span class="line">   uploadFile(fileUrl);</span><br><span class="line">   sendMessage(fileUrl);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    String result = jedis.set(lockKey, requestId, <span class="string">&quot;NX&quot;</span>, <span class="string">&quot;PX&quot;</span>, expireTime);</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;OK&quot;</span>.equals(result)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">      unlock(lockKey,requestId);</span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码将加锁的范围缩小了，只有创建目录时才加了锁。这样看似简单的优化之后，接口性能能提升很多。说不定，会有意外的惊喜喔。哈哈哈。</p>
<p>redis分布式锁虽说好用，但它在使用时，有很多注意的细节，隐藏了很多坑。以后遇到了再记录下来。</p>
<h4 id="4-12-3-数据库分布式锁"><a href="#4-12-3-数据库分布式锁" class="headerlink" title="4.12.3 数据库分布式锁"></a>4.12.3 数据库分布式锁</h4><p>mysql数据库中主要有三种锁：</p>
<ul>
<li>表锁：加锁快，不会出现死锁。但锁定粒度大，发生锁冲突的概率最高，并发度最低。</li>
<li>行锁：加锁慢，会出现死锁。但锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</li>
<li>间隙锁：开销和加锁时间界于表锁和行锁之间。它会出现死锁，锁定粒度界于表锁和行锁之间，并发度一般。<br>并发度越高，意味着接口性能越好。</li>
</ul>
<p>所以数据库锁的优化方向是：</p>
<p><strong>优先使用行锁，其次使用间隙锁，再其次使用表锁。</strong></p>
<h3 id="4-13-上下文传递"><a href="#4-13-上下文传递" class="headerlink" title="4.13 上下文传递"></a>4.13 上下文传递</h3><p>当需要一个数据时，如果没有调 RPC 接口去查，比如想用户信息这种通用型接口<br>因为前面要用，肯定已经查过。但是我们知道方法的调用都是以栈帧的形式来传递，随着一个方法执行完毕而出栈，方法内部的局部变量也就被回收了。<br>后面如果又要用到这个信息，只能重新去查。<br>如果能定义一个Context 上下文对象，将一些中间信息存储并传递下来，会大大减轻后面流程的再次查询压力。</p>
<h3 id="4-14-空间大小"><a href="#4-14-空间大小" class="headerlink" title="4.14 空间大小"></a>4.14 空间大小</h3><p>创建集合<code>List&lt;String&gt; lists = Lists.newArrayList();</code>如果说，要往里面插入 1000000  个元素，有没有更好的方式？</p>
<ol>
<li>方式一<br> <img src="/special-interface/index/19.png"><br>结果：1000000 次插入 List，花费时间：154</li>
<li>方式二<br><img src="/special-interface/index/20.png"><br>结果：1000000 次插入 List，花费时间：134</li>
</ol>
<p>如果我们预先知道集合要存储多少元素，初始化集合时尽量指定大小，尤其是容量较大的集合。<br>ArrayList 初始大小是 10，超过阈值会按 1.5 倍大小扩容，涉及老集合到新集合的数据拷贝，浪费性能。</p>
<h3 id="4-15-查询优化"><a href="#4-15-查询优化" class="headerlink" title="4.15 查询优化"></a>4.15 查询优化</h3><p>避免一次从 DB 中查询大量的数据到内存中，可能会导致内存不足，建议采用分批、分页查询</p>
<h2 id="5-接口设计的锦囊"><a href="#5-接口设计的锦囊" class="headerlink" title="5. 接口设计的锦囊"></a><span class="tit-h2" id="interfaceDefine">5. 接口设计的锦囊</span></h2><p>别说话，先看图：<br><img src="/special-interface/index/28.png"></p>
<h3 id="5-1-批量思想：批量操作数据库"><a href="#5-1-批量思想：批量操作数据库" class="headerlink" title="5.1 批量思想：批量操作数据库"></a>5.1 批量思想：批量操作数据库</h3><p>打个比喻:假如你需要搬一万块砖到楼顶,你有一个电梯,电梯一次可以放适量的砖（最多放500）,<br>你可以选择一次运送一块砖,也可以一次运送500,你觉得哪种方式更方便，时间消耗更少?</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//优化前</span></span><br><span class="line"><span class="comment">//for循环单笔入库</span></span><br><span class="line"><span class="keyword">for</span>(TransDetail detail:transDetailList)&#123;</span><br><span class="line">   insert(detail);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//优化后</span></span><br><span class="line">batchInsert(transDetailList);</span><br></pre></td></tr></table></figure>
<h3 id="5-2-异步思想：耗时操作，考虑放到异步执行"><a href="#5-2-异步思想：耗时操作，考虑放到异步执行" class="headerlink" title="5.2 异步思想：耗时操作，考虑放到异步执行"></a>5.2 异步思想：耗时操作，考虑放到异步执行</h3><p>耗时操作，考虑用异步处理，这样可以降低接口耗时。 假设一个转账接口，匹配联行号，是同步执行的，但是它的操作耗时有点长，优化前的流程：<br><img src="/special-interface/index/29.png"></p>
<p>为了降低接口耗时，更快返回，你可以把<strong>匹配联行号移到异步处理</strong>，优化后：<br><img src="/special-interface/index/30.png"></p>
<ul>
<li>除了转账这个例子，日常工作中还有很多这种例子。比如：用户注册成功后，短信邮件通知，也是可以异步处理的~</li>
<li>至于异步的实现方式，你可以用线程池，也可以用消息队列实现。</li>
</ul>
<h3 id="5-3-空间换时间思想：恰当使用缓存。"><a href="#5-3-空间换时间思想：恰当使用缓存。" class="headerlink" title="5.3 空间换时间思想：恰当使用缓存。"></a>5.3 空间换时间思想：恰当使用缓存。</h3><p>在适当的业务场景，恰当地使用缓存，是可以大大提高接口性能的。缓存其实就是一种空间换时间的思想，就是你把要查的数据，提前放好到缓存里面，需要时，直接查缓存，而避免去查数据库或者计算的过程。</p>
<p>这里的缓存包括：<code>Redis缓存</code>，<code>JVM本地缓存</code>，<code>memcached</code>，或者<code>Map</code>等等。我举个我工作中，一次使用缓存优化的设计吧，比较简单，但是思路很有借鉴的意义。</p>
<blockquote>
<p>那是一次转账接口的优化，老代码，每次转账，都会根据客户账号，查询数据库，计算匹配联行号。<br><img src="/special-interface/index/31.png"></p>
</blockquote>
<p>优化前：每次都查数据库，都计算匹配，比较耗时，所以使用缓存进行优化</p>
<h3 id="5-4-预取思想：提前初始化到缓存"><a href="#5-4-预取思想：提前初始化到缓存" class="headerlink" title="5.4 预取思想：提前初始化到缓存"></a>5.4 预取思想：提前初始化到缓存</h3><p>预取思想很容易理解，就是<strong>提前把要计算查询的数据，初始化到缓存</strong>。如果你在未来某个时间需要用到某个经过复杂计算的数据，才实时去计算的话，可能耗时比较大。这时候，我们可以采取预取思想，<strong>提前把将来可能需要的数据计算好，放到缓存中，等需要的时候，去缓存取就行</strong>。这将大幅度提高接口性能。</p>
<h3 id="5-5-池化思想：预分配与循环使用"><a href="#5-5-池化思想：预分配与循环使用" class="headerlink" title="5.5 池化思想：预分配与循环使用"></a>5.5 池化思想：预分配与循环使用</h3><blockquote>
<p>线程池可以帮我们管理线程，避免增加创建线程和销毁线程的资源损耗。</p>
</blockquote>
<p>如果你每次需要用到线程，都去创建，就会有增加一定的耗时，而线程池可以重复利用线程，避免不必要的耗时。池化技术不仅仅指线程池，很多场景都有池化思想的体现，它的本质就是预分配与循环使用。</p>
<p>比如TCP三次握手，大家都很熟悉吧，它为了减少性能损耗，引入了Keep-Alive长连接，避免频繁的创建和销毁连接。当然，类似的例子还有很多，如数据库连接池、HttpClient连接池。</p>
<p>我们写代码的过程中，学会池化思想，最直接相关的就是使用线程池而不是去new一个线程。</p>
<h3 id="5-6-事件回调思想：拒绝阻塞等待"><a href="#5-6-事件回调思想：拒绝阻塞等待" class="headerlink" title="5.6 事件回调思想：拒绝阻塞等待"></a>5.6 事件回调思想：拒绝阻塞等待</h3><p>如果你调用一个系统B的接口，但是它处理业务逻辑，耗时需要10s甚至更多。然后你是一直阻塞等待，直到系统B的下游接口返回，再继续你的下一步操作吗？这样显然不合理。</p>
<p>我们参考IO多路复用模型。即我们不用阻塞等待系统B的接口，而是先去做别的操作。等系统B的接口处理完，通过事件回调通知，我们接口收到通知再进行对应的业务操作即可。</p>
<h3 id="5-7-远程调用由串行改为并行"><a href="#5-7-远程调用由串行改为并行" class="headerlink" title="5.7 远程调用由串行改为并行"></a>5.7 远程调用由串行改为并行</h3><p>假设我们设计一个APP首页的接口，它需要查用户信息、需要查banner信息、需要查弹窗信息等等。如果是串行一个一个查，比如查用户信息200ms，查banner信息100ms、查弹窗信息50ms，那一共就耗时350ms了，如果还查其他信息，那耗时就更大了。<br><img src="/special-interface/index/32.png"><br>其实我们可以改为并行调用，即查用户信息、查banner信息、查弹窗信息，可以同时并行发起。<br><img src="/special-interface/index/33.png"></p>
<h3 id="5-8-锁粒度避免过粗"><a href="#5-8-锁粒度避免过粗" class="headerlink" title="5.8 锁粒度避免过粗"></a>5.8 锁粒度避免过粗</h3><p>在高并发场景，为了防止超卖等情况，我们经常需要加锁来保护共享资源。但是，如果加锁的粒度过粗，是很影响接口性能的。</p>
<p>什么是加锁粒度呢？</p>
<blockquote>
<p>其实就是就是你要锁住的范围是多大。比如你在家上卫生间，你只要锁住卫生间就可以了吧，不需要将整个家都锁起来不让家人进门吧，卫生间就是你的加锁粒度。</p>
</blockquote>
<p>不管你是<code>synchronized</code>加锁还是<code>redis</code>分布式锁，只需要在共享临界资源加锁即可，不涉及共享资源的，就不必要加锁。这就好像你上卫生间，不用把整个家都锁住，锁住卫生间门就可以了。</p>
<p>比如，在业务代码中，有一个<code>ArrayList</code>因为涉及到多线程操作，所以需要加锁操作，假设刚好又有一段比较耗时的操作（代码中的slowNotShare方法）不涉及线程安全问题。反例加锁，就是一锅端，全锁住:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不涉及共享资源的慢方法</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">slowNotShare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//错误的加锁方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wrong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">    IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10000</span>).parallel().forEach(i -&gt; &#123;</span><br><span class="line">        <span class="comment">//加锁粒度太粗了，slowNotShare其实不涉及共享资源</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">            slowNotShare();</span><br><span class="line">            data.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    log.info(<span class="string">&quot;cosume time:&#123;&#125;&quot;</span>, System.currentTimeMillis() - beginTime);</span><br><span class="line">    <span class="keyword">return</span> data.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>正例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">right</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> beginTime = System.currentTimeMillis();</span><br><span class="line">    IntStream.rangeClosed(<span class="number">1</span>, <span class="number">10000</span>).parallel().forEach(i -&gt; &#123;</span><br><span class="line">        slowNotShare();<span class="comment">//可以不加锁</span></span><br><span class="line">        <span class="comment">//只对List这部分加锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (data) &#123;</span><br><span class="line">            data.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    log.info(<span class="string">&quot;cosume time:&#123;&#125;&quot;</span>, System.currentTimeMillis() - beginTime);</span><br><span class="line">    <span class="keyword">return</span> data.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-9-切换存储方式：文件中转暂存数据"><a href="#5-9-切换存储方式：文件中转暂存数据" class="headerlink" title="5.9 切换存储方式：文件中转暂存数据"></a>5.9 切换存储方式：文件中转暂存数据</h3><p>如果数据太大，落地数据库实在是慢的话，<strong>就可以考虑先用文件的方式暂存</strong>。<strong>先保存文件，再异步下载文件，慢慢保存到数据库</strong>。</p>
<blockquote>
<p>之前开发了一个转账接口。如果是并发开启，10个并发度，每个批次1000笔转账明细数据，数据库插入会特别耗时，大概6秒左右；这个跟我们公司的数据库同步机制有关，并发情况下，因为优先保证同步，所以并行的插入变成串行啦，就很耗时。</p>
</blockquote>
<p>优化前，1000笔明细转账数据，先落地DB数据库，返回处理中给用户，再异步转账。如图：<br><img src="/special-interface/index/34.png"><br>记得当时压测的时候，高并发情况，这1000笔明细入库，耗时都比较大。所以我转换了一下思路，把批量的明细转账记录保存的文件服务器，然后记录一笔转账总记录到数据库即可。接着异步再把明细下载下来，进行转账和明细入库。最后优化后，性能提升了十几倍。</p>
<p>优化后，流程图如下：<br><img src="/special-interface/index/35.png"><br>如果你的接口耗时瓶颈就在<strong>数据库插入操作这里</strong>，用来批量操作等，还是效果还不理想，就可以考虑用文件或者MQ等暂存。有时候批量数据放到文件，会比插入数据库效率更高。</p>
<h3 id="5-10-索引"><a href="#5-10-索引" class="headerlink" title="5.10 索引"></a>5.10 索引</h3><p>提到接口优化，很多小伙伴都会想到添加索引。没错，添加索引是成本最小的优化，而且一般优化效果都很不错。</p>
<p>索引优化这块的话，一般从这几个维度去思考：</p>
<ul>
<li>你的SQL加索引了没？</li>
<li>你的索引是否真的生效？</li>
<li>你的索引建立是否合理？</li>
</ul>
<h4 id="5-10-1-没加索引"><a href="#5-10-1-没加索引" class="headerlink" title="5.10.1 没加索引"></a>5.10.1 没加索引</h4><p><code>explain</code>先看执行计划</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> user_info <span class="keyword">where</span> userId <span class="keyword">like</span> <span class="string">&#x27;%123&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>你也可以通过命令<code>show create table</code>，整张表的索引情况。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> user_info;</span><br></pre></td></tr></table></figure>
<p>如果某个表忘记添加某个索引，可以通过<code>alter table add index</code>命令添加索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> user_info <span class="keyword">add</span> index idx_name (name);</span><br></pre></td></tr></table></figure>
<p>一般就是：SQL的where条件的字段，或者是order by 、group by后面的字段需需要添加索引。</p>
<h4 id="5-10-2-索引不生效"><a href="#5-10-2-索引不生效" class="headerlink" title="5.10.2 索引不生效"></a>5.10.2 索引不生效</h4><p>有时候，即使你添加了索引，但是索引会失效的<br><img src="/special-interface/index/36.png"></p>
<h4 id="5-10-3-索引设计不合理"><a href="#5-10-3-索引设计不合理" class="headerlink" title="5.10.3 索引设计不合理"></a>5.10.3 索引设计不合理</h4><p>我们的索引不是越多越好，需要合理设计。比如：</p>
<ul>
<li>删除冗余和重复索引。</li>
<li>索引一般不能超过5个</li>
<li>索引不适合建在有大量重复数据的字段上、如性别字段</li>
<li>适当使用覆盖索引</li>
<li>如果需要使用force index强制走某个索引，那就需要思考你的索引设计是否真的合理了</li>
</ul>
<h3 id="5-11-优化SQL"><a href="#5-11-优化SQL" class="headerlink" title="5.11 优化SQL"></a>5.11 优化SQL</h3><p>除了索引优化，其实SQL还有很多其他有优化的空间。比如这些：<br><img src="/special-interface/index/37.png"></p>
<h3 id="5-12-避免大事务问题"><a href="#5-12-避免大事务问题" class="headerlink" title="5.12 避免大事务问题"></a>5.12 避免大事务问题</h3><p>为了保证数据库数据的一致性，在涉及到多个数据库修改操作时，我们经常需要用到事务。而使用spring声明式事务，又非常简单，只需要用一个注解就行@Transactional，如下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    <span class="comment">//保存用户信息</span></span><br><span class="line">    userDao.save(user);</span><br><span class="line">    passCertDao.updateFlag(user.getPassId());</span><br><span class="line">    <span class="keyword">return</span> user.getUserId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这块代码主要逻辑就是创建个用户，然后更新一个通行证<code>pass</code>的标记。如果现在新增一个需求，创建完用户，调用远程接口发送一个<code>email</code>消息通知，很多小伙伴会这么写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">createUser</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    <span class="comment">//保存用户信息</span></span><br><span class="line">    userDao.save(user);</span><br><span class="line">    passCertDao.updateFlag(user.getPassId());</span><br><span class="line">    sendEmailRpc(user.getEmail());</span><br><span class="line">    <span class="keyword">return</span> user.getUserId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样实现可能会有坑，事务中嵌套<code>RPC</code>远程调用，即事务嵌套了一些非DB操作。如果这些非<code>DB</code>操作耗时比较大的话，可能会出现<strong>大事务问题</strong>。</p>
<blockquote>
<p>所谓大事务问题就是，就是运行时间长的事务。由于事务一致不提交，就会导致数据库连接被占用，即并发场景下，数据库连接池被占满，影响到别的请求访问数据库，影响别的接口性能。</p>
</blockquote>
<p>大事务引发的问题主要有：接口超时、死锁、主从延迟等等。因此，为了优化接口，我们要规避大事务问题。我们可以通过这些方案来规避大事务：</p>
<ul>
<li>RPC远程调用不要放到事务里面</li>
<li>一些查询相关的操作，尽量放到事务之外</li>
<li>事务中避免处理太多数据</li>
</ul>
<h3 id="5-13-深分页问题"><a href="#5-13-深分页问题" class="headerlink" title="5.13 深分页问题"></a>5.13 深分页问题</h3><p>深分页问题，为什么会慢？我们看下这个SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> id,name,balance <span class="keyword">from</span> account <span class="keyword">where</span> create_time<span class="operator">&gt;</span> <span class="string">&#x27;2020-09-19&#x27;</span> limit <span class="number">100000</span>,<span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>limit 100000,10意味着会扫描100010行，丢弃掉前100000行，最后返回10行。即使create_time，也会回表很多次。<br>我们可以通过标签记录法和延迟关联法来优化深分页问题， 其他优化方案可以查看博客 <a href="http://xiaoyuge.work/limit-offset/">破解LIMIT和OFFSET分页性能瓶颈</a>。</p>
<h3 id="5-14-优化程序结构"><a href="#5-14-优化程序结构" class="headerlink" title="5.14 优化程序结构"></a>5.14 优化程序结构</h3><p>优化程序逻辑、程序代码，是可以节省耗时的。比如，你的程序创建多不必要的对象、或者程序逻辑混乱，多次重复查数据库、又或者你的实现逻辑算法不是最高效的，等等。</p>
<p>我举个简单的例子：复杂的逻辑条件，有时候调整一下顺序，就能让你的程序更加高效。</p>
<blockquote>
<p>假设业务需求是这样：如果用户是会员，第一次登陆时，需要发一条感谢短信。如果没有经过思考，代码直接这样写了</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(isUserVip &amp;&amp; isFirstLogin)&#123;</span><br><span class="line">    sendSmsMsg();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>假设有5个请求过来，isUserVip判断通过的有3个请求，isFirstLogin通过的只有1个请求。那么以上代码，isUserVip执行的次数为5次，isFirstLogin执行的次数也是3次，如下：<br><img src="/special-interface/index/38.png"><br>如果调整一下isUserVip和isFirstLogin的顺序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(isFirstLogin &amp;&amp; isUserVip )&#123;</span><br><span class="line">    sendMsg();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/special-interface/index/39.png"></p>
<h3 id="5-15-压缩传输内容"><a href="#5-15-压缩传输内容" class="headerlink" title="5.15 压缩传输内容"></a>5.15 压缩传输内容</h3><p>压缩传输内容，传输报文变得更小，因此传输会更快啦。10M带宽，传输10k的报文，一般比传输1M的会快呀。</p>
<blockquote>
<p>比如视频网站：如果不对视频做任何压缩编码，因为带宽又是有限的。巨大的数据量在网络传输的耗时会比编码压缩后，慢好多倍。</p>
</blockquote>
<h3 id="5-16-海量数据处理，考虑NoSQL"><a href="#5-16-海量数据处理，考虑NoSQL" class="headerlink" title="5.16 海量数据处理，考虑NoSQL"></a>5.16 海量数据处理，考虑NoSQL</h3><p>之前看过几个慢SQL，都是跟深分页问题有关的。发现用来标签记录法和延迟关联法，效果不是很明显，原因是要统计和模糊搜索，并且统计的数据是真的大。最后跟组长对齐方案，就把数据同步到Elasticsearch，然后这些模糊搜索需求，都走Elasticsearch去查询了。</p>
<p>我想表达的就是，如果数据量过大，一定要用关系型数据库存储的话，就可以分库分表。但是有时候，我们也可以使用NoSQL，如Elasticsearch、Hbase等。</p>
<h3 id="5-17-线程池设计要合理"><a href="#5-17-线程池设计要合理" class="headerlink" title="5.17 线程池设计要合理"></a>5.17 线程池设计要合理</h3><p>我们使用线程池，就是让任务并行处理，更高效地完成任务。但是有时候，如果线程池设计不合理，接口执行效率则不太理想。</p>
<p>一般我们需要关注线程池的这几个参数：核心线程、最大线程数量、阻塞队列。</p>
<ul>
<li>如果核心线程过小，则达不到很好的并行效果。</li>
<li>如果阻塞队列不合理，不仅仅是阻塞的问题，甚至可能会OOM</li>
<li>如果线程池不区分业务隔离，有可能核心业务被边缘业务拖垮</li>
</ul>
<h3 id="5-18-机器问题-（fullGC、线程打满、太多IO资源没关闭等等）"><a href="#5-18-机器问题-（fullGC、线程打满、太多IO资源没关闭等等）" class="headerlink" title="5.18 机器问题 （fullGC、线程打满、太多IO资源没关闭等等）"></a>5.18 机器问题 （fullGC、线程打满、太多IO资源没关闭等等）</h3><p>有时候，我们的接口慢，就是机器处理问题。主要有fullGC、线程打满、太多IO资源没关闭等等。</p>
<ul>
<li>之前排查过一个fullGC问题：运营小姐姐导出60多万的excel的时候，说卡死了，接着我们就收到监控告警。后面排查得出，我们老代码是Apache POI生成的excel，导出excel数据量很大时，当时JVM内存吃紧会直接Full GC了。</li>
<li>如果线程打满了，也会导致接口都在等待了。所以。如果是高并发场景，我们需要接入限流，把多余的请求拒绝掉。</li>
<li>如果IO资源没关闭，也会导致耗时增加。这个大家可以看下，平时你的电脑一直打开很多很多文件，是不是会觉得很卡。</li>
</ul>
<p>记录这篇博客花了好几天的时间，主要是筛选一些同类型的博客，然后整理一下，在这过程中也自己也是受益良多，也更加系统性的了解、熟悉接口方面的知识。这篇博客主要是借鉴于<strong>捡田螺的小男孩</strong> <a href="https://mp.weixin.qq.com/s?__biz=Mzg2NzYyNjQzNg==&mid=2247495355&idx=1&sn=20a4b5594a5d307b36fd374002d7e29b&chksm=ceba1210f9cd9b06329a4f6c1c5f6595956643696bf8d89110b6d4b6efc0dde1e5049ee8948c&scene=126&&sessionid=1669128030#rd">设计好接口的36个锦囊</a> 以及 <a href="https://mp.weixin.qq.com/s/cd-EuL1Psn_nDQp2djJFBA">18种接口优化总结</a>；</p>
]]></content>
      <categories>
        <category>01 Java</category>
      </categories>
      <tags>
        <tag>接口设计</tag>
      </tags>
  </entry>
</search>
